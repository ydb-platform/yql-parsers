//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from YQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace YQLAntlr4Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, EQUALS2=2, NOT_EQUALS=3, NOT_EQUALS2=4, LESS=5, LESS_OR_EQ=6, 
		GREATER=7, GREATER_OR_EQ=8, SHIFT_LEFT=9, ROT_LEFT=10, AMPERSAND=11, PIPE=12, 
		DOUBLE_PIPE=13, STRUCT_OPEN=14, STRUCT_CLOSE=15, PLUS=16, MINUS=17, TILDA=18, 
		ASTERISK=19, SLASH=20, PERCENT=21, SEMICOLON=22, DOT=23, COMMA=24, LPAREN=25, 
		RPAREN=26, QUESTION=27, COLON=28, COMMAT=29, DOLLAR=30, LBRACE_CURLY=31, 
		RBRACE_CURLY=32, CARET=33, NAMESPACE=34, ARROW=35, RBRACE_SQUARE=36, LBRACE_SQUARE=37, 
		ABORT=38, ACTION=39, ADD=40, AFTER=41, ALL=42, ALTER=43, ANALYZE=44, AND=45, 
		ANSI=46, ANY=47, ARRAY=48, AS=49, ASC=50, ASSUME=51, ASYMMETRIC=52, ASYNC=53, 
		AT=54, ATTACH=55, ATTRIBUTES=56, AUTOINCREMENT=57, AUTOMAP=58, BACKUP=59, 
		COLLECTION=60, BEFORE=61, BEGIN=62, BERNOULLI=63, BETWEEN=64, BITCAST=65, 
		BY=66, CALLABLE=67, CASCADE=68, CASE=69, CAST=70, CHANGEFEED=71, CHECK=72, 
		CLASSIFIER=73, COLLATE=74, COLUMN=75, COLUMNS=76, COMMIT=77, COMPACT=78, 
		CONDITIONAL=79, CONFLICT=80, CONNECT=81, CONSTRAINT=82, CONSUMER=83, COVER=84, 
		CREATE=85, CROSS=86, CUBE=87, CURRENT=88, CURRENT_DATE=89, CURRENT_TIME=90, 
		CURRENT_TIMESTAMP=91, DATA=92, DATABASE=93, DECIMAL=94, DECLARE=95, DEFAULT=96, 
		DEFERRABLE=97, DEFERRED=98, DEFINE=99, DELETE=100, DESC=101, DESCRIBE=102, 
		DETACH=103, DICT=104, DIRECTORY=105, DISABLE=106, DISCARD=107, DISTINCT=108, 
		DO=109, DROP=110, EACH=111, ELSE=112, EMPTY=113, EMPTY_ACTION=114, ENCRYPTED=115, 
		END=116, ENUM=117, ERASE=118, ERROR=119, ESCAPE=120, EVALUATE=121, EXCEPT=122, 
		EXCLUDE=123, EXCLUSION=124, EXCLUSIVE=125, EXISTS=126, EXPLAIN=127, EXPORT=128, 
		EXTERNAL=129, FAIL=130, FALSE=131, FAMILY=132, FILTER=133, FIRST=134, 
		FLATTEN=135, FLOW=136, FOLLOWING=137, FOR=138, FOREIGN=139, FROM=140, 
		FULL=141, FUNCTION=142, GLOB=143, GLOBAL=144, GRANT=145, GROUP=146, GROUPING=147, 
		GROUPS=148, HASH=149, HAVING=150, HOP=151, IF=152, IGNORE=153, ILIKE=154, 
		IMMEDIATE=155, IMPORT=156, IN=157, INCREMENT=158, INCREMENTAL=159, INDEX=160, 
		INDEXED=161, INHERITS=162, INITIAL=163, INITIALLY=164, INNER=165, INSERT=166, 
		INSTEAD=167, INTERSECT=168, INTO=169, IS=170, ISNULL=171, JOIN=172, JSON_EXISTS=173, 
		JSON_QUERY=174, JSON_VALUE=175, KEY=176, LAST=177, LEFT=178, LEGACY=179, 
		LIKE=180, LIMIT=181, LIST=182, LOCAL=183, LOGIN=184, MANAGE=185, MATCH=186, 
		MATCHES=187, MATCH_RECOGNIZE=188, MEASURES=189, MICROSECONDS=190, MILLISECONDS=191, 
		MODIFY=192, NANOSECONDS=193, NATURAL=194, NEXT=195, NO=196, NOLOGIN=197, 
		NOT=198, NOTNULL=199, NULL=200, NULLS=201, OBJECT=202, OF=203, OFFSET=204, 
		OMIT=205, ON=206, ONE=207, ONLY=208, OPTION=209, OPTIONAL=210, OR=211, 
		ORDER=212, OTHERS=213, OUTER=214, OVER=215, PARALLEL=216, PARTITION=217, 
		PASSING=218, PASSWORD=219, PAST=220, PATTERN=221, PER=222, PERMUTE=223, 
		PLAN=224, POOL=225, PRAGMA=226, PRECEDING=227, PRESORT=228, PRIMARY=229, 
		PRIVILEGES=230, PROCESS=231, QUERY=232, QUEUE=233, RAISE=234, RANGE=235, 
		REDUCE=236, REFERENCES=237, REGEXP=238, REINDEX=239, RELEASE=240, REMOVE=241, 
		RENAME=242, REPEATABLE=243, REPLACE=244, REPLICATION=245, RESET=246, RESOURCE=247, 
		RESPECT=248, RESTART=249, RESTORE=250, RESTRICT=251, RESULT=252, RETURN=253, 
		RETURNING=254, REVERT=255, REVOKE=256, RIGHT=257, RLIKE=258, ROLLBACK=259, 
		ROLLUP=260, ROW=261, ROWS=262, SAMPLE=263, SAVEPOINT=264, SCHEMA=265, 
		SECONDS=266, SEEK=267, SELECT=268, SEMI=269, SET=270, SETS=271, SHOW=272, 
		TSKIP=273, SEQUENCE=274, SOURCE=275, START=276, STREAM=277, STRUCT=278, 
		SUBQUERY=279, SUBSET=280, SYMBOLS=281, SYMMETRIC=282, SYNC=283, SYSTEM=284, 
		TABLE=285, TABLES=286, TABLESAMPLE=287, TABLESTORE=288, TAGGED=289, TEMP=290, 
		TEMPORARY=291, THEN=292, TIES=293, TO=294, TOPIC=295, TRANSACTION=296, 
		TRIGGER=297, TRUE=298, TUPLE=299, TYPE=300, UNBOUNDED=301, UNCONDITIONAL=302, 
		UNION=303, UNIQUE=304, UNKNOWN=305, UNMATCHED=306, UPDATE=307, UPSERT=308, 
		USE=309, USER=310, USING=311, VACUUM=312, VALUES=313, VARIANT=314, VIEW=315, 
		VIRTUAL=316, WHEN=317, WHERE=318, WINDOW=319, WITH=320, WITHOUT=321, WRAPPER=322, 
		XOR=323, STRING_VALUE=324, ID_PLAIN=325, ID_QUOTED=326, DIGITS=327, INTEGER_VALUE=328, 
		REAL=329, BLOB=330, WS=331, COMMENT=332;
	public const int
		RULE_sql_query = 0, RULE_sql_stmt_list = 1, RULE_ansi_sql_stmt_list = 2, 
		RULE_lambda_body = 3, RULE_lambda_stmt = 4, RULE_sql_stmt = 5, RULE_sql_stmt_core = 6, 
		RULE_expr = 7, RULE_or_subexpr = 8, RULE_and_subexpr = 9, RULE_xor_subexpr = 10, 
		RULE_distinct_from_op = 11, RULE_cond_expr = 12, RULE_match_op = 13, RULE_eq_subexpr = 14, 
		RULE_shift_right = 15, RULE_rot_right = 16, RULE_double_question = 17, 
		RULE_neq_subexpr = 18, RULE_bit_subexpr = 19, RULE_add_subexpr = 20, RULE_mul_subexpr = 21, 
		RULE_con_subexpr = 22, RULE_unary_op = 23, RULE_unary_subexpr_suffix = 24, 
		RULE_unary_casual_subexpr = 25, RULE_in_unary_casual_subexpr = 26, RULE_unary_subexpr = 27, 
		RULE_in_unary_subexpr = 28, RULE_list_literal = 29, RULE_expr_dict_list = 30, 
		RULE_dict_literal = 31, RULE_expr_struct_list = 32, RULE_struct_literal = 33, 
		RULE_atom_expr = 34, RULE_in_atom_expr = 35, RULE_cast_expr = 36, RULE_bitcast_expr = 37, 
		RULE_exists_expr = 38, RULE_case_expr = 39, RULE_lambda = 40, RULE_in_expr = 41, 
		RULE_json_api_expr = 42, RULE_jsonpath_spec = 43, RULE_json_variable_name = 44, 
		RULE_json_variable = 45, RULE_json_variables = 46, RULE_json_common_args = 47, 
		RULE_json_case_handler = 48, RULE_json_value = 49, RULE_json_exists_handler = 50, 
		RULE_json_exists = 51, RULE_json_query_wrapper = 52, RULE_json_query_handler = 53, 
		RULE_json_query = 54, RULE_smart_parenthesis = 55, RULE_expr_list = 56, 
		RULE_pure_column_list = 57, RULE_pure_column_or_named = 58, RULE_pure_column_or_named_list = 59, 
		RULE_column_name = 60, RULE_without_column_name = 61, RULE_column_list = 62, 
		RULE_without_column_list = 63, RULE_named_expr = 64, RULE_named_expr_list = 65, 
		RULE_invoke_expr = 66, RULE_invoke_expr_tail = 67, RULE_using_call_expr = 68, 
		RULE_key_expr = 69, RULE_when_expr = 70, RULE_literal_value = 71, RULE_bind_parameter = 72, 
		RULE_opt_bind_parameter = 73, RULE_bind_parameter_list = 74, RULE_named_bind_parameter = 75, 
		RULE_named_bind_parameter_list = 76, RULE_signed_number = 77, RULE_type_name_simple = 78, 
		RULE_integer_or_bind = 79, RULE_type_name_tag = 80, RULE_struct_arg = 81, 
		RULE_struct_arg_positional = 82, RULE_variant_arg = 83, RULE_callable_arg = 84, 
		RULE_callable_arg_list = 85, RULE_type_name_decimal = 86, RULE_type_name_optional = 87, 
		RULE_type_name_tuple = 88, RULE_type_name_struct = 89, RULE_type_name_variant = 90, 
		RULE_type_name_list = 91, RULE_type_name_stream = 92, RULE_type_name_flow = 93, 
		RULE_type_name_dict = 94, RULE_type_name_set = 95, RULE_type_name_enum = 96, 
		RULE_type_name_resource = 97, RULE_type_name_tagged = 98, RULE_type_name_callable = 99, 
		RULE_type_name_composite = 100, RULE_type_name = 101, RULE_type_name_or_bind = 102, 
		RULE_value_constructor_literal = 103, RULE_value_constructor = 104, RULE_declare_stmt = 105, 
		RULE_module_path = 106, RULE_import_stmt = 107, RULE_export_stmt = 108, 
		RULE_call_action = 109, RULE_inline_action = 110, RULE_do_stmt = 111, 
		RULE_pragma_stmt = 112, RULE_pragma_value = 113, RULE_sort_specification = 114, 
		RULE_sort_specification_list = 115, RULE_select_stmt = 116, RULE_select_unparenthesized_stmt = 117, 
		RULE_select_kind_parenthesis = 118, RULE_select_op = 119, RULE_select_kind_partial = 120, 
		RULE_select_kind = 121, RULE_process_core = 122, RULE_external_call_param = 123, 
		RULE_external_call_settings = 124, RULE_reduce_core = 125, RULE_opt_set_quantifier = 126, 
		RULE_select_core = 127, RULE_row_pattern_recognition_clause = 128, RULE_row_pattern_rows_per_match = 129, 
		RULE_row_pattern_empty_match_handling = 130, RULE_row_pattern_measures = 131, 
		RULE_row_pattern_measure_list = 132, RULE_row_pattern_measure_definition = 133, 
		RULE_row_pattern_common_syntax = 134, RULE_row_pattern_skip_to = 135, 
		RULE_row_pattern_skip_to_variable_name = 136, RULE_row_pattern_initial_or_seek = 137, 
		RULE_row_pattern = 138, RULE_row_pattern_term = 139, RULE_row_pattern_factor = 140, 
		RULE_row_pattern_quantifier = 141, RULE_row_pattern_primary = 142, RULE_row_pattern_primary_variable_name = 143, 
		RULE_row_pattern_permute = 144, RULE_row_pattern_subset_clause = 145, 
		RULE_row_pattern_subset_list = 146, RULE_row_pattern_subset_item = 147, 
		RULE_row_pattern_subset_item_variable_name = 148, RULE_row_pattern_subset_rhs = 149, 
		RULE_row_pattern_subset_rhs_variable_name = 150, RULE_row_pattern_definition_list = 151, 
		RULE_row_pattern_definition = 152, RULE_row_pattern_definition_variable_name = 153, 
		RULE_row_pattern_definition_search_condition = 154, RULE_search_condition = 155, 
		RULE_row_pattern_variable_name = 156, RULE_order_by_clause = 157, RULE_ext_order_by_clause = 158, 
		RULE_group_by_clause = 159, RULE_grouping_element_list = 160, RULE_grouping_element = 161, 
		RULE_ordinary_grouping_set = 162, RULE_ordinary_grouping_set_list = 163, 
		RULE_rollup_list = 164, RULE_cube_list = 165, RULE_grouping_sets_specification = 166, 
		RULE_hopping_window_specification = 167, RULE_result_column = 168, RULE_join_source = 169, 
		RULE_named_column = 170, RULE_flatten_by_arg = 171, RULE_flatten_source = 172, 
		RULE_named_single_source = 173, RULE_single_source = 174, RULE_sample_clause = 175, 
		RULE_tablesample_clause = 176, RULE_sampling_mode = 177, RULE_repeatable_clause = 178, 
		RULE_join_op = 179, RULE_join_constraint = 180, RULE_returning_columns_list = 181, 
		RULE_into_table_stmt = 182, RULE_into_values_source = 183, RULE_values_stmt = 184, 
		RULE_values_source = 185, RULE_values_source_row_list = 186, RULE_values_source_row = 187, 
		RULE_simple_values_source = 188, RULE_create_external_data_source_stmt = 189, 
		RULE_alter_external_data_source_stmt = 190, RULE_alter_external_data_source_action = 191, 
		RULE_drop_external_data_source_stmt = 192, RULE_create_view_stmt = 193, 
		RULE_drop_view_stmt = 194, RULE_upsert_object_stmt = 195, RULE_create_object_stmt = 196, 
		RULE_create_object_features = 197, RULE_alter_object_stmt = 198, RULE_alter_object_features = 199, 
		RULE_drop_object_stmt = 200, RULE_drop_object_features = 201, RULE_object_feature_value = 202, 
		RULE_object_feature_kv = 203, RULE_object_feature_flag = 204, RULE_object_feature = 205, 
		RULE_object_features = 206, RULE_object_type_ref = 207, RULE_create_table_stmt = 208, 
		RULE_create_table_entry = 209, RULE_create_backup_collection_stmt = 210, 
		RULE_alter_backup_collection_stmt = 211, RULE_drop_backup_collection_stmt = 212, 
		RULE_create_backup_collection_entries = 213, RULE_create_backup_collection_entries_many = 214, 
		RULE_table_list = 215, RULE_alter_backup_collection_actions = 216, RULE_alter_backup_collection_action = 217, 
		RULE_alter_backup_collection_entries = 218, RULE_alter_backup_collection_entry = 219, 
		RULE_backup_collection = 220, RULE_backup_collection_settings = 221, RULE_backup_collection_settings_entry = 222, 
		RULE_backup_stmt = 223, RULE_restore_stmt = 224, RULE_table_inherits = 225, 
		RULE_table_partition_by = 226, RULE_with_table_settings = 227, RULE_table_tablestore = 228, 
		RULE_table_settings_entry = 229, RULE_table_as_source = 230, RULE_alter_table_stmt = 231, 
		RULE_alter_table_action = 232, RULE_alter_external_table_stmt = 233, RULE_alter_external_table_action = 234, 
		RULE_alter_table_store_stmt = 235, RULE_alter_table_store_action = 236, 
		RULE_alter_table_add_column = 237, RULE_alter_table_drop_column = 238, 
		RULE_alter_table_alter_column = 239, RULE_alter_table_alter_column_drop_not_null = 240, 
		RULE_alter_table_add_column_family = 241, RULE_alter_table_alter_column_family = 242, 
		RULE_alter_table_set_table_setting_uncompat = 243, RULE_alter_table_set_table_setting_compat = 244, 
		RULE_alter_table_reset_table_setting = 245, RULE_alter_table_add_index = 246, 
		RULE_alter_table_drop_index = 247, RULE_alter_table_rename_to = 248, RULE_alter_table_rename_index_to = 249, 
		RULE_alter_table_add_changefeed = 250, RULE_alter_table_alter_changefeed = 251, 
		RULE_alter_table_drop_changefeed = 252, RULE_alter_table_alter_index = 253, 
		RULE_column_schema = 254, RULE_family_relation = 255, RULE_opt_column_constraints = 256, 
		RULE_column_order_by_specification = 257, RULE_table_constraint = 258, 
		RULE_table_index = 259, RULE_table_index_type = 260, RULE_global_index = 261, 
		RULE_local_index = 262, RULE_index_subtype = 263, RULE_with_index_settings = 264, 
		RULE_index_setting_entry = 265, RULE_index_setting_value = 266, RULE_changefeed = 267, 
		RULE_changefeed_settings = 268, RULE_changefeed_settings_entry = 269, 
		RULE_changefeed_setting_value = 270, RULE_changefeed_alter_settings = 271, 
		RULE_alter_table_setting_entry = 272, RULE_table_setting_value = 273, 
		RULE_ttl_tier_list = 274, RULE_ttl_tier_action = 275, RULE_family_entry = 276, 
		RULE_family_settings = 277, RULE_family_settings_entry = 278, RULE_family_setting_value = 279, 
		RULE_split_boundaries = 280, RULE_literal_value_list = 281, RULE_alter_table_alter_index_action = 282, 
		RULE_drop_table_stmt = 283, RULE_create_user_stmt = 284, RULE_alter_user_stmt = 285, 
		RULE_create_group_stmt = 286, RULE_alter_group_stmt = 287, RULE_drop_role_stmt = 288, 
		RULE_role_name = 289, RULE_create_user_option = 290, RULE_password_option = 291, 
		RULE_login_option = 292, RULE_grant_permissions_stmt = 293, RULE_revoke_permissions_stmt = 294, 
		RULE_permission_id = 295, RULE_permission_name = 296, RULE_permission_name_target = 297, 
		RULE_create_resource_pool_stmt = 298, RULE_alter_resource_pool_stmt = 299, 
		RULE_alter_resource_pool_action = 300, RULE_drop_resource_pool_stmt = 301, 
		RULE_create_resource_pool_classifier_stmt = 302, RULE_alter_resource_pool_classifier_stmt = 303, 
		RULE_alter_resource_pool_classifier_action = 304, RULE_drop_resource_pool_classifier_stmt = 305, 
		RULE_create_replication_stmt = 306, RULE_replication_target = 307, RULE_replication_settings = 308, 
		RULE_replication_settings_entry = 309, RULE_alter_replication_stmt = 310, 
		RULE_alter_replication_action = 311, RULE_alter_replication_set_setting = 312, 
		RULE_drop_replication_stmt = 313, RULE_action_or_subquery_args = 314, 
		RULE_define_action_or_subquery_stmt = 315, RULE_define_action_or_subquery_body = 316, 
		RULE_if_stmt = 317, RULE_for_stmt = 318, RULE_table_ref = 319, RULE_table_key = 320, 
		RULE_table_arg = 321, RULE_table_hints = 322, RULE_table_hint = 323, RULE_object_ref = 324, 
		RULE_simple_table_ref_core = 325, RULE_simple_table_ref = 326, RULE_into_simple_table_ref = 327, 
		RULE_delete_stmt = 328, RULE_update_stmt = 329, RULE_set_clause_choice = 330, 
		RULE_set_clause_list = 331, RULE_set_clause = 332, RULE_set_target = 333, 
		RULE_multiple_column_assignment = 334, RULE_set_target_list = 335, RULE_create_topic_stmt = 336, 
		RULE_create_topic_entries = 337, RULE_create_topic_entry = 338, RULE_with_topic_settings = 339, 
		RULE_alter_topic_stmt = 340, RULE_alter_topic_action = 341, RULE_alter_topic_add_consumer = 342, 
		RULE_topic_create_consumer_entry = 343, RULE_alter_topic_alter_consumer = 344, 
		RULE_alter_topic_alter_consumer_entry = 345, RULE_alter_topic_drop_consumer = 346, 
		RULE_topic_alter_consumer_set = 347, RULE_topic_alter_consumer_reset = 348, 
		RULE_alter_topic_set_settings = 349, RULE_alter_topic_reset_settings = 350, 
		RULE_drop_topic_stmt = 351, RULE_topic_settings = 352, RULE_topic_settings_entry = 353, 
		RULE_topic_setting_value = 354, RULE_topic_consumer_with_settings = 355, 
		RULE_topic_consumer_settings = 356, RULE_topic_consumer_settings_entry = 357, 
		RULE_topic_consumer_setting_value = 358, RULE_topic_ref = 359, RULE_topic_consumer_ref = 360, 
		RULE_null_treatment = 361, RULE_filter_clause = 362, RULE_window_name_or_specification = 363, 
		RULE_window_name = 364, RULE_window_clause = 365, RULE_window_definition_list = 366, 
		RULE_window_definition = 367, RULE_new_window_name = 368, RULE_window_specification = 369, 
		RULE_window_specification_details = 370, RULE_existing_window_name = 371, 
		RULE_window_partition_clause = 372, RULE_window_order_clause = 373, RULE_window_frame_clause = 374, 
		RULE_window_frame_units = 375, RULE_window_frame_extent = 376, RULE_window_frame_between = 377, 
		RULE_window_frame_bound = 378, RULE_window_frame_exclusion = 379, RULE_use_stmt = 380, 
		RULE_subselect_stmt = 381, RULE_named_nodes_stmt = 382, RULE_commit_stmt = 383, 
		RULE_rollback_stmt = 384, RULE_analyze_table = 385, RULE_analyze_table_list = 386, 
		RULE_analyze_stmt = 387, RULE_alter_sequence_stmt = 388, RULE_alter_sequence_action = 389, 
		RULE_identifier = 390, RULE_id = 391, RULE_id_schema = 392, RULE_id_expr = 393, 
		RULE_id_expr_in = 394, RULE_id_window = 395, RULE_id_table = 396, RULE_id_without = 397, 
		RULE_id_hint = 398, RULE_id_as_compat = 399, RULE_an_id = 400, RULE_an_id_or_type = 401, 
		RULE_an_id_schema = 402, RULE_an_id_expr = 403, RULE_an_id_expr_in = 404, 
		RULE_an_id_window = 405, RULE_an_id_table = 406, RULE_an_id_without = 407, 
		RULE_an_id_hint = 408, RULE_an_id_pure = 409, RULE_an_id_as_compat = 410, 
		RULE_view_name = 411, RULE_opt_id_prefix = 412, RULE_cluster_expr = 413, 
		RULE_id_or_type = 414, RULE_opt_id_prefix_or_type = 415, RULE_id_or_at = 416, 
		RULE_id_table_or_type = 417, RULE_id_table_or_at = 418, RULE_keyword = 419, 
		RULE_keyword_expr_uncompat = 420, RULE_keyword_table_uncompat = 421, RULE_keyword_select_uncompat = 422, 
		RULE_keyword_alter_uncompat = 423, RULE_keyword_in_uncompat = 424, RULE_keyword_window_uncompat = 425, 
		RULE_keyword_hint_uncompat = 426, RULE_keyword_as_compat = 427, RULE_keyword_compat = 428, 
		RULE_type_id = 429, RULE_bool_value = 430, RULE_real = 431, RULE_integer = 432;
	public static readonly string[] ruleNames = {
		"sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", "lambda_stmt", 
		"sql_stmt", "sql_stmt_core", "expr", "or_subexpr", "and_subexpr", "xor_subexpr", 
		"distinct_from_op", "cond_expr", "match_op", "eq_subexpr", "shift_right", 
		"rot_right", "double_question", "neq_subexpr", "bit_subexpr", "add_subexpr", 
		"mul_subexpr", "con_subexpr", "unary_op", "unary_subexpr_suffix", "unary_casual_subexpr", 
		"in_unary_casual_subexpr", "unary_subexpr", "in_unary_subexpr", "list_literal", 
		"expr_dict_list", "dict_literal", "expr_struct_list", "struct_literal", 
		"atom_expr", "in_atom_expr", "cast_expr", "bitcast_expr", "exists_expr", 
		"case_expr", "lambda", "in_expr", "json_api_expr", "jsonpath_spec", "json_variable_name", 
		"json_variable", "json_variables", "json_common_args", "json_case_handler", 
		"json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
		"json_query_handler", "json_query", "smart_parenthesis", "expr_list", 
		"pure_column_list", "pure_column_or_named", "pure_column_or_named_list", 
		"column_name", "without_column_name", "column_list", "without_column_list", 
		"named_expr", "named_expr_list", "invoke_expr", "invoke_expr_tail", "using_call_expr", 
		"key_expr", "when_expr", "literal_value", "bind_parameter", "opt_bind_parameter", 
		"bind_parameter_list", "named_bind_parameter", "named_bind_parameter_list", 
		"signed_number", "type_name_simple", "integer_or_bind", "type_name_tag", 
		"struct_arg", "struct_arg_positional", "variant_arg", "callable_arg", 
		"callable_arg_list", "type_name_decimal", "type_name_optional", "type_name_tuple", 
		"type_name_struct", "type_name_variant", "type_name_list", "type_name_stream", 
		"type_name_flow", "type_name_dict", "type_name_set", "type_name_enum", 
		"type_name_resource", "type_name_tagged", "type_name_callable", "type_name_composite", 
		"type_name", "type_name_or_bind", "value_constructor_literal", "value_constructor", 
		"declare_stmt", "module_path", "import_stmt", "export_stmt", "call_action", 
		"inline_action", "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
		"sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
		"select_kind_parenthesis", "select_op", "select_kind_partial", "select_kind", 
		"process_core", "external_call_param", "external_call_settings", "reduce_core", 
		"opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
		"row_pattern_rows_per_match", "row_pattern_empty_match_handling", "row_pattern_measures", 
		"row_pattern_measure_list", "row_pattern_measure_definition", "row_pattern_common_syntax", 
		"row_pattern_skip_to", "row_pattern_skip_to_variable_name", "row_pattern_initial_or_seek", 
		"row_pattern", "row_pattern_term", "row_pattern_factor", "row_pattern_quantifier", 
		"row_pattern_primary", "row_pattern_primary_variable_name", "row_pattern_permute", 
		"row_pattern_subset_clause", "row_pattern_subset_list", "row_pattern_subset_item", 
		"row_pattern_subset_item_variable_name", "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
		"row_pattern_definition_list", "row_pattern_definition", "row_pattern_definition_variable_name", 
		"row_pattern_definition_search_condition", "search_condition", "row_pattern_variable_name", 
		"order_by_clause", "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
		"grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
		"rollup_list", "cube_list", "grouping_sets_specification", "hopping_window_specification", 
		"result_column", "join_source", "named_column", "flatten_by_arg", "flatten_source", 
		"named_single_source", "single_source", "sample_clause", "tablesample_clause", 
		"sampling_mode", "repeatable_clause", "join_op", "join_constraint", "returning_columns_list", 
		"into_table_stmt", "into_values_source", "values_stmt", "values_source", 
		"values_source_row_list", "values_source_row", "simple_values_source", 
		"create_external_data_source_stmt", "alter_external_data_source_stmt", 
		"alter_external_data_source_action", "drop_external_data_source_stmt", 
		"create_view_stmt", "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
		"create_object_features", "alter_object_stmt", "alter_object_features", 
		"drop_object_stmt", "drop_object_features", "object_feature_value", "object_feature_kv", 
		"object_feature_flag", "object_feature", "object_features", "object_type_ref", 
		"create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
		"alter_backup_collection_stmt", "drop_backup_collection_stmt", "create_backup_collection_entries", 
		"create_backup_collection_entries_many", "table_list", "alter_backup_collection_actions", 
		"alter_backup_collection_action", "alter_backup_collection_entries", "alter_backup_collection_entry", 
		"backup_collection", "backup_collection_settings", "backup_collection_settings_entry", 
		"backup_stmt", "restore_stmt", "table_inherits", "table_partition_by", 
		"with_table_settings", "table_tablestore", "table_settings_entry", "table_as_source", 
		"alter_table_stmt", "alter_table_action", "alter_external_table_stmt", 
		"alter_external_table_action", "alter_table_store_stmt", "alter_table_store_action", 
		"alter_table_add_column", "alter_table_drop_column", "alter_table_alter_column", 
		"alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
		"alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
		"alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
		"alter_table_add_index", "alter_table_drop_index", "alter_table_rename_to", 
		"alter_table_rename_index_to", "alter_table_add_changefeed", "alter_table_alter_changefeed", 
		"alter_table_drop_changefeed", "alter_table_alter_index", "column_schema", 
		"family_relation", "opt_column_constraints", "column_order_by_specification", 
		"table_constraint", "table_index", "table_index_type", "global_index", 
		"local_index", "index_subtype", "with_index_settings", "index_setting_entry", 
		"index_setting_value", "changefeed", "changefeed_settings", "changefeed_settings_entry", 
		"changefeed_setting_value", "changefeed_alter_settings", "alter_table_setting_entry", 
		"table_setting_value", "ttl_tier_list", "ttl_tier_action", "family_entry", 
		"family_settings", "family_settings_entry", "family_setting_value", "split_boundaries", 
		"literal_value_list", "alter_table_alter_index_action", "drop_table_stmt", 
		"create_user_stmt", "alter_user_stmt", "create_group_stmt", "alter_group_stmt", 
		"drop_role_stmt", "role_name", "create_user_option", "password_option", 
		"login_option", "grant_permissions_stmt", "revoke_permissions_stmt", "permission_id", 
		"permission_name", "permission_name_target", "create_resource_pool_stmt", 
		"alter_resource_pool_stmt", "alter_resource_pool_action", "drop_resource_pool_stmt", 
		"create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
		"alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
		"create_replication_stmt", "replication_target", "replication_settings", 
		"replication_settings_entry", "alter_replication_stmt", "alter_replication_action", 
		"alter_replication_set_setting", "drop_replication_stmt", "action_or_subquery_args", 
		"define_action_or_subquery_stmt", "define_action_or_subquery_body", "if_stmt", 
		"for_stmt", "table_ref", "table_key", "table_arg", "table_hints", "table_hint", 
		"object_ref", "simple_table_ref_core", "simple_table_ref", "into_simple_table_ref", 
		"delete_stmt", "update_stmt", "set_clause_choice", "set_clause_list", 
		"set_clause", "set_target", "multiple_column_assignment", "set_target_list", 
		"create_topic_stmt", "create_topic_entries", "create_topic_entry", "with_topic_settings", 
		"alter_topic_stmt", "alter_topic_action", "alter_topic_add_consumer", 
		"topic_create_consumer_entry", "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
		"alter_topic_drop_consumer", "topic_alter_consumer_set", "topic_alter_consumer_reset", 
		"alter_topic_set_settings", "alter_topic_reset_settings", "drop_topic_stmt", 
		"topic_settings", "topic_settings_entry", "topic_setting_value", "topic_consumer_with_settings", 
		"topic_consumer_settings", "topic_consumer_settings_entry", "topic_consumer_setting_value", 
		"topic_ref", "topic_consumer_ref", "null_treatment", "filter_clause", 
		"window_name_or_specification", "window_name", "window_clause", "window_definition_list", 
		"window_definition", "new_window_name", "window_specification", "window_specification_details", 
		"existing_window_name", "window_partition_clause", "window_order_clause", 
		"window_frame_clause", "window_frame_units", "window_frame_extent", "window_frame_between", 
		"window_frame_bound", "window_frame_exclusion", "use_stmt", "subselect_stmt", 
		"named_nodes_stmt", "commit_stmt", "rollback_stmt", "analyze_table", "analyze_table_list", 
		"analyze_stmt", "alter_sequence_stmt", "alter_sequence_action", "identifier", 
		"id", "id_schema", "id_expr", "id_expr_in", "id_window", "id_table", "id_without", 
		"id_hint", "id_as_compat", "an_id", "an_id_or_type", "an_id_schema", "an_id_expr", 
		"an_id_expr_in", "an_id_window", "an_id_table", "an_id_without", "an_id_hint", 
		"an_id_pure", "an_id_as_compat", "view_name", "opt_id_prefix", "cluster_expr", 
		"id_or_type", "opt_id_prefix_or_type", "id_or_at", "id_table_or_type", 
		"id_table_or_at", "keyword", "keyword_expr_uncompat", "keyword_table_uncompat", 
		"keyword_select_uncompat", "keyword_alter_uncompat", "keyword_in_uncompat", 
		"keyword_window_uncompat", "keyword_hint_uncompat", "keyword_as_compat", 
		"keyword_compat", "type_id", "bool_value", "real", "integer"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'=='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", 
		"'|<<'", "'&'", "'|'", "'||'", "'<|'", "'|>'", "'+'", "'-'", "'~'", "'*'", 
		"'/'", "'%'", "';'", "'.'", "','", "'('", "')'", "'?'", "':'", "'@'", 
		"'$'", "'{'", "'}'", "'^'", "'::'", "'->'", "']'", "'['"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", "LESS", "LESS_OR_EQ", 
		"GREATER", "GREATER_OR_EQ", "SHIFT_LEFT", "ROT_LEFT", "AMPERSAND", "PIPE", 
		"DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", "PLUS", "MINUS", "TILDA", 
		"ASTERISK", "SLASH", "PERCENT", "SEMICOLON", "DOT", "COMMA", "LPAREN", 
		"RPAREN", "QUESTION", "COLON", "COMMAT", "DOLLAR", "LBRACE_CURLY", "RBRACE_CURLY", 
		"CARET", "NAMESPACE", "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", "ABORT", 
		"ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANSI", "ANY", 
		"ARRAY", "AS", "ASC", "ASSUME", "ASYMMETRIC", "ASYNC", "AT", "ATTACH", 
		"ATTRIBUTES", "AUTOINCREMENT", "AUTOMAP", "BACKUP", "COLLECTION", "BEFORE", 
		"BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", "BY", "CALLABLE", "CASCADE", 
		"CASE", "CAST", "CHANGEFEED", "CHECK", "CLASSIFIER", "COLLATE", "COLUMN", 
		"COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", "CONFLICT", "CONNECT", 
		"CONSTRAINT", "CONSUMER", "COVER", "CREATE", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATA", "DATABASE", 
		"DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DEFINE", "DELETE", 
		"DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", "DISABLE", "DISCARD", 
		"DISTINCT", "DO", "DROP", "EACH", "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", 
		"END", "ENUM", "ERASE", "ERROR", "ESCAPE", "EVALUATE", "EXCEPT", "EXCLUDE", 
		"EXCLUSION", "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", "FAIL", 
		"FALSE", "FAMILY", "FILTER", "FIRST", "FLATTEN", "FLOW", "FOLLOWING", 
		"FOR", "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", "GLOBAL", "GRANT", 
		"GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HOP", "IF", "IGNORE", 
		"ILIKE", "IMMEDIATE", "IMPORT", "IN", "INCREMENT", "INCREMENTAL", "INDEX", 
		"INDEXED", "INHERITS", "INITIAL", "INITIALLY", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "JSON_EXISTS", "JSON_QUERY", 
		"JSON_VALUE", "KEY", "LAST", "LEFT", "LEGACY", "LIKE", "LIMIT", "LIST", 
		"LOCAL", "LOGIN", "MANAGE", "MATCH", "MATCHES", "MATCH_RECOGNIZE", "MEASURES", 
		"MICROSECONDS", "MILLISECONDS", "MODIFY", "NANOSECONDS", "NATURAL", "NEXT", 
		"NO", "NOLOGIN", "NOT", "NOTNULL", "NULL", "NULLS", "OBJECT", "OF", "OFFSET", 
		"OMIT", "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", "OR", "ORDER", "OTHERS", 
		"OUTER", "OVER", "PARALLEL", "PARTITION", "PASSING", "PASSWORD", "PAST", 
		"PATTERN", "PER", "PERMUTE", "PLAN", "POOL", "PRAGMA", "PRECEDING", "PRESORT", 
		"PRIMARY", "PRIVILEGES", "PROCESS", "QUERY", "QUEUE", "RAISE", "RANGE", 
		"REDUCE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "REMOVE", "RENAME", 
		"REPEATABLE", "REPLACE", "REPLICATION", "RESET", "RESOURCE", "RESPECT", 
		"RESTART", "RESTORE", "RESTRICT", "RESULT", "RETURN", "RETURNING", "REVERT", 
		"REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
		"SAVEPOINT", "SCHEMA", "SECONDS", "SEEK", "SELECT", "SEMI", "SET", "SETS", 
		"SHOW", "TSKIP", "SEQUENCE", "SOURCE", "START", "STREAM", "STRUCT", "SUBQUERY", 
		"SUBSET", "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", "TABLES", 
		"TABLESAMPLE", "TABLESTORE", "TAGGED", "TEMP", "TEMPORARY", "THEN", "TIES", 
		"TO", "TOPIC", "TRANSACTION", "TRIGGER", "TRUE", "TUPLE", "TYPE", "UNBOUNDED", 
		"UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UPDATE", 
		"UPSERT", "USE", "USER", "USING", "VACUUM", "VALUES", "VARIANT", "VIEW", 
		"VIRTUAL", "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", "WRAPPER", "XOR", 
		"STRING_VALUE", "ID_PLAIN", "ID_QUOTED", "DIGITS", "INTEGER_VALUE", "REAL", 
		"BLOB", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Sql_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext sql_stmt_list() {
			return GetRuleContext<Sql_stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(YQLParser.DIGITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ansi_sql_stmt_listContext ansi_sql_stmt_list() {
			return GetRuleContext<Ansi_sql_stmt_listContext>(0);
		}
		public Sql_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_query(this);
		}
	}

	[RuleVersion(0)]
	public Sql_queryContext sql_query() {
		Sql_queryContext _localctx = new Sql_queryContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql_query);
		try {
			State = 871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866;
				sql_stmt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867;
				Match(PRAGMA);
				State = 868;
				Match(ANSI);
				State = 869;
				Match(DIGITS);
				State = 870;
				ansi_sql_stmt_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 873;
				Match(SEMICOLON);
				}
				}
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 879;
			sql_stmt();
			State = 888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 881;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 880;
						Match(SEMICOLON);
						}
						}
						State = 883;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SEMICOLON );
					State = 885;
					sql_stmt();
					}
					} 
				}
				State = 890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 891;
				Match(SEMICOLON);
				}
				}
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 897;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ansi_sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		public Ansi_sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnsi_sql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnsi_sql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Ansi_sql_stmt_listContext ansi_sql_stmt_list() {
		Ansi_sql_stmt_listContext _localctx = new Ansi_sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_ansi_sql_stmt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 899;
				Match(SEMICOLON);
				}
				}
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 905;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_stmtContext[] lambda_stmt() {
			return GetRuleContexts<Lambda_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_stmtContext lambda_stmt(int i) {
			return GetRuleContext<Lambda_stmtContext>(i);
		}
		public Lambda_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda_body(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_bodyContext lambda_body() {
		Lambda_bodyContext _localctx = new Lambda_bodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_lambda_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 907;
				Match(SEMICOLON);
				}
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOLLAR || _la==IMPORT) {
				{
				{
				State = 913;
				lambda_stmt();
				State = 915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 914;
					Match(SEMICOLON);
					}
					}
					State = 917;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMICOLON );
				}
				}
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 924;
			Match(RETURN);
			State = 925;
			expr();
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 926;
				Match(SEMICOLON);
				}
				}
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_nodes_stmtContext named_nodes_stmt() {
			return GetRuleContext<Named_nodes_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		public Lambda_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_stmtContext lambda_stmt() {
		Lambda_stmtContext _localctx = new Lambda_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_lambda_stmt);
		try {
			State = 934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 932;
				named_nodes_stmt();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933;
				import_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext sql_stmt_core() {
			return GetRuleContext<Sql_stmt_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN) {
				{
				State = 936;
				Match(EXPLAIN);
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY) {
					{
					State = 937;
					Match(QUERY);
					State = 938;
					Match(PLAN);
					}
				}

				}
			}

			State = 943;
			sql_stmt_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_nodes_stmtContext named_nodes_stmt() {
			return GetRuleContext<Named_nodes_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext use_stmt() {
			return GetRuleContext<Use_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_table_stmtContext into_table_stmt() {
			return GetRuleContext<Into_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_stmtContext declare_stmt() {
			return GetRuleContext<Declare_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_stmtContext export_stmt() {
			return GetRuleContext<Export_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_stmtContext alter_external_table_stmt() {
			return GetRuleContext<Alter_external_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt() {
			return GetRuleContext<Do_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_stmtContext define_action_or_subquery_stmt() {
			return GetRuleContext<Define_action_or_subquery_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_stmtContext create_user_stmt() {
			return GetRuleContext<Create_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_user_stmtContext alter_user_stmt() {
			return GetRuleContext<Alter_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_group_stmtContext create_group_stmt() {
			return GetRuleContext<Create_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_group_stmtContext alter_group_stmt() {
			return GetRuleContext<Alter_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_role_stmtContext drop_role_stmt() {
			return GetRuleContext<Drop_role_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_stmtContext create_object_stmt() {
			return GetRuleContext<Create_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_object_stmtContext alter_object_stmt() {
			return GetRuleContext<Alter_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_object_stmtContext drop_object_stmt() {
			return GetRuleContext<Drop_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_data_source_stmtContext create_external_data_source_stmt() {
			return GetRuleContext<Create_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_stmtContext alter_external_data_source_stmt() {
			return GetRuleContext<Alter_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_data_source_stmtContext drop_external_data_source_stmt() {
			return GetRuleContext<Drop_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_replication_stmtContext create_replication_stmt() {
			return GetRuleContext<Create_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_replication_stmtContext drop_replication_stmt() {
			return GetRuleContext<Drop_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_stmtContext create_topic_stmt() {
			return GetRuleContext<Create_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_stmtContext alter_topic_stmt() {
			return GetRuleContext<Alter_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_topic_stmtContext drop_topic_stmt() {
			return GetRuleContext<Drop_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_permissions_stmtContext grant_permissions_stmt() {
			return GetRuleContext<Grant_permissions_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Revoke_permissions_stmtContext revoke_permissions_stmt() {
			return GetRuleContext<Revoke_permissions_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_stmtContext alter_table_store_stmt() {
			return GetRuleContext<Alter_table_store_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upsert_object_stmtContext upsert_object_stmt() {
			return GetRuleContext<Upsert_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_stmtContext alter_replication_stmt() {
			return GetRuleContext<Alter_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_resource_pool_stmtContext create_resource_pool_stmt() {
			return GetRuleContext<Create_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_stmtContext alter_resource_pool_stmt() {
			return GetRuleContext<Alter_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_resource_pool_stmtContext drop_resource_pool_stmt() {
			return GetRuleContext<Drop_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_stmtContext create_backup_collection_stmt() {
			return GetRuleContext<Create_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_stmtContext alter_backup_collection_stmt() {
			return GetRuleContext<Alter_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_backup_collection_stmtContext drop_backup_collection_stmt() {
			return GetRuleContext<Drop_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_resource_pool_classifier_stmtContext create_resource_pool_classifier_stmt() {
			return GetRuleContext<Create_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_stmtContext alter_resource_pool_classifier_stmt() {
			return GetRuleContext<Alter_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_resource_pool_classifier_stmtContext drop_resource_pool_classifier_stmt() {
			return GetRuleContext<Drop_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_stmtContext backup_stmt() {
			return GetRuleContext<Backup_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Restore_stmtContext restore_stmt() {
			return GetRuleContext<Restore_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_stmtContext alter_sequence_stmt() {
			return GetRuleContext<Alter_sequence_stmtContext>(0);
		}
		public Sql_stmt_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt_core(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_coreContext sql_stmt_core() {
		Sql_stmt_coreContext _localctx = new Sql_stmt_coreContext(Context, State);
		EnterRule(_localctx, 12, RULE_sql_stmt_core);
		try {
			State = 1002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 945;
				pragma_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946;
				select_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 947;
				named_nodes_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 948;
				create_table_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 949;
				drop_table_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 950;
				use_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 951;
				into_table_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 952;
				commit_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 953;
				update_stmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 954;
				delete_stmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 955;
				rollback_stmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 956;
				declare_stmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 957;
				import_stmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 958;
				export_stmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 959;
				alter_table_stmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 960;
				alter_external_table_stmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 961;
				do_stmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 962;
				define_action_or_subquery_stmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 963;
				if_stmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 964;
				for_stmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 965;
				values_stmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 966;
				create_user_stmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 967;
				alter_user_stmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 968;
				create_group_stmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 969;
				alter_group_stmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 970;
				drop_role_stmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 971;
				create_object_stmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 972;
				alter_object_stmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 973;
				drop_object_stmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 974;
				create_external_data_source_stmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 975;
				alter_external_data_source_stmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 976;
				drop_external_data_source_stmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 977;
				create_replication_stmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 978;
				drop_replication_stmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 979;
				create_topic_stmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 980;
				alter_topic_stmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 981;
				drop_topic_stmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 982;
				grant_permissions_stmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 983;
				revoke_permissions_stmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 984;
				alter_table_store_stmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 985;
				upsert_object_stmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 986;
				create_view_stmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 987;
				drop_view_stmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 988;
				alter_replication_stmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 989;
				create_resource_pool_stmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 990;
				alter_resource_pool_stmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 991;
				drop_resource_pool_stmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 992;
				create_backup_collection_stmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 993;
				alter_backup_collection_stmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 994;
				drop_backup_collection_stmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 995;
				analyze_stmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 996;
				create_resource_pool_classifier_stmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 997;
				alter_resource_pool_classifier_stmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 998;
				drop_resource_pool_classifier_stmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 999;
				backup_stmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1000;
				restore_stmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1001;
				alter_sequence_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_subexprContext[] or_subexpr() {
			return GetRuleContexts<Or_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_subexprContext or_subexpr(int i) {
			return GetRuleContext<Or_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(YQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(YQLParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_compositeContext type_name_composite() {
			return GetRuleContext<Type_name_compositeContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_expr);
		try {
			int _alt;
			State = 1013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1004;
				or_subexpr();
				State = 1009;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1005;
						Match(OR);
						State = 1006;
						or_subexpr();
						}
						} 
					}
					State = 1011;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1012;
				type_name_composite();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_subexprContext[] and_subexpr() {
			return GetRuleContexts<And_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_subexprContext and_subexpr(int i) {
			return GetRuleContext<And_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(YQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(YQLParser.AND, i);
		}
		public Or_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOr_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOr_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Or_subexprContext or_subexpr() {
		Or_subexprContext _localctx = new Or_subexprContext(Context, State);
		EnterRule(_localctx, 16, RULE_or_subexpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			and_subexpr();
			State = 1020;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1016;
					Match(AND);
					State = 1017;
					and_subexpr();
					}
					} 
				}
				State = 1022;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_subexprContext[] xor_subexpr() {
			return GetRuleContexts<Xor_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_subexprContext xor_subexpr(int i) {
			return GetRuleContext<Xor_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(YQLParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(YQLParser.XOR, i);
		}
		public And_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnd_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnd_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public And_subexprContext and_subexpr() {
		And_subexprContext _localctx = new And_subexprContext(Context, State);
		EnterRule(_localctx, 18, RULE_and_subexpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			xor_subexpr();
			State = 1028;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1024;
					Match(XOR);
					State = 1025;
					xor_subexpr();
					}
					} 
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext eq_subexpr() {
			return GetRuleContext<Eq_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Xor_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterXor_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitXor_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Xor_subexprContext xor_subexpr() {
		Xor_subexprContext _localctx = new Xor_subexprContext(Context, State);
		EnterRule(_localctx, 20, RULE_xor_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			eq_subexpr();
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 1032;
				cond_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_from_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Distinct_from_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_from_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDistinct_from_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDistinct_from_op(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_from_opContext distinct_from_op() {
		Distinct_from_opContext _localctx = new Distinct_from_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_distinct_from_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(IS);
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1036;
				Match(NOT);
				}
			}

			State = 1039;
			Match(DISTINCT);
			State = 1040;
			Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Match_opContext match_op() {
			return GetRuleContext<Match_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext[] eq_subexpr() {
			return GetRuleContexts<Eq_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext eq_subexpr(int i) {
			return GetRuleContext<Eq_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(YQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(YQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(YQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(YQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(YQLParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(YQLParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS2() { return GetTokens(YQLParser.EQUALS2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS2(int i) {
			return GetToken(YQLParser.EQUALS2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUALS() { return GetTokens(YQLParser.NOT_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS(int i) {
			return GetToken(YQLParser.NOT_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUALS2() { return GetTokens(YQLParser.NOT_EQUALS2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2(int i) {
			return GetToken(YQLParser.NOT_EQUALS2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_from_opContext[] distinct_from_op() {
			return GetRuleContexts<Distinct_from_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_from_opContext distinct_from_op(int i) {
			return GetRuleContext<Distinct_from_opContext>(i);
		}
		public Cond_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCond_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCond_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cond_exprContext cond_expr() {
		Cond_exprContext _localctx = new Cond_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_cond_expr);
		int _la;
		try {
			int _alt;
			State = 1093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1042;
					Match(NOT);
					}
				}

				State = 1045;
				match_op();
				State = 1046;
				eq_subexpr();
				State = 1049;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 1047;
					Match(ESCAPE);
					State = 1048;
					eq_subexpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1051;
					Match(NOT);
					}
				}

				State = 1054;
				Match(IN);
				State = 1056;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 1055;
					Match(COMPACT);
					}
					break;
				}
				State = 1058;
				in_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1068;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 1059;
					Match(ISNULL);
					}
					break;
				case 2:
					{
					State = 1060;
					Match(NOTNULL);
					}
					break;
				case 3:
					{
					State = 1061;
					Match(IS);
					State = 1062;
					Match(NULL);
					}
					break;
				case 4:
					{
					State = 1064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IS) {
						{
						State = 1063;
						Match(IS);
						}
					}

					State = 1066;
					Match(NOT);
					State = 1067;
					Match(NULL);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1070;
					Match(NOT);
					}
				}

				State = 1073;
				Match(BETWEEN);
				State = 1075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1074;
					_la = TokenStream.LA(1);
					if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1077;
				eq_subexpr();
				State = 1078;
				Match(AND);
				State = 1079;
				eq_subexpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1089;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1086;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQUALS:
							{
							State = 1081;
							Match(EQUALS);
							}
							break;
						case EQUALS2:
							{
							State = 1082;
							Match(EQUALS2);
							}
							break;
						case NOT_EQUALS:
							{
							State = 1083;
							Match(NOT_EQUALS);
							}
							break;
						case NOT_EQUALS2:
							{
							State = 1084;
							Match(NOT_EQUALS2);
							}
							break;
						case IS:
							{
							State = 1085;
							distinct_from_op();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1088;
						eq_subexpr();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1091;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		public Match_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMatch_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMatch_op(this);
		}
	}

	[RuleVersion(0)]
	public Match_opContext match_op() {
		Match_opContext _localctx = new Match_opContext(Context, State);
		EnterRule(_localctx, 26, RULE_match_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 8933531977729L) != 0) || _la==REGEXP || _la==RLIKE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eq_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext[] neq_subexpr() {
			return GetRuleContexts<Neq_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext neq_subexpr(int i) {
			return GetRuleContext<Neq_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(YQLParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(YQLParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_OR_EQ() { return GetTokens(YQLParser.LESS_OR_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ(int i) {
			return GetToken(YQLParser.LESS_OR_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_OR_EQ() { return GetTokens(YQLParser.GREATER_OR_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ(int i) {
			return GetToken(YQLParser.GREATER_OR_EQ, i);
		}
		public Eq_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eq_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterEq_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitEq_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Eq_subexprContext eq_subexpr() {
		Eq_subexprContext _localctx = new Eq_subexprContext(Context, State);
		EnterRule(_localctx, 28, RULE_eq_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			neq_subexpr();
			State = 1102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) {
				{
				{
				State = 1098;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1099;
				neq_subexpr();
				}
				}
				State = 1104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		public Shift_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterShift_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitShift_right(this);
		}
	}

	[RuleVersion(0)]
	public Shift_rightContext shift_right() {
		Shift_rightContext _localctx = new Shift_rightContext(Context, State);
		EnterRule(_localctx, 30, RULE_shift_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(GREATER);
			State = 1106;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rot_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(YQLParser.PIPE, 0); }
		public Rot_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rot_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRot_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRot_right(this);
		}
	}

	[RuleVersion(0)]
	public Rot_rightContext rot_right() {
		Rot_rightContext _localctx = new Rot_rightContext(Context, State);
		EnterRule(_localctx, 32, RULE_rot_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(GREATER);
			State = 1109;
			Match(GREATER);
			State = 1110;
			Match(PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_questionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Double_questionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_question; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDouble_question(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDouble_question(this);
		}
	}

	[RuleVersion(0)]
	public Double_questionContext double_question() {
		Double_questionContext _localctx = new Double_questionContext(Context, State);
		EnterRule(_localctx, 34, RULE_double_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(QUESTION);
			State = 1113;
			Match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Neq_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_subexprContext[] bit_subexpr() {
			return GetRuleContexts<Bit_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_subexprContext bit_subexpr(int i) {
			return GetRuleContext<Bit_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_questionContext double_question() {
			return GetRuleContext<Double_questionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext neq_subexpr() {
			return GetRuleContext<Neq_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHIFT_LEFT() { return GetTokens(YQLParser.SHIFT_LEFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT(int i) {
			return GetToken(YQLParser.SHIFT_LEFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_rightContext[] shift_right() {
			return GetRuleContexts<Shift_rightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_rightContext shift_right(int i) {
			return GetRuleContext<Shift_rightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROT_LEFT() { return GetTokens(YQLParser.ROT_LEFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROT_LEFT(int i) {
			return GetToken(YQLParser.ROT_LEFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rot_rightContext[] rot_right() {
			return GetRuleContexts<Rot_rightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rot_rightContext rot_right(int i) {
			return GetRuleContext<Rot_rightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPERSAND() { return GetTokens(YQLParser.AMPERSAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND(int i) {
			return GetToken(YQLParser.AMPERSAND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(YQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(YQLParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(YQLParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(YQLParser.CARET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Neq_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNeq_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNeq_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Neq_subexprContext neq_subexpr() {
		Neq_subexprContext _localctx = new Neq_subexprContext(Context, State);
		EnterRule(_localctx, 36, RULE_neq_subexpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			bit_subexpr();
			State = 1128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1123;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 1116;
						Match(SHIFT_LEFT);
						}
						break;
					case 2:
						{
						State = 1117;
						shift_right();
						}
						break;
					case 3:
						{
						State = 1118;
						Match(ROT_LEFT);
						}
						break;
					case 4:
						{
						State = 1119;
						rot_right();
						}
						break;
					case 5:
						{
						State = 1120;
						Match(AMPERSAND);
						}
						break;
					case 6:
						{
						State = 1121;
						Match(PIPE);
						}
						break;
					case 7:
						{
						State = 1122;
						Match(CARET);
						}
						break;
					}
					State = 1125;
					bit_subexpr();
					}
					} 
				}
				State = 1130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 1139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1131;
				double_question();
				State = 1132;
				neq_subexpr();
				}
				break;
			case 2:
				{
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1134;
					Match(QUESTION);
					}
					}
					State = 1137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==QUESTION );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_subexprContext[] add_subexpr() {
			return GetRuleContexts<Add_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_subexprContext add_subexpr(int i) {
			return GetRuleContext<Add_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(YQLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(YQLParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(YQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(YQLParser.MINUS, i);
		}
		public Bit_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBit_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBit_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Bit_subexprContext bit_subexpr() {
		Bit_subexprContext _localctx = new Bit_subexprContext(Context, State);
		EnterRule(_localctx, 38, RULE_bit_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141;
			add_subexpr();
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 1142;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1143;
				add_subexpr();
				}
				}
				State = 1148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mul_subexprContext[] mul_subexpr() {
			return GetRuleContexts<Mul_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mul_subexprContext mul_subexpr(int i) {
			return GetRuleContext<Mul_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(YQLParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(YQLParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(YQLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(YQLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(YQLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(YQLParser.PERCENT, i);
		}
		public Add_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAdd_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAdd_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Add_subexprContext add_subexpr() {
		Add_subexprContext _localctx = new Add_subexprContext(Context, State);
		EnterRule(_localctx, 40, RULE_add_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			mul_subexpr();
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) {
				{
				{
				State = 1150;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1151;
				mul_subexpr();
				}
				}
				State = 1156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mul_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Con_subexprContext[] con_subexpr() {
			return GetRuleContexts<Con_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Con_subexprContext con_subexpr(int i) {
			return GetRuleContext<Con_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_PIPE() { return GetTokens(YQLParser.DOUBLE_PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_PIPE(int i) {
			return GetToken(YQLParser.DOUBLE_PIPE, i);
		}
		public Mul_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMul_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMul_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Mul_subexprContext mul_subexpr() {
		Mul_subexprContext _localctx = new Mul_subexprContext(Context, State);
		EnterRule(_localctx, 42, RULE_mul_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			con_subexpr();
			State = 1162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOUBLE_PIPE) {
				{
				{
				State = 1158;
				Match(DOUBLE_PIPE);
				State = 1159;
				con_subexpr();
				}
				}
				State = 1164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Con_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexprContext unary_subexpr() {
			return GetRuleContext<Unary_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_opContext unary_op() {
			return GetRuleContext<Unary_opContext>(0);
		}
		public Con_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_con_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCon_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCon_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Con_subexprContext con_subexpr() {
		Con_subexprContext _localctx = new Con_subexprContext(Context, State);
		EnterRule(_localctx, 44, RULE_con_subexpr);
		try {
			State = 1169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1165;
				unary_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1166;
				unary_op();
				State = 1167;
				unary_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDA() { return GetToken(YQLParser.TILDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Unary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_op(this);
		}
	}

	[RuleVersion(0)]
	public Unary_opContext unary_op() {
		Unary_opContext _localctx = new Unary_opContext(Context, State);
		EnterRule(_localctx, 46, RULE_unary_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_subexpr_suffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(YQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_exprContext[] key_expr() {
			return GetRuleContexts<Key_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_exprContext key_expr(int i) {
			return GetRuleContext<Key_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext[] invoke_expr() {
			return GetRuleContexts<Invoke_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext invoke_expr(int i) {
			return GetRuleContext<Invoke_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(YQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(YQLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGITS() { return GetTokens(YQLParser.DIGITS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS(int i) {
			return GetToken(YQLParser.DIGITS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext[] an_id_or_type() {
			return GetRuleContexts<An_id_or_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type(int i) {
			return GetRuleContext<An_id_or_typeContext>(i);
		}
		public Unary_subexpr_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_subexpr_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_subexpr_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_subexpr_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Unary_subexpr_suffixContext unary_subexpr_suffix() {
		Unary_subexpr_suffixContext _localctx = new Unary_subexpr_suffixContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary_subexpr_suffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137480896512L) != 0)) {
				{
				{
				State = 1181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE_SQUARE:
					{
					State = 1173;
					key_expr();
					}
					break;
				case LPAREN:
					{
					State = 1174;
					invoke_expr();
					}
					break;
				case DOT:
					{
					State = 1175;
					Match(DOT);
					State = 1179;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
						{
						State = 1176;
						bind_parameter();
						}
						break;
					case DIGITS:
						{
						State = 1177;
						Match(DIGITS);
						}
						break;
					case ABORT:
					case ACTION:
					case ADD:
					case AFTER:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANSI:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSUME:
					case ASYMMETRIC:
					case ASYNC:
					case AT:
					case ATTACH:
					case ATTRIBUTES:
					case AUTOINCREMENT:
					case BACKUP:
					case COLLECTION:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BITCAST:
					case BY:
					case CALLABLE:
					case CASCADE:
					case CASE:
					case CAST:
					case CHANGEFEED:
					case CHECK:
					case CLASSIFIER:
					case COLLATE:
					case COLUMN:
					case COLUMNS:
					case COMMIT:
					case COMPACT:
					case CONDITIONAL:
					case CONFLICT:
					case CONNECT:
					case CONSTRAINT:
					case CONSUMER:
					case COVER:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case DATA:
					case DATABASE:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFERRABLE:
					case DEFERRED:
					case DEFINE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DETACH:
					case DICT:
					case DIRECTORY:
					case DISABLE:
					case DISCARD:
					case DISTINCT:
					case DO:
					case DROP:
					case EACH:
					case ELSE:
					case EMPTY:
					case EMPTY_ACTION:
					case ENCRYPTED:
					case END:
					case ENUM:
					case ERASE:
					case ERROR:
					case ESCAPE:
					case EVALUATE:
					case EXCEPT:
					case EXCLUDE:
					case EXCLUSION:
					case EXCLUSIVE:
					case EXISTS:
					case EXPLAIN:
					case EXPORT:
					case EXTERNAL:
					case FAIL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FLATTEN:
					case FLOW:
					case FOLLOWING:
					case FOR:
					case FOREIGN:
					case FROM:
					case FULL:
					case FUNCTION:
					case GLOB:
					case GLOBAL:
					case GRANT:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case HOP:
					case IF:
					case IGNORE:
					case ILIKE:
					case IMMEDIATE:
					case IMPORT:
					case IN:
					case INCREMENT:
					case INCREMENTAL:
					case INDEX:
					case INDEXED:
					case INHERITS:
					case INITIAL:
					case INITIALLY:
					case INNER:
					case INSERT:
					case INSTEAD:
					case INTERSECT:
					case INTO:
					case IS:
					case ISNULL:
					case JOIN:
					case JSON_EXISTS:
					case JSON_QUERY:
					case JSON_VALUE:
					case KEY:
					case LAST:
					case LEFT:
					case LEGACY:
					case LIKE:
					case LIMIT:
					case LIST:
					case LOCAL:
					case LOGIN:
					case MANAGE:
					case MATCH:
					case MATCHES:
					case MATCH_RECOGNIZE:
					case MEASURES:
					case MICROSECONDS:
					case MILLISECONDS:
					case MODIFY:
					case NANOSECONDS:
					case NATURAL:
					case NEXT:
					case NO:
					case NOLOGIN:
					case NOT:
					case NOTNULL:
					case NULL:
					case NULLS:
					case OBJECT:
					case OF:
					case OFFSET:
					case OMIT:
					case ON:
					case ONE:
					case ONLY:
					case OPTION:
					case OPTIONAL:
					case OR:
					case ORDER:
					case OTHERS:
					case OUTER:
					case OVER:
					case PARALLEL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PAST:
					case PATTERN:
					case PER:
					case PERMUTE:
					case PLAN:
					case POOL:
					case PRAGMA:
					case PRECEDING:
					case PRESORT:
					case PRIMARY:
					case PRIVILEGES:
					case PROCESS:
					case QUERY:
					case QUEUE:
					case RAISE:
					case RANGE:
					case REDUCE:
					case REFERENCES:
					case REGEXP:
					case REINDEX:
					case RELEASE:
					case REMOVE:
					case RENAME:
					case REPLACE:
					case REPLICATION:
					case RESET:
					case RESOURCE:
					case RESPECT:
					case RESTART:
					case RESTORE:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNING:
					case REVERT:
					case REVOKE:
					case RIGHT:
					case RLIKE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SAMPLE:
					case SAVEPOINT:
					case SCHEMA:
					case SECONDS:
					case SEEK:
					case SELECT:
					case SEMI:
					case SET:
					case SETS:
					case SHOW:
					case TSKIP:
					case SEQUENCE:
					case SOURCE:
					case START:
					case STREAM:
					case STRUCT:
					case SUBQUERY:
					case SUBSET:
					case SYMBOLS:
					case SYMMETRIC:
					case SYNC:
					case SYSTEM:
					case TABLE:
					case TABLES:
					case TABLESAMPLE:
					case TABLESTORE:
					case TAGGED:
					case TEMP:
					case TEMPORARY:
					case THEN:
					case TIES:
					case TO:
					case TOPIC:
					case TRANSACTION:
					case TRIGGER:
					case TUPLE:
					case TYPE:
					case UNBOUNDED:
					case UNCONDITIONAL:
					case UNION:
					case UNIQUE:
					case UNKNOWN:
					case UNMATCHED:
					case UPDATE:
					case UPSERT:
					case USE:
					case USER:
					case USING:
					case VACUUM:
					case VALUES:
					case VARIANT:
					case VIEW:
					case VIRTUAL:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHOUT:
					case WRAPPER:
					case XOR:
					case STRING_VALUE:
					case ID_PLAIN:
					case ID_QUOTED:
						{
						State = 1178;
						an_id_or_type();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1188;
				Match(COLLATE);
				State = 1189;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_casual_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexpr_suffixContext unary_subexpr_suffix() {
			return GetRuleContext<Unary_subexpr_suffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		public Unary_casual_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_casual_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_casual_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_casual_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_casual_subexprContext unary_casual_subexpr() {
		Unary_casual_subexprContext _localctx = new Unary_casual_subexprContext(Context, State);
		EnterRule(_localctx, 50, RULE_unary_casual_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 1192;
				id_expr();
				}
				break;
			case 2:
				{
				State = 1193;
				atom_expr();
				}
				break;
			}
			State = 1196;
			unary_subexpr_suffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_unary_casual_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexpr_suffixContext unary_subexpr_suffix() {
			return GetRuleContext<Unary_subexpr_suffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_expr_inContext id_expr_in() {
			return GetRuleContext<Id_expr_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_atom_exprContext in_atom_expr() {
			return GetRuleContext<In_atom_exprContext>(0);
		}
		public In_unary_casual_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_unary_casual_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_unary_casual_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_unary_casual_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public In_unary_casual_subexprContext in_unary_casual_subexpr() {
		In_unary_casual_subexprContext _localctx = new In_unary_casual_subexprContext(Context, State);
		EnterRule(_localctx, 52, RULE_in_unary_casual_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 1198;
				id_expr_in();
				}
				break;
			case 2:
				{
				State = 1199;
				in_atom_expr();
				}
				break;
			}
			State = 1202;
			unary_subexpr_suffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_casual_subexprContext unary_casual_subexpr() {
			return GetRuleContext<Unary_casual_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_api_exprContext json_api_expr() {
			return GetRuleContext<Json_api_exprContext>(0);
		}
		public Unary_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_subexprContext unary_subexpr() {
		Unary_subexprContext _localctx = new Unary_subexprContext(Context, State);
		EnterRule(_localctx, 54, RULE_unary_subexpr);
		try {
			State = 1206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1204;
				unary_casual_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1205;
				json_api_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_unary_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public In_unary_casual_subexprContext in_unary_casual_subexpr() {
			return GetRuleContext<In_unary_casual_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_api_exprContext json_api_expr() {
			return GetRuleContext<Json_api_exprContext>(0);
		}
		public In_unary_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_unary_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_unary_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_unary_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public In_unary_subexprContext in_unary_subexpr() {
		In_unary_subexprContext _localctx = new In_unary_subexprContext(Context, State);
		EnterRule(_localctx, 56, RULE_in_unary_subexpr);
		try {
			State = 1210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				in_unary_casual_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1209;
				json_api_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 58, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(LBRACE_SQUARE);
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
				{
				State = 1213;
				expr_list();
				}
			}

			State = 1217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1216;
				Match(COMMA);
				}
			}

			State = 1219;
			Match(RBRACE_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_dict_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(YQLParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(YQLParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_dict_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_dict_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_dict_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_dict_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_dict_listContext expr_dict_list() {
		Expr_dict_listContext _localctx = new Expr_dict_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_expr_dict_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1221;
			expr();
			State = 1224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1222;
				Match(COLON);
				State = 1223;
				expr();
				}
			}

			State = 1234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1226;
					Match(COMMA);
					State = 1227;
					expr();
					State = 1230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLON) {
						{
						State = 1228;
						Match(COLON);
						State = 1229;
						expr();
						}
					}

					}
					} 
				}
				State = 1236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_dict_listContext expr_dict_list() {
			return GetRuleContext<Expr_dict_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 62, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			Match(LBRACE_CURLY);
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
				{
				State = 1238;
				expr_dict_list();
				}
			}

			State = 1242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1241;
				Match(COMMA);
				}
			}

			State = 1244;
			Match(RBRACE_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_struct_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(YQLParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(YQLParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_struct_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_struct_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_struct_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_struct_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_struct_listContext expr_struct_list() {
		Expr_struct_listContext _localctx = new Expr_struct_listContext(Context, State);
		EnterRule(_localctx, 64, RULE_expr_struct_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			expr();
			State = 1247;
			Match(COLON);
			State = 1248;
			expr();
			State = 1256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1249;
					Match(COMMA);
					State = 1250;
					expr();
					State = 1251;
					Match(COLON);
					State = 1252;
					expr();
					}
					} 
				}
				State = 1258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT_OPEN() { return GetToken(YQLParser.STRUCT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT_CLOSE() { return GetToken(YQLParser.STRUCT_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_struct_listContext expr_struct_list() {
			return GetRuleContext<Expr_struct_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 66, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259;
			Match(STRUCT_OPEN);
			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
				{
				State = 1260;
				expr_struct_list();
				}
			}

			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1263;
				Match(COMMA);
				}
			}

			State = 1266;
			Match(STRUCT_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exists_exprContext exists_expr() {
			return GetRuleContext<Exists_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_constructorContext value_constructor() {
			return GetRuleContext<Value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitcast_exprContext bitcast_expr() {
			return GetRuleContext<Bitcast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 68, RULE_atom_expr);
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1268;
				literal_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1269;
				bind_parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1270;
				lambda();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1271;
				cast_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1272;
				exists_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1273;
				case_expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1274;
				an_id_or_type();
				State = 1275;
				Match(NAMESPACE);
				State = 1278;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSUME:
				case ASYMMETRIC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BITCAST:
				case BY:
				case CALLABLE:
				case CASCADE:
				case CASE:
				case CAST:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case COMMIT:
				case COMPACT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DEFINE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DICT:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISTINCT:
				case DO:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case EMPTY_ACTION:
				case ENCRYPTED:
				case END:
				case ENUM:
				case ERASE:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCEPT:
				case EXCLUDE:
				case EXCLUSION:
				case EXCLUSIVE:
				case EXISTS:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FLOW:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FROM:
				case FULL:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HAVING:
				case HOP:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INNER:
				case INSERT:
				case INSTEAD:
				case INTERSECT:
				case INTO:
				case IS:
				case ISNULL:
				case JOIN:
				case JSON_EXISTS:
				case JSON_QUERY:
				case JSON_VALUE:
				case KEY:
				case LAST:
				case LEFT:
				case LEGACY:
				case LIKE:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NATURAL:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NOT:
				case NOTNULL:
				case NULL:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ON:
				case ONE:
				case ONLY:
				case OPTION:
				case OPTIONAL:
				case OR:
				case ORDER:
				case OTHERS:
				case OUTER:
				case OVER:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRESORT:
				case PRIMARY:
				case PRIVILEGES:
				case PROCESS:
				case QUERY:
				case QUEUE:
				case RAISE:
				case RANGE:
				case REDUCE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESOURCE:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNING:
				case REVERT:
				case REVOKE:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case SAMPLE:
				case SAVEPOINT:
				case SCHEMA:
				case SECONDS:
				case SEEK:
				case SELECT:
				case SEMI:
				case SET:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case STREAM:
				case STRUCT:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYMMETRIC:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TAGGED:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRIGGER:
				case TUPLE:
				case TYPE:
				case UNBOUNDED:
				case UNCONDITIONAL:
				case UNION:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case USING:
				case VACUUM:
				case VALUES:
				case VARIANT:
				case VIEW:
				case VIRTUAL:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case WITHOUT:
				case WRAPPER:
				case XOR:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1276;
					id_or_type();
					}
					break;
				case STRING_VALUE:
					{
					State = 1277;
					Match(STRING_VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1280;
				value_constructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1281;
				bitcast_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1282;
				list_literal();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1283;
				dict_literal();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1284;
				struct_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_constructorContext value_constructor() {
			return GetRuleContext<Value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitcast_exprContext bitcast_expr() {
			return GetRuleContext<Bitcast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		public In_atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_atom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_atom_expr(this);
		}
	}

	[RuleVersion(0)]
	public In_atom_exprContext in_atom_expr() {
		In_atom_exprContext _localctx = new In_atom_exprContext(Context, State);
		EnterRule(_localctx, 70, RULE_in_atom_expr);
		try {
			State = 1307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1287;
				literal_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1288;
				bind_parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1289;
				lambda();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1290;
				cast_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1291;
				case_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1292;
				an_id_or_type();
				State = 1293;
				Match(NAMESPACE);
				State = 1296;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSUME:
				case ASYMMETRIC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BITCAST:
				case BY:
				case CALLABLE:
				case CASCADE:
				case CASE:
				case CAST:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case COMMIT:
				case COMPACT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DEFINE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DICT:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISTINCT:
				case DO:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case EMPTY_ACTION:
				case ENCRYPTED:
				case END:
				case ENUM:
				case ERASE:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCEPT:
				case EXCLUDE:
				case EXCLUSION:
				case EXCLUSIVE:
				case EXISTS:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FLOW:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FROM:
				case FULL:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HAVING:
				case HOP:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INNER:
				case INSERT:
				case INSTEAD:
				case INTERSECT:
				case INTO:
				case IS:
				case ISNULL:
				case JOIN:
				case JSON_EXISTS:
				case JSON_QUERY:
				case JSON_VALUE:
				case KEY:
				case LAST:
				case LEFT:
				case LEGACY:
				case LIKE:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NATURAL:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NOT:
				case NOTNULL:
				case NULL:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ON:
				case ONE:
				case ONLY:
				case OPTION:
				case OPTIONAL:
				case OR:
				case ORDER:
				case OTHERS:
				case OUTER:
				case OVER:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRESORT:
				case PRIMARY:
				case PRIVILEGES:
				case PROCESS:
				case QUERY:
				case QUEUE:
				case RAISE:
				case RANGE:
				case REDUCE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESOURCE:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNING:
				case REVERT:
				case REVOKE:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case SAMPLE:
				case SAVEPOINT:
				case SCHEMA:
				case SECONDS:
				case SEEK:
				case SELECT:
				case SEMI:
				case SET:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case STREAM:
				case STRUCT:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYMMETRIC:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TAGGED:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRIGGER:
				case TUPLE:
				case TYPE:
				case UNBOUNDED:
				case UNCONDITIONAL:
				case UNION:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case USING:
				case VACUUM:
				case VALUES:
				case VARIANT:
				case VIEW:
				case VIRTUAL:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case WITHOUT:
				case WRAPPER:
				case XOR:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1294;
					id_or_type();
					}
					break;
				case STRING_VALUE:
					{
					State = 1295;
					Match(STRING_VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1298;
				Match(LPAREN);
				State = 1299;
				select_stmt();
				State = 1300;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1302;
				value_constructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1303;
				bitcast_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1304;
				list_literal();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1305;
				dict_literal();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1306;
				struct_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(YQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Cast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCast_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCast_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cast_exprContext cast_expr() {
		Cast_exprContext _localctx = new Cast_exprContext(Context, State);
		EnterRule(_localctx, 72, RULE_cast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			Match(CAST);
			State = 1310;
			Match(LPAREN);
			State = 1311;
			expr();
			State = 1312;
			Match(AS);
			State = 1313;
			type_name_or_bind();
			State = 1314;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitcast_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITCAST() { return GetToken(YQLParser.BITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Bitcast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitcast_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBitcast_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBitcast_expr(this);
		}
	}

	[RuleVersion(0)]
	public Bitcast_exprContext bitcast_expr() {
		Bitcast_exprContext _localctx = new Bitcast_exprContext(Context, State);
		EnterRule(_localctx, 74, RULE_bitcast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			Match(BITCAST);
			State = 1317;
			Match(LPAREN);
			State = 1318;
			expr();
			State = 1319;
			Match(AS);
			State = 1320;
			type_name_simple();
			State = 1321;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exists_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		public Exists_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exists_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExists_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExists_expr(this);
		}
	}

	[RuleVersion(0)]
	public Exists_exprContext exists_expr() {
		Exists_exprContext _localctx = new Exists_exprContext(Context, State);
		EnterRule(_localctx, 76, RULE_exists_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323;
			Match(EXISTS);
			State = 1324;
			Match(LPAREN);
			State = 1327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				{
				State = 1325;
				select_stmt();
				}
				break;
			case VALUES:
				{
				State = 1326;
				values_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1329;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(YQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_exprContext[] when_expr() {
			return GetRuleContexts<When_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_exprContext when_expr(int i) {
			return GetRuleContext<When_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 78, RULE_case_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331;
			Match(CASE);
			State = 1333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1332;
				expr();
				}
				break;
			}
			State = 1336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1335;
				when_expr();
				}
				}
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 1342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1340;
				Match(ELSE);
				State = 1341;
				expr();
				}
			}

			State = 1344;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Smart_parenthesisContext smart_parenthesis() {
			return GetRuleContext<Smart_parenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(YQLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_bodyContext lambda_body() {
			return GetRuleContext<Lambda_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 80, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346;
			smart_parenthesis();
			State = 1358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 1347;
				Match(ARROW);
				State = 1356;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 1348;
					Match(LPAREN);
					State = 1349;
					expr();
					State = 1350;
					Match(RPAREN);
					}
					break;
				case LBRACE_CURLY:
					{
					State = 1352;
					Match(LBRACE_CURLY);
					State = 1353;
					lambda_body();
					State = 1354;
					Match(RBRACE_CURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public In_unary_subexprContext in_unary_subexpr() {
			return GetRuleContext<In_unary_subexprContext>(0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_expr(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 82, RULE_in_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			in_unary_subexpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_api_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_valueContext json_value() {
			return GetRuleContext<Json_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_existsContext json_exists() {
			return GetRuleContext<Json_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_queryContext json_query() {
			return GetRuleContext<Json_queryContext>(0);
		}
		public Json_api_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_api_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_api_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_api_expr(this);
		}
	}

	[RuleVersion(0)]
	public Json_api_exprContext json_api_expr() {
		Json_api_exprContext _localctx = new Json_api_exprContext(Context, State);
		EnterRule(_localctx, 84, RULE_json_api_expr);
		try {
			State = 1365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1362;
				json_value();
				}
				break;
			case JSON_EXISTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1363;
				json_exists();
				}
				break;
			case JSON_QUERY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1364;
				json_query();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Jsonpath_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJsonpath_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJsonpath_spec(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_specContext jsonpath_spec() {
		Jsonpath_specContext _localctx = new Jsonpath_specContext(Context, State);
		EnterRule(_localctx, 86, RULE_jsonpath_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Json_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Json_variable_nameContext json_variable_name() {
		Json_variable_nameContext _localctx = new Json_variable_nameContext(Context, State);
		EnterRule(_localctx, 88, RULE_json_variable_name);
		try {
			State = 1371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1369;
				id_expr();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1370;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_variable_nameContext json_variable_name() {
			return GetRuleContext<Json_variable_nameContext>(0);
		}
		public Json_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variable(this);
		}
	}

	[RuleVersion(0)]
	public Json_variableContext json_variable() {
		Json_variableContext _localctx = new Json_variableContext(Context, State);
		EnterRule(_localctx, 90, RULE_json_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373;
			expr();
			State = 1374;
			Match(AS);
			State = 1375;
			json_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_variableContext[] json_variable() {
			return GetRuleContexts<Json_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_variableContext json_variable(int i) {
			return GetRuleContext<Json_variableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Json_variablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variables(this);
		}
	}

	[RuleVersion(0)]
	public Json_variablesContext json_variables() {
		Json_variablesContext _localctx = new Json_variablesContext(Context, State);
		EnterRule(_localctx, 92, RULE_json_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377;
			json_variable();
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1378;
				Match(COMMA);
				State = 1379;
				json_variable();
				}
				}
				State = 1384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_common_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Jsonpath_specContext jsonpath_spec() {
			return GetRuleContext<Jsonpath_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_variablesContext json_variables() {
			return GetRuleContext<Json_variablesContext>(0);
		}
		public Json_common_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_common_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_common_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_common_args(this);
		}
	}

	[RuleVersion(0)]
	public Json_common_argsContext json_common_args() {
		Json_common_argsContext _localctx = new Json_common_argsContext(Context, State);
		EnterRule(_localctx, 94, RULE_json_common_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			expr();
			State = 1386;
			Match(COMMA);
			State = 1387;
			jsonpath_spec();
			State = 1390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PASSING) {
				{
				State = 1388;
				Match(PASSING);
				State = 1389;
				json_variables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_case_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Json_case_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_case_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_case_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_case_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_case_handlerContext json_case_handler() {
		Json_case_handlerContext _localctx = new Json_case_handlerContext(Context, State);
		EnterRule(_localctx, 96, RULE_json_case_handler);
		try {
			State = 1396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1392;
				Match(ERROR);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1393;
				Match(NULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1394;
				Match(DEFAULT);
				State = 1395;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(YQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_case_handlerContext[] json_case_handler() {
			return GetRuleContexts<Json_case_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_case_handlerContext json_case_handler(int i) {
			return GetRuleContext<Json_case_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(YQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(YQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(YQLParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(YQLParser.EMPTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(YQLParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(YQLParser.ERROR, i);
		}
		public Json_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_value(this);
		}
	}

	[RuleVersion(0)]
	public Json_valueContext json_value() {
		Json_valueContext _localctx = new Json_valueContext(Context, State);
		EnterRule(_localctx, 98, RULE_json_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398;
			Match(JSON_VALUE);
			State = 1399;
			Match(LPAREN);
			State = 1400;
			json_common_args();
			State = 1403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 1401;
				Match(RETURNING);
				State = 1402;
				type_name_simple();
				}
			}

			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==ERROR || _la==NULL) {
				{
				{
				State = 1405;
				json_case_handler();
				State = 1406;
				Match(ON);
				State = 1407;
				_la = TokenStream.LA(1);
				if ( !(_la==EMPTY || _la==ERROR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1414;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_exists_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(YQLParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(YQLParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		public Json_exists_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_exists_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_exists_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_exists_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_exists_handlerContext json_exists_handler() {
		Json_exists_handlerContext _localctx = new Json_exists_handlerContext(Context, State);
		EnterRule(_localctx, 100, RULE_json_exists_handler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416;
			_la = TokenStream.LA(1);
			if ( !(_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1417;
			Match(ON);
			State = 1418;
			Match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(YQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_exists_handlerContext json_exists_handler() {
			return GetRuleContext<Json_exists_handlerContext>(0);
		}
		public Json_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_exists(this);
		}
	}

	[RuleVersion(0)]
	public Json_existsContext json_exists() {
		Json_existsContext _localctx = new Json_existsContext(Context, State);
		EnterRule(_localctx, 102, RULE_json_exists);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420;
			Match(JSON_EXISTS);
			State = 1421;
			Match(LPAREN);
			State = 1422;
			json_common_args();
			State = 1424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) {
				{
				State = 1423;
				json_exists_handler();
				}
			}

			State = 1426;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_query_wrapperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		public Json_query_wrapperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query_wrapper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query_wrapper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query_wrapper(this);
		}
	}

	[RuleVersion(0)]
	public Json_query_wrapperContext json_query_wrapper() {
		Json_query_wrapperContext _localctx = new Json_query_wrapperContext(Context, State);
		EnterRule(_localctx, 104, RULE_json_query_wrapper);
		int _la;
		try {
			State = 1439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHOUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428;
				Match(WITHOUT);
				State = 1430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 1429;
					Match(ARRAY);
					}
				}

				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1432;
				Match(WITH);
				State = 1434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONDITIONAL || _la==UNCONDITIONAL) {
					{
					State = 1433;
					_la = TokenStream.LA(1);
					if ( !(_la==CONDITIONAL || _la==UNCONDITIONAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 1436;
					Match(ARRAY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_query_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		public Json_query_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_query_handlerContext json_query_handler() {
		Json_query_handlerContext _localctx = new Json_query_handlerContext(Context, State);
		EnterRule(_localctx, 106, RULE_json_query_handler);
		try {
			State = 1447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441;
				Match(ERROR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442;
				Match(NULL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1443;
				Match(EMPTY);
				State = 1444;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1445;
				Match(EMPTY);
				State = 1446;
				Match(OBJECT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(YQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_wrapperContext json_query_wrapper() {
			return GetRuleContext<Json_query_wrapperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_handlerContext[] json_query_handler() {
			return GetRuleContexts<Json_query_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_handlerContext json_query_handler(int i) {
			return GetRuleContext<Json_query_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(YQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(YQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		public Json_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query(this);
		}
	}

	[RuleVersion(0)]
	public Json_queryContext json_query() {
		Json_queryContext _localctx = new Json_queryContext(Context, State);
		EnterRule(_localctx, 108, RULE_json_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			Match(JSON_QUERY);
			State = 1450;
			Match(LPAREN);
			State = 1451;
			json_common_args();
			State = 1455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				State = 1452;
				json_query_wrapper();
				State = 1453;
				Match(WRAPPER);
				}
			}

			State = 1461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1457;
				json_query_handler();
				State = 1458;
				Match(ON);
				State = 1459;
				Match(EMPTY);
				}
				break;
			}
			State = 1467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EMPTY || _la==ERROR || _la==NULL) {
				{
				State = 1463;
				json_query_handler();
				State = 1464;
				Match(ON);
				State = 1465;
				Match(ERROR);
				}
			}

			State = 1469;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Smart_parenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Smart_parenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smart_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSmart_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSmart_parenthesis(this);
		}
	}

	[RuleVersion(0)]
	public Smart_parenthesisContext smart_parenthesis() {
		Smart_parenthesisContext _localctx = new Smart_parenthesisContext(Context, State);
		EnterRule(_localctx, 110, RULE_smart_parenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			Match(LPAREN);
			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
				{
				State = 1472;
				named_expr_list();
				}
			}

			State = 1476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1475;
				Match(COMMA);
				}
			}

			State = 1478;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 112, RULE_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			expr();
			State = 1485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1481;
					Match(COMMA);
					State = 1482;
					expr();
					}
					} 
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pure_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_listContext pure_column_list() {
		Pure_column_listContext _localctx = new Pure_column_listContext(Context, State);
		EnterRule(_localctx, 114, RULE_pure_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			Match(LPAREN);
			State = 1489;
			an_id();
			State = 1494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1490;
				Match(COMMA);
				State = 1491;
				an_id();
				}
				}
				State = 1496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1497;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_or_namedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Pure_column_or_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_or_named; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_or_named(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_or_named(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_or_namedContext pure_column_or_named() {
		Pure_column_or_namedContext _localctx = new Pure_column_or_namedContext(Context, State);
		EnterRule(_localctx, 116, RULE_pure_column_or_named);
		try {
			State = 1501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1499;
				bind_parameter();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1500;
				an_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_or_named_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext[] pure_column_or_named() {
			return GetRuleContexts<Pure_column_or_namedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named(int i) {
			return GetRuleContext<Pure_column_or_namedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pure_column_or_named_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_or_named_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_or_named_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_or_named_list(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_or_named_listContext pure_column_or_named_list() {
		Pure_column_or_named_listContext _localctx = new Pure_column_or_named_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_pure_column_or_named_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			Match(LPAREN);
			State = 1504;
			pure_column_or_named();
			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1505;
				Match(COMMA);
				State = 1506;
				pure_column_or_named();
				}
				}
				State = 1511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1512;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefixContext opt_id_prefix() {
			return GetRuleContext<Opt_id_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 120, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			opt_id_prefix();
			State = 1515;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Without_column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_withoutContext an_id_without() {
			return GetRuleContext<An_id_withoutContext>(0);
		}
		public Without_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_without_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWithout_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWithout_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Without_column_nameContext without_column_name() {
		Without_column_nameContext _localctx = new Without_column_nameContext(Context, State);
		EnterRule(_localctx, 122, RULE_without_column_name);
		try {
			State = 1522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1517;
				an_id();
				State = 1518;
				Match(DOT);
				State = 1519;
				an_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521;
				an_id_without();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1524;
			column_name();
			State = 1529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1525;
					Match(COMMA);
					State = 1526;
					column_name();
					}
					} 
				}
				State = 1531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 1533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1532;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Without_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_nameContext[] without_column_name() {
			return GetRuleContexts<Without_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_nameContext without_column_name(int i) {
			return GetRuleContext<Without_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Without_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_without_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWithout_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWithout_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Without_column_listContext without_column_list() {
		Without_column_listContext _localctx = new Without_column_listContext(Context, State);
		EnterRule(_localctx, 126, RULE_without_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			without_column_name();
			State = 1540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1536;
					Match(COMMA);
					State = 1537;
					without_column_name();
					}
					} 
				}
				State = 1542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			State = 1544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1543;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Named_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_expr(this);
		}
	}

	[RuleVersion(0)]
	public Named_exprContext named_expr() {
		Named_exprContext _localctx = new Named_exprContext(Context, State);
		EnterRule(_localctx, 128, RULE_named_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			expr();
			State = 1549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1547;
				Match(AS);
				State = 1548;
				an_id_or_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext[] named_expr() {
			return GetRuleContexts<Named_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr(int i) {
			return GetRuleContext<Named_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Named_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_expr_listContext named_expr_list() {
		Named_expr_listContext _localctx = new Named_expr_listContext(Context, State);
		EnterRule(_localctx, 130, RULE_named_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551;
			named_expr();
			State = 1556;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1552;
					Match(COMMA);
					State = 1553;
					named_expr();
					}
					} 
				}
				State = 1558;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoke_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_expr_tailContext invoke_expr_tail() {
			return GetRuleContext<Invoke_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Invoke_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInvoke_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInvoke_expr(this);
		}
	}

	[RuleVersion(0)]
	public Invoke_exprContext invoke_expr() {
		Invoke_exprContext _localctx = new Invoke_exprContext(Context, State);
		EnterRule(_localctx, 132, RULE_invoke_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			Match(LPAREN);
			State = 1566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT_OPEN:
			case PLUS:
			case MINUS:
			case TILDA:
			case LPAREN:
			case DOLLAR:
			case LBRACE_CURLY:
			case LBRACE_SQUARE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FALSE:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TRUE:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
			case DIGITS:
			case INTEGER_VALUE:
			case REAL:
			case BLOB:
				{
				State = 1560;
				opt_set_quantifier();
				State = 1561;
				named_expr_list();
				State = 1563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1562;
					Match(COMMA);
					}
				}

				}
				break;
			case ASTERISK:
				{
				State = 1565;
				Match(ASTERISK);
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			State = 1568;
			Match(RPAREN);
			State = 1569;
			invoke_expr_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoke_expr_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_treatmentContext null_treatment() {
			return GetRuleContext<Null_treatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(YQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_name_or_specificationContext window_name_or_specification() {
			return GetRuleContext<Window_name_or_specificationContext>(0);
		}
		public Invoke_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInvoke_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInvoke_expr_tail(this);
		}
	}

	[RuleVersion(0)]
	public Invoke_expr_tailContext invoke_expr_tail() {
		Invoke_expr_tailContext _localctx = new Invoke_expr_tailContext(Context, State);
		EnterRule(_localctx, 134, RULE_invoke_expr_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1571;
				null_treatment();
				}
				break;
			case 2:
				{
				State = 1572;
				filter_clause();
				}
				break;
			}
			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVER) {
				{
				State = 1575;
				Match(OVER);
				State = 1576;
				window_name_or_specification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_call_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext invoke_expr() {
			return GetRuleContext<Invoke_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext[] an_id_or_type() {
			return GetRuleContexts<An_id_or_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type(int i) {
			return GetRuleContext<An_id_or_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_exprContext an_id_expr() {
			return GetRuleContext<An_id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		public Using_call_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_call_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUsing_call_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUsing_call_expr(this);
		}
	}

	[RuleVersion(0)]
	public Using_call_exprContext using_call_expr() {
		Using_call_exprContext _localctx = new Using_call_exprContext(Context, State);
		EnterRule(_localctx, 136, RULE_using_call_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1579;
				an_id_or_type();
				State = 1580;
				Match(NAMESPACE);
				State = 1581;
				an_id_or_type();
				}
				break;
			case 2:
				{
				State = 1583;
				an_id_expr();
				}
				break;
			case 3:
				{
				State = 1584;
				bind_parameter();
				}
				break;
			case 4:
				{
				State = 1585;
				Match(EXTERNAL);
				State = 1586;
				Match(FUNCTION);
				}
				break;
			}
			State = 1589;
			invoke_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		public Key_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKey_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKey_expr(this);
		}
	}

	[RuleVersion(0)]
	public Key_exprContext key_expr() {
		Key_exprContext _localctx = new Key_exprContext(Context, State);
		EnterRule(_localctx, 138, RULE_key_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			Match(LBRACE_SQUARE);
			State = 1592;
			expr();
			State = 1593;
			Match(RBRACE_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(YQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		public When_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWhen_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWhen_expr(this);
		}
	}

	[RuleVersion(0)]
	public When_exprContext when_expr() {
		When_exprContext _localctx = new When_exprContext(Context, State);
		EnterRule(_localctx, 140, RULE_when_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595;
			Match(WHEN);
			State = 1596;
			expr();
			State = 1597;
			Match(THEN);
			State = 1598;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealContext real() {
			return GetRuleContext<RealContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(YQLParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(YQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(YQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(YQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 142, RULE_literal_value);
		try {
			State = 1610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600;
				integer();
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601;
				real();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1602;
				Match(STRING_VALUE);
				}
				break;
			case BLOB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1603;
				Match(BLOB);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1604;
				Match(NULL);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1605;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1606;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1607;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1608;
				bool_value();
				}
				break;
			case EMPTY_ACTION:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1609;
				Match(EMPTY_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(YQLParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		public Bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameterContext bind_parameter() {
		Bind_parameterContext _localctx = new Bind_parameterContext(Context, State);
		EnterRule(_localctx, 144, RULE_bind_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			Match(DOLLAR);
			State = 1616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 1613;
				an_id_or_type();
				}
				break;
			case TRUE:
				{
				State = 1614;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 1615;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(YQLParser.QUESTION, 0); }
		public Opt_bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_bind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_bind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Opt_bind_parameterContext opt_bind_parameter() {
		Opt_bind_parameterContext _localctx = new Opt_bind_parameterContext(Context, State);
		EnterRule(_localctx, 146, RULE_opt_bind_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			bind_parameter();
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 1619;
				Match(QUESTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Bind_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBind_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBind_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameter_listContext bind_parameter_list() {
		Bind_parameter_listContext _localctx = new Bind_parameter_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_bind_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			bind_parameter();
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1623;
				Match(COMMA);
				State = 1624;
				bind_parameter();
				}
				}
				State = 1629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Named_bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_bind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_bind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Named_bind_parameterContext named_bind_parameter() {
		Named_bind_parameterContext _localctx = new Named_bind_parameterContext(Context, State);
		EnterRule(_localctx, 150, RULE_named_bind_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			bind_parameter();
			State = 1633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1631;
				Match(AS);
				State = 1632;
				bind_parameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_bind_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameterContext[] named_bind_parameter() {
			return GetRuleContexts<Named_bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameterContext named_bind_parameter(int i) {
			return GetRuleContext<Named_bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Named_bind_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_bind_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_bind_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_bind_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_bind_parameter_listContext named_bind_parameter_list() {
		Named_bind_parameter_listContext _localctx = new Named_bind_parameter_listContext(Context, State);
		EnterRule(_localctx, 152, RULE_named_bind_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635;
			named_bind_parameter();
			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1636;
				Match(COMMA);
				State = 1637;
				named_bind_parameter();
				}
				}
				State = 1642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealContext real() {
			return GetRuleContext<RealContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YQLParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 154, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1643;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				{
				State = 1646;
				integer();
				}
				break;
			case REAL:
				{
				State = 1647;
				real();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure() {
			return GetRuleContext<An_id_pureContext>(0);
		}
		public Type_name_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_simple(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_simpleContext type_name_simple() {
		Type_name_simpleContext _localctx = new Type_name_simpleContext(Context, State);
		EnterRule(_localctx, 156, RULE_type_name_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			an_id_pure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_or_bindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Integer_or_bindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_or_bind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInteger_or_bind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInteger_or_bind(this);
		}
	}

	[RuleVersion(0)]
	public Integer_or_bindContext integer_or_bind() {
		Integer_or_bindContext _localctx = new Integer_or_bindContext(Context, State);
		EnterRule(_localctx, 158, RULE_integer_or_bind);
		try {
			State = 1654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1652;
				integer();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Type_name_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tag(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_tagContext type_name_tag() {
		Type_name_tagContext _localctx = new Type_name_tagContext(Context, State);
		EnterRule(_localctx, 160, RULE_type_name_tag);
		try {
			State = 1659;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1656;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1657;
				Match(STRING_VALUE);
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1658;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		public Struct_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_arg(this);
		}
	}

	[RuleVersion(0)]
	public Struct_argContext struct_arg() {
		Struct_argContext _localctx = new Struct_argContext(Context, State);
		EnterRule(_localctx, 162, RULE_struct_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			type_name_tag();
			State = 1662;
			Match(COLON);
			State = 1663;
			type_name_or_bind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_arg_positionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Struct_arg_positionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_arg_positional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_arg_positional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_arg_positional(this);
		}
	}

	[RuleVersion(0)]
	public Struct_arg_positionalContext struct_arg_positional() {
		Struct_arg_positionalContext _localctx = new Struct_arg_positionalContext(Context, State);
		EnterRule(_localctx, 164, RULE_struct_arg_positional);
		int _la;
		try {
			State = 1677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1665;
				type_name_tag();
				State = 1666;
				type_name_or_bind();
				State = 1671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT || _la==NULL) {
					{
					State = 1668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 1667;
						Match(NOT);
						}
					}

					State = 1670;
					Match(NULL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1673;
				type_name_or_bind();
				State = 1674;
				Match(AS);
				State = 1675;
				type_name_tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		public Variant_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterVariant_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitVariant_arg(this);
		}
	}

	[RuleVersion(0)]
	public Variant_argContext variant_arg() {
		Variant_argContext _localctx = new Variant_argContext(Context, State);
		EnterRule(_localctx, 166, RULE_variant_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1679;
				type_name_tag();
				State = 1680;
				Match(COLON);
				}
				break;
			}
			State = 1684;
			type_name_or_bind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext variant_arg() {
			return GetRuleContext<Variant_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMAP() { return GetToken(YQLParser.AUTOMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		public Callable_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCallable_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCallable_arg(this);
		}
	}

	[RuleVersion(0)]
	public Callable_argContext callable_arg() {
		Callable_argContext _localctx = new Callable_argContext(Context, State);
		EnterRule(_localctx, 168, RULE_callable_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			variant_arg();
			State = 1690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE_CURLY) {
				{
				State = 1687;
				Match(LBRACE_CURLY);
				State = 1688;
				Match(AUTOMAP);
				State = 1689;
				Match(RBRACE_CURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Callable_argContext[] callable_arg() {
			return GetRuleContexts<Callable_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callable_argContext callable_arg(int i) {
			return GetRuleContext<Callable_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Callable_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCallable_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCallable_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Callable_arg_listContext callable_arg_list() {
		Callable_arg_listContext _localctx = new Callable_arg_listContext(Context, State);
		EnterRule(_localctx, 170, RULE_callable_arg_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692;
			callable_arg();
			State = 1697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1693;
					Match(COMMA);
					State = 1694;
					callable_arg();
					}
					} 
				}
				State = 1699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_decimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_or_bindContext[] integer_or_bind() {
			return GetRuleContexts<Integer_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_or_bindContext integer_or_bind(int i) {
			return GetRuleContext<Integer_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Type_name_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_decimal(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_decimalContext type_name_decimal() {
		Type_name_decimalContext _localctx = new Type_name_decimalContext(Context, State);
		EnterRule(_localctx, 172, RULE_type_name_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			Match(DECIMAL);
			State = 1701;
			Match(LPAREN);
			State = 1702;
			integer_or_bind();
			State = 1703;
			Match(COMMA);
			State = 1704;
			integer_or_bind();
			State = 1705;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_optionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_optionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_optional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_optional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_optional(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_optionalContext type_name_optional() {
		Type_name_optionalContext _localctx = new Type_name_optionalContext(Context, State);
		EnterRule(_localctx, 174, RULE_type_name_optional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707;
			Match(OPTIONAL);
			State = 1708;
			Match(LESS);
			State = 1709;
			type_name_or_bind();
			State = 1710;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_tupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE() { return GetToken(YQLParser.TUPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2() { return GetToken(YQLParser.NOT_EQUALS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext[] type_name_or_bind() {
			return GetRuleContexts<Type_name_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind(int i) {
			return GetRuleContext<Type_name_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tuple(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_tupleContext type_name_tuple() {
		Type_name_tupleContext _localctx = new Type_name_tupleContext(Context, State);
		EnterRule(_localctx, 176, RULE_type_name_tuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712;
			Match(TUPLE);
			State = 1729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS:
				{
				State = 1713;
				Match(LESS);
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLLAR || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1126037480013825L) != 0) || _la==FLOW || _la==LIST || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & 1152921642045800449L) != 0) || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 985299861639171L) != 0)) {
					{
					State = 1714;
					type_name_or_bind();
					State = 1719;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1715;
							Match(COMMA);
							State = 1716;
							type_name_or_bind();
							}
							} 
						}
						State = 1721;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
					}
					State = 1723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1722;
						Match(COMMA);
						}
					}

					}
				}

				State = 1727;
				Match(GREATER);
				}
				break;
			case NOT_EQUALS2:
				{
				State = 1728;
				Match(NOT_EQUALS2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_structContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(YQLParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2() { return GetToken(YQLParser.NOT_EQUALS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_argContext[] struct_arg() {
			return GetRuleContexts<Struct_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_argContext struct_arg(int i) {
			return GetRuleContext<Struct_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_structContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_struct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_struct(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_structContext type_name_struct() {
		Type_name_structContext _localctx = new Type_name_structContext(Context, State);
		EnterRule(_localctx, 178, RULE_type_name_struct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1731;
			Match(STRUCT);
			State = 1748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS:
				{
				State = 1732;
				Match(LESS);
				State = 1744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -137707389183L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -4535493854209L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -4503599644147713L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -72339069050290177L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 2198754807799L) != 0)) {
					{
					State = 1733;
					struct_arg();
					State = 1738;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1734;
							Match(COMMA);
							State = 1735;
							struct_arg();
							}
							} 
						}
						State = 1740;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
					}
					State = 1742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1741;
						Match(COMMA);
						}
					}

					}
				}

				State = 1746;
				Match(GREATER);
				}
				break;
			case NOT_EQUALS2:
				{
				State = 1747;
				Match(NOT_EQUALS2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_variantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext[] variant_arg() {
			return GetRuleContexts<Variant_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext variant_arg(int i) {
			return GetRuleContext<Variant_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_variantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_variant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_variant(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_variantContext type_name_variant() {
		Type_name_variantContext _localctx = new Type_name_variantContext(Context, State);
		EnterRule(_localctx, 180, RULE_type_name_variant);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750;
			Match(VARIANT);
			State = 1751;
			Match(LESS);
			State = 1752;
			variant_arg();
			State = 1757;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1753;
					Match(COMMA);
					State = 1754;
					variant_arg();
					}
					} 
				}
				State = 1759;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			State = 1761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1760;
				Match(COMMA);
				}
			}

			State = 1763;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 182, RULE_type_name_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			Match(LIST);
			State = 1766;
			Match(LESS);
			State = 1767;
			type_name_or_bind();
			State = 1768;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_streamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_streamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_stream; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_stream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_stream(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_streamContext type_name_stream() {
		Type_name_streamContext _localctx = new Type_name_streamContext(Context, State);
		EnterRule(_localctx, 184, RULE_type_name_stream);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770;
			Match(STREAM);
			State = 1771;
			Match(LESS);
			State = 1772;
			type_name_or_bind();
			State = 1773;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_flowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(YQLParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_flowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_flow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_flow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_flow(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_flowContext type_name_flow() {
		Type_name_flowContext _localctx = new Type_name_flowContext(Context, State);
		EnterRule(_localctx, 186, RULE_type_name_flow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			Match(FLOW);
			State = 1776;
			Match(LESS);
			State = 1777;
			type_name_or_bind();
			State = 1778;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_dictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext[] type_name_or_bind() {
			return GetRuleContexts<Type_name_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind(int i) {
			return GetRuleContext<Type_name_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_dictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_dict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_dict(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_dictContext type_name_dict() {
		Type_name_dictContext _localctx = new Type_name_dictContext(Context, State);
		EnterRule(_localctx, 188, RULE_type_name_dict);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			Match(DICT);
			State = 1781;
			Match(LESS);
			State = 1782;
			type_name_or_bind();
			State = 1783;
			Match(COMMA);
			State = 1784;
			type_name_or_bind();
			State = 1785;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_set(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_setContext type_name_set() {
		Type_name_setContext _localctx = new Type_name_setContext(Context, State);
		EnterRule(_localctx, 190, RULE_type_name_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			Match(SET);
			State = 1788;
			Match(LESS);
			State = 1789;
			type_name_or_bind();
			State = 1790;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext[] type_name_tag() {
			return GetRuleContexts<Type_name_tagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag(int i) {
			return GetRuleContext<Type_name_tagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_enum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_enum(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_enumContext type_name_enum() {
		Type_name_enumContext _localctx = new Type_name_enumContext(Context, State);
		EnterRule(_localctx, 192, RULE_type_name_enum);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			Match(ENUM);
			State = 1793;
			Match(LESS);
			State = 1794;
			type_name_tag();
			State = 1799;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1795;
					Match(COMMA);
					State = 1796;
					type_name_tag();
					}
					} 
				}
				State = 1801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1802;
				Match(COMMA);
				}
			}

			State = 1805;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_resourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_resourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_resource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_resource(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_resourceContext type_name_resource() {
		Type_name_resourceContext _localctx = new Type_name_resourceContext(Context, State);
		EnterRule(_localctx, 194, RULE_type_name_resource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807;
			Match(RESOURCE);
			State = 1808;
			Match(LESS);
			State = 1809;
			type_name_tag();
			State = 1810;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_taggedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGGED() { return GetToken(YQLParser.TAGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_taggedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tagged; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tagged(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tagged(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_taggedContext type_name_tagged() {
		Type_name_taggedContext _localctx = new Type_name_taggedContext(Context, State);
		EnterRule(_localctx, 196, RULE_type_name_tagged);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			Match(TAGGED);
			State = 1813;
			Match(LESS);
			State = 1814;
			type_name_or_bind();
			State = 1815;
			Match(COMMA);
			State = 1816;
			type_name_tag();
			State = 1817;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_callableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(YQLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Callable_arg_listContext[] callable_arg_list() {
			return GetRuleContexts<Callable_arg_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callable_arg_listContext callable_arg_list(int i) {
			return GetRuleContext<Callable_arg_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		public Type_name_callableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_callable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_callable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_callable(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_callableContext type_name_callable() {
		Type_name_callableContext _localctx = new Type_name_callableContext(Context, State);
		EnterRule(_localctx, 198, RULE_type_name_callable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819;
			Match(CALLABLE);
			State = 1820;
			Match(LESS);
			State = 1821;
			Match(LPAREN);
			State = 1823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -268435711L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -137438953473L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -1L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -2097153L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 2199023251455L) != 0)) {
				{
				State = 1822;
				callable_arg_list();
				}
			}

			State = 1826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1825;
				Match(COMMA);
				}
			}

			State = 1832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE_SQUARE) {
				{
				State = 1828;
				Match(LBRACE_SQUARE);
				State = 1829;
				callable_arg_list();
				State = 1830;
				Match(RBRACE_SQUARE);
				}
			}

			State = 1834;
			Match(RPAREN);
			State = 1835;
			Match(ARROW);
			State = 1836;
			type_name_or_bind();
			State = 1837;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_compositeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_optionalContext type_name_optional() {
			return GetRuleContext<Type_name_optionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tupleContext type_name_tuple() {
			return GetRuleContext<Type_name_tupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_structContext type_name_struct() {
			return GetRuleContext<Type_name_structContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_variantContext type_name_variant() {
			return GetRuleContext<Type_name_variantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_streamContext type_name_stream() {
			return GetRuleContext<Type_name_streamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_flowContext type_name_flow() {
			return GetRuleContext<Type_name_flowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_dictContext type_name_dict() {
			return GetRuleContext<Type_name_dictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_setContext type_name_set() {
			return GetRuleContext<Type_name_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_enumContext type_name_enum() {
			return GetRuleContext<Type_name_enumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_resourceContext type_name_resource() {
			return GetRuleContext<Type_name_resourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_taggedContext type_name_tagged() {
			return GetRuleContext<Type_name_taggedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_callableContext type_name_callable() {
			return GetRuleContext<Type_name_callableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Type_name_compositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_composite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_composite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_composite(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_compositeContext type_name_composite() {
		Type_name_compositeContext _localctx = new Type_name_compositeContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_name_composite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONAL:
				{
				State = 1839;
				type_name_optional();
				}
				break;
			case TUPLE:
				{
				State = 1840;
				type_name_tuple();
				}
				break;
			case STRUCT:
				{
				State = 1841;
				type_name_struct();
				}
				break;
			case VARIANT:
				{
				State = 1842;
				type_name_variant();
				}
				break;
			case LIST:
				{
				State = 1843;
				type_name_list();
				}
				break;
			case STREAM:
				{
				State = 1844;
				type_name_stream();
				}
				break;
			case FLOW:
				{
				State = 1845;
				type_name_flow();
				}
				break;
			case DICT:
				{
				State = 1846;
				type_name_dict();
				}
				break;
			case SET:
				{
				State = 1847;
				type_name_set();
				}
				break;
			case ENUM:
				{
				State = 1848;
				type_name_enum();
				}
				break;
			case RESOURCE:
				{
				State = 1849;
				type_name_resource();
				}
				break;
			case TAGGED:
				{
				State = 1850;
				type_name_tagged();
				}
				break;
			case CALLABLE:
				{
				State = 1851;
				type_name_callable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QUESTION) {
				{
				{
				State = 1854;
				Match(QUESTION);
				}
				}
				State = 1859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_compositeContext type_name_composite() {
			return GetRuleContext<Type_name_compositeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_decimalContext type_name_decimal() {
			return GetRuleContext<Type_name_decimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 202, RULE_type_name);
		int _la;
		try {
			State = 1871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STREAM:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1860;
				type_name_composite();
				}
				break;
			case DECIMAL:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1863;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 1861;
					type_name_decimal();
					}
					break;
				case STRING_VALUE:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1862;
					type_name_simple();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==QUESTION) {
					{
					{
					State = 1865;
					Match(QUESTION);
					}
					}
					State = 1870;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_or_bindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Type_name_or_bindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_or_bind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_or_bind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_or_bind(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_or_bindContext type_name_or_bind() {
		Type_name_or_bindContext _localctx = new Type_name_or_bindContext(Context, State);
		EnterRule(_localctx, 204, RULE_type_name_or_bind);
		try {
			State = 1875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLABLE:
			case DECIMAL:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STREAM:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1873;
				type_name();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1874;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_constructor_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Value_constructor_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_constructor_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValue_constructor_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValue_constructor_literal(this);
		}
	}

	[RuleVersion(0)]
	public Value_constructor_literalContext value_constructor_literal() {
		Value_constructor_literalContext _localctx = new Value_constructor_literalContext(Context, State);
		EnterRule(_localctx, 206, RULE_value_constructor_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		public Value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValue_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValue_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Value_constructorContext value_constructor() {
		Value_constructorContext _localctx = new Value_constructorContext(Context, State);
		EnterRule(_localctx, 208, RULE_value_constructor);
		try {
			State = 1902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1879;
				Match(VARIANT);
				State = 1880;
				Match(LPAREN);
				State = 1881;
				expr();
				State = 1882;
				Match(COMMA);
				State = 1883;
				expr();
				State = 1884;
				Match(COMMA);
				State = 1885;
				expr();
				State = 1886;
				Match(RPAREN);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1888;
				Match(ENUM);
				State = 1889;
				Match(LPAREN);
				State = 1890;
				expr();
				State = 1891;
				Match(COMMA);
				State = 1892;
				expr();
				State = 1893;
				Match(RPAREN);
				}
				break;
			case CALLABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1895;
				Match(CALLABLE);
				State = 1896;
				Match(LPAREN);
				State = 1897;
				expr();
				State = 1898;
				Match(COMMA);
				State = 1899;
				expr();
				State = 1900;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDeclare_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDeclare_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Declare_stmtContext declare_stmt() {
		Declare_stmtContext _localctx = new Declare_stmtContext(Context, State);
		EnterRule(_localctx, 210, RULE_declare_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			Match(DECLARE);
			State = 1905;
			bind_parameter();
			State = 1906;
			Match(AS);
			State = 1907;
			type_name();
			State = 1910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 1908;
				Match(EQUALS);
				State = 1909;
				literal_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(YQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(YQLParser.DOT, i);
		}
		public Module_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterModule_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitModule_path(this);
		}
	}

	[RuleVersion(0)]
	public Module_pathContext module_path() {
		Module_pathContext _localctx = new Module_pathContext(Context, State);
		EnterRule(_localctx, 212, RULE_module_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 1912;
				Match(DOT);
				}
			}

			State = 1915;
			an_id();
			State = 1920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1916;
				Match(DOT);
				State = 1917;
				an_id();
				}
				}
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_pathContext module_path() {
			return GetRuleContext<Module_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameter_listContext named_bind_parameter_list() {
			return GetRuleContext<Named_bind_parameter_listContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 214, RULE_import_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			Match(IMPORT);
			State = 1924;
			module_path();
			State = 1925;
			Match(SYMBOLS);
			State = 1926;
			named_bind_parameter_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameter_listContext bind_parameter_list() {
			return GetRuleContext<Bind_parameter_listContext>(0);
		}
		public Export_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Export_stmtContext export_stmt() {
		Export_stmtContext _localctx = new Export_stmtContext(Context, State);
		EnterRule(_localctx, 216, RULE_export_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928;
			Match(EXPORT);
			State = 1929;
			bind_parameter_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Call_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCall_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCall_action(this);
		}
	}

	[RuleVersion(0)]
	public Call_actionContext call_action() {
		Call_actionContext _localctx = new Call_actionContext(Context, State);
		EnterRule(_localctx, 218, RULE_call_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				{
				State = 1931;
				bind_parameter();
				}
				break;
			case EMPTY_ACTION:
				{
				State = 1932;
				Match(EMPTY_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1935;
			Match(LPAREN);
			State = 1937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
				{
				State = 1936;
				expr_list();
				}
			}

			State = 1939;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
			return GetRuleContext<Define_action_or_subquery_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		public Inline_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInline_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInline_action(this);
		}
	}

	[RuleVersion(0)]
	public Inline_actionContext inline_action() {
		Inline_actionContext _localctx = new Inline_actionContext(Context, State);
		EnterRule(_localctx, 220, RULE_inline_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941;
			Match(BEGIN);
			State = 1942;
			define_action_or_subquery_body();
			State = 1943;
			Match(END);
			State = 1944;
			Match(DO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_actionContext call_action() {
			return GetRuleContext<Call_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_actionContext inline_action() {
			return GetRuleContext<Inline_actionContext>(0);
		}
		public Do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDo_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDo_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Do_stmtContext do_stmt() {
		Do_stmtContext _localctx = new Do_stmtContext(Context, State);
		EnterRule(_localctx, 222, RULE_do_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946;
			Match(DO);
			State = 1949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
			case EMPTY_ACTION:
				{
				State = 1947;
				call_action();
				}
				break;
			case BEGIN:
				{
				State = 1948;
				inline_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefix_or_typeContext opt_id_prefix_or_type() {
			return GetRuleContext<Opt_id_prefix_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext[] pragma_value() {
			return GetRuleContexts<Pragma_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext pragma_value(int i) {
			return GetRuleContext<Pragma_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 224, RULE_pragma_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951;
			Match(PRAGMA);
			State = 1952;
			opt_id_prefix_or_type();
			State = 1953;
			an_id();
			State = 1967;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS:
				{
				State = 1954;
				Match(EQUALS);
				State = 1955;
				pragma_value();
				}
				break;
			case LPAREN:
				{
				State = 1956;
				Match(LPAREN);
				State = 1957;
				pragma_value();
				State = 1962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1958;
					Match(COMMA);
					State = 1959;
					pragma_value();
					}
					}
					State = 1964;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1965;
				Match(RPAREN);
				}
				break;
			case Eof:
			case SEMICOLON:
			case END:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 226, RULE_pragma_value);
		try {
			State = 1974;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case DIGITS:
			case INTEGER_VALUE:
			case REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1969;
				signed_number();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1971;
				Match(STRING_VALUE);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1972;
				bool_value();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1973;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		public Sort_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSort_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSort_specification(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specificationContext sort_specification() {
		Sort_specificationContext _localctx = new Sort_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_sort_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976;
			expr();
			State = 1978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1977;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specification_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specificationContext[] sort_specification() {
			return GetRuleContexts<Sort_specificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specificationContext sort_specification(int i) {
			return GetRuleContext<Sort_specificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Sort_specification_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specification_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSort_specification_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSort_specification_list(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specification_listContext sort_specification_list() {
		Sort_specification_listContext _localctx = new Sort_specification_listContext(Context, State);
		EnterRule(_localctx, 230, RULE_sort_specification_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			sort_specification();
			State = 1985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1981;
				Match(COMMA);
				State = 1982;
				sort_specification();
				}
				}
				State = 1987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext[] select_kind_parenthesis() {
			return GetRuleContexts<Select_kind_parenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext select_kind_parenthesis(int i) {
			return GetRuleContext<Select_kind_parenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext[] select_op() {
			return GetRuleContexts<Select_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext select_op(int i) {
			return GetRuleContext<Select_opContext>(i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 232, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			select_kind_parenthesis();
			State = 1994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				State = 1989;
				select_op();
				State = 1990;
				select_kind_parenthesis();
				}
				}
				State = 1996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_unparenthesized_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_partialContext select_kind_partial() {
			return GetRuleContext<Select_kind_partialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext[] select_op() {
			return GetRuleContexts<Select_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext select_op(int i) {
			return GetRuleContext<Select_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext[] select_kind_parenthesis() {
			return GetRuleContexts<Select_kind_parenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext select_kind_parenthesis(int i) {
			return GetRuleContext<Select_kind_parenthesisContext>(i);
		}
		public Select_unparenthesized_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_unparenthesized_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_unparenthesized_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_unparenthesized_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_unparenthesized_stmtContext select_unparenthesized_stmt() {
		Select_unparenthesized_stmtContext _localctx = new Select_unparenthesized_stmtContext(Context, State);
		EnterRule(_localctx, 234, RULE_select_unparenthesized_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997;
			select_kind_partial();
			State = 2003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				State = 1998;
				select_op();
				State = 1999;
				select_kind_parenthesis();
				}
				}
				State = 2005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kind_parenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_partialContext select_kind_partial() {
			return GetRuleContext<Select_kind_partialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Select_kind_parenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind_parenthesis(this);
		}
	}

	[RuleVersion(0)]
	public Select_kind_parenthesisContext select_kind_parenthesis() {
		Select_kind_parenthesisContext _localctx = new Select_kind_parenthesisContext(Context, State);
		EnterRule(_localctx, 236, RULE_select_kind_parenthesis);
		try {
			State = 2011;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2006;
				select_kind_partial();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2007;
				Match(LPAREN);
				State = 2008;
				select_kind_partial();
				State = 2009;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(YQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(YQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(YQLParser.EXCEPT, 0); }
		public Select_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_op(this);
		}
	}

	[RuleVersion(0)]
	public Select_opContext select_op() {
		Select_opContext _localctx = new Select_opContext(Context, State);
		EnterRule(_localctx, 238, RULE_select_op);
		int _la;
		try {
			State = 2019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2013;
				Match(UNION);
				State = 2015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 2014;
					Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2017;
				Match(INTERSECT);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2018;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kind_partialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kindContext select_kind() {
			return GetRuleContext<Select_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(YQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Select_kind_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind_partial; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind_partial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind_partial(this);
		}
	}

	[RuleVersion(0)]
	public Select_kind_partialContext select_kind_partial() {
		Select_kind_partialContext _localctx = new Select_kind_partialContext(Context, State);
		EnterRule(_localctx, 240, RULE_select_kind_partial);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			select_kind();
			State = 2028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 2022;
				Match(LIMIT);
				State = 2023;
				expr();
				State = 2026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==OFFSET) {
					{
					State = 2024;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2025;
					expr();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_coreContext process_core() {
			return GetRuleContext<Process_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reduce_coreContext reduce_core() {
			return GetRuleContext<Reduce_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(YQLParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named() {
			return GetRuleContext<Pure_column_or_namedContext>(0);
		}
		public Select_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind(this);
		}
	}

	[RuleVersion(0)]
	public Select_kindContext select_kind() {
		Select_kindContext _localctx = new Select_kindContext(Context, State);
		EnterRule(_localctx, 242, RULE_select_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISCARD) {
				{
				State = 2030;
				Match(DISCARD);
				}
			}

			State = 2036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCESS:
				{
				State = 2033;
				process_core();
				}
				break;
			case REDUCE:
				{
				State = 2034;
				reduce_core();
				}
				break;
			case FROM:
			case SELECT:
				{
				State = 2035;
				select_core();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2038;
				Match(INTO);
				State = 2039;
				Match(RESULT);
				State = 2040;
				pure_column_or_named();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(YQLParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext[] named_single_source() {
			return GetRuleContexts<Named_single_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source(int i) {
			return GetRuleContext<Named_single_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Using_call_exprContext using_call_expr() {
			return GetRuleContext<Using_call_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_call_settingsContext external_call_settings() {
			return GetRuleContext<External_call_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Process_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterProcess_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitProcess_core(this);
		}
	}

	[RuleVersion(0)]
	public Process_coreContext process_core() {
		Process_coreContext _localctx = new Process_coreContext(Context, State);
		EnterRule(_localctx, 244, RULE_process_core);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2043;
			Match(PROCESS);
			State = 2045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2044;
				Match(STREAM);
				}
				break;
			}
			State = 2047;
			named_single_source();
			State = 2052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2048;
				Match(COMMA);
				State = 2049;
				named_single_source();
				}
				}
				State = 2054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 2055;
				Match(USING);
				State = 2056;
				using_call_expr();
				State = 2059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2057;
					Match(AS);
					State = 2058;
					an_id();
					}
				}

				State = 2063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2061;
					Match(WITH);
					State = 2062;
					external_call_settings();
					}
				}

				State = 2067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2065;
					Match(WHERE);
					State = 2066;
					expr();
					}
				}

				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 2069;
					Match(HAVING);
					State = 2070;
					expr();
					}
				}

				State = 2075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSUME) {
					{
					State = 2073;
					Match(ASSUME);
					State = 2074;
					order_by_clause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_call_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public External_call_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_call_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExternal_call_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExternal_call_param(this);
		}
	}

	[RuleVersion(0)]
	public External_call_paramContext external_call_param() {
		External_call_paramContext _localctx = new External_call_paramContext(Context, State);
		EnterRule(_localctx, 246, RULE_external_call_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			an_id();
			State = 2080;
			Match(EQUALS);
			State = 2081;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_call_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_call_paramContext[] external_call_param() {
			return GetRuleContexts<External_call_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_call_paramContext external_call_param(int i) {
			return GetRuleContext<External_call_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public External_call_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_call_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExternal_call_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExternal_call_settings(this);
		}
	}

	[RuleVersion(0)]
	public External_call_settingsContext external_call_settings() {
		External_call_settingsContext _localctx = new External_call_settingsContext(Context, State);
		EnterRule(_localctx, 248, RULE_external_call_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2083;
			external_call_param();
			State = 2088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2084;
				Match(COMMA);
				State = 2085;
				external_call_param();
				}
				}
				State = 2090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reduce_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(YQLParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext[] named_single_source() {
			return GetRuleContexts<Named_single_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source(int i) {
			return GetRuleContext<Named_single_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Using_call_exprContext using_call_expr() {
			return GetRuleContext<Using_call_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESORT() { return GetToken(YQLParser.PRESORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specification_listContext sort_specification_list() {
			return GetRuleContext<Sort_specification_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Reduce_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reduce_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReduce_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReduce_core(this);
		}
	}

	[RuleVersion(0)]
	public Reduce_coreContext reduce_core() {
		Reduce_coreContext _localctx = new Reduce_coreContext(Context, State);
		EnterRule(_localctx, 250, RULE_reduce_core);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2091;
			Match(REDUCE);
			State = 2092;
			named_single_source();
			State = 2097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2093;
				Match(COMMA);
				State = 2094;
				named_single_source();
				}
				}
				State = 2099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRESORT) {
				{
				State = 2100;
				Match(PRESORT);
				State = 2101;
				sort_specification_list();
				}
			}

			State = 2104;
			Match(ON);
			State = 2105;
			column_list();
			State = 2106;
			Match(USING);
			State = 2108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2107;
				Match(ALL);
				}
				break;
			}
			State = 2110;
			using_call_expr();
			State = 2113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2111;
				Match(AS);
				State = 2112;
				an_id();
				}
			}

			State = 2117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2115;
				Match(WHERE);
				State = 2116;
				expr();
				}
			}

			State = 2121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 2119;
				Match(HAVING);
				State = 2120;
				expr();
				}
			}

			State = 2125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME) {
				{
				State = 2123;
				Match(ASSUME);
				State = 2124;
				order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_set_quantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		public Opt_set_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_set_quantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_set_quantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_set_quantifier(this);
		}
	}

	[RuleVersion(0)]
	public Opt_set_quantifierContext opt_set_quantifier() {
		Opt_set_quantifierContext _localctx = new Opt_set_quantifierContext(Context, State);
		EnterRule(_localctx, 252, RULE_opt_set_quantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				{
				State = 2127;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(YQLParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(YQLParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_sourceContext[] join_source() {
			return GetRuleContexts<Join_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_sourceContext join_source(int i) {
			return GetRuleContext<Join_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_listContext without_column_list() {
			return GetRuleContext<Without_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ext_order_by_clauseContext ext_order_by_clause() {
			return GetRuleContext<Ext_order_by_clauseContext>(0);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 254, RULE_select_core);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2130;
				Match(FROM);
				State = 2131;
				join_source();
				}
			}

			State = 2134;
			Match(SELECT);
			State = 2136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 2135;
				Match(STREAM);
				}
				break;
			}
			State = 2138;
			opt_set_quantifier();
			State = 2139;
			result_column();
			State = 2144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2140;
					Match(COMMA);
					State = 2141;
					result_column();
					}
					} 
				}
				State = 2146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			State = 2148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2147;
				Match(COMMA);
				}
			}

			State = 2152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITHOUT) {
				{
				State = 2150;
				Match(WITHOUT);
				State = 2151;
				without_column_list();
				}
			}

			State = 2156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2154;
				Match(FROM);
				State = 2155;
				join_source();
				}
			}

			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2158;
				Match(WHERE);
				State = 2159;
				expr();
				}
			}

			State = 2163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 2162;
				group_by_clause();
				}
			}

			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 2165;
				Match(HAVING);
				State = 2166;
				expr();
				}
			}

			State = 2170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 2169;
				window_clause();
				}
			}

			State = 2173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME || _la==ORDER) {
				{
				State = 2172;
				ext_order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_recognition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_common_syntaxContext row_pattern_common_syntax() {
			return GetRuleContext<Row_pattern_common_syntaxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_partition_clauseContext window_partition_clause() {
			return GetRuleContext<Window_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measuresContext row_pattern_measures() {
			return GetRuleContext<Row_pattern_measuresContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_rows_per_matchContext row_pattern_rows_per_match() {
			return GetRuleContext<Row_pattern_rows_per_matchContext>(0);
		}
		public Row_pattern_recognition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_recognition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_recognition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_recognition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_recognition_clauseContext row_pattern_recognition_clause() {
		Row_pattern_recognition_clauseContext _localctx = new Row_pattern_recognition_clauseContext(Context, State);
		EnterRule(_localctx, 256, RULE_row_pattern_recognition_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2175;
			Match(MATCH_RECOGNIZE);
			State = 2176;
			Match(LPAREN);
			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2177;
				window_partition_clause();
				}
			}

			State = 2181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2180;
				order_by_clause();
				}
			}

			State = 2184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEASURES) {
				{
				State = 2183;
				row_pattern_measures();
				}
			}

			State = 2187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==ONE) {
				{
				State = 2186;
				row_pattern_rows_per_match();
				}
			}

			State = 2189;
			row_pattern_common_syntax();
			State = 2190;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_rows_per_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_empty_match_handlingContext row_pattern_empty_match_handling() {
			return GetRuleContext<Row_pattern_empty_match_handlingContext>(0);
		}
		public Row_pattern_rows_per_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_rows_per_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_rows_per_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_rows_per_match(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_rows_per_matchContext row_pattern_rows_per_match() {
		Row_pattern_rows_per_matchContext _localctx = new Row_pattern_rows_per_matchContext(Context, State);
		EnterRule(_localctx, 258, RULE_row_pattern_rows_per_match);
		int _la;
		try {
			State = 2203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2192;
				Match(ONE);
				State = 2193;
				Match(ROW);
				State = 2194;
				Match(PER);
				State = 2195;
				Match(MATCH);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2196;
				Match(ALL);
				State = 2197;
				Match(ROWS);
				State = 2198;
				Match(PER);
				State = 2199;
				Match(MATCH);
				State = 2201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OMIT || _la==SHOW || _la==WITH) {
					{
					State = 2200;
					row_pattern_empty_match_handling();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_empty_match_handlingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		public Row_pattern_empty_match_handlingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_empty_match_handling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_empty_match_handling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_empty_match_handling(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_empty_match_handlingContext row_pattern_empty_match_handling() {
		Row_pattern_empty_match_handlingContext _localctx = new Row_pattern_empty_match_handlingContext(Context, State);
		EnterRule(_localctx, 260, RULE_row_pattern_empty_match_handling);
		try {
			State = 2214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2205;
				Match(SHOW);
				State = 2206;
				Match(EMPTY);
				State = 2207;
				Match(MATCHES);
				}
				break;
			case OMIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2208;
				Match(OMIT);
				State = 2209;
				Match(EMPTY);
				State = 2210;
				Match(MATCHES);
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2211;
				Match(WITH);
				State = 2212;
				Match(UNMATCHED);
				State = 2213;
				Match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_listContext row_pattern_measure_list() {
			return GetRuleContext<Row_pattern_measure_listContext>(0);
		}
		public Row_pattern_measuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measures(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measuresContext row_pattern_measures() {
		Row_pattern_measuresContext _localctx = new Row_pattern_measuresContext(Context, State);
		EnterRule(_localctx, 262, RULE_row_pattern_measures);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216;
			Match(MEASURES);
			State = 2217;
			row_pattern_measure_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measure_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_definitionContext[] row_pattern_measure_definition() {
			return GetRuleContexts<Row_pattern_measure_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_definitionContext row_pattern_measure_definition(int i) {
			return GetRuleContext<Row_pattern_measure_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_measure_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measure_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measure_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measure_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measure_listContext row_pattern_measure_list() {
		Row_pattern_measure_listContext _localctx = new Row_pattern_measure_listContext(Context, State);
		EnterRule(_localctx, 264, RULE_row_pattern_measure_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219;
			row_pattern_measure_definition();
			State = 2224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2220;
				Match(COMMA);
				State = 2221;
				row_pattern_measure_definition();
				}
				}
				State = 2226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measure_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Row_pattern_measure_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measure_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measure_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measure_definition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measure_definitionContext row_pattern_measure_definition() {
		Row_pattern_measure_definitionContext _localctx = new Row_pattern_measure_definitionContext(Context, State);
		EnterRule(_localctx, 266, RULE_row_pattern_measure_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227;
			expr();
			State = 2228;
			Match(AS);
			State = 2229;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_common_syntaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern() {
			return GetRuleContext<Row_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(YQLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_listContext row_pattern_definition_list() {
			return GetRuleContext<Row_pattern_definition_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_skip_toContext row_pattern_skip_to() {
			return GetRuleContext<Row_pattern_skip_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_initial_or_seekContext row_pattern_initial_or_seek() {
			return GetRuleContext<Row_pattern_initial_or_seekContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_clauseContext row_pattern_subset_clause() {
			return GetRuleContext<Row_pattern_subset_clauseContext>(0);
		}
		public Row_pattern_common_syntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_common_syntax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_common_syntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_common_syntax(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_common_syntaxContext row_pattern_common_syntax() {
		Row_pattern_common_syntaxContext _localctx = new Row_pattern_common_syntaxContext(Context, State);
		EnterRule(_localctx, 268, RULE_row_pattern_common_syntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 2231;
				Match(AFTER);
				State = 2232;
				Match(MATCH);
				State = 2233;
				row_pattern_skip_to();
				}
			}

			State = 2237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL || _la==SEEK) {
				{
				State = 2236;
				row_pattern_initial_or_seek();
				}
			}

			State = 2239;
			Match(PATTERN);
			State = 2240;
			Match(LPAREN);
			State = 2241;
			row_pattern();
			State = 2242;
			Match(RPAREN);
			State = 2244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBSET) {
				{
				State = 2243;
				row_pattern_subset_clause();
				}
			}

			State = 2246;
			Match(DEFINE);
			State = 2247;
			row_pattern_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_skip_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_skip_to_variable_nameContext row_pattern_skip_to_variable_name() {
			return GetRuleContext<Row_pattern_skip_to_variable_nameContext>(0);
		}
		public Row_pattern_skip_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_skip_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_skip_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_skip_to(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_skip_toContext row_pattern_skip_to() {
		Row_pattern_skip_toContext _localctx = new Row_pattern_skip_toContext(Context, State);
		EnterRule(_localctx, 270, RULE_row_pattern_skip_to);
		try {
			State = 2268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2249;
				Match(TSKIP);
				State = 2250;
				Match(TO);
				State = 2251;
				Match(NEXT);
				State = 2252;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2253;
				Match(TSKIP);
				State = 2254;
				Match(PAST);
				State = 2255;
				Match(LAST);
				State = 2256;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2257;
				Match(TSKIP);
				State = 2258;
				Match(TO);
				State = 2259;
				Match(FIRST);
				State = 2260;
				row_pattern_skip_to_variable_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2261;
				Match(TSKIP);
				State = 2262;
				Match(TO);
				State = 2263;
				Match(LAST);
				State = 2264;
				row_pattern_skip_to_variable_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2265;
				Match(TSKIP);
				State = 2266;
				Match(TO);
				State = 2267;
				row_pattern_skip_to_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_skip_to_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_skip_to_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_skip_to_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_skip_to_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_skip_to_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_skip_to_variable_nameContext row_pattern_skip_to_variable_name() {
		Row_pattern_skip_to_variable_nameContext _localctx = new Row_pattern_skip_to_variable_nameContext(Context, State);
		EnterRule(_localctx, 272, RULE_row_pattern_skip_to_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2270;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_initial_or_seekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		public Row_pattern_initial_or_seekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_initial_or_seek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_initial_or_seek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_initial_or_seek(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_initial_or_seekContext row_pattern_initial_or_seek() {
		Row_pattern_initial_or_seekContext _localctx = new Row_pattern_initial_or_seekContext(Context, State);
		EnterRule(_localctx, 274, RULE_row_pattern_initial_or_seek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2272;
			_la = TokenStream.LA(1);
			if ( !(_la==INITIAL || _la==SEEK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_termContext[] row_pattern_term() {
			return GetRuleContexts<Row_pattern_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_termContext row_pattern_term(int i) {
			return GetRuleContext<Row_pattern_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(YQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(YQLParser.PIPE, i);
		}
		public Row_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Row_patternContext row_pattern() {
		Row_patternContext _localctx = new Row_patternContext(Context, State);
		EnterRule(_localctx, 276, RULE_row_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274;
			row_pattern_term();
			State = 2279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 2275;
				Match(PIPE);
				State = 2276;
				row_pattern_term();
				}
				}
				State = 2281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_factorContext[] row_pattern_factor() {
			return GetRuleContexts<Row_pattern_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_factorContext row_pattern_factor(int i) {
			return GetRuleContext<Row_pattern_factorContext>(i);
		}
		public Row_pattern_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_term(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_termContext row_pattern_term() {
		Row_pattern_termContext _localctx = new Row_pattern_termContext(Context, State);
		EnterRule(_localctx, 278, RULE_row_pattern_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2282;
				row_pattern_factor();
				}
				}
				State = 2285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11844714496L) != 0) || _la==PERMUTE || _la==ID_PLAIN || _la==ID_QUOTED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_primaryContext row_pattern_primary() {
			return GetRuleContext<Row_pattern_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_quantifierContext row_pattern_quantifier() {
			return GetRuleContext<Row_pattern_quantifierContext>(0);
		}
		public Row_pattern_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_factor(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_factorContext row_pattern_factor() {
		Row_pattern_factorContext _localctx = new Row_pattern_factorContext(Context, State);
		EnterRule(_localctx, 280, RULE_row_pattern_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			row_pattern_primary();
			State = 2289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2288;
				row_pattern_quantifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_quantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public Row_pattern_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_quantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_quantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_quantifier(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_quantifierContext row_pattern_quantifier() {
		Row_pattern_quantifierContext _localctx = new Row_pattern_quantifierContext(Context, State);
		EnterRule(_localctx, 282, RULE_row_pattern_quantifier);
		int _la;
		try {
			State = 2319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2291;
				Match(ASTERISK);
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2292;
					Match(QUESTION);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2295;
				Match(PLUS);
				State = 2297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2296;
					Match(QUESTION);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2299;
				Match(QUESTION);
				State = 2301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2300;
					Match(QUESTION);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2303;
				Match(LBRACE_CURLY);
				State = 2305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITS || _la==INTEGER_VALUE) {
					{
					State = 2304;
					integer();
					}
				}

				State = 2307;
				Match(COMMA);
				State = 2309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITS || _la==INTEGER_VALUE) {
					{
					State = 2308;
					integer();
					}
				}

				State = 2311;
				Match(RBRACE_CURLY);
				State = 2313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2312;
					Match(QUESTION);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2315;
				Match(LBRACE_CURLY);
				State = 2316;
				integer();
				State = 2317;
				Match(RBRACE_CURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_primary_variable_nameContext row_pattern_primary_variable_name() {
			return GetRuleContext<Row_pattern_primary_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(YQLParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(YQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern() {
			return GetRuleContext<Row_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(YQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(YQLParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_permuteContext row_pattern_permute() {
			return GetRuleContext<Row_pattern_permuteContext>(0);
		}
		public Row_pattern_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_primary(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_primaryContext row_pattern_primary() {
		Row_pattern_primaryContext _localctx = new Row_pattern_primaryContext(Context, State);
		EnterRule(_localctx, 284, RULE_row_pattern_primary);
		int _la;
		try {
			State = 2336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2321;
				row_pattern_primary_variable_name();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2322;
				Match(DOLLAR);
				}
				break;
			case CARET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2323;
				Match(CARET);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2324;
				Match(LPAREN);
				State = 2326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11844714496L) != 0) || _la==PERMUTE || _la==ID_PLAIN || _la==ID_QUOTED) {
					{
					State = 2325;
					row_pattern();
					}
				}

				State = 2328;
				Match(RPAREN);
				}
				break;
			case LBRACE_CURLY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2329;
				Match(LBRACE_CURLY);
				State = 2330;
				Match(MINUS);
				State = 2331;
				row_pattern();
				State = 2332;
				Match(MINUS);
				State = 2333;
				Match(RBRACE_CURLY);
				}
				break;
			case PERMUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2335;
				row_pattern_permute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_primary_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_primary_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_primary_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_primary_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_primary_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_primary_variable_nameContext row_pattern_primary_variable_name() {
		Row_pattern_primary_variable_nameContext _localctx = new Row_pattern_primary_variable_nameContext(Context, State);
		EnterRule(_localctx, 286, RULE_row_pattern_primary_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_permuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext[] row_pattern() {
			return GetRuleContexts<Row_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern(int i) {
			return GetRuleContext<Row_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_permuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_permute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_permute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_permute(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_permuteContext row_pattern_permute() {
		Row_pattern_permuteContext _localctx = new Row_pattern_permuteContext(Context, State);
		EnterRule(_localctx, 288, RULE_row_pattern_permute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340;
			Match(PERMUTE);
			State = 2341;
			Match(LPAREN);
			State = 2342;
			row_pattern();
			State = 2347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2343;
				Match(COMMA);
				State = 2344;
				row_pattern();
				}
				}
				State = 2349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2350;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_listContext row_pattern_subset_list() {
			return GetRuleContext<Row_pattern_subset_listContext>(0);
		}
		public Row_pattern_subset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_clauseContext row_pattern_subset_clause() {
		Row_pattern_subset_clauseContext _localctx = new Row_pattern_subset_clauseContext(Context, State);
		EnterRule(_localctx, 290, RULE_row_pattern_subset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352;
			Match(SUBSET);
			State = 2353;
			row_pattern_subset_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_itemContext[] row_pattern_subset_item() {
			return GetRuleContexts<Row_pattern_subset_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_itemContext row_pattern_subset_item(int i) {
			return GetRuleContext<Row_pattern_subset_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_subset_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_listContext row_pattern_subset_list() {
		Row_pattern_subset_listContext _localctx = new Row_pattern_subset_listContext(Context, State);
		EnterRule(_localctx, 292, RULE_row_pattern_subset_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355;
			row_pattern_subset_item();
			State = 2360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2356;
				Match(COMMA);
				State = 2357;
				row_pattern_subset_item();
				}
				}
				State = 2362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_item_variable_nameContext row_pattern_subset_item_variable_name() {
			return GetRuleContext<Row_pattern_subset_item_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhsContext row_pattern_subset_rhs() {
			return GetRuleContext<Row_pattern_subset_rhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Row_pattern_subset_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_item(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_itemContext row_pattern_subset_item() {
		Row_pattern_subset_itemContext _localctx = new Row_pattern_subset_itemContext(Context, State);
		EnterRule(_localctx, 294, RULE_row_pattern_subset_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			row_pattern_subset_item_variable_name();
			State = 2364;
			Match(EQUALS);
			State = 2365;
			Match(LPAREN);
			State = 2366;
			row_pattern_subset_rhs();
			State = 2367;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_item_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_subset_item_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_item_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_item_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_item_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_item_variable_nameContext row_pattern_subset_item_variable_name() {
		Row_pattern_subset_item_variable_nameContext _localctx = new Row_pattern_subset_item_variable_nameContext(Context, State);
		EnterRule(_localctx, 296, RULE_row_pattern_subset_item_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_rhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhs_variable_nameContext[] row_pattern_subset_rhs_variable_name() {
			return GetRuleContexts<Row_pattern_subset_rhs_variable_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhs_variable_nameContext row_pattern_subset_rhs_variable_name(int i) {
			return GetRuleContext<Row_pattern_subset_rhs_variable_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_subset_rhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_rhs(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_rhsContext row_pattern_subset_rhs() {
		Row_pattern_subset_rhsContext _localctx = new Row_pattern_subset_rhsContext(Context, State);
		EnterRule(_localctx, 298, RULE_row_pattern_subset_rhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371;
			row_pattern_subset_rhs_variable_name();
			State = 2376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2372;
				Match(COMMA);
				State = 2373;
				row_pattern_subset_rhs_variable_name();
				}
				}
				State = 2378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_rhs_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_subset_rhs_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_rhs_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_rhs_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_rhs_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_rhs_variable_nameContext row_pattern_subset_rhs_variable_name() {
		Row_pattern_subset_rhs_variable_nameContext _localctx = new Row_pattern_subset_rhs_variable_nameContext(Context, State);
		EnterRule(_localctx, 300, RULE_row_pattern_subset_rhs_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2379;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definitionContext[] row_pattern_definition() {
			return GetRuleContexts<Row_pattern_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definitionContext row_pattern_definition(int i) {
			return GetRuleContext<Row_pattern_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_listContext row_pattern_definition_list() {
		Row_pattern_definition_listContext _localctx = new Row_pattern_definition_listContext(Context, State);
		EnterRule(_localctx, 302, RULE_row_pattern_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			row_pattern_definition();
			State = 2386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2382;
				Match(COMMA);
				State = 2383;
				row_pattern_definition();
				}
				}
				State = 2388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_variable_nameContext row_pattern_definition_variable_name() {
			return GetRuleContext<Row_pattern_definition_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_search_conditionContext row_pattern_definition_search_condition() {
			return GetRuleContext<Row_pattern_definition_search_conditionContext>(0);
		}
		public Row_pattern_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definitionContext row_pattern_definition() {
		Row_pattern_definitionContext _localctx = new Row_pattern_definitionContext(Context, State);
		EnterRule(_localctx, 304, RULE_row_pattern_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			row_pattern_definition_variable_name();
			State = 2390;
			Match(AS);
			State = 2391;
			row_pattern_definition_search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_definition_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_variable_nameContext row_pattern_definition_variable_name() {
		Row_pattern_definition_variable_nameContext _localctx = new Row_pattern_definition_variable_nameContext(Context, State);
		EnterRule(_localctx, 306, RULE_row_pattern_definition_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_search_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Row_pattern_definition_search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_search_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_search_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_search_condition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_search_conditionContext row_pattern_definition_search_condition() {
		Row_pattern_definition_search_conditionContext _localctx = new Row_pattern_definition_search_conditionContext(Context, State);
		EnterRule(_localctx, 308, RULE_row_pattern_definition_search_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2395;
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 310, RULE_search_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Row_pattern_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_variable_nameContext row_pattern_variable_name() {
		Row_pattern_variable_nameContext _localctx = new Row_pattern_variable_nameContext(Context, State);
		EnterRule(_localctx, 312, RULE_row_pattern_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2399;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specification_listContext sort_specification_list() {
			return GetRuleContext<Sort_specification_listContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 314, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401;
			Match(ORDER);
			State = 2402;
			Match(BY);
			State = 2403;
			sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ext_order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		public Ext_order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ext_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExt_order_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExt_order_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ext_order_by_clauseContext ext_order_by_clause() {
		Ext_order_by_clauseContext _localctx = new Ext_order_by_clauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_ext_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME) {
				{
				State = 2405;
				Match(ASSUME);
				}
			}

			State = 2408;
			order_by_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_element_listContext grouping_element_list() {
			return GetRuleContext<Grouping_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_group_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410;
			Match(GROUP);
			State = 2412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPACT) {
				{
				State = 2411;
				Match(COMPACT);
				}
			}

			State = 2414;
			Match(BY);
			State = 2415;
			opt_set_quantifier();
			State = 2416;
			grouping_element_list();
			State = 2419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2417;
				Match(WITH);
				State = 2418;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_elementContext[] grouping_element() {
			return GetRuleContexts<Grouping_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_elementContext grouping_element(int i) {
			return GetRuleContext<Grouping_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_element_listContext grouping_element_list() {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(Context, State);
		EnterRule(_localctx, 320, RULE_grouping_element_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421;
			grouping_element();
			State = 2426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2422;
				Match(COMMA);
				State = 2423;
				grouping_element();
				}
				}
				State = 2428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext ordinary_grouping_set() {
			return GetRuleContext<Ordinary_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_listContext rollup_list() {
			return GetRuleContext<Rollup_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_listContext cube_list() {
			return GetRuleContext<Cube_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hopping_window_specificationContext hopping_window_specification() {
			return GetRuleContext<Hopping_window_specificationContext>(0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_element(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_elementContext grouping_element() {
		Grouping_elementContext _localctx = new Grouping_elementContext(Context, State);
		EnterRule(_localctx, 322, RULE_grouping_element);
		try {
			State = 2434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2429;
				ordinary_grouping_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2430;
				rollup_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2431;
				cube_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2432;
				grouping_sets_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2433;
				hopping_window_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr() {
			return GetRuleContext<Named_exprContext>(0);
		}
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_setContext ordinary_grouping_set() {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(Context, State);
		EnterRule(_localctx, 324, RULE_ordinary_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			named_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext[] ordinary_grouping_set() {
			return GetRuleContexts<Ordinary_grouping_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return GetRuleContext<Ordinary_grouping_setContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(Context, State);
		EnterRule(_localctx, 326, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438;
			ordinary_grouping_set();
			State = 2443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2439;
				Match(COMMA);
				State = 2440;
				ordinary_grouping_set();
				}
				}
				State = 2445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(YQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Rollup_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRollup_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRollup_list(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_listContext rollup_list() {
		Rollup_listContext _localctx = new Rollup_listContext(Context, State);
		EnterRule(_localctx, 328, RULE_rollup_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2446;
			Match(ROLLUP);
			State = 2447;
			Match(LPAREN);
			State = 2448;
			ordinary_grouping_set_list();
			State = 2449;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(YQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Cube_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCube_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCube_list(this);
		}
	}

	[RuleVersion(0)]
	public Cube_listContext cube_list() {
		Cube_listContext _localctx = new Cube_listContext(Context, State);
		EnterRule(_localctx, 330, RULE_cube_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451;
			Match(CUBE);
			State = 2452;
			Match(LPAREN);
			State = 2453;
			ordinary_grouping_set_list();
			State = 2454;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_element_listContext grouping_element_list() {
			return GetRuleContext<Grouping_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 332, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456;
			Match(GROUPING);
			State = 2457;
			Match(SETS);
			State = 2458;
			Match(LPAREN);
			State = 2459;
			grouping_element_list();
			State = 2460;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hopping_window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOP() { return GetToken(YQLParser.HOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Hopping_window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hopping_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterHopping_window_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitHopping_window_specification(this);
		}
	}

	[RuleVersion(0)]
	public Hopping_window_specificationContext hopping_window_specification() {
		Hopping_window_specificationContext _localctx = new Hopping_window_specificationContext(Context, State);
		EnterRule(_localctx, 334, RULE_hopping_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462;
			Match(HOP);
			State = 2463;
			Match(LPAREN);
			State = 2464;
			expr();
			State = 2465;
			Match(COMMA);
			State = 2466;
			expr();
			State = 2467;
			Match(COMMA);
			State = 2468;
			expr();
			State = 2469;
			Match(COMMA);
			State = 2470;
			expr();
			State = 2471;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefixContext opt_id_prefix() {
			return GetRuleContext<Opt_id_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_as_compatContext an_id_as_compat() {
			return GetRuleContext<An_id_as_compatContext>(0);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 336, RULE_result_column);
		try {
			State = 2482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2473;
				opt_id_prefix();
				State = 2474;
				Match(ASTERISK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2476;
				expr();
				State = 2480;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
				case 1:
					{
					State = 2477;
					Match(AS);
					State = 2478;
					an_id_or_type();
					}
					break;
				case 2:
					{
					State = 2479;
					an_id_as_compat();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_sourceContext[] flatten_source() {
			return GetRuleContexts<Flatten_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_sourceContext flatten_source(int i) {
			return GetRuleContext<Flatten_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(YQLParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(YQLParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_opContext[] join_op() {
			return GetRuleContexts<Join_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_opContext join_op(int i) {
			return GetRuleContext<Join_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_source(this);
		}
	}

	[RuleVersion(0)]
	public Join_sourceContext join_source() {
		Join_sourceContext _localctx = new Join_sourceContext(Context, State);
		EnterRule(_localctx, 338, RULE_join_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2484;
				Match(ANY);
				}
				break;
			}
			State = 2487;
			flatten_source();
			State = 2498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==CROSS || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & 18298072509579265L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -9223372036853727231L) != 0)) {
				{
				{
				State = 2488;
				join_op();
				State = 2490;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
				case 1:
					{
					State = 2489;
					Match(ANY);
					}
					break;
				}
				State = 2492;
				flatten_source();
				State = 2494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON || _la==USING) {
					{
					State = 2493;
					join_constraint();
					}
				}

				}
				}
				State = 2500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Named_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_column(this);
		}
	}

	[RuleVersion(0)]
	public Named_columnContext named_column() {
		Named_columnContext _localctx = new Named_columnContext(Context, State);
		EnterRule(_localctx, 340, RULE_named_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2501;
			column_name();
			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2502;
				Match(AS);
				State = 2503;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flatten_by_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_columnContext named_column() {
			return GetRuleContext<Named_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Flatten_by_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flatten_by_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFlatten_by_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFlatten_by_arg(this);
		}
	}

	[RuleVersion(0)]
	public Flatten_by_argContext flatten_by_arg() {
		Flatten_by_argContext _localctx = new Flatten_by_argContext(Context, State);
		EnterRule(_localctx, 342, RULE_flatten_by_arg);
		int _la;
		try {
			State = 2514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2506;
				named_column();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2507;
				Match(LPAREN);
				State = 2508;
				named_expr_list();
				State = 2510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2509;
					Match(COMMA);
					}
				}

				State = 2512;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flatten_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source() {
			return GetRuleContext<Named_single_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_by_argContext flatten_by_arg() {
			return GetRuleContext<Flatten_by_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		public Flatten_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flatten_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFlatten_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFlatten_source(this);
		}
	}

	[RuleVersion(0)]
	public Flatten_sourceContext flatten_source() {
		Flatten_sourceContext _localctx = new Flatten_sourceContext(Context, State);
		EnterRule(_localctx, 344, RULE_flatten_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516;
			named_single_source();
			State = 2526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FLATTEN) {
				{
				State = 2517;
				Match(FLATTEN);
				State = 2524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
				case DICT:
				case LIST:
				case OPTIONAL:
					{
					State = 2519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DICT || _la==LIST || _la==OPTIONAL) {
						{
						State = 2518;
						_la = TokenStream.LA(1);
						if ( !(_la==DICT || _la==LIST || _la==OPTIONAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2521;
					Match(BY);
					State = 2522;
					flatten_by_arg();
					}
					break;
				case COLUMNS:
					{
					State = 2523;
					Match(COLUMNS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_single_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_sourceContext single_source() {
			return GetRuleContext<Single_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_recognition_clauseContext row_pattern_recognition_clause() {
			return GetRuleContext<Row_pattern_recognition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sample_clauseContext sample_clause() {
			return GetRuleContext<Sample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_as_compatContext an_id_as_compat() {
			return GetRuleContext<An_id_as_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Named_single_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_single_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_single_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_single_source(this);
		}
	}

	[RuleVersion(0)]
	public Named_single_sourceContext named_single_source() {
		Named_single_sourceContext _localctx = new Named_single_sourceContext(Context, State);
		EnterRule(_localctx, 346, RULE_named_single_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2528;
			single_source();
			State = 2530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				State = 2529;
				row_pattern_recognition_clause();
				}
				break;
			}
			State = 2540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 2535;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 2532;
					Match(AS);
					State = 2533;
					an_id();
					}
					break;
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ARRAY:
				case ASC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BY:
				case CASCADE:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COMMIT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CURRENT:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case ENCRYPTED:
				case END:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCLUDE:
				case EXCLUSIVE:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case HASH:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INSERT:
				case INSTEAD:
				case INTO:
				case IS:
				case LAST:
				case LEGACY:
				case LIKE:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ONE:
				case ONLY:
				case OPTION:
				case OR:
				case ORDER:
				case OTHERS:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRIMARY:
				case PRIVILEGES:
				case QUERY:
				case QUEUE:
				case RAISE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case REVERT:
				case REVOKE:
				case RLIKE:
				case ROLLBACK:
				case ROW:
				case SAVEPOINT:
				case SECONDS:
				case SEEK:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRIGGER:
				case TYPE:
				case UNCONDITIONAL:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case VACUUM:
				case VALUES:
				case VIRTUAL:
				case WRAPPER:
				case XOR:
				case STRING_VALUE:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 2534;
					an_id_as_compat();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2537;
					pure_column_list();
					}
				}

				}
				break;
			}
			State = 2544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAMPLE:
				{
				State = 2542;
				sample_clause();
				}
				break;
			case TABLESAMPLE:
				{
				State = 2543;
				tablesample_clause();
				}
				break;
			case Eof:
			case SEMICOLON:
			case COMMA:
			case RPAREN:
			case ASSUME:
			case CROSS:
			case END:
			case EXCEPT:
			case EXCLUSION:
			case FLATTEN:
			case FULL:
			case GROUP:
			case HAVING:
			case INNER:
			case INTERSECT:
			case INTO:
			case JOIN:
			case LEFT:
			case LIMIT:
			case NATURAL:
			case ON:
			case ORDER:
			case OUTER:
			case PRESORT:
			case RETURNING:
			case RIGHT:
			case SELECT:
			case UNION:
			case USING:
			case WHERE:
			case WINDOW:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		public Single_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSingle_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSingle_source(this);
		}
	}

	[RuleVersion(0)]
	public Single_sourceContext single_source() {
		Single_sourceContext _localctx = new Single_sourceContext(Context, State);
		EnterRule(_localctx, 348, RULE_single_source);
		try {
			State = 2555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2546;
				table_ref();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2547;
				Match(LPAREN);
				State = 2548;
				select_stmt();
				State = 2549;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2551;
				Match(LPAREN);
				State = 2552;
				values_stmt();
				State = 2553;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(YQLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sample_clauseContext sample_clause() {
		Sample_clauseContext _localctx = new Sample_clauseContext(Context, State);
		EnterRule(_localctx, 350, RULE_sample_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557;
			Match(SAMPLE);
			State = 2558;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sampling_modeContext sampling_mode() {
			return GetRuleContext<Sampling_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Repeatable_clauseContext repeatable_clause() {
			return GetRuleContext<Repeatable_clauseContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 352, RULE_tablesample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560;
			Match(TABLESAMPLE);
			State = 2561;
			sampling_mode();
			State = 2562;
			Match(LPAREN);
			State = 2563;
			expr();
			State = 2564;
			Match(RPAREN);
			State = 2566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPEATABLE) {
				{
				State = 2565;
				repeatable_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sampling_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		public Sampling_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampling_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSampling_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSampling_mode(this);
		}
	}

	[RuleVersion(0)]
	public Sampling_modeContext sampling_mode() {
		Sampling_modeContext _localctx = new Sampling_modeContext(Context, State);
		EnterRule(_localctx, 354, RULE_sampling_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568;
			_la = TokenStream.LA(1);
			if ( !(_la==BERNOULLI || _la==SYSTEM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeatable_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(YQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Repeatable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatable_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRepeatable_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRepeatable_clause(this);
		}
	}

	[RuleVersion(0)]
	public Repeatable_clauseContext repeatable_clause() {
		Repeatable_clauseContext _localctx = new Repeatable_clauseContext(Context, State);
		EnterRule(_localctx, 356, RULE_repeatable_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2570;
			Match(REPEATABLE);
			State = 2571;
			Match(LPAREN);
			State = 2572;
			expr();
			State = 2573;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(YQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(YQLParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(YQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(YQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(YQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(YQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSION() { return GetToken(YQLParser.EXCLUSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(YQLParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(YQLParser.SEMI, 0); }
		public Join_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_op(this);
		}
	}

	[RuleVersion(0)]
	public Join_opContext join_op() {
		Join_opContext _localctx = new Join_opContext(Context, State);
		EnterRule(_localctx, 358, RULE_join_op);
		int _la;
		try {
			State = 2599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2575;
				Match(COMMA);
				}
				break;
			case CROSS:
			case EXCLUSION:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
			case OUTER:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL) {
					{
					State = 2576;
					Match(NATURAL);
					}
				}

				State = 2596;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXCLUSION:
				case FULL:
				case JOIN:
				case LEFT:
				case OUTER:
				case RIGHT:
					{
					State = 2589;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT:
						{
						State = 2579;
						Match(LEFT);
						State = 2581;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ONLY || _la==SEMI) {
							{
							State = 2580;
							_la = TokenStream.LA(1);
							if ( !(_la==ONLY || _la==SEMI) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					case RIGHT:
						{
						State = 2583;
						Match(RIGHT);
						State = 2585;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ONLY || _la==SEMI) {
							{
							State = 2584;
							_la = TokenStream.LA(1);
							if ( !(_la==ONLY || _la==SEMI) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					case EXCLUSION:
						{
						State = 2587;
						Match(EXCLUSION);
						}
						break;
					case FULL:
						{
						State = 2588;
						Match(FULL);
						}
						break;
					case JOIN:
					case OUTER:
						break;
					default:
						break;
					}
					State = 2592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 2591;
						Match(OUTER);
						}
					}

					}
					break;
				case INNER:
					{
					State = 2594;
					Match(INNER);
					}
					break;
				case CROSS:
					{
					State = 2595;
					Match(CROSS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2598;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_named_listContext pure_column_or_named_list() {
			return GetRuleContext<Pure_column_or_named_listContext>(0);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 360, RULE_join_constraint);
		try {
			State = 2605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2601;
				Match(ON);
				State = 2602;
				expr();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2603;
				Match(USING);
				State = 2604;
				pure_column_or_named_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_columns_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Returning_columns_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_columns_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReturning_columns_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReturning_columns_list(this);
		}
	}

	[RuleVersion(0)]
	public Returning_columns_listContext returning_columns_list() {
		Returning_columns_listContext _localctx = new Returning_columns_listContext(Context, State);
		EnterRule(_localctx, 362, RULE_returning_columns_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2607;
			Match(RETURNING);
			State = 2617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 2608;
				Match(ASTERISK);
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 2609;
				an_id();
				State = 2614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2610;
					Match(COMMA);
					State = 2611;
					an_id();
					}
					}
					State = 2616;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_simple_table_refContext into_simple_table_ref() {
			return GetRuleContext<Into_simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		public Into_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Into_table_stmtContext into_table_stmt() {
		Into_table_stmtContext _localctx = new Into_table_stmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_into_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				{
				State = 2619;
				Match(INSERT);
				}
				break;
			case 2:
				{
				State = 2620;
				Match(INSERT);
				State = 2621;
				Match(OR);
				State = 2622;
				Match(ABORT);
				}
				break;
			case 3:
				{
				State = 2623;
				Match(INSERT);
				State = 2624;
				Match(OR);
				State = 2625;
				Match(REVERT);
				}
				break;
			case 4:
				{
				State = 2626;
				Match(INSERT);
				State = 2627;
				Match(OR);
				State = 2628;
				Match(IGNORE);
				}
				break;
			case 5:
				{
				State = 2629;
				Match(UPSERT);
				}
				break;
			case 6:
				{
				State = 2630;
				Match(REPLACE);
				}
				break;
			}
			State = 2633;
			Match(INTO);
			State = 2634;
			into_simple_table_ref();
			State = 2635;
			into_values_source();
			State = 2637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 2636;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_sourceContext values_source() {
			return GetRuleContext<Values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		public Into_values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_values_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_values_source(this);
		}
	}

	[RuleVersion(0)]
	public Into_values_sourceContext into_values_source() {
		Into_values_sourceContext _localctx = new Into_values_sourceContext(Context, State);
		EnterRule(_localctx, 366, RULE_into_values_source);
		try {
			State = 2645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2639;
					pure_column_list();
					}
					break;
				}
				State = 2642;
				values_source();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2643;
				Match(DEFAULT);
				State = 2644;
				Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_row_listContext values_source_row_list() {
			return GetRuleContext<Values_source_row_listContext>(0);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Values_stmtContext values_stmt() {
		Values_stmtContext _localctx = new Values_stmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_values_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2647;
			Match(VALUES);
			State = 2648;
			values_source_row_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source(this);
		}
	}

	[RuleVersion(0)]
	public Values_sourceContext values_source() {
		Values_sourceContext _localctx = new Values_sourceContext(Context, State);
		EnterRule(_localctx, 370, RULE_values_source);
		try {
			State = 2652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2650;
				values_stmt();
				}
				break;
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2651;
				select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_source_row_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_rowContext[] values_source_row() {
			return GetRuleContexts<Values_source_rowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_rowContext values_source_row(int i) {
			return GetRuleContext<Values_source_rowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Values_source_row_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source_row_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source_row_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source_row_list(this);
		}
	}

	[RuleVersion(0)]
	public Values_source_row_listContext values_source_row_list() {
		Values_source_row_listContext _localctx = new Values_source_row_listContext(Context, State);
		EnterRule(_localctx, 372, RULE_values_source_row_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			values_source_row();
			State = 2659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2655;
				Match(COMMA);
				State = 2656;
				values_source_row();
				}
				}
				State = 2661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_source_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Values_source_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source_row(this);
		}
	}

	[RuleVersion(0)]
	public Values_source_rowContext values_source_row() {
		Values_source_rowContext _localctx = new Values_source_rowContext(Context, State);
		EnterRule(_localctx, 374, RULE_values_source_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2662;
			Match(LPAREN);
			State = 2663;
			expr_list();
			State = 2664;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Simple_values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_values_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_values_source(this);
		}
	}

	[RuleVersion(0)]
	public Simple_values_sourceContext simple_values_source() {
		Simple_values_sourceContext _localctx = new Simple_values_sourceContext(Context, State);
		EnterRule(_localctx, 376, RULE_simple_values_source);
		try {
			State = 2668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2666;
				expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2667;
				select_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Create_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_data_source_stmtContext create_external_data_source_stmt() {
		Create_external_data_source_stmtContext _localctx = new Create_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_create_external_data_source_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2670;
			Match(CREATE);
			State = 2673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2671;
				Match(OR);
				State = 2672;
				Match(REPLACE);
				}
			}

			State = 2675;
			Match(EXTERNAL);
			State = 2676;
			Match(DATA);
			State = 2677;
			Match(SOURCE);
			State = 2681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				{
				State = 2678;
				Match(IF);
				State = 2679;
				Match(NOT);
				State = 2680;
				Match(EXISTS);
				}
				break;
			}
			State = 2683;
			object_ref();
			State = 2684;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_actionContext[] alter_external_data_source_action() {
			return GetRuleContexts<Alter_external_data_source_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_actionContext alter_external_data_source_action(int i) {
			return GetRuleContext<Alter_external_data_source_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_source_stmtContext alter_external_data_source_stmt() {
		Alter_external_data_source_stmtContext _localctx = new Alter_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alter_external_data_source_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686;
			Match(ALTER);
			State = 2687;
			Match(EXTERNAL);
			State = 2688;
			Match(DATA);
			State = 2689;
			Match(SOURCE);
			State = 2690;
			object_ref();
			State = 2691;
			alter_external_data_source_action();
			State = 2696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2692;
				Match(COMMA);
				State = 2693;
				alter_external_data_source_action();
				}
				}
				State = 2698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_source_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_external_data_source_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_source_actionContext alter_external_data_source_action() {
		Alter_external_data_source_actionContext _localctx = new Alter_external_data_source_actionContext(Context, State);
		EnterRule(_localctx, 382, RULE_alter_external_data_source_action);
		try {
			State = 2702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2699;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2700;
				alter_table_set_table_setting_compat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2701;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_source_stmtContext drop_external_data_source_stmt() {
		Drop_external_data_source_stmtContext _localctx = new Drop_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 384, RULE_drop_external_data_source_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2704;
			Match(DROP);
			State = 2705;
			Match(EXTERNAL);
			State = 2706;
			Match(DATA);
			State = 2707;
			Match(SOURCE);
			State = 2710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 2708;
				Match(IF);
				State = 2709;
				Match(EXISTS);
				}
				break;
			}
			State = 2712;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 386, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2714;
			Match(CREATE);
			State = 2715;
			Match(VIEW);
			State = 2719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 2716;
				Match(IF);
				State = 2717;
				Match(NOT);
				State = 2718;
				Match(EXISTS);
				}
				break;
			}
			State = 2721;
			object_ref();
			State = 2723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2722;
				create_object_features();
				}
			}

			State = 2725;
			Match(AS);
			State = 2726;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(Context, State);
		EnterRule(_localctx, 388, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2728;
			Match(DROP);
			State = 2729;
			Match(VIEW);
			State = 2732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2730;
				Match(IF);
				State = 2731;
				Match(EXISTS);
				}
				break;
			}
			State = 2734;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Upsert_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUpsert_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUpsert_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_object_stmtContext upsert_object_stmt() {
		Upsert_object_stmtContext _localctx = new Upsert_object_stmtContext(Context, State);
		EnterRule(_localctx, 390, RULE_upsert_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2736;
			Match(UPSERT);
			State = 2737;
			Match(OBJECT);
			State = 2738;
			object_ref();
			State = 2739;
			Match(LPAREN);
			State = 2740;
			Match(TYPE);
			State = 2741;
			object_type_ref();
			State = 2742;
			Match(RPAREN);
			State = 2744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2743;
				create_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Create_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_object_stmtContext create_object_stmt() {
		Create_object_stmtContext _localctx = new Create_object_stmtContext(Context, State);
		EnterRule(_localctx, 392, RULE_create_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2746;
			Match(CREATE);
			State = 2747;
			Match(OBJECT);
			State = 2751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2748;
				Match(IF);
				State = 2749;
				Match(NOT);
				State = 2750;
				Match(EXISTS);
				}
				break;
			}
			State = 2753;
			object_ref();
			State = 2754;
			Match(LPAREN);
			State = 2755;
			Match(TYPE);
			State = 2756;
			object_type_ref();
			State = 2757;
			Match(RPAREN);
			State = 2759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2758;
				create_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Create_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Create_object_featuresContext create_object_features() {
		Create_object_featuresContext _localctx = new Create_object_featuresContext(Context, State);
		EnterRule(_localctx, 394, RULE_create_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2761;
			Match(WITH);
			State = 2762;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_object_featuresContext alter_object_features() {
			return GetRuleContext<Alter_object_featuresContext>(0);
		}
		public Alter_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_object_stmtContext alter_object_stmt() {
		Alter_object_stmtContext _localctx = new Alter_object_stmtContext(Context, State);
		EnterRule(_localctx, 396, RULE_alter_object_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2764;
			Match(ALTER);
			State = 2765;
			Match(OBJECT);
			State = 2766;
			object_ref();
			State = 2767;
			Match(LPAREN);
			State = 2768;
			Match(TYPE);
			State = 2769;
			object_type_ref();
			State = 2770;
			Match(RPAREN);
			State = 2771;
			alter_object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Alter_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Alter_object_featuresContext alter_object_features() {
		Alter_object_featuresContext _localctx = new Alter_object_featuresContext(Context, State);
		EnterRule(_localctx, 398, RULE_alter_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2773;
			Match(SET);
			State = 2774;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_object_featuresContext drop_object_features() {
			return GetRuleContext<Drop_object_featuresContext>(0);
		}
		public Drop_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_object_stmtContext drop_object_stmt() {
		Drop_object_stmtContext _localctx = new Drop_object_stmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_drop_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2776;
			Match(DROP);
			State = 2777;
			Match(OBJECT);
			State = 2780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2778;
				Match(IF);
				State = 2779;
				Match(EXISTS);
				}
				break;
			}
			State = 2782;
			object_ref();
			State = 2783;
			Match(LPAREN);
			State = 2784;
			Match(TYPE);
			State = 2785;
			object_type_ref();
			State = 2786;
			Match(RPAREN);
			State = 2788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2787;
				drop_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Drop_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Drop_object_featuresContext drop_object_features() {
		Drop_object_featuresContext _localctx = new Drop_object_featuresContext(Context, State);
		EnterRule(_localctx, 402, RULE_drop_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790;
			Match(WITH);
			State = 2791;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Object_feature_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_value(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_valueContext object_feature_value() {
		Object_feature_valueContext _localctx = new Object_feature_valueContext(Context, State);
		EnterRule(_localctx, 404, RULE_object_feature_value);
		try {
			State = 2797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2793;
				id_or_type();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2794;
				bind_parameter();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2795;
				Match(STRING_VALUE);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2796;
				bool_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_kvContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_valueContext object_feature_value() {
			return GetRuleContext<Object_feature_valueContext>(0);
		}
		public Object_feature_kvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_kv; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_kv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_kv(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_kvContext object_feature_kv() {
		Object_feature_kvContext _localctx = new Object_feature_kvContext(Context, State);
		EnterRule(_localctx, 406, RULE_object_feature_kv);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799;
			an_id_or_type();
			State = 2800;
			Match(EQUALS);
			State = 2801;
			object_feature_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_flagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Object_feature_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_flag(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_flagContext object_feature_flag() {
		Object_feature_flagContext _localctx = new Object_feature_flagContext(Context, State);
		EnterRule(_localctx, 408, RULE_object_feature_flag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2803;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_featureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_kvContext object_feature_kv() {
			return GetRuleContext<Object_feature_kvContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_flagContext object_feature_flag() {
			return GetRuleContext<Object_feature_flagContext>(0);
		}
		public Object_featureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature(this);
		}
	}

	[RuleVersion(0)]
	public Object_featureContext object_feature() {
		Object_featureContext _localctx = new Object_featureContext(Context, State);
		EnterRule(_localctx, 410, RULE_object_feature);
		try {
			State = 2807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805;
				object_feature_kv();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2806;
				object_feature_flag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_featureContext[] object_feature() {
			return GetRuleContexts<Object_featureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_featureContext object_feature(int i) {
			return GetRuleContext<Object_featureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_features(this);
		}
	}

	[RuleVersion(0)]
	public Object_featuresContext object_features() {
		Object_featuresContext _localctx = new Object_featuresContext(Context, State);
		EnterRule(_localctx, 412, RULE_object_features);
		int _la;
		try {
			State = 2821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2809;
				object_feature();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2810;
				Match(LPAREN);
				State = 2811;
				object_feature();
				State = 2816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2812;
					Match(COMMA);
					State = 2813;
					object_feature();
					}
					}
					State = 2818;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2819;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Object_type_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_type_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_type_ref(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_refContext object_type_ref() {
		Object_type_refContext _localctx = new Object_type_refContext(Context, State);
		EnterRule(_localctx, 414, RULE_object_type_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2823;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_entryContext[] create_table_entry() {
			return GetRuleContexts<Create_table_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_entryContext create_table_entry(int i) {
			return GetRuleContext<Create_table_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_inheritsContext table_inherits() {
			return GetRuleContext<Table_inheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_partition_byContext table_partition_by() {
			return GetRuleContext<Table_partition_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_tablestoreContext table_tablestore() {
			return GetRuleContext<Table_tablestoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_as_sourceContext table_as_source() {
			return GetRuleContext<Table_as_sourceContext>(0);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 416, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2825;
			Match(CREATE);
			State = 2828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2826;
				Match(OR);
				State = 2827;
				Match(REPLACE);
				}
			}

			State = 2838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 2830;
				Match(TABLE);
				}
				break;
			case TABLESTORE:
				{
				State = 2831;
				Match(TABLESTORE);
				}
				break;
			case EXTERNAL:
				{
				State = 2832;
				Match(EXTERNAL);
				State = 2833;
				Match(TABLE);
				}
				break;
			case TEMP:
				{
				State = 2834;
				Match(TEMP);
				State = 2835;
				Match(TABLE);
				}
				break;
			case TEMPORARY:
				{
				State = 2836;
				Match(TEMPORARY);
				State = 2837;
				Match(TABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 2840;
				Match(IF);
				State = 2841;
				Match(NOT);
				State = 2842;
				Match(EXISTS);
				}
				break;
			}
			State = 2845;
			simple_table_ref();
			State = 2846;
			Match(LPAREN);
			State = 2847;
			create_table_entry();
			State = 2852;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2848;
					Match(COMMA);
					State = 2849;
					create_table_entry();
					}
					} 
				}
				State = 2854;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			}
			State = 2856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2855;
				Match(COMMA);
				}
			}

			State = 2858;
			Match(RPAREN);
			State = 2860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 2859;
				table_inherits();
				}
			}

			State = 2863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2862;
				table_partition_by();
				}
			}

			State = 2866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2865;
				with_table_settings();
				}
			}

			State = 2869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESTORE) {
				{
				State = 2868;
				table_tablestore();
				}
			}

			State = 2872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2871;
				table_as_source();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_schemaContext column_schema() {
			return GetRuleContext<Column_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_indexContext table_index() {
			return GetRuleContext<Table_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_entryContext family_entry() {
			return GetRuleContext<Family_entryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangefeedContext changefeed() {
			return GetRuleContext<ChangefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema() {
			return GetRuleContext<An_id_schemaContext>(0);
		}
		public Create_table_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_table_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_table_entry(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_entryContext create_table_entry() {
		Create_table_entryContext _localctx = new Create_table_entryContext(Context, State);
		EnterRule(_localctx, 418, RULE_create_table_entry);
		try {
			State = 2880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2874;
				column_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2875;
				table_constraint();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2876;
				table_index();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2877;
				family_entry();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2878;
				changefeed();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2879;
				an_id_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settingsContext backup_collection_settings() {
			return GetRuleContext<Backup_collection_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_entriesContext create_backup_collection_entries() {
			return GetRuleContext<Create_backup_collection_entriesContext>(0);
		}
		public Create_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_stmtContext create_backup_collection_stmt() {
		Create_backup_collection_stmtContext _localctx = new Create_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 420, RULE_create_backup_collection_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2882;
			Match(CREATE);
			State = 2883;
			backup_collection();
			State = 2885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN || _la==DATABASE) {
				{
				State = 2884;
				create_backup_collection_entries();
				}
			}

			State = 2887;
			Match(WITH);
			State = 2888;
			Match(LPAREN);
			State = 2889;
			backup_collection_settings();
			State = 2890;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionsContext alter_backup_collection_actions() {
			return GetRuleContext<Alter_backup_collection_actionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entriesContext alter_backup_collection_entries() {
			return GetRuleContext<Alter_backup_collection_entriesContext>(0);
		}
		public Alter_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_stmtContext alter_backup_collection_stmt() {
		Alter_backup_collection_stmtContext _localctx = new Alter_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 422, RULE_alter_backup_collection_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2892;
			Match(ALTER);
			State = 2893;
			backup_collection();
			State = 2896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESET:
			case SET:
				{
				State = 2894;
				alter_backup_collection_actions();
				}
				break;
			case ADD:
			case DROP:
				{
				State = 2895;
				alter_backup_collection_entries();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		public Drop_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backup_collection_stmtContext drop_backup_collection_stmt() {
		Drop_backup_collection_stmtContext _localctx = new Drop_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 424, RULE_drop_backup_collection_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2898;
			Match(DROP);
			State = 2899;
			backup_collection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_entries_manyContext create_backup_collection_entries_many() {
			return GetRuleContext<Create_backup_collection_entries_manyContext>(0);
		}
		public Create_backup_collection_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_entries(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_entriesContext create_backup_collection_entries() {
		Create_backup_collection_entriesContext _localctx = new Create_backup_collection_entriesContext(Context, State);
		EnterRule(_localctx, 426, RULE_create_backup_collection_entries);
		try {
			State = 2903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2901;
				Match(DATABASE);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2902;
				create_backup_collection_entries_many();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_entries_manyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_listContext table_list() {
			return GetRuleContext<Table_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Create_backup_collection_entries_manyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_entries_many; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_entries_many(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_entries_many(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_entries_manyContext create_backup_collection_entries_many() {
		Create_backup_collection_entries_manyContext _localctx = new Create_backup_collection_entries_manyContext(Context, State);
		EnterRule(_localctx, 428, RULE_create_backup_collection_entries_many);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905;
			Match(LPAREN);
			State = 2906;
			table_list();
			State = 2907;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(YQLParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(YQLParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext[] an_id_table() {
			return GetRuleContexts<An_id_tableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table(int i) {
			return GetRuleContext<An_id_tableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_listContext table_list() {
		Table_listContext _localctx = new Table_listContext(Context, State);
		EnterRule(_localctx, 430, RULE_table_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909;
			Match(TABLE);
			State = 2910;
			an_id_table();
			State = 2916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2911;
				Match(COMMA);
				State = 2912;
				Match(TABLE);
				State = 2913;
				an_id_table();
				}
				}
				State = 2918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionContext[] alter_backup_collection_action() {
			return GetRuleContexts<Alter_backup_collection_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionContext alter_backup_collection_action(int i) {
			return GetRuleContext<Alter_backup_collection_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_backup_collection_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_actions(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_actionsContext alter_backup_collection_actions() {
		Alter_backup_collection_actionsContext _localctx = new Alter_backup_collection_actionsContext(Context, State);
		EnterRule(_localctx, 432, RULE_alter_backup_collection_actions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2919;
			alter_backup_collection_action();
			State = 2924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2920;
				Match(COMMA);
				State = 2921;
				alter_backup_collection_action();
				}
				}
				State = 2926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_backup_collection_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_actionContext alter_backup_collection_action() {
		Alter_backup_collection_actionContext _localctx = new Alter_backup_collection_actionContext(Context, State);
		EnterRule(_localctx, 434, RULE_alter_backup_collection_action);
		try {
			State = 2929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2927;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2928;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entryContext[] alter_backup_collection_entry() {
			return GetRuleContexts<Alter_backup_collection_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entryContext alter_backup_collection_entry(int i) {
			return GetRuleContext<Alter_backup_collection_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_backup_collection_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_entries(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_entriesContext alter_backup_collection_entries() {
		Alter_backup_collection_entriesContext _localctx = new Alter_backup_collection_entriesContext(Context, State);
		EnterRule(_localctx, 436, RULE_alter_backup_collection_entries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2931;
			alter_backup_collection_entry();
			State = 2936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2932;
				Match(COMMA);
				State = 2933;
				alter_backup_collection_entry();
				}
				}
				State = 2938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		public Alter_backup_collection_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_entryContext alter_backup_collection_entry() {
		Alter_backup_collection_entryContext _localctx = new Alter_backup_collection_entryContext(Context, State);
		EnterRule(_localctx, 438, RULE_alter_backup_collection_entry);
		try {
			State = 2949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2939;
				Match(ADD);
				State = 2940;
				Match(DATABASE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2941;
				Match(DROP);
				State = 2942;
				Match(DATABASE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2943;
				Match(ADD);
				State = 2944;
				Match(TABLE);
				State = 2945;
				an_id_table();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2946;
				Match(DROP);
				State = 2947;
				Match(TABLE);
				State = 2948;
				an_id_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Backup_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collectionContext backup_collection() {
		Backup_collectionContext _localctx = new Backup_collectionContext(Context, State);
		EnterRule(_localctx, 440, RULE_backup_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2951;
			Match(BACKUP);
			State = 2952;
			Match(COLLECTION);
			State = 2953;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collection_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settings_entryContext[] backup_collection_settings_entry() {
			return GetRuleContexts<Backup_collection_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settings_entryContext backup_collection_settings_entry(int i) {
			return GetRuleContext<Backup_collection_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Backup_collection_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection_settings(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collection_settingsContext backup_collection_settings() {
		Backup_collection_settingsContext _localctx = new Backup_collection_settingsContext(Context, State);
		EnterRule(_localctx, 442, RULE_backup_collection_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955;
			backup_collection_settings_entry();
			State = 2960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2956;
				Match(COMMA);
				State = 2957;
				backup_collection_settings_entry();
				}
				}
				State = 2962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collection_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Backup_collection_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collection_settings_entryContext backup_collection_settings_entry() {
		Backup_collection_settings_entryContext _localctx = new Backup_collection_settings_entryContext(Context, State);
		EnterRule(_localctx, 444, RULE_backup_collection_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963;
			an_id();
			State = 2964;
			Match(EQUALS);
			State = 2965;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		public Backup_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Backup_stmtContext backup_stmt() {
		Backup_stmtContext _localctx = new Backup_stmtContext(Context, State);
		EnterRule(_localctx, 446, RULE_backup_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2967;
			Match(BACKUP);
			State = 2968;
			object_ref();
			State = 2970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCREMENTAL) {
				{
				State = 2969;
				Match(INCREMENTAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Restore_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Restore_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restore_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRestore_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRestore_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Restore_stmtContext restore_stmt() {
		Restore_stmtContext _localctx = new Restore_stmtContext(Context, State);
		EnterRule(_localctx, 448, RULE_restore_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2972;
			Match(RESTORE);
			State = 2973;
			object_ref();
			State = 2976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 2974;
				Match(AT);
				State = 2975;
				Match(STRING_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_inheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext[] simple_table_ref_core() {
			return GetRuleContexts<Simple_table_ref_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core(int i) {
			return GetRuleContext<Simple_table_ref_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_inheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_inherits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_inherits(this);
		}
	}

	[RuleVersion(0)]
	public Table_inheritsContext table_inherits() {
		Table_inheritsContext _localctx = new Table_inheritsContext(Context, State);
		EnterRule(_localctx, 450, RULE_table_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2978;
			Match(INHERITS);
			State = 2979;
			Match(LPAREN);
			State = 2980;
			simple_table_ref_core();
			State = 2985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2981;
				Match(COMMA);
				State = 2982;
				simple_table_ref_core();
				}
				}
				State = 2987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2988;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_partition_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Table_partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_partition_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_partition_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_partition_by(this);
		}
	}

	[RuleVersion(0)]
	public Table_partition_byContext table_partition_by() {
		Table_partition_byContext _localctx = new Table_partition_byContext(Context, State);
		EnterRule(_localctx, 452, RULE_table_partition_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2990;
			Match(PARTITION);
			State = 2991;
			Match(BY);
			State = 2992;
			Match(HASH);
			State = 2993;
			pure_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_settings_entryContext[] table_settings_entry() {
			return GetRuleContexts<Table_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_settings_entryContext table_settings_entry(int i) {
			return GetRuleContext<Table_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public With_table_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_table_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_table_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_table_settingsContext with_table_settings() {
		With_table_settingsContext _localctx = new With_table_settingsContext(Context, State);
		EnterRule(_localctx, 454, RULE_with_table_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2995;
			Match(WITH);
			State = 2996;
			Match(LPAREN);
			State = 2997;
			table_settings_entry();
			State = 3002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2998;
				Match(COMMA);
				State = 2999;
				table_settings_entry();
				}
				}
				State = 3004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3005;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_tablestoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core() {
			return GetRuleContext<Simple_table_ref_coreContext>(0);
		}
		public Table_tablestoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_tablestore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_tablestore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_tablestore(this);
		}
	}

	[RuleVersion(0)]
	public Table_tablestoreContext table_tablestore() {
		Table_tablestoreContext _localctx = new Table_tablestoreContext(Context, State);
		EnterRule(_localctx, 456, RULE_table_tablestore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3007;
			Match(TABLESTORE);
			State = 3008;
			simple_table_ref_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Table_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Table_settings_entryContext table_settings_entry() {
		Table_settings_entryContext _localctx = new Table_settings_entryContext(Context, State);
		EnterRule(_localctx, 458, RULE_table_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3010;
			an_id();
			State = 3011;
			Match(EQUALS);
			State = 3012;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_as_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_sourceContext values_source() {
			return GetRuleContext<Values_sourceContext>(0);
		}
		public Table_as_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_as_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_as_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_as_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_as_sourceContext table_as_source() {
		Table_as_sourceContext _localctx = new Table_as_sourceContext(Context, State);
		EnterRule(_localctx, 460, RULE_table_as_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3014;
			Match(AS);
			State = 3015;
			values_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_actionContext[] alter_table_action() {
			return GetRuleContexts<Alter_table_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_actionContext alter_table_action(int i) {
			return GetRuleContext<Alter_table_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 462, RULE_alter_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			Match(ALTER);
			State = 3018;
			Match(TABLE);
			State = 3019;
			simple_table_ref();
			State = 3020;
			alter_table_action();
			State = 3025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3021;
				Match(COMMA);
				State = 3022;
				alter_table_action();
				}
				}
				State = 3027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_columnContext alter_table_alter_column() {
			return GetRuleContext<Alter_table_alter_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_column_familyContext alter_table_add_column_family() {
			return GetRuleContext<Alter_table_add_column_familyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_column_familyContext alter_table_alter_column_family() {
			return GetRuleContext<Alter_table_alter_column_familyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_indexContext alter_table_add_index() {
			return GetRuleContext<Alter_table_add_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_indexContext alter_table_drop_index() {
			return GetRuleContext<Alter_table_drop_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_toContext alter_table_rename_to() {
			return GetRuleContext<Alter_table_rename_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_changefeedContext alter_table_add_changefeed() {
			return GetRuleContext<Alter_table_add_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_changefeedContext alter_table_alter_changefeed() {
			return GetRuleContext<Alter_table_alter_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_changefeedContext alter_table_drop_changefeed() {
			return GetRuleContext<Alter_table_drop_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_index_toContext alter_table_rename_index_to() {
			return GetRuleContext<Alter_table_rename_index_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_indexContext alter_table_alter_index() {
			return GetRuleContext<Alter_table_alter_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_column_drop_not_nullContext alter_table_alter_column_drop_not_null() {
			return GetRuleContext<Alter_table_alter_column_drop_not_nullContext>(0);
		}
		public Alter_table_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_actionContext alter_table_action() {
		Alter_table_actionContext _localctx = new Alter_table_actionContext(Context, State);
		EnterRule(_localctx, 464, RULE_alter_table_action);
		try {
			State = 3045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3028;
				alter_table_add_column();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3029;
				alter_table_drop_column();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3030;
				alter_table_alter_column();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3031;
				alter_table_add_column_family();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3032;
				alter_table_alter_column_family();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3033;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3034;
				alter_table_set_table_setting_compat();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3035;
				alter_table_reset_table_setting();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3036;
				alter_table_add_index();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3037;
				alter_table_drop_index();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3038;
				alter_table_rename_to();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3039;
				alter_table_add_changefeed();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3040;
				alter_table_alter_changefeed();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3041;
				alter_table_drop_changefeed();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3042;
				alter_table_rename_index_to();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3043;
				alter_table_alter_index();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3044;
				alter_table_alter_column_drop_not_null();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_actionContext[] alter_external_table_action() {
			return GetRuleContexts<Alter_external_table_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_actionContext alter_external_table_action(int i) {
			return GetRuleContext<Alter_external_table_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_external_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_table_stmtContext alter_external_table_stmt() {
		Alter_external_table_stmtContext _localctx = new Alter_external_table_stmtContext(Context, State);
		EnterRule(_localctx, 466, RULE_alter_external_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047;
			Match(ALTER);
			State = 3048;
			Match(EXTERNAL);
			State = 3049;
			Match(TABLE);
			State = 3050;
			simple_table_ref();
			State = 3051;
			alter_external_table_action();
			State = 3056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3052;
				Match(COMMA);
				State = 3053;
				alter_external_table_action();
				}
				}
				State = 3058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_table_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_external_table_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_table_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_table_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_table_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_table_actionContext alter_external_table_action() {
		Alter_external_table_actionContext _localctx = new Alter_external_table_actionContext(Context, State);
		EnterRule(_localctx, 468, RULE_alter_external_table_action);
		try {
			State = 3064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3059;
				alter_table_add_column();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3060;
				alter_table_drop_column();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3061;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3062;
				alter_table_set_table_setting_compat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3063;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_store_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_actionContext[] alter_table_store_action() {
			return GetRuleContexts<Alter_table_store_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_actionContext alter_table_store_action(int i) {
			return GetRuleContext<Alter_table_store_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_store_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_store_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_store_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_store_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_store_stmtContext alter_table_store_stmt() {
		Alter_table_store_stmtContext _localctx = new Alter_table_store_stmtContext(Context, State);
		EnterRule(_localctx, 470, RULE_alter_table_store_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3066;
			Match(ALTER);
			State = 3067;
			Match(TABLESTORE);
			State = 3068;
			object_ref();
			State = 3069;
			alter_table_store_action();
			State = 3074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3070;
				Match(COMMA);
				State = 3071;
				alter_table_store_action();
				}
				}
				State = 3076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_store_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		public Alter_table_store_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_store_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_store_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_store_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_store_actionContext alter_table_store_action() {
		Alter_table_store_actionContext _localctx = new Alter_table_store_actionContext(Context, State);
		EnterRule(_localctx, 472, RULE_alter_table_store_action);
		try {
			State = 3079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3077;
				alter_table_add_column();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3078;
				alter_table_drop_column();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_schemaContext column_schema() {
			return GetRuleContext<Column_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 474, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3081;
			Match(ADD);
			State = 3083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMN) {
				{
				State = 3082;
				Match(COLUMN);
				}
			}

			State = 3085;
			column_schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 476, RULE_alter_table_drop_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3087;
			Match(DROP);
			State = 3089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 3088;
				Match(COLUMN);
				}
				break;
			}
			State = 3091;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_relationContext family_relation() {
			return GetRuleContext<Family_relationContext>(0);
		}
		public Alter_table_alter_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_columnContext alter_table_alter_column() {
		Alter_table_alter_columnContext _localctx = new Alter_table_alter_columnContext(Context, State);
		EnterRule(_localctx, 478, RULE_alter_table_alter_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3093;
			Match(ALTER);
			State = 3094;
			Match(COLUMN);
			State = 3095;
			an_id();
			State = 3096;
			Match(SET);
			State = 3097;
			family_relation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_column_drop_not_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		public Alter_table_alter_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column_drop_not_null(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_column_drop_not_nullContext alter_table_alter_column_drop_not_null() {
		Alter_table_alter_column_drop_not_nullContext _localctx = new Alter_table_alter_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 480, RULE_alter_table_alter_column_drop_not_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3099;
			Match(ALTER);
			State = 3100;
			Match(COLUMN);
			State = 3101;
			an_id();
			State = 3102;
			Match(DROP);
			State = 3103;
			Match(NOT);
			State = 3104;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_column_familyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_entryContext family_entry() {
			return GetRuleContext<Family_entryContext>(0);
		}
		public Alter_table_add_column_familyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column_family; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column_family(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column_family(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_column_familyContext alter_table_add_column_family() {
		Alter_table_add_column_familyContext _localctx = new Alter_table_add_column_familyContext(Context, State);
		EnterRule(_localctx, 482, RULE_alter_table_add_column_family);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3106;
			Match(ADD);
			State = 3107;
			family_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_column_familyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_setting_valueContext family_setting_value() {
			return GetRuleContext<Family_setting_valueContext>(0);
		}
		public Alter_table_alter_column_familyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column_family; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column_family(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column_family(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_column_familyContext alter_table_alter_column_family() {
		Alter_table_alter_column_familyContext _localctx = new Alter_table_alter_column_familyContext(Context, State);
		EnterRule(_localctx, 484, RULE_alter_table_alter_column_family);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3109;
			Match(ALTER);
			State = 3110;
			Match(FAMILY);
			State = 3111;
			an_id();
			State = 3112;
			Match(SET);
			State = 3113;
			an_id();
			State = 3114;
			family_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_table_setting_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Alter_table_set_table_setting_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_table_setting_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_table_setting_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_table_setting_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
		Alter_table_set_table_setting_uncompatContext _localctx = new Alter_table_set_table_setting_uncompatContext(Context, State);
		EnterRule(_localctx, 486, RULE_alter_table_set_table_setting_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3116;
			Match(SET);
			State = 3117;
			an_id();
			State = 3118;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_table_setting_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_setting_entryContext[] alter_table_setting_entry() {
			return GetRuleContexts<Alter_table_setting_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_setting_entryContext alter_table_setting_entry(int i) {
			return GetRuleContext<Alter_table_setting_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_set_table_setting_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_table_setting_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_table_setting_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_table_setting_compat(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
		Alter_table_set_table_setting_compatContext _localctx = new Alter_table_set_table_setting_compatContext(Context, State);
		EnterRule(_localctx, 488, RULE_alter_table_set_table_setting_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3120;
			Match(SET);
			State = 3121;
			Match(LPAREN);
			State = 3122;
			alter_table_setting_entry();
			State = 3127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3123;
				Match(COMMA);
				State = 3124;
				alter_table_setting_entry();
				}
				}
				State = 3129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3130;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_reset_table_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_reset_table_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_reset_table_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_reset_table_setting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_reset_table_setting(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
		Alter_table_reset_table_settingContext _localctx = new Alter_table_reset_table_settingContext(Context, State);
		EnterRule(_localctx, 490, RULE_alter_table_reset_table_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3132;
			Match(RESET);
			State = 3133;
			Match(LPAREN);
			State = 3134;
			an_id();
			State = 3139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3135;
				Match(COMMA);
				State = 3136;
				an_id();
				}
				}
				State = 3141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3142;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_indexContext table_index() {
			return GetRuleContext<Table_indexContext>(0);
		}
		public Alter_table_add_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_indexContext alter_table_add_index() {
		Alter_table_add_indexContext _localctx = new Alter_table_add_indexContext(Context, State);
		EnterRule(_localctx, 492, RULE_alter_table_add_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3144;
			Match(ADD);
			State = 3145;
			table_index();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Alter_table_drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_indexContext alter_table_drop_index() {
		Alter_table_drop_indexContext _localctx = new Alter_table_drop_indexContext(Context, State);
		EnterRule(_localctx, 494, RULE_alter_table_drop_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3147;
			Match(DROP);
			State = 3148;
			Match(INDEX);
			State = 3149;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		public Alter_table_rename_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_to(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_toContext alter_table_rename_to() {
		Alter_table_rename_toContext _localctx = new Alter_table_rename_toContext(Context, State);
		EnterRule(_localctx, 496, RULE_alter_table_rename_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3151;
			Match(RENAME);
			State = 3152;
			Match(TO);
			State = 3153;
			an_id_table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_index_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		public Alter_table_rename_index_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_index_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_index_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_index_to(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_index_toContext alter_table_rename_index_to() {
		Alter_table_rename_index_toContext _localctx = new Alter_table_rename_index_toContext(Context, State);
		EnterRule(_localctx, 498, RULE_alter_table_rename_index_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3155;
			Match(RENAME);
			State = 3156;
			Match(INDEX);
			State = 3157;
			an_id();
			State = 3158;
			Match(TO);
			State = 3159;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangefeedContext changefeed() {
			return GetRuleContext<ChangefeedContext>(0);
		}
		public Alter_table_add_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_changefeedContext alter_table_add_changefeed() {
		Alter_table_add_changefeedContext _localctx = new Alter_table_add_changefeedContext(Context, State);
		EnterRule(_localctx, 500, RULE_alter_table_add_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3161;
			Match(ADD);
			State = 3162;
			changefeed();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_alter_settingsContext changefeed_alter_settings() {
			return GetRuleContext<Changefeed_alter_settingsContext>(0);
		}
		public Alter_table_alter_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_changefeedContext alter_table_alter_changefeed() {
		Alter_table_alter_changefeedContext _localctx = new Alter_table_alter_changefeedContext(Context, State);
		EnterRule(_localctx, 502, RULE_alter_table_alter_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3164;
			Match(ALTER);
			State = 3165;
			Match(CHANGEFEED);
			State = 3166;
			an_id();
			State = 3167;
			changefeed_alter_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Alter_table_drop_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_changefeedContext alter_table_drop_changefeed() {
		Alter_table_drop_changefeedContext _localctx = new Alter_table_drop_changefeedContext(Context, State);
		EnterRule(_localctx, 504, RULE_alter_table_drop_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169;
			Match(DROP);
			State = 3170;
			Match(CHANGEFEED);
			State = 3171;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_index_actionContext alter_table_alter_index_action() {
			return GetRuleContext<Alter_table_alter_index_actionContext>(0);
		}
		public Alter_table_alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_indexContext alter_table_alter_index() {
		Alter_table_alter_indexContext _localctx = new Alter_table_alter_indexContext(Context, State);
		EnterRule(_localctx, 506, RULE_alter_table_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3173;
			Match(ALTER);
			State = 3174;
			Match(INDEX);
			State = 3175;
			an_id();
			State = 3176;
			alter_table_alter_index_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema() {
			return GetRuleContext<An_id_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_constraintsContext opt_column_constraints() {
			return GetRuleContext<Opt_column_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_relationContext family_relation() {
			return GetRuleContext<Family_relationContext>(0);
		}
		public Column_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_schema(this);
		}
	}

	[RuleVersion(0)]
	public Column_schemaContext column_schema() {
		Column_schemaContext _localctx = new Column_schemaContext(Context, State);
		EnterRule(_localctx, 508, RULE_column_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3178;
			an_id_schema();
			State = 3179;
			type_name_or_bind();
			State = 3181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FAMILY) {
				{
				State = 3180;
				family_relation();
				}
			}

			State = 3183;
			opt_column_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Family_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_relation(this);
		}
	}

	[RuleVersion(0)]
	public Family_relationContext family_relation() {
		Family_relationContext _localctx = new Family_relationContext(Context, State);
		EnterRule(_localctx, 510, RULE_family_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3185;
			Match(FAMILY);
			State = 3186;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_column_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Opt_column_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_column_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_column_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Opt_column_constraintsContext opt_column_constraints() {
		Opt_column_constraintsContext _localctx = new Opt_column_constraintsContext(Context, State);
		EnterRule(_localctx, 512, RULE_opt_column_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 3189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 3188;
					Match(NOT);
					}
				}

				State = 3191;
				Match(NULL);
				}
			}

			State = 3196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 3194;
				Match(DEFAULT);
				State = 3195;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_order_by_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		public Column_order_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_order_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_order_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_order_by_specification(this);
		}
	}

	[RuleVersion(0)]
	public Column_order_by_specificationContext column_order_by_specification() {
		Column_order_by_specificationContext _localctx = new Column_order_by_specificationContext(Context, State);
		EnterRule(_localctx, 514, RULE_column_order_by_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3198;
			an_id();
			State = 3200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3199;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_order_by_specificationContext[] column_order_by_specification() {
			return GetRuleContexts<Column_order_by_specificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_order_by_specificationContext column_order_by_specification(int i) {
			return GetRuleContext<Column_order_by_specificationContext>(i);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 516, RULE_table_constraint);
		int _la;
		try {
			State = 3241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3202;
				Match(PRIMARY);
				State = 3203;
				Match(KEY);
				State = 3204;
				Match(LPAREN);
				State = 3205;
				an_id();
				State = 3210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3206;
					Match(COMMA);
					State = 3207;
					an_id();
					}
					}
					State = 3212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3213;
				Match(RPAREN);
				}
				break;
			case PARTITION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3215;
				Match(PARTITION);
				State = 3216;
				Match(BY);
				State = 3217;
				Match(LPAREN);
				State = 3218;
				an_id();
				State = 3223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3219;
					Match(COMMA);
					State = 3220;
					an_id();
					}
					}
					State = 3225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3226;
				Match(RPAREN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3228;
				Match(ORDER);
				State = 3229;
				Match(BY);
				State = 3230;
				Match(LPAREN);
				State = 3231;
				column_order_by_specification();
				State = 3236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3232;
					Match(COMMA);
					State = 3233;
					column_order_by_specification();
					}
					}
					State = 3238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3239;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_index_typeContext table_index_type() {
			return GetRuleContext<Table_index_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(YQLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(YQLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(YQLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(YQLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_index_settingsContext with_index_settings() {
			return GetRuleContext<With_index_settingsContext>(0);
		}
		public Table_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_index(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexContext table_index() {
		Table_indexContext _localctx = new Table_indexContext(Context, State);
		EnterRule(_localctx, 518, RULE_table_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3243;
			Match(INDEX);
			State = 3244;
			an_id();
			State = 3245;
			table_index_type();
			State = 3246;
			Match(ON);
			State = 3247;
			Match(LPAREN);
			State = 3248;
			an_id_schema();
			State = 3253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3249;
				Match(COMMA);
				State = 3250;
				an_id_schema();
				}
				}
				State = 3255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3256;
			Match(RPAREN);
			State = 3269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COVER) {
				{
				State = 3257;
				Match(COVER);
				State = 3258;
				Match(LPAREN);
				State = 3259;
				an_id_schema();
				State = 3264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3260;
					Match(COMMA);
					State = 3261;
					an_id_schema();
					}
					}
					State = 3266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3267;
				Match(RPAREN);
				}
			}

			State = 3272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3271;
				with_index_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_index_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_indexContext global_index() {
			return GetRuleContext<Global_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_indexContext local_index() {
			return GetRuleContext<Local_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtypeContext index_subtype() {
			return GetRuleContext<Index_subtypeContext>(0);
		}
		public Table_index_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_index_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_index_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_index_type(this);
		}
	}

	[RuleVersion(0)]
	public Table_index_typeContext table_index_type() {
		Table_index_typeContext _localctx = new Table_index_typeContext(Context, State);
		EnterRule(_localctx, 520, RULE_table_index_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
				{
				State = 3274;
				global_index();
				}
				break;
			case LOCAL:
				{
				State = 3275;
				local_index();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3278;
				Match(USING);
				State = 3279;
				index_subtype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		public Global_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGlobal_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGlobal_index(this);
		}
	}

	[RuleVersion(0)]
	public Global_indexContext global_index() {
		Global_indexContext _localctx = new Global_indexContext(Context, State);
		EnterRule(_localctx, 522, RULE_global_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3282;
			Match(GLOBAL);
			State = 3284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 3283;
				Match(UNIQUE);
				}
			}

			State = 3287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC || _la==SYNC) {
				{
				State = 3286;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==SYNC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		public Local_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLocal_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLocal_index(this);
		}
	}

	[RuleVersion(0)]
	public Local_indexContext local_index() {
		Local_indexContext _localctx = new Local_indexContext(Context, State);
		EnterRule(_localctx, 524, RULE_local_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3289;
			Match(LOCAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Index_subtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_subtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_subtype(this);
		}
	}

	[RuleVersion(0)]
	public Index_subtypeContext index_subtype() {
		Index_subtypeContext _localctx = new Index_subtypeContext(Context, State);
		EnterRule(_localctx, 526, RULE_index_subtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3291;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_index_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_entryContext[] index_setting_entry() {
			return GetRuleContexts<Index_setting_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_entryContext index_setting_entry(int i) {
			return GetRuleContext<Index_setting_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public With_index_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_index_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_index_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_index_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_index_settingsContext with_index_settings() {
		With_index_settingsContext _localctx = new With_index_settingsContext(Context, State);
		EnterRule(_localctx, 528, RULE_with_index_settings);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293;
			Match(WITH);
			State = 3294;
			Match(LPAREN);
			State = 3295;
			index_setting_entry();
			State = 3300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3296;
					Match(COMMA);
					State = 3297;
					index_setting_entry();
					}
					} 
				}
				State = 3302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			}
			State = 3304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3303;
				Match(COMMA);
				}
			}

			State = 3306;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_setting_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_valueContext index_setting_value() {
			return GetRuleContext<Index_setting_valueContext>(0);
		}
		public Index_setting_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_setting_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_setting_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_setting_entry(this);
		}
	}

	[RuleVersion(0)]
	public Index_setting_entryContext index_setting_entry() {
		Index_setting_entryContext _localctx = new Index_setting_entryContext(Context, State);
		EnterRule(_localctx, 530, RULE_index_setting_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3308;
			an_id();
			State = 3309;
			Match(EQUALS);
			State = 3310;
			index_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Index_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_setting_valueContext index_setting_value() {
		Index_setting_valueContext _localctx = new Index_setting_valueContext(Context, State);
		EnterRule(_localctx, 532, RULE_index_setting_value);
		try {
			State = 3316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3312;
				id_or_type();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3313;
				Match(STRING_VALUE);
				}
				break;
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3314;
				integer();
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3315;
				bool_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settingsContext changefeed_settings() {
			return GetRuleContext<Changefeed_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public ChangefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed(this);
		}
	}

	[RuleVersion(0)]
	public ChangefeedContext changefeed() {
		ChangefeedContext _localctx = new ChangefeedContext(Context, State);
		EnterRule(_localctx, 534, RULE_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3318;
			Match(CHANGEFEED);
			State = 3319;
			an_id();
			State = 3320;
			Match(WITH);
			State = 3321;
			Match(LPAREN);
			State = 3322;
			changefeed_settings();
			State = 3323;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settings_entryContext[] changefeed_settings_entry() {
			return GetRuleContexts<Changefeed_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settings_entryContext changefeed_settings_entry(int i) {
			return GetRuleContext<Changefeed_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Changefeed_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_settings(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_settingsContext changefeed_settings() {
		Changefeed_settingsContext _localctx = new Changefeed_settingsContext(Context, State);
		EnterRule(_localctx, 536, RULE_changefeed_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3325;
			changefeed_settings_entry();
			State = 3330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3326;
				Match(COMMA);
				State = 3327;
				changefeed_settings_entry();
				}
				}
				State = 3332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_setting_valueContext changefeed_setting_value() {
			return GetRuleContext<Changefeed_setting_valueContext>(0);
		}
		public Changefeed_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_settings_entryContext changefeed_settings_entry() {
		Changefeed_settings_entryContext _localctx = new Changefeed_settings_entryContext(Context, State);
		EnterRule(_localctx, 538, RULE_changefeed_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333;
			an_id();
			State = 3334;
			Match(EQUALS);
			State = 3335;
			changefeed_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Changefeed_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_setting_valueContext changefeed_setting_value() {
		Changefeed_setting_valueContext _localctx = new Changefeed_setting_valueContext(Context, State);
		EnterRule(_localctx, 540, RULE_changefeed_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3337;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_alter_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settingsContext changefeed_settings() {
			return GetRuleContext<Changefeed_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Changefeed_alter_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_alter_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_alter_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_alter_settings(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_alter_settingsContext changefeed_alter_settings() {
		Changefeed_alter_settingsContext _localctx = new Changefeed_alter_settingsContext(Context, State);
		EnterRule(_localctx, 542, RULE_changefeed_alter_settings);
		try {
			State = 3345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3339;
				Match(DISABLE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3340;
				Match(SET);
				State = 3341;
				Match(LPAREN);
				State = 3342;
				changefeed_settings();
				State = 3343;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_setting_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Alter_table_setting_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_setting_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_setting_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_setting_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_setting_entryContext alter_table_setting_entry() {
		Alter_table_setting_entryContext _localctx = new Alter_table_setting_entryContext(Context, State);
		EnterRule(_localctx, 544, RULE_alter_table_setting_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347;
			an_id();
			State = 3348;
			Match(EQUALS);
			State = 3349;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Split_boundariesContext split_boundaries() {
			return GetRuleContext<Split_boundariesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_listContext ttl_tier_list() {
			return GetRuleContext<Ttl_tier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Table_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Table_setting_valueContext table_setting_value() {
		Table_setting_valueContext _localctx = new Table_setting_valueContext(Context, State);
		EnterRule(_localctx, 546, RULE_table_setting_value);
		int _la;
		try {
			State = 3363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3351;
				id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3352;
				Match(STRING_VALUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3353;
				integer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3354;
				split_boundaries();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3355;
				ttl_tier_list();
				State = 3356;
				Match(ON);
				State = 3357;
				an_id();
				State = 3360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3358;
					Match(AS);
					State = 3359;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & 11L) != 0) || _la==SECONDS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3362;
				bool_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ttl_tier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_actionContext[] ttl_tier_action() {
			return GetRuleContexts<Ttl_tier_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_actionContext ttl_tier_action(int i) {
			return GetRuleContext<Ttl_tier_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Ttl_tier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ttl_tier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTtl_tier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTtl_tier_list(this);
		}
	}

	[RuleVersion(0)]
	public Ttl_tier_listContext ttl_tier_list() {
		Ttl_tier_listContext _localctx = new Ttl_tier_listContext(Context, State);
		EnterRule(_localctx, 548, RULE_ttl_tier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3365;
			expr();
			State = 3376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELETE || _la==TO) {
				{
				State = 3366;
				ttl_tier_action();
				State = 3373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3367;
					Match(COMMA);
					State = 3368;
					expr();
					State = 3369;
					ttl_tier_action();
					}
					}
					State = 3375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ttl_tier_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		public Ttl_tier_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ttl_tier_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTtl_tier_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTtl_tier_action(this);
		}
	}

	[RuleVersion(0)]
	public Ttl_tier_actionContext ttl_tier_action() {
		Ttl_tier_actionContext _localctx = new Ttl_tier_actionContext(Context, State);
		EnterRule(_localctx, 550, RULE_ttl_tier_action);
		try {
			State = 3384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3378;
				Match(TO);
				State = 3379;
				Match(EXTERNAL);
				State = 3380;
				Match(DATA);
				State = 3381;
				Match(SOURCE);
				State = 3382;
				an_id();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3383;
				Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_settingsContext family_settings() {
			return GetRuleContext<Family_settingsContext>(0);
		}
		public Family_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_entry(this);
		}
	}

	[RuleVersion(0)]
	public Family_entryContext family_entry() {
		Family_entryContext _localctx = new Family_entryContext(Context, State);
		EnterRule(_localctx, 552, RULE_family_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3386;
			Match(FAMILY);
			State = 3387;
			an_id();
			State = 3388;
			family_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_settings_entryContext[] family_settings_entry() {
			return GetRuleContexts<Family_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_settings_entryContext family_settings_entry(int i) {
			return GetRuleContext<Family_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Family_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_settings(this);
		}
	}

	[RuleVersion(0)]
	public Family_settingsContext family_settings() {
		Family_settingsContext _localctx = new Family_settingsContext(Context, State);
		EnterRule(_localctx, 554, RULE_family_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3390;
			Match(LPAREN);
			State = 3399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -537919489L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & -17716772869L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & -17592186109953L) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & -576743326791901185L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 8588885967L) != 0)) {
				{
				State = 3391;
				family_settings_entry();
				State = 3396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3392;
					Match(COMMA);
					State = 3393;
					family_settings_entry();
					}
					}
					State = 3398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3401;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_setting_valueContext family_setting_value() {
			return GetRuleContext<Family_setting_valueContext>(0);
		}
		public Family_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Family_settings_entryContext family_settings_entry() {
		Family_settings_entryContext _localctx = new Family_settings_entryContext(Context, State);
		EnterRule(_localctx, 556, RULE_family_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3403;
			an_id();
			State = 3404;
			Match(EQUALS);
			State = 3405;
			family_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Family_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Family_setting_valueContext family_setting_value() {
		Family_setting_valueContext _localctx = new Family_setting_valueContext(Context, State);
		EnterRule(_localctx, 558, RULE_family_setting_value);
		try {
			State = 3409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3407;
				Match(STRING_VALUE);
				}
				break;
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3408;
				integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Split_boundariesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_value_listContext[] literal_value_list() {
			return GetRuleContexts<Literal_value_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_value_listContext literal_value_list(int i) {
			return GetRuleContext<Literal_value_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Split_boundariesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_split_boundaries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSplit_boundaries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSplit_boundaries(this);
		}
	}

	[RuleVersion(0)]
	public Split_boundariesContext split_boundaries() {
		Split_boundariesContext _localctx = new Split_boundariesContext(Context, State);
		EnterRule(_localctx, 560, RULE_split_boundaries);
		int _la;
		try {
			State = 3423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3411;
				Match(LPAREN);
				State = 3412;
				literal_value_list();
				State = 3417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3413;
					Match(COMMA);
					State = 3414;
					literal_value_list();
					}
					}
					State = 3419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3420;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3422;
				literal_value_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext[] literal_value() {
			return GetRuleContexts<Literal_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value(int i) {
			return GetRuleContext<Literal_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Literal_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Literal_value_listContext literal_value_list() {
		Literal_value_listContext _localctx = new Literal_value_listContext(Context, State);
		EnterRule(_localctx, 562, RULE_literal_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3425;
			Match(LPAREN);
			State = 3426;
			literal_value();
			State = 3431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3427;
				Match(COMMA);
				State = 3428;
				literal_value();
				}
				}
				State = 3433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3434;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_index_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_table_alter_index_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_index_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_index_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_index_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_index_actionContext alter_table_alter_index_action() {
		Alter_table_alter_index_actionContext _localctx = new Alter_table_alter_index_actionContext(Context, State);
		EnterRule(_localctx, 564, RULE_alter_table_alter_index_action);
		try {
			State = 3439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3436;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3437;
				alter_table_set_table_setting_compat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3438;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(Context, State);
		EnterRule(_localctx, 566, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3441;
			Match(DROP);
			State = 3446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 3442;
				Match(TABLE);
				}
				break;
			case TABLESTORE:
				{
				State = 3443;
				Match(TABLESTORE);
				}
				break;
			case EXTERNAL:
				{
				State = 3444;
				Match(EXTERNAL);
				State = 3445;
				Match(TABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				{
				State = 3448;
				Match(IF);
				State = 3449;
				Match(EXISTS);
				}
				break;
			}
			State = 3452;
			simple_table_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name() {
			return GetRuleContext<Role_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_optionContext[] create_user_option() {
			return GetRuleContexts<Create_user_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_optionContext create_user_option(int i) {
			return GetRuleContext<Create_user_optionContext>(i);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_stmtContext create_user_stmt() {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(Context, State);
		EnterRule(_localctx, 568, RULE_create_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3454;
			Match(CREATE);
			State = 3455;
			Match(USER);
			State = 3456;
			role_name();
			State = 3460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENCRYPTED || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 34359746561L) != 0)) {
				{
				{
				State = 3457;
				create_user_option();
				}
				}
				State = 3462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_optionContext[] create_user_option() {
			return GetRuleContexts<Create_user_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_optionContext create_user_option(int i) {
			return GetRuleContext<Create_user_optionContext>(i);
		}
		public Alter_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_stmtContext alter_user_stmt() {
		Alter_user_stmtContext _localctx = new Alter_user_stmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_alter_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3463;
			Match(ALTER);
			State = 3464;
			Match(USER);
			State = 3465;
			role_name();
			State = 3477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTED:
			case LOGIN:
			case NOLOGIN:
			case PASSWORD:
			case WITH:
				{
				State = 3467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 3466;
					Match(WITH);
					}
				}

				State = 3470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3469;
					create_user_option();
					}
					}
					State = 3472;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCRYPTED || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 34359746561L) != 0) );
				}
				break;
			case RENAME:
				{
				State = 3474;
				Match(RENAME);
				State = 3475;
				Match(TO);
				State = 3476;
				role_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_group_stmtContext create_group_stmt() {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_create_group_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3479;
			Match(CREATE);
			State = 3480;
			Match(GROUP);
			State = 3481;
			role_name();
			State = 3495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3482;
				Match(WITH);
				State = 3483;
				Match(USER);
				State = 3484;
				role_name();
				State = 3489;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3485;
						Match(COMMA);
						State = 3486;
						role_name();
						}
						} 
					}
					State = 3491;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
				}
				State = 3493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3492;
					Match(COMMA);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_group_stmtContext alter_group_stmt() {
		Alter_group_stmtContext _localctx = new Alter_group_stmtContext(Context, State);
		EnterRule(_localctx, 574, RULE_alter_group_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3497;
			Match(ALTER);
			State = 3498;
			Match(GROUP);
			State = 3499;
			role_name();
			State = 3516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 3500;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3501;
				Match(USER);
				State = 3502;
				role_name();
				State = 3507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3503;
						Match(COMMA);
						State = 3504;
						role_name();
						}
						} 
					}
					State = 3509;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
				}
				State = 3511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3510;
					Match(COMMA);
					}
				}

				}
				break;
			case RENAME:
				{
				State = 3513;
				Match(RENAME);
				State = 3514;
				Match(TO);
				State = 3515;
				role_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_role_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_role_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_role_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_role_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_role_stmtContext drop_role_stmt() {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(Context, State);
		EnterRule(_localctx, 576, RULE_drop_role_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3518;
			Match(DROP);
			State = 3519;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUP || _la==USER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				{
				State = 3520;
				Match(IF);
				State = 3521;
				Match(EXISTS);
				}
				break;
			}
			State = 3524;
			role_name();
			State = 3529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,357,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3525;
					Match(COMMA);
					State = 3526;
					role_name();
					}
					} 
				}
				State = 3531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,357,Context);
			}
			State = 3533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3532;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRole_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRole_name(this);
		}
	}

	[RuleVersion(0)]
	public Role_nameContext role_name() {
		Role_nameContext _localctx = new Role_nameContext(Context, State);
		EnterRule(_localctx, 578, RULE_role_name);
		try {
			State = 3537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3535;
				an_id_or_type();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3536;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Password_optionContext password_option() {
			return GetRuleContext<Password_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Login_optionContext login_option() {
			return GetRuleContext<Login_optionContext>(0);
		}
		public Create_user_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_user_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_user_option(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_optionContext create_user_option() {
		Create_user_optionContext _localctx = new Create_user_optionContext(Context, State);
		EnterRule(_localctx, 580, RULE_create_user_option);
		try {
			State = 3541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTED:
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3539;
				password_option();
				}
				break;
			case LOGIN:
			case NOLOGIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3540;
				login_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		public Password_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPassword_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPassword_option(this);
		}
	}

	[RuleVersion(0)]
	public Password_optionContext password_option() {
		Password_optionContext _localctx = new Password_optionContext(Context, State);
		EnterRule(_localctx, 582, RULE_password_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPTED) {
				{
				State = 3543;
				Match(ENCRYPTED);
				}
			}

			State = 3546;
			Match(PASSWORD);
			State = 3547;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Login_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		public Login_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_login_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLogin_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLogin_option(this);
		}
	}

	[RuleVersion(0)]
	public Login_optionContext login_option() {
		Login_optionContext _localctx = new Login_optionContext(Context, State);
		EnterRule(_localctx, 584, RULE_login_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			_la = TokenStream.LA(1);
			if ( !(_la==LOGIN || _la==NOLOGIN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissions_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(YQLParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(YQLParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Permission_name_targetContext permission_name_target() {
			return GetRuleContext<Permission_name_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		public Grant_permissions_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permissions_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrant_permissions_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrant_permissions_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissions_stmtContext grant_permissions_stmt() {
		Grant_permissions_stmtContext _localctx = new Grant_permissions_stmtContext(Context, State);
		EnterRule(_localctx, 586, RULE_grant_permissions_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3551;
			Match(GRANT);
			State = 3552;
			permission_name_target();
			State = 3553;
			Match(ON);
			State = 3554;
			an_id_schema();
			State = 3559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3555;
				Match(COMMA);
				State = 3556;
				an_id_schema();
				}
				}
				State = 3561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3562;
			Match(TO);
			State = 3563;
			role_name();
			State = 3568;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,363,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3564;
					Match(COMMA);
					State = 3565;
					role_name();
					}
					} 
				}
				State = 3570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,363,Context);
			}
			State = 3572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3571;
				Match(COMMA);
				}
			}

			State = 3577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3574;
				Match(WITH);
				State = 3575;
				Match(GRANT);
				State = 3576;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_permissions_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Permission_name_targetContext permission_name_target() {
			return GetRuleContext<Permission_name_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Revoke_permissions_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_permissions_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRevoke_permissions_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRevoke_permissions_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_permissions_stmtContext revoke_permissions_stmt() {
		Revoke_permissions_stmtContext _localctx = new Revoke_permissions_stmtContext(Context, State);
		EnterRule(_localctx, 588, RULE_revoke_permissions_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3579;
			Match(REVOKE);
			State = 3583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3580;
				Match(GRANT);
				State = 3581;
				Match(OPTION);
				State = 3582;
				Match(FOR);
				}
				break;
			}
			State = 3585;
			permission_name_target();
			State = 3586;
			Match(ON);
			State = 3587;
			an_id_schema();
			State = 3592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3588;
				Match(COMMA);
				State = 3589;
				an_id_schema();
				}
				}
				State = 3594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3595;
			Match(FROM);
			State = 3596;
			role_name();
			State = 3601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3597;
				Match(COMMA);
				State = 3598;
				role_name();
				}
				}
				State = 3603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		public Permission_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_id(this);
		}
	}

	[RuleVersion(0)]
	public Permission_idContext permission_id() {
		Permission_idContext _localctx = new Permission_idContext(Context, State);
		EnterRule(_localctx, 590, RULE_permission_id);
		int _la;
		try {
			State = 3628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3604;
				Match(CONNECT);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3605;
				Match(LIST);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3606;
				Match(INSERT);
				}
				break;
			case MANAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3607;
				Match(MANAGE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3608;
				Match(DROP);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3609;
				Match(GRANT);
				}
				break;
			case MODIFY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3610;
				Match(MODIFY);
				State = 3611;
				_la = TokenStream.LA(1);
				if ( !(_la==ATTRIBUTES || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ERASE:
			case UPDATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3612;
				_la = TokenStream.LA(1);
				if ( !(_la==ERASE || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3613;
				Match(ROW);
				}
				break;
			case ALTER:
			case DESCRIBE:
			case REMOVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3614;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DESCRIBE || _la==REMOVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3615;
				Match(SCHEMA);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3616;
				Match(SELECT);
				State = 3618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ATTRIBUTES || _la==ROW || _la==TABLES) {
					{
					State = 3617;
					_la = TokenStream.LA(1);
					if ( !(_la==ATTRIBUTES || _la==ROW || _la==TABLES) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case FULL:
			case USE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3620;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==USE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEGACY) {
					{
					State = 3621;
					Match(LEGACY);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3624;
				Match(CREATE);
				State = 3626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIRECTORY || _la==QUEUE || _la==TABLE) {
					{
					State = 3625;
					_la = TokenStream.LA(1);
					if ( !(_la==DIRECTORY || _la==QUEUE || _la==TABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Permission_idContext permission_id() {
			return GetRuleContext<Permission_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Permission_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_name(this);
		}
	}

	[RuleVersion(0)]
	public Permission_nameContext permission_name() {
		Permission_nameContext _localctx = new Permission_nameContext(Context, State);
		EnterRule(_localctx, 592, RULE_permission_name);
		try {
			State = 3632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case CONNECT:
			case CREATE:
			case DESCRIBE:
			case DROP:
			case ERASE:
			case FULL:
			case GRANT:
			case INSERT:
			case LIST:
			case MANAGE:
			case MODIFY:
			case REMOVE:
			case SELECT:
			case UPDATE:
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3630;
				permission_id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3631;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_name_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Permission_nameContext[] permission_name() {
			return GetRuleContexts<Permission_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Permission_nameContext permission_name(int i) {
			return GetRuleContext<Permission_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		public Permission_name_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_name_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_name_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_name_target(this);
		}
	}

	[RuleVersion(0)]
	public Permission_name_targetContext permission_name_target() {
		Permission_name_targetContext _localctx = new Permission_name_targetContext(Context, State);
		EnterRule(_localctx, 594, RULE_permission_name_target);
		int _la;
		try {
			int _alt;
			State = 3649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case CONNECT:
			case CREATE:
			case DESCRIBE:
			case DROP:
			case ERASE:
			case FULL:
			case GRANT:
			case INSERT:
			case LIST:
			case MANAGE:
			case MODIFY:
			case REMOVE:
			case SELECT:
			case UPDATE:
			case USE:
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3634;
				permission_name();
				State = 3639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3635;
						Match(COMMA);
						State = 3636;
						permission_name();
						}
						} 
					}
					State = 3641;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
				}
				State = 3643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3642;
					Match(COMMA);
					}
				}

				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3645;
				Match(ALL);
				State = 3647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 3646;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		public Create_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_pool_stmtContext create_resource_pool_stmt() {
		Create_resource_pool_stmtContext _localctx = new Create_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 596, RULE_create_resource_pool_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3651;
			Match(CREATE);
			State = 3652;
			Match(RESOURCE);
			State = 3653;
			Match(POOL);
			State = 3654;
			object_ref();
			State = 3655;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_actionContext[] alter_resource_pool_action() {
			return GetRuleContexts<Alter_resource_pool_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_actionContext alter_resource_pool_action(int i) {
			return GetRuleContext<Alter_resource_pool_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_stmtContext alter_resource_pool_stmt() {
		Alter_resource_pool_stmtContext _localctx = new Alter_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 598, RULE_alter_resource_pool_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3657;
			Match(ALTER);
			State = 3658;
			Match(RESOURCE);
			State = 3659;
			Match(POOL);
			State = 3660;
			object_ref();
			State = 3661;
			alter_resource_pool_action();
			State = 3666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3662;
				Match(COMMA);
				State = 3663;
				alter_resource_pool_action();
				}
				}
				State = 3668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_resource_pool_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_actionContext alter_resource_pool_action() {
		Alter_resource_pool_actionContext _localctx = new Alter_resource_pool_actionContext(Context, State);
		EnterRule(_localctx, 600, RULE_alter_resource_pool_action);
		try {
			State = 3671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3669;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3670;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Drop_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_pool_stmtContext drop_resource_pool_stmt() {
		Drop_resource_pool_stmtContext _localctx = new Drop_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 602, RULE_drop_resource_pool_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3673;
			Match(DROP);
			State = 3674;
			Match(RESOURCE);
			State = 3675;
			Match(POOL);
			State = 3676;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		public Create_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_pool_classifier_stmtContext create_resource_pool_classifier_stmt() {
		Create_resource_pool_classifier_stmtContext _localctx = new Create_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 604, RULE_create_resource_pool_classifier_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3678;
			Match(CREATE);
			State = 3679;
			Match(RESOURCE);
			State = 3680;
			Match(POOL);
			State = 3681;
			Match(CLASSIFIER);
			State = 3682;
			object_ref();
			State = 3683;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_actionContext[] alter_resource_pool_classifier_action() {
			return GetRuleContexts<Alter_resource_pool_classifier_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_actionContext alter_resource_pool_classifier_action(int i) {
			return GetRuleContext<Alter_resource_pool_classifier_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_classifier_stmtContext alter_resource_pool_classifier_stmt() {
		Alter_resource_pool_classifier_stmtContext _localctx = new Alter_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 606, RULE_alter_resource_pool_classifier_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3685;
			Match(ALTER);
			State = 3686;
			Match(RESOURCE);
			State = 3687;
			Match(POOL);
			State = 3688;
			Match(CLASSIFIER);
			State = 3689;
			object_ref();
			State = 3690;
			alter_resource_pool_classifier_action();
			State = 3695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3691;
				Match(COMMA);
				State = 3692;
				alter_resource_pool_classifier_action();
				}
				}
				State = 3697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_classifier_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_resource_pool_classifier_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_classifier_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_classifier_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_classifier_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_classifier_actionContext alter_resource_pool_classifier_action() {
		Alter_resource_pool_classifier_actionContext _localctx = new Alter_resource_pool_classifier_actionContext(Context, State);
		EnterRule(_localctx, 608, RULE_alter_resource_pool_classifier_action);
		try {
			State = 3700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3698;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3699;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Drop_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_pool_classifier_stmtContext drop_resource_pool_classifier_stmt() {
		Drop_resource_pool_classifier_stmtContext _localctx = new Drop_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 610, RULE_drop_resource_pool_classifier_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3702;
			Match(DROP);
			State = 3703;
			Match(RESOURCE);
			State = 3704;
			Match(POOL);
			State = 3705;
			Match(CLASSIFIER);
			State = 3706;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_targetContext[] replication_target() {
			return GetRuleContexts<Replication_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Replication_targetContext replication_target(int i) {
			return GetRuleContext<Replication_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settingsContext replication_settings() {
			return GetRuleContext<Replication_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_replication_stmtContext create_replication_stmt() {
		Create_replication_stmtContext _localctx = new Create_replication_stmtContext(Context, State);
		EnterRule(_localctx, 612, RULE_create_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3708;
			Match(CREATE);
			State = 3709;
			Match(ASYNC);
			State = 3710;
			Match(REPLICATION);
			State = 3711;
			object_ref();
			State = 3712;
			Match(FOR);
			State = 3713;
			replication_target();
			State = 3718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3714;
				Match(COMMA);
				State = 3715;
				replication_target();
				}
				}
				State = 3720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3721;
			Match(WITH);
			State = 3722;
			Match(LPAREN);
			State = 3723;
			replication_settings();
			State = 3724;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext[] object_ref() {
			return GetRuleContexts<Object_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref(int i) {
			return GetRuleContext<Object_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Replication_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_target(this);
		}
	}

	[RuleVersion(0)]
	public Replication_targetContext replication_target() {
		Replication_targetContext _localctx = new Replication_targetContext(Context, State);
		EnterRule(_localctx, 614, RULE_replication_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3726;
			object_ref();
			State = 3727;
			Match(AS);
			State = 3728;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settings_entryContext[] replication_settings_entry() {
			return GetRuleContexts<Replication_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settings_entryContext replication_settings_entry(int i) {
			return GetRuleContext<Replication_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Replication_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_settings(this);
		}
	}

	[RuleVersion(0)]
	public Replication_settingsContext replication_settings() {
		Replication_settingsContext _localctx = new Replication_settingsContext(Context, State);
		EnterRule(_localctx, 616, RULE_replication_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3730;
			replication_settings_entry();
			State = 3735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3731;
				Match(COMMA);
				State = 3732;
				replication_settings_entry();
				}
				}
				State = 3737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Replication_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Replication_settings_entryContext replication_settings_entry() {
		Replication_settings_entryContext _localctx = new Replication_settings_entryContext(Context, State);
		EnterRule(_localctx, 618, RULE_replication_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3738;
			an_id();
			State = 3739;
			Match(EQUALS);
			State = 3740;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_actionContext[] alter_replication_action() {
			return GetRuleContexts<Alter_replication_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_actionContext alter_replication_action(int i) {
			return GetRuleContext<Alter_replication_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_stmtContext alter_replication_stmt() {
		Alter_replication_stmtContext _localctx = new Alter_replication_stmtContext(Context, State);
		EnterRule(_localctx, 620, RULE_alter_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3742;
			Match(ALTER);
			State = 3743;
			Match(ASYNC);
			State = 3744;
			Match(REPLICATION);
			State = 3745;
			object_ref();
			State = 3746;
			alter_replication_action();
			State = 3751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3747;
				Match(COMMA);
				State = 3748;
				alter_replication_action();
				}
				}
				State = 3753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_set_settingContext alter_replication_set_setting() {
			return GetRuleContext<Alter_replication_set_settingContext>(0);
		}
		public Alter_replication_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_actionContext alter_replication_action() {
		Alter_replication_actionContext _localctx = new Alter_replication_actionContext(Context, State);
		EnterRule(_localctx, 622, RULE_alter_replication_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3754;
			alter_replication_set_setting();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_set_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settingsContext replication_settings() {
			return GetRuleContext<Replication_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Alter_replication_set_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_set_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_set_setting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_set_setting(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_set_settingContext alter_replication_set_setting() {
		Alter_replication_set_settingContext _localctx = new Alter_replication_set_settingContext(Context, State);
		EnterRule(_localctx, 624, RULE_alter_replication_set_setting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3756;
			Match(SET);
			State = 3757;
			Match(LPAREN);
			State = 3758;
			replication_settings();
			State = 3759;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		public Drop_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_replication_stmtContext drop_replication_stmt() {
		Drop_replication_stmtContext _localctx = new Drop_replication_stmtContext(Context, State);
		EnterRule(_localctx, 626, RULE_drop_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3761;
			Match(DROP);
			State = 3762;
			Match(ASYNC);
			State = 3763;
			Match(REPLICATION);
			State = 3764;
			object_ref();
			State = 3766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE) {
				{
				State = 3765;
				Match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_or_subquery_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_bind_parameterContext[] opt_bind_parameter() {
			return GetRuleContexts<Opt_bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_bind_parameterContext opt_bind_parameter(int i) {
			return GetRuleContext<Opt_bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Action_or_subquery_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_or_subquery_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAction_or_subquery_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAction_or_subquery_args(this);
		}
	}

	[RuleVersion(0)]
	public Action_or_subquery_argsContext action_or_subquery_args() {
		Action_or_subquery_argsContext _localctx = new Action_or_subquery_argsContext(Context, State);
		EnterRule(_localctx, 628, RULE_action_or_subquery_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3768;
			opt_bind_parameter();
			State = 3773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3769;
				Match(COMMA);
				State = 3770;
				opt_bind_parameter();
				}
				}
				State = 3775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_action_or_subquery_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFINE() { return GetTokens(YQLParser.DEFINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE(int i) {
			return GetToken(YQLParser.DEFINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
			return GetRuleContext<Define_action_or_subquery_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Action_or_subquery_argsContext action_or_subquery_args() {
			return GetRuleContext<Action_or_subquery_argsContext>(0);
		}
		public Define_action_or_subquery_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_action_or_subquery_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDefine_action_or_subquery_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDefine_action_or_subquery_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Define_action_or_subquery_stmtContext define_action_or_subquery_stmt() {
		Define_action_or_subquery_stmtContext _localctx = new Define_action_or_subquery_stmtContext(Context, State);
		EnterRule(_localctx, 630, RULE_define_action_or_subquery_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3776;
			Match(DEFINE);
			State = 3777;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTION || _la==SUBQUERY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3778;
			bind_parameter();
			State = 3779;
			Match(LPAREN);
			State = 3781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR) {
				{
				State = 3780;
				action_or_subquery_args();
				}
			}

			State = 3783;
			Match(RPAREN);
			State = 3784;
			Match(AS);
			State = 3785;
			define_action_or_subquery_body();
			State = 3786;
			Match(END);
			State = 3787;
			Match(DEFINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_action_or_subquery_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext[] sql_stmt_core() {
			return GetRuleContexts<Sql_stmt_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext sql_stmt_core(int i) {
			return GetRuleContext<Sql_stmt_coreContext>(i);
		}
		public Define_action_or_subquery_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_action_or_subquery_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDefine_action_or_subquery_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDefine_action_or_subquery_body(this);
		}
	}

	[RuleVersion(0)]
	public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
		Define_action_or_subquery_bodyContext _localctx = new Define_action_or_subquery_bodyContext(Context, State);
		EnterRule(_localctx, 632, RULE_define_action_or_subquery_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 3789;
				Match(SEMICOLON);
				}
				}
				State = 3794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576487141689786368L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & -6915259621669863167L) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & 2099329L) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 4513512681407489L) != 0) || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & 71L) != 0)) {
				{
				State = 3795;
				sql_stmt_core();
				State = 3804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,390,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3797;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 3796;
							Match(SEMICOLON);
							}
							}
							State = 3799;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==SEMICOLON );
						State = 3801;
						sql_stmt_core();
						}
						} 
					}
					State = 3806;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,390,Context);
				}
				State = 3810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					State = 3807;
					Match(SEMICOLON);
					}
					}
					State = 3812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext[] do_stmt() {
			return GetRuleContexts<Do_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt(int i) {
			return GetRuleContext<Do_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 634, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVALUATE) {
				{
				State = 3815;
				Match(EVALUATE);
				}
			}

			State = 3818;
			Match(IF);
			State = 3819;
			expr();
			State = 3820;
			do_stmt();
			State = 3823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3821;
				Match(ELSE);
				State = 3822;
				do_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext[] do_stmt() {
			return GetRuleContexts<Do_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt(int i) {
			return GetRuleContext<Do_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 636, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVALUATE) {
				{
				State = 3825;
				Match(EVALUATE);
				}
			}

			State = 3829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARALLEL) {
				{
				State = 3828;
				Match(PARALLEL);
				}
			}

			State = 3831;
			Match(FOR);
			State = 3832;
			bind_parameter();
			State = 3833;
			Match(IN);
			State = 3834;
			expr();
			State = 3835;
			do_stmt();
			State = 3838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3836;
				Match(ELSE);
				State = 3837;
				do_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_keyContext table_key() {
			return GetRuleContext<Table_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_exprContext an_id_expr() {
			return GetRuleContext<An_id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintsContext table_hints() {
			return GetRuleContext<Table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_argContext[] table_arg() {
			return GetRuleContexts<Table_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_argContext table_arg(int i) {
			return GetRuleContext<Table_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_ref(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 638, RULE_table_ref);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				{
				State = 3840;
				cluster_expr();
				State = 3841;
				Match(DOT);
				}
				break;
			}
			State = 3846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 3845;
				Match(COMMAT);
				}
			}

			State = 3878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				{
				State = 3848;
				table_key();
				}
				break;
			case 2:
				{
				State = 3849;
				an_id_expr();
				State = 3850;
				Match(LPAREN);
				State = 3862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194201571L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
					{
					State = 3851;
					table_arg();
					State = 3856;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3852;
							Match(COMMA);
							State = 3853;
							table_arg();
							}
							} 
						}
						State = 3858;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
					}
					State = 3860;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3859;
						Match(COMMA);
						}
					}

					}
				}

				State = 3864;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				State = 3866;
				bind_parameter();
				State = 3872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3867;
					Match(LPAREN);
					State = 3869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -137438953473L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 2305843009213693951L) != 0)) {
						{
						State = 3868;
						expr_list();
						}
					}

					State = 3871;
					Match(RPAREN);
					}
				}

				State = 3876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIEW) {
					{
					State = 3874;
					Match(VIEW);
					State = 3875;
					view_name();
					}
				}

				}
				break;
			}
			State = 3881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3880;
				table_hints();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_table_or_typeContext id_table_or_type() {
			return GetRuleContext<Id_table_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public Table_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_key(this);
		}
	}

	[RuleVersion(0)]
	public Table_keyContext table_key() {
		Table_keyContext _localctx = new Table_keyContext(Context, State);
		EnterRule(_localctx, 640, RULE_table_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3883;
			id_table_or_type();
			State = 3886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VIEW) {
				{
				State = 3884;
				Match(VIEW);
				State = 3885;
				view_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr() {
			return GetRuleContext<Named_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public Table_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_arg(this);
		}
	}

	[RuleVersion(0)]
	public Table_argContext table_arg() {
		Table_argContext _localctx = new Table_argContext(Context, State);
		EnterRule(_localctx, 642, RULE_table_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 3888;
				Match(COMMAT);
				}
			}

			State = 3891;
			named_expr();
			State = 3894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VIEW) {
				{
				State = 3892;
				Match(VIEW);
				State = 3893;
				view_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_hints(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintsContext table_hints() {
		Table_hintsContext _localctx = new Table_hintsContext(Context, State);
		EnterRule(_localctx, 644, RULE_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3896;
			Match(WITH);
			State = 3909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 3897;
				table_hint();
				}
				break;
			case LPAREN:
				{
				State = 3898;
				Match(LPAREN);
				State = 3899;
				table_hint();
				State = 3904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3900;
					Match(COMMA);
					State = 3901;
					table_hint();
					}
					}
					State = 3906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3907;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_hintContext an_id_hint() {
			return GetRuleContext<An_id_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext[] type_name_tag() {
			return GetRuleContexts<Type_name_tagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag(int i) {
			return GetRuleContext<Type_name_tagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_arg_positionalContext[] struct_arg_positional() {
			return GetRuleContexts<Struct_arg_positionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_arg_positionalContext struct_arg_positional(int i) {
			return GetRuleContext<Struct_arg_positionalContext>(i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 646, RULE_table_hint);
		int _la;
		try {
			int _alt;
			State = 3956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3911;
				an_id_hint();
				State = 3930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 3912;
					Match(EQUALS);
					State = 3928;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
					case ABORT:
					case ACTION:
					case ADD:
					case AFTER:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANSI:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSUME:
					case ASYMMETRIC:
					case ASYNC:
					case AT:
					case ATTACH:
					case ATTRIBUTES:
					case AUTOINCREMENT:
					case BACKUP:
					case COLLECTION:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BITCAST:
					case BY:
					case CASCADE:
					case CASE:
					case CAST:
					case CHANGEFEED:
					case CHECK:
					case CLASSIFIER:
					case COLLATE:
					case COLUMN:
					case COLUMNS:
					case COMMIT:
					case COMPACT:
					case CONDITIONAL:
					case CONFLICT:
					case CONNECT:
					case CONSTRAINT:
					case CONSUMER:
					case COVER:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case DATA:
					case DATABASE:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFERRABLE:
					case DEFERRED:
					case DEFINE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DETACH:
					case DIRECTORY:
					case DISABLE:
					case DISCARD:
					case DISTINCT:
					case DO:
					case DROP:
					case EACH:
					case ELSE:
					case EMPTY:
					case EMPTY_ACTION:
					case ENCRYPTED:
					case END:
					case ERASE:
					case ERROR:
					case ESCAPE:
					case EVALUATE:
					case EXCEPT:
					case EXCLUDE:
					case EXCLUSION:
					case EXCLUSIVE:
					case EXISTS:
					case EXPLAIN:
					case EXPORT:
					case EXTERNAL:
					case FAIL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FLATTEN:
					case FOLLOWING:
					case FOR:
					case FOREIGN:
					case FROM:
					case FULL:
					case FUNCTION:
					case GLOB:
					case GLOBAL:
					case GRANT:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case HOP:
					case IF:
					case IGNORE:
					case ILIKE:
					case IMMEDIATE:
					case IMPORT:
					case IN:
					case INCREMENT:
					case INCREMENTAL:
					case INDEX:
					case INDEXED:
					case INHERITS:
					case INITIAL:
					case INITIALLY:
					case INNER:
					case INSERT:
					case INSTEAD:
					case INTERSECT:
					case INTO:
					case IS:
					case ISNULL:
					case JOIN:
					case JSON_EXISTS:
					case JSON_QUERY:
					case JSON_VALUE:
					case KEY:
					case LAST:
					case LEFT:
					case LEGACY:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOGIN:
					case MANAGE:
					case MATCH:
					case MATCHES:
					case MATCH_RECOGNIZE:
					case MEASURES:
					case MICROSECONDS:
					case MILLISECONDS:
					case MODIFY:
					case NANOSECONDS:
					case NATURAL:
					case NEXT:
					case NO:
					case NOLOGIN:
					case NOT:
					case NOTNULL:
					case NULL:
					case NULLS:
					case OBJECT:
					case OF:
					case OFFSET:
					case OMIT:
					case ON:
					case ONE:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case OTHERS:
					case OUTER:
					case OVER:
					case PARALLEL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PAST:
					case PATTERN:
					case PER:
					case PERMUTE:
					case PLAN:
					case POOL:
					case PRAGMA:
					case PRECEDING:
					case PRESORT:
					case PRIMARY:
					case PRIVILEGES:
					case PROCESS:
					case QUERY:
					case QUEUE:
					case RAISE:
					case RANGE:
					case REDUCE:
					case REFERENCES:
					case REGEXP:
					case REINDEX:
					case RELEASE:
					case REMOVE:
					case RENAME:
					case REPLACE:
					case REPLICATION:
					case RESET:
					case RESPECT:
					case RESTART:
					case RESTORE:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNING:
					case REVERT:
					case REVOKE:
					case RIGHT:
					case RLIKE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SAMPLE:
					case SAVEPOINT:
					case SCHEMA:
					case SECONDS:
					case SEEK:
					case SELECT:
					case SEMI:
					case SETS:
					case SHOW:
					case TSKIP:
					case SEQUENCE:
					case SOURCE:
					case START:
					case STREAM:
					case SUBQUERY:
					case SUBSET:
					case SYMBOLS:
					case SYMMETRIC:
					case SYNC:
					case SYSTEM:
					case TABLE:
					case TABLES:
					case TABLESAMPLE:
					case TABLESTORE:
					case TEMP:
					case TEMPORARY:
					case THEN:
					case TIES:
					case TO:
					case TOPIC:
					case TRANSACTION:
					case TRIGGER:
					case TYPE:
					case UNBOUNDED:
					case UNCONDITIONAL:
					case UNION:
					case UNIQUE:
					case UNKNOWN:
					case UNMATCHED:
					case UPDATE:
					case UPSERT:
					case USE:
					case USER:
					case USING:
					case VACUUM:
					case VALUES:
					case VIEW:
					case VIRTUAL:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHOUT:
					case WRAPPER:
					case XOR:
					case STRING_VALUE:
					case ID_PLAIN:
					case ID_QUOTED:
						{
						State = 3913;
						type_name_tag();
						}
						break;
					case LPAREN:
						{
						State = 3914;
						Match(LPAREN);
						State = 3915;
						type_name_tag();
						State = 3920;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,413,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 3916;
								Match(COMMA);
								State = 3917;
								type_name_tag();
								}
								} 
							}
							State = 3922;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,413,Context);
						}
						State = 3924;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3923;
							Match(COMMA);
							}
						}

						State = 3926;
						Match(RPAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3932;
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 3933;
					Match(EQUALS);
					}
				}

				State = 3936;
				type_name_or_bind();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3937;
				Match(SCHEMA);
				State = 3939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 3938;
					Match(EQUALS);
					}
				}

				State = 3941;
				Match(LPAREN);
				State = 3950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -268435711L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -137438953473L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -1L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -2097153L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 2199023251455L) != 0)) {
					{
					State = 3942;
					struct_arg_positional();
					State = 3947;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,419,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3943;
							Match(COMMA);
							State = 3944;
							struct_arg_positional();
							}
							} 
						}
						State = 3949;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,419,Context);
					}
					}
				}

				State = 3953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3952;
					Match(COMMA);
					}
				}

				State = 3955;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_atContext id_or_at() {
			return GetRuleContext<Id_or_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Object_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_ref(this);
		}
	}

	[RuleVersion(0)]
	public Object_refContext object_ref() {
		Object_refContext _localctx = new Object_refContext(Context, State);
		EnterRule(_localctx, 648, RULE_object_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 3958;
				cluster_expr();
				State = 3959;
				Match(DOT);
				}
				break;
			}
			State = 3963;
			id_or_at();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_table_ref_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Simple_table_ref_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_table_ref_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_table_ref_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_table_ref_core(this);
		}
	}

	[RuleVersion(0)]
	public Simple_table_ref_coreContext simple_table_ref_core() {
		Simple_table_ref_coreContext _localctx = new Simple_table_ref_coreContext(Context, State);
		EnterRule(_localctx, 650, RULE_simple_table_ref_core);
		int _la;
		try {
			State = 3970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3965;
				object_ref();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAT) {
					{
					State = 3966;
					Match(COMMAT);
					}
				}

				State = 3969;
				bind_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core() {
			return GetRuleContext<Simple_table_ref_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintsContext table_hints() {
			return GetRuleContext<Table_hintsContext>(0);
		}
		public Simple_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_table_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_table_ref(this);
		}
	}

	[RuleVersion(0)]
	public Simple_table_refContext simple_table_ref() {
		Simple_table_refContext _localctx = new Simple_table_refContext(Context, State);
		EnterRule(_localctx, 652, RULE_simple_table_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3972;
			simple_table_ref_core();
			State = 3974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3973;
				table_hints();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_simple_table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Into_simple_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_simple_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_simple_table_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_simple_table_ref(this);
		}
	}

	[RuleVersion(0)]
	public Into_simple_table_refContext into_simple_table_ref() {
		Into_simple_table_refContext _localctx = new Into_simple_table_refContext(Context, State);
		EnterRule(_localctx, 654, RULE_into_simple_table_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3976;
			simple_table_ref();
			State = 3980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERASE) {
				{
				State = 3977;
				Match(ERASE);
				State = 3978;
				Match(BY);
				State = 3979;
				pure_column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 656, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3982;
			Match(DELETE);
			State = 3983;
			Match(FROM);
			State = 3984;
			simple_table_ref();
			State = 3989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				{
				State = 3985;
				Match(WHERE);
				State = 3986;
				expr();
				}
				break;
			case ON:
				{
				State = 3987;
				Match(ON);
				State = 3988;
				into_values_source();
				}
				break;
			case Eof:
			case SEMICOLON:
			case END:
			case RETURNING:
				break;
			default:
				break;
			}
			State = 3992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 3991;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_choiceContext set_clause_choice() {
			return GetRuleContext<Set_clause_choiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 658, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3994;
			Match(UPDATE);
			State = 3995;
			simple_table_ref();
			State = 4004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				{
				State = 3996;
				Match(SET);
				State = 3997;
				set_clause_choice();
				State = 4000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 3998;
					Match(WHERE);
					State = 3999;
					expr();
					}
				}

				}
				break;
			case ON:
				{
				State = 4002;
				Match(ON);
				State = 4003;
				into_values_source();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 4006;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_choiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_column_assignmentContext multiple_column_assignment() {
			return GetRuleContext<Multiple_column_assignmentContext>(0);
		}
		public Set_clause_choiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause_choice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause_choice(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_choiceContext set_clause_choice() {
		Set_clause_choiceContext _localctx = new Set_clause_choiceContext(Context, State);
		EnterRule(_localctx, 660, RULE_set_clause_choice);
		try {
			State = 4011;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4009;
				set_clause_list();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4010;
				multiple_column_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext[] set_clause() {
			return GetRuleContexts<Set_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause(int i) {
			return GetRuleContext<Set_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, State);
		EnterRule(_localctx, 662, RULE_set_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4013;
			set_clause();
			State = 4018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4014;
				Match(COMMA);
				State = 4015;
				set_clause();
				}
				}
				State = 4020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 664, RULE_set_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4021;
			set_target();
			State = 4022;
			Match(EQUALS);
			State = 4023;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 666, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4025;
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_column_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_values_sourceContext simple_values_source() {
			return GetRuleContext<Simple_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Multiple_column_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_column_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMultiple_column_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMultiple_column_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_column_assignmentContext multiple_column_assignment() {
		Multiple_column_assignmentContext _localctx = new Multiple_column_assignmentContext(Context, State);
		EnterRule(_localctx, 668, RULE_multiple_column_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4027;
			set_target_list();
			State = 4028;
			Match(EQUALS);
			State = 4029;
			Match(LPAREN);
			State = 4030;
			simple_values_source();
			State = 4031;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext[] set_target() {
			return GetRuleContexts<Set_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target(int i) {
			return GetRuleContext<Set_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		Set_target_listContext _localctx = new Set_target_listContext(Context, State);
		EnterRule(_localctx, 670, RULE_set_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4033;
			Match(LPAREN);
			State = 4034;
			set_target();
			State = 4039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4035;
				Match(COMMA);
				State = 4036;
				set_target();
				}
				}
				State = 4041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4042;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entriesContext create_topic_entries() {
			return GetRuleContext<Create_topic_entriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_topic_settingsContext with_topic_settings() {
			return GetRuleContext<With_topic_settingsContext>(0);
		}
		public Create_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_stmtContext create_topic_stmt() {
		Create_topic_stmtContext _localctx = new Create_topic_stmtContext(Context, State);
		EnterRule(_localctx, 672, RULE_create_topic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4044;
			Match(CREATE);
			State = 4045;
			Match(TOPIC);
			State = 4049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				{
				State = 4046;
				Match(IF);
				State = 4047;
				Match(NOT);
				State = 4048;
				Match(EXISTS);
				}
				break;
			}
			State = 4051;
			topic_ref();
			State = 4053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 4052;
				create_topic_entries();
				}
			}

			State = 4056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4055;
				with_topic_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entryContext[] create_topic_entry() {
			return GetRuleContexts<Create_topic_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entryContext create_topic_entry(int i) {
			return GetRuleContext<Create_topic_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_topic_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_entries(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_entriesContext create_topic_entries() {
		Create_topic_entriesContext _localctx = new Create_topic_entriesContext(Context, State);
		EnterRule(_localctx, 674, RULE_create_topic_entries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4058;
			Match(LPAREN);
			State = 4059;
			create_topic_entry();
			State = 4064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4060;
				Match(COMMA);
				State = 4061;
				create_topic_entry();
				}
				}
				State = 4066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4067;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_create_consumer_entryContext topic_create_consumer_entry() {
			return GetRuleContext<Topic_create_consumer_entryContext>(0);
		}
		public Create_topic_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_entry(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_entryContext create_topic_entry() {
		Create_topic_entryContext _localctx = new Create_topic_entryContext(Context, State);
		EnterRule(_localctx, 676, RULE_create_topic_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4069;
			topic_create_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_topic_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settingsContext topic_settings() {
			return GetRuleContext<Topic_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public With_topic_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_topic_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_topic_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_topic_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_topic_settingsContext with_topic_settings() {
		With_topic_settingsContext _localctx = new With_topic_settingsContext(Context, State);
		EnterRule(_localctx, 678, RULE_with_topic_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4071;
			Match(WITH);
			State = 4072;
			Match(LPAREN);
			State = 4073;
			topic_settings();
			State = 4074;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_actionContext[] alter_topic_action() {
			return GetRuleContexts<Alter_topic_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_actionContext alter_topic_action(int i) {
			return GetRuleContext<Alter_topic_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_stmtContext alter_topic_stmt() {
		Alter_topic_stmtContext _localctx = new Alter_topic_stmtContext(Context, State);
		EnterRule(_localctx, 680, RULE_alter_topic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4076;
			Match(ALTER);
			State = 4077;
			Match(TOPIC);
			State = 4080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				{
				State = 4078;
				Match(IF);
				State = 4079;
				Match(EXISTS);
				}
				break;
			}
			State = 4082;
			topic_ref();
			State = 4083;
			alter_topic_action();
			State = 4088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4084;
				Match(COMMA);
				State = 4085;
				alter_topic_action();
				}
				}
				State = 4090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_add_consumerContext alter_topic_add_consumer() {
			return GetRuleContext<Alter_topic_add_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_alter_consumerContext alter_topic_alter_consumer() {
			return GetRuleContext<Alter_topic_alter_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_drop_consumerContext alter_topic_drop_consumer() {
			return GetRuleContext<Alter_topic_drop_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_set_settingsContext alter_topic_set_settings() {
			return GetRuleContext<Alter_topic_set_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_reset_settingsContext alter_topic_reset_settings() {
			return GetRuleContext<Alter_topic_reset_settingsContext>(0);
		}
		public Alter_topic_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_actionContext alter_topic_action() {
		Alter_topic_actionContext _localctx = new Alter_topic_actionContext(Context, State);
		EnterRule(_localctx, 682, RULE_alter_topic_action);
		try {
			State = 4096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4091;
				alter_topic_add_consumer();
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4092;
				alter_topic_alter_consumer();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4093;
				alter_topic_drop_consumer();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4094;
				alter_topic_set_settings();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4095;
				alter_topic_reset_settings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_add_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_create_consumer_entryContext topic_create_consumer_entry() {
			return GetRuleContext<Topic_create_consumer_entryContext>(0);
		}
		public Alter_topic_add_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_add_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_add_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_add_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_add_consumerContext alter_topic_add_consumer() {
		Alter_topic_add_consumerContext _localctx = new Alter_topic_add_consumerContext(Context, State);
		EnterRule(_localctx, 684, RULE_alter_topic_add_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4098;
			Match(ADD);
			State = 4099;
			topic_create_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_create_consumer_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_with_settingsContext topic_consumer_with_settings() {
			return GetRuleContext<Topic_consumer_with_settingsContext>(0);
		}
		public Topic_create_consumer_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_create_consumer_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_create_consumer_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_create_consumer_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_create_consumer_entryContext topic_create_consumer_entry() {
		Topic_create_consumer_entryContext _localctx = new Topic_create_consumer_entryContext(Context, State);
		EnterRule(_localctx, 686, RULE_topic_create_consumer_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4101;
			Match(CONSUMER);
			State = 4102;
			an_id();
			State = 4104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4103;
				topic_consumer_with_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_alter_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_refContext topic_consumer_ref() {
			return GetRuleContext<Topic_consumer_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_alter_consumer_entryContext alter_topic_alter_consumer_entry() {
			return GetRuleContext<Alter_topic_alter_consumer_entryContext>(0);
		}
		public Alter_topic_alter_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_alter_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_alter_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_alter_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_alter_consumerContext alter_topic_alter_consumer() {
		Alter_topic_alter_consumerContext _localctx = new Alter_topic_alter_consumerContext(Context, State);
		EnterRule(_localctx, 688, RULE_alter_topic_alter_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4106;
			Match(ALTER);
			State = 4107;
			Match(CONSUMER);
			State = 4108;
			topic_consumer_ref();
			State = 4109;
			alter_topic_alter_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_alter_consumer_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_alter_consumer_setContext topic_alter_consumer_set() {
			return GetRuleContext<Topic_alter_consumer_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_alter_consumer_resetContext topic_alter_consumer_reset() {
			return GetRuleContext<Topic_alter_consumer_resetContext>(0);
		}
		public Alter_topic_alter_consumer_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_alter_consumer_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_alter_consumer_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_alter_consumer_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_alter_consumer_entryContext alter_topic_alter_consumer_entry() {
		Alter_topic_alter_consumer_entryContext _localctx = new Alter_topic_alter_consumer_entryContext(Context, State);
		EnterRule(_localctx, 690, RULE_alter_topic_alter_consumer_entry);
		try {
			State = 4113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4111;
				topic_alter_consumer_set();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4112;
				topic_alter_consumer_reset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_drop_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_refContext topic_consumer_ref() {
			return GetRuleContext<Topic_consumer_refContext>(0);
		}
		public Alter_topic_drop_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_drop_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_drop_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_drop_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_drop_consumerContext alter_topic_drop_consumer() {
		Alter_topic_drop_consumerContext _localctx = new Alter_topic_drop_consumerContext(Context, State);
		EnterRule(_localctx, 692, RULE_alter_topic_drop_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4115;
			Match(DROP);
			State = 4116;
			Match(CONSUMER);
			State = 4117;
			topic_consumer_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_alter_consumer_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settingsContext topic_consumer_settings() {
			return GetRuleContext<Topic_consumer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Topic_alter_consumer_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_alter_consumer_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_alter_consumer_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_alter_consumer_set(this);
		}
	}

	[RuleVersion(0)]
	public Topic_alter_consumer_setContext topic_alter_consumer_set() {
		Topic_alter_consumer_setContext _localctx = new Topic_alter_consumer_setContext(Context, State);
		EnterRule(_localctx, 694, RULE_topic_alter_consumer_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4119;
			Match(SET);
			State = 4120;
			Match(LPAREN);
			State = 4121;
			topic_consumer_settings();
			State = 4122;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_alter_consumer_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_alter_consumer_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_alter_consumer_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_alter_consumer_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_alter_consumer_reset(this);
		}
	}

	[RuleVersion(0)]
	public Topic_alter_consumer_resetContext topic_alter_consumer_reset() {
		Topic_alter_consumer_resetContext _localctx = new Topic_alter_consumer_resetContext(Context, State);
		EnterRule(_localctx, 696, RULE_topic_alter_consumer_reset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4124;
			Match(RESET);
			State = 4125;
			Match(LPAREN);
			State = 4126;
			an_id();
			State = 4131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4127;
				Match(COMMA);
				State = 4128;
				an_id();
				}
				}
				State = 4133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4134;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_set_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settingsContext topic_settings() {
			return GetRuleContext<Topic_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Alter_topic_set_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_set_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_set_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_set_settings(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_set_settingsContext alter_topic_set_settings() {
		Alter_topic_set_settingsContext _localctx = new Alter_topic_set_settingsContext(Context, State);
		EnterRule(_localctx, 698, RULE_alter_topic_set_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4136;
			Match(SET);
			State = 4137;
			Match(LPAREN);
			State = 4138;
			topic_settings();
			State = 4139;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_reset_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext[] an_id_pure() {
			return GetRuleContexts<An_id_pureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure(int i) {
			return GetRuleContext<An_id_pureContext>(i);
		}
		public Alter_topic_reset_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_reset_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_reset_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_reset_settings(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_reset_settingsContext alter_topic_reset_settings() {
		Alter_topic_reset_settingsContext _localctx = new Alter_topic_reset_settingsContext(Context, State);
		EnterRule(_localctx, 700, RULE_alter_topic_reset_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4141;
			Match(RESET);
			State = 4142;
			Match(LPAREN);
			State = 4143;
			an_id();
			State = 4148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4144;
				Match(COMMA);
				State = 4145;
				an_id_pure();
				}
				}
				State = 4150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4151;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_topic_stmtContext drop_topic_stmt() {
		Drop_topic_stmtContext _localctx = new Drop_topic_stmtContext(Context, State);
		EnterRule(_localctx, 702, RULE_drop_topic_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4153;
			Match(DROP);
			State = 4154;
			Match(TOPIC);
			State = 4157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				{
				State = 4155;
				Match(IF);
				State = 4156;
				Match(EXISTS);
				}
				break;
			}
			State = 4159;
			topic_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settings_entryContext[] topic_settings_entry() {
			return GetRuleContexts<Topic_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settings_entryContext topic_settings_entry(int i) {
			return GetRuleContext<Topic_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_settingsContext topic_settings() {
		Topic_settingsContext _localctx = new Topic_settingsContext(Context, State);
		EnterRule(_localctx, 704, RULE_topic_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4161;
			topic_settings_entry();
			State = 4166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4162;
				Match(COMMA);
				State = 4163;
				topic_settings_entry();
				}
				}
				State = 4168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_setting_valueContext topic_setting_value() {
			return GetRuleContext<Topic_setting_valueContext>(0);
		}
		public Topic_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_settings_entryContext topic_settings_entry() {
		Topic_settings_entryContext _localctx = new Topic_settings_entryContext(Context, State);
		EnterRule(_localctx, 706, RULE_topic_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4169;
			an_id();
			State = 4170;
			Match(EQUALS);
			State = 4171;
			topic_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Topic_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Topic_setting_valueContext topic_setting_value() {
		Topic_setting_valueContext _localctx = new Topic_setting_valueContext(Context, State);
		EnterRule(_localctx, 708, RULE_topic_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4173;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_with_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settingsContext topic_consumer_settings() {
			return GetRuleContext<Topic_consumer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Topic_consumer_with_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_with_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_with_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_with_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_with_settingsContext topic_consumer_with_settings() {
		Topic_consumer_with_settingsContext _localctx = new Topic_consumer_with_settingsContext(Context, State);
		EnterRule(_localctx, 710, RULE_topic_consumer_with_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4175;
			Match(WITH);
			State = 4176;
			Match(LPAREN);
			State = 4177;
			topic_consumer_settings();
			State = 4178;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settings_entryContext[] topic_consumer_settings_entry() {
			return GetRuleContexts<Topic_consumer_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settings_entryContext topic_consumer_settings_entry(int i) {
			return GetRuleContext<Topic_consumer_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_consumer_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_settingsContext topic_consumer_settings() {
		Topic_consumer_settingsContext _localctx = new Topic_consumer_settingsContext(Context, State);
		EnterRule(_localctx, 712, RULE_topic_consumer_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4180;
			topic_consumer_settings_entry();
			State = 4185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4181;
				Match(COMMA);
				State = 4182;
				topic_consumer_settings_entry();
				}
				}
				State = 4187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_setting_valueContext topic_consumer_setting_value() {
			return GetRuleContext<Topic_consumer_setting_valueContext>(0);
		}
		public Topic_consumer_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_settings_entryContext topic_consumer_settings_entry() {
		Topic_consumer_settings_entryContext _localctx = new Topic_consumer_settings_entryContext(Context, State);
		EnterRule(_localctx, 714, RULE_topic_consumer_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4188;
			an_id();
			State = 4189;
			Match(EQUALS);
			State = 4190;
			topic_consumer_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Topic_consumer_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_setting_valueContext topic_consumer_setting_value() {
		Topic_consumer_setting_valueContext _localctx = new Topic_consumer_setting_valueContext(Context, State);
		EnterRule(_localctx, 716, RULE_topic_consumer_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4192;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Topic_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_ref(this);
		}
	}

	[RuleVersion(0)]
	public Topic_refContext topic_ref() {
		Topic_refContext _localctx = new Topic_refContext(Context, State);
		EnterRule(_localctx, 718, RULE_topic_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 4194;
				cluster_expr();
				State = 4195;
				Match(DOT);
				}
				break;
			}
			State = 4199;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure() {
			return GetRuleContext<An_id_pureContext>(0);
		}
		public Topic_consumer_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_ref(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_refContext topic_consumer_ref() {
		Topic_consumer_refContext _localctx = new Topic_consumer_refContext(Context, State);
		EnterRule(_localctx, 720, RULE_topic_consumer_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4201;
			an_id_pure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_treatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		public Null_treatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_treatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNull_treatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNull_treatment(this);
		}
	}

	[RuleVersion(0)]
	public Null_treatmentContext null_treatment() {
		Null_treatmentContext _localctx = new Null_treatmentContext(Context, State);
		EnterRule(_localctx, 722, RULE_null_treatment);
		try {
			State = 4207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESPECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4203;
				Match(RESPECT);
				State = 4204;
				Match(NULLS);
				}
				break;
			case IGNORE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4205;
				Match(IGNORE);
				State = 4206;
				Match(NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 724, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4209;
			Match(FILTER);
			State = 4210;
			Match(LPAREN);
			State = 4211;
			Match(WHERE);
			State = 4212;
			expr();
			State = 4213;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_name_or_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_name_or_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name_or_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_name_or_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_name_or_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_name_or_specificationContext window_name_or_specification() {
		Window_name_or_specificationContext _localctx = new Window_name_or_specificationContext(Context, State);
		EnterRule(_localctx, 726, RULE_window_name_or_specification);
		try {
			State = 4217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4215;
				window_name();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4216;
				window_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_windowContext an_id_window() {
			return GetRuleContext<An_id_windowContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_name(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 728, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4219;
			an_id_window();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(YQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 730, RULE_window_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4221;
			Match(WINDOW);
			State = 4222;
			window_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext[] window_definition() {
			return GetRuleContexts<Window_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition(int i) {
			return GetRuleContext<Window_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, State);
		EnterRule(_localctx, 732, RULE_window_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4224;
			window_definition();
			State = 4229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4225;
				Match(COMMA);
				State = 4226;
				window_definition();
				}
				}
				State = 4231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public New_window_nameContext new_window_name() {
			return GetRuleContext<New_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 734, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4232;
			new_window_name();
			State = 4233;
			Match(AS);
			State = 4234;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public New_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNew_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNew_window_name(this);
		}
	}

	[RuleVersion(0)]
	public New_window_nameContext new_window_name() {
		New_window_nameContext _localctx = new New_window_nameContext(Context, State);
		EnterRule(_localctx, 736, RULE_new_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4236;
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specification_detailsContext window_specification_details() {
			return GetRuleContext<Window_specification_detailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 738, RULE_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4238;
			Match(LPAREN);
			State = 4239;
			window_specification_details();
			State = 4240;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specification_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Existing_window_nameContext existing_window_name() {
			return GetRuleContext<Existing_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_partition_clauseContext window_partition_clause() {
			return GetRuleContext<Window_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_order_clauseContext window_order_clause() {
			return GetRuleContext<Window_order_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		public Window_specification_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_specification_details(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_specification_details(this);
		}
	}

	[RuleVersion(0)]
	public Window_specification_detailsContext window_specification_details() {
		Window_specification_detailsContext _localctx = new Window_specification_detailsContext(Context, State);
		EnterRule(_localctx, 740, RULE_window_specification_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				{
				State = 4242;
				existing_window_name();
				}
				break;
			}
			State = 4246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4245;
				window_partition_clause();
				}
			}

			State = 4249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 4248;
				window_order_clause();
				}
			}

			State = 4252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUPS || _la==RANGE || _la==ROWS) {
				{
				State = 4251;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public Existing_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExisting_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExisting_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Existing_window_nameContext existing_window_name() {
		Existing_window_nameContext _localctx = new Existing_window_nameContext(Context, State);
		EnterRule(_localctx, 742, RULE_existing_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4254;
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_partition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		public Window_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_partition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_partition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_partition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_partition_clauseContext window_partition_clause() {
		Window_partition_clauseContext _localctx = new Window_partition_clauseContext(Context, State);
		EnterRule(_localctx, 744, RULE_window_partition_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4256;
			Match(PARTITION);
			State = 4258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPACT) {
				{
				State = 4257;
				Match(COMPACT);
				}
			}

			State = 4260;
			Match(BY);
			State = 4261;
			named_expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_order_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Window_order_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_order_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_order_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_order_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_order_clauseContext window_order_clause() {
		Window_order_clauseContext _localctx = new Window_order_clauseContext(Context, State);
		EnterRule(_localctx, 746, RULE_window_order_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4263;
			order_by_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_unitsContext window_frame_units() {
			return GetRuleContext<Window_frame_unitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_exclusionContext window_frame_exclusion() {
			return GetRuleContext<Window_frame_exclusionContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 748, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4265;
			window_frame_units();
			State = 4266;
			window_frame_extent();
			State = 4268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE) {
				{
				State = 4267;
				window_frame_exclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_unitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(YQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(YQLParser.GROUPS, 0); }
		public Window_frame_unitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_units; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_units(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_units(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_unitsContext window_frame_units() {
		Window_frame_unitsContext _localctx = new Window_frame_unitsContext(Context, State);
		EnterRule(_localctx, 750, RULE_window_frame_units);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4270;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound() {
			return GetRuleContext<Window_frame_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_betweenContext window_frame_between() {
			return GetRuleContext<Window_frame_betweenContext>(0);
		}
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 752, RULE_window_frame_extent);
		try {
			State = 4274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4272;
				window_frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4273;
				window_frame_between();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		public Window_frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_between(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_betweenContext window_frame_between() {
		Window_frame_betweenContext _localctx = new Window_frame_betweenContext(Context, State);
		EnterRule(_localctx, 754, RULE_window_frame_between);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4276;
			Match(BETWEEN);
			State = 4277;
			window_frame_bound();
			State = 4278;
			Match(AND);
			State = 4279;
			window_frame_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(YQLParser.UNBOUNDED, 0); }
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 756, RULE_window_frame_bound);
		int _la;
		try {
			State = 4288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4281;
				Match(CURRENT);
				State = 4282;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
				case 1:
					{
					State = 4283;
					expr();
					}
					break;
				case 2:
					{
					State = 4284;
					Match(UNBOUNDED);
					}
					break;
				}
				State = 4287;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_exclusionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		public Window_frame_exclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_exclusion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_exclusion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_exclusion(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_exclusionContext window_frame_exclusion() {
		Window_frame_exclusionContext _localctx = new Window_frame_exclusionContext(Context, State);
		EnterRule(_localctx, 758, RULE_window_frame_exclusion);
		try {
			State = 4300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4290;
				Match(EXCLUDE);
				State = 4291;
				Match(CURRENT);
				State = 4292;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4293;
				Match(EXCLUDE);
				State = 4294;
				Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4295;
				Match(EXCLUDE);
				State = 4296;
				Match(TIES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4297;
				Match(EXCLUDE);
				State = 4298;
				Match(NO);
				State = 4299;
				Match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		public Use_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUse_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUse_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Use_stmtContext use_stmt() {
		Use_stmtContext _localctx = new Use_stmtContext(Context, State);
		EnterRule(_localctx, 760, RULE_use_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4302;
			Match(USE);
			State = 4303;
			cluster_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subselect_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_unparenthesized_stmtContext select_unparenthesized_stmt() {
			return GetRuleContext<Select_unparenthesized_stmtContext>(0);
		}
		public Subselect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subselect_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSubselect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSubselect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Subselect_stmtContext subselect_stmt() {
		Subselect_stmtContext _localctx = new Subselect_stmtContext(Context, State);
		EnterRule(_localctx, 762, RULE_subselect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 4305;
				Match(LPAREN);
				State = 4306;
				select_stmt();
				State = 4307;
				Match(RPAREN);
				}
				break;
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				{
				State = 4309;
				select_unparenthesized_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_nodes_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameter_listContext bind_parameter_list() {
			return GetRuleContext<Bind_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subselect_stmtContext subselect_stmt() {
			return GetRuleContext<Subselect_stmtContext>(0);
		}
		public Named_nodes_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_nodes_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_nodes_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_nodes_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Named_nodes_stmtContext named_nodes_stmt() {
		Named_nodes_stmtContext _localctx = new Named_nodes_stmtContext(Context, State);
		EnterRule(_localctx, 764, RULE_named_nodes_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4312;
			bind_parameter_list();
			State = 4313;
			Match(EQUALS);
			State = 4316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				{
				State = 4314;
				expr();
				}
				break;
			case 2:
				{
				State = 4315;
				subselect_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 766, RULE_commit_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4318;
			Match(COMMIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 768, RULE_rollback_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4320;
			Match(ROLLBACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Analyze_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_table(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_tableContext analyze_table() {
		Analyze_tableContext _localctx = new Analyze_tableContext(Context, State);
		EnterRule(_localctx, 770, RULE_analyze_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4322;
			simple_table_ref();
			State = 4327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 4323;
				Match(LPAREN);
				State = 4324;
				column_list();
				State = 4325;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_table_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_tableContext[] analyze_table() {
			return GetRuleContexts<Analyze_tableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_tableContext analyze_table(int i) {
			return GetRuleContext<Analyze_tableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Analyze_table_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_table_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_table_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_table_list(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_table_listContext analyze_table_list() {
		Analyze_table_listContext _localctx = new Analyze_table_listContext(Context, State);
		EnterRule(_localctx, 772, RULE_analyze_table_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4329;
			analyze_table();
			State = 4334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4330;
					Match(COMMA);
					State = 4331;
					analyze_table();
					}
					} 
				}
				State = 4336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
			}
			State = 4338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4337;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_table_listContext analyze_table_list() {
			return GetRuleContext<Analyze_table_listContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 774, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4340;
			Match(ANALYZE);
			State = 4341;
			analyze_table_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequence_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_actionContext[] alter_sequence_action() {
			return GetRuleContexts<Alter_sequence_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_actionContext alter_sequence_action(int i) {
			return GetRuleContext<Alter_sequence_actionContext>(i);
		}
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_sequence_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_sequence_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequence_stmtContext alter_sequence_stmt() {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(Context, State);
		EnterRule(_localctx, 776, RULE_alter_sequence_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4343;
			Match(ALTER);
			State = 4344;
			Match(SEQUENCE);
			State = 4347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
			case 1:
				{
				State = 4345;
				Match(IF);
				State = 4346;
				Match(EXISTS);
				}
				break;
			}
			State = 4349;
			object_ref();
			State = 4351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4350;
				alter_sequence_action();
				}
				}
				State = 4353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INCREMENT || _la==RESTART || _la==START );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequence_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		public Alter_sequence_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_sequence_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_sequence_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequence_actionContext alter_sequence_action() {
		Alter_sequence_actionContext _localctx = new Alter_sequence_actionContext(Context, State);
		EnterRule(_localctx, 778, RULE_alter_sequence_action);
		int _la;
		try {
			State = 4371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4355;
				Match(START);
				State = 4357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4356;
					Match(WITH);
					}
				}

				State = 4359;
				integer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4360;
				Match(RESTART);
				State = 4362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4361;
					Match(WITH);
					}
				}

				State = 4364;
				integer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4365;
				Match(RESTART);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4366;
				Match(INCREMENT);
				State = 4368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 4367;
					Match(BY);
					}
				}

				State = 4370;
				integer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID_PLAIN() { return GetToken(YQLParser.ID_PLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID_QUOTED() { return GetToken(YQLParser.ID_QUOTED, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 780, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4373;
			_la = TokenStream.LA(1);
			if ( !(_la==ID_PLAIN || _la==ID_QUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 782, RULE_id);
		try {
			State = 4377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4375;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4376;
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_schema(this);
		}
	}

	[RuleVersion(0)]
	public Id_schemaContext id_schema() {
		Id_schemaContext _localctx = new Id_schemaContext(Context, State);
		EnterRule(_localctx, 784, RULE_id_schema);
		try {
			State = 4386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4379;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4380;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4381;
				keyword_expr_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4382;
				keyword_select_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4383;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4384;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4385;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_expr(this);
		}
	}

	[RuleVersion(0)]
	public Id_exprContext id_expr() {
		Id_exprContext _localctx = new Id_exprContext(Context, State);
		EnterRule(_localctx, 786, RULE_id_expr);
		try {
			State = 4394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4388;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4389;
				keyword_compat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4390;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4391;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4392;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4393;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public Id_expr_inContext id_expr_in() {
		Id_expr_inContext _localctx = new Id_expr_inContext(Context, State);
		EnterRule(_localctx, 788, RULE_id_expr_in);
		try {
			State = 4401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4396;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4397;
				keyword_compat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4398;
				keyword_alter_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4399;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4400;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_windowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_windowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_window(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_window(this);
		}
	}

	[RuleVersion(0)]
	public Id_windowContext id_window() {
		Id_windowContext _localctx = new Id_windowContext(Context, State);
		EnterRule(_localctx, 790, RULE_id_window);
		try {
			State = 4411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4403;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4404;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4405;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4406;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4407;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4408;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4409;
				keyword_in_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4410;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table(this);
		}
	}

	[RuleVersion(0)]
	public Id_tableContext id_table() {
		Id_tableContext _localctx = new Id_tableContext(Context, State);
		EnterRule(_localctx, 792, RULE_id_table);
		try {
			State = 4420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4413;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4414;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4415;
				keyword_expr_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4416;
				keyword_select_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4417;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4418;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4419;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_withoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_withoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_without; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_without(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_without(this);
		}
	}

	[RuleVersion(0)]
	public Id_withoutContext id_without() {
		Id_withoutContext _localctx = new Id_withoutContext(Context, State);
		EnterRule(_localctx, 794, RULE_id_without);
		try {
			State = 4429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4422;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4423;
				keyword_compat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4424;
				keyword_table_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4425;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4426;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4427;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4428;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		public Id_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_hint(this);
		}
	}

	[RuleVersion(0)]
	public Id_hintContext id_hint() {
		Id_hintContext _localctx = new Id_hintContext(Context, State);
		EnterRule(_localctx, 796, RULE_id_hint);
		try {
			State = 4439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4431;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4432;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4433;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4434;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4435;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4436;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4437;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4438;
				keyword_window_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_as_compatContext keyword_as_compat() {
			return GetRuleContext<Keyword_as_compatContext>(0);
		}
		public Id_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public Id_as_compatContext id_as_compat() {
		Id_as_compatContext _localctx = new Id_as_compatContext(Context, State);
		EnterRule(_localctx, 798, RULE_id_as_compat);
		try {
			State = 4443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4441;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case LAST:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case REVERT:
			case REVOKE:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case VACUUM:
			case VALUES:
			case VIRTUAL:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4442;
				keyword_as_compat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id(this);
		}
	}

	[RuleVersion(0)]
	public An_idContext an_id() {
		An_idContext _localctx = new An_idContext(Context, State);
		EnterRule(_localctx, 800, RULE_an_id);
		try {
			State = 4447;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4445;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4446;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_or_type(this);
		}
	}

	[RuleVersion(0)]
	public An_id_or_typeContext an_id_or_type() {
		An_id_or_typeContext _localctx = new An_id_or_typeContext(Context, State);
		EnterRule(_localctx, 802, RULE_an_id_or_type);
		try {
			State = 4451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4449;
				id_or_type();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4450;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_schemaContext id_schema() {
			return GetRuleContext<Id_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_schema(this);
		}
	}

	[RuleVersion(0)]
	public An_id_schemaContext an_id_schema() {
		An_id_schemaContext _localctx = new An_id_schemaContext(Context, State);
		EnterRule(_localctx, 804, RULE_an_id_schema);
		try {
			State = 4455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4453;
				id_schema();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4454;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_expr(this);
		}
	}

	[RuleVersion(0)]
	public An_id_exprContext an_id_expr() {
		An_id_exprContext _localctx = new An_id_exprContext(Context, State);
		EnterRule(_localctx, 806, RULE_an_id_expr);
		try {
			State = 4459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4457;
				id_expr();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4458;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_expr_inContext id_expr_in() {
			return GetRuleContext<Id_expr_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public An_id_expr_inContext an_id_expr_in() {
		An_id_expr_inContext _localctx = new An_id_expr_inContext(Context, State);
		EnterRule(_localctx, 808, RULE_an_id_expr_in);
		try {
			State = 4463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4461;
				id_expr_in();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4462;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_windowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_windowContext id_window() {
			return GetRuleContext<Id_windowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_windowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_window(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_window(this);
		}
	}

	[RuleVersion(0)]
	public An_id_windowContext an_id_window() {
		An_id_windowContext _localctx = new An_id_windowContext(Context, State);
		EnterRule(_localctx, 810, RULE_an_id_window);
		try {
			State = 4467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4465;
				id_window();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4466;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_tableContext id_table() {
			return GetRuleContext<Id_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_table(this);
		}
	}

	[RuleVersion(0)]
	public An_id_tableContext an_id_table() {
		An_id_tableContext _localctx = new An_id_tableContext(Context, State);
		EnterRule(_localctx, 812, RULE_an_id_table);
		try {
			State = 4471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4469;
				id_table();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4470;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_withoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_withoutContext id_without() {
			return GetRuleContext<Id_withoutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_withoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_without; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_without(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_without(this);
		}
	}

	[RuleVersion(0)]
	public An_id_withoutContext an_id_without() {
		An_id_withoutContext _localctx = new An_id_withoutContext(Context, State);
		EnterRule(_localctx, 814, RULE_an_id_without);
		try {
			State = 4475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4473;
				id_without();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4474;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_hintContext id_hint() {
			return GetRuleContext<Id_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_hint(this);
		}
	}

	[RuleVersion(0)]
	public An_id_hintContext an_id_hint() {
		An_id_hintContext _localctx = new An_id_hintContext(Context, State);
		EnterRule(_localctx, 816, RULE_an_id_hint);
		try {
			State = 4479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4477;
				id_hint();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4478;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_pureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_pureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_pure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_pure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_pure(this);
		}
	}

	[RuleVersion(0)]
	public An_id_pureContext an_id_pure() {
		An_id_pureContext _localctx = new An_id_pureContext(Context, State);
		EnterRule(_localctx, 818, RULE_an_id_pure);
		try {
			State = 4483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4481;
				identifier();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4482;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_as_compatContext id_as_compat() {
			return GetRuleContext<Id_as_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public An_id_as_compatContext an_id_as_compat() {
		An_id_as_compatContext _localctx = new An_id_as_compatContext(Context, State);
		EnterRule(_localctx, 820, RULE_an_id_as_compat);
		try {
			State = 4487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case LAST:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case REVERT:
			case REVOKE:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case VACUUM:
			case VALUES:
			case VIRTUAL:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4485;
				id_as_compat();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4486;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 822, RULE_view_name);
		try {
			State = 4492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4489;
				an_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4490;
				Match(PRIMARY);
				State = 4491;
				Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_id_prefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Opt_id_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_id_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_id_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_id_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Opt_id_prefixContext opt_id_prefix() {
		Opt_id_prefixContext _localctx = new Opt_id_prefixContext(Context, State);
		EnterRule(_localctx, 824, RULE_opt_id_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 4494;
				an_id();
				State = 4495;
				Match(DOT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named() {
			return GetRuleContext<Pure_column_or_namedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		public Cluster_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCluster_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCluster_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_exprContext cluster_expr() {
		Cluster_exprContext _localctx = new Cluster_exprContext(Context, State);
		EnterRule(_localctx, 826, RULE_cluster_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				{
				State = 4499;
				an_id();
				State = 4500;
				Match(COLON);
				}
				break;
			}
			State = 4506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 4504;
				pure_column_or_named();
				}
				break;
			case ASTERISK:
				{
				State = 4505;
				Match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_idContext type_id() {
			return GetRuleContext<Type_idContext>(0);
		}
		public Id_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_typeContext id_or_type() {
		Id_or_typeContext _localctx = new Id_or_typeContext(Context, State);
		EnterRule(_localctx, 828, RULE_id_or_type);
		try {
			State = 4510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4508;
				id();
				}
				break;
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4509;
				type_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_id_prefix_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Opt_id_prefix_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_id_prefix_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_id_prefix_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_id_prefix_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Opt_id_prefix_or_typeContext opt_id_prefix_or_type() {
		Opt_id_prefix_or_typeContext _localctx = new Opt_id_prefix_or_typeContext(Context, State);
		EnterRule(_localctx, 830, RULE_opt_id_prefix_or_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				{
				State = 4512;
				an_id_or_type();
				State = 4513;
				Match(DOT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_atContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Id_or_atContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_at; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_or_at(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_or_at(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_atContext id_or_at() {
		Id_or_atContext _localctx = new Id_or_atContext(Context, State);
		EnterRule(_localctx, 832, RULE_id_or_at);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 4517;
				Match(COMMAT);
				}
			}

			State = 4520;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_table_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_idContext type_id() {
			return GetRuleContext<Type_idContext>(0);
		}
		public Id_table_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Id_table_or_typeContext id_table_or_type() {
		Id_table_or_typeContext _localctx = new Id_table_or_typeContext(Context, State);
		EnterRule(_localctx, 834, RULE_id_table_or_type);
		try {
			State = 4524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4522;
				an_id_table();
				}
				break;
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4523;
				type_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_table_or_atContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_table_or_typeContext id_table_or_type() {
			return GetRuleContext<Id_table_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Id_table_or_atContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table_or_at; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table_or_at(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table_or_at(this);
		}
	}

	[RuleVersion(0)]
	public Id_table_or_atContext id_table_or_at() {
		Id_table_or_atContext _localctx = new Id_table_or_atContext(Context, State);
		EnterRule(_localctx, 836, RULE_id_table_or_at);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 4526;
				Match(COMMAT);
				}
			}

			State = 4529;
			id_table_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 838, RULE_keyword);
		try {
			State = 4539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4531;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4532;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4533;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4534;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4535;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4536;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4537;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4538;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_expr_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(YQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITCAST() { return GetToken(YQLParser.BITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(YQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(YQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(YQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(YQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(YQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(YQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOP() { return GetToken(YQLParser.HOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(YQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(YQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(YQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(YQLParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(YQLParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(YQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(YQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(YQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(YQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		public Keyword_expr_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_expr_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_expr_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_expr_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_expr_uncompatContext keyword_expr_uncompat() {
		Keyword_expr_uncompatContext _localctx = new Keyword_expr_uncompatContext(Context, State);
		EnterRule(_localctx, 840, RULE_keyword_expr_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4541;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 4611687014860206081L) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 985162452090881L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 4719772692952121349L) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & 1688858450214913L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_table_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(YQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		public Keyword_table_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_table_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_table_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_table_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_table_uncompatContext keyword_table_uncompat() {
		Keyword_table_uncompatContext _localctx = new Keyword_table_uncompatContext(Context, State);
		EnterRule(_localctx, 842, RULE_keyword_table_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4543;
			_la = TokenStream.LA(1);
			if ( !(_la==ANY || _la==ERASE || _la==STREAM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_select_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(YQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(YQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(YQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(YQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(YQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		public Keyword_select_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_select_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_select_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_select_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_select_uncompatContext keyword_select_uncompat() {
		Keyword_select_uncompatContext _localctx = new Keyword_select_uncompatContext(Context, State);
		EnterRule(_localctx, 844, RULE_keyword_select_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4545;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2819147813617664L) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 1152925902653374465L) != 0) || _la==LIMIT || ((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & 327681L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_alter_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Keyword_alter_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_alter_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_alter_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_alter_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_alter_uncompatContext keyword_alter_uncompat() {
		Keyword_alter_uncompatContext _localctx = new Keyword_alter_uncompatContext(Context, State);
		EnterRule(_localctx, 846, RULE_keyword_alter_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4547;
			Match(COLUMN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_in_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		public Keyword_in_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_in_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_in_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_in_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_in_uncompatContext keyword_in_uncompat() {
		Keyword_in_uncompatContext _localctx = new Keyword_in_uncompatContext(Context, State);
		EnterRule(_localctx, 848, RULE_keyword_in_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4549;
			Match(COMPACT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_window_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(YQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(YQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		public Keyword_window_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_window_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_window_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_window_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_window_uncompatContext keyword_window_uncompat() {
		Keyword_window_uncompatContext _localctx = new Keyword_window_uncompatContext(Context, State);
		EnterRule(_localctx, 850, RULE_keyword_window_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4551;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_hint_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		public Keyword_hint_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_hint_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_hint_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_hint_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_hint_uncompatContext keyword_hint_uncompat() {
		Keyword_hint_uncompatContext _localctx = new Keyword_hint_uncompatContext(Context, State);
		EnterRule(_localctx, 852, RULE_keyword_hint_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4553;
			_la = TokenStream.LA(1);
			if ( !(_la==COLUMNS || _la==SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(YQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(YQLParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(YQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(YQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(YQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(YQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(YQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(YQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(YQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(YQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(YQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(YQLParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(YQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(YQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(YQLParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(YQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(YQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(YQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(YQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(YQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(YQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(YQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(YQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(YQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(YQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(YQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(YQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(YQLParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(YQLParser.XOR, 0); }
		public Keyword_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_as_compatContext keyword_as_compat() {
		Keyword_as_compatContext _localctx = new Keyword_as_compatContext(Context, State);
		EnterRule(_localctx, 854, RULE_keyword_as_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4555;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -2322451620569311761L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 9222456400807882555L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & -4612549165388503013L) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & -581388537023307875L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 810417487L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(YQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(YQLParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(YQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(YQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(YQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(YQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(YQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(YQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(YQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(YQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(YQLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(YQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(YQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSION() { return GetToken(YQLParser.EXCLUSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(YQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(YQLParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(YQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(YQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(YQLParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(YQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(YQLParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(YQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(YQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(YQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(YQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(YQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(YQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(YQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(YQLParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(YQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESORT() { return GetToken(YQLParser.PRESORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(YQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(YQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(YQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(YQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(YQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(YQLParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(YQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(YQLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(YQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(YQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(YQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(YQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(YQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(YQLParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(YQLParser.XOR, 0); }
		public Keyword_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_compat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_compatContext keyword_compat() {
		Keyword_compatContext _localctx = new Keyword_compatContext(Context, State);
		EnterRule(_localctx, 856, RULE_keyword_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4557;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -16327067659430417L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & -915636042698821L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & -17613660980101L) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & -581387978539147363L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 879754575L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE() { return GetToken(YQLParser.TUPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(YQLParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(YQLParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGGED() { return GetToken(YQLParser.TAGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		public Type_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_id(this);
		}
	}

	[RuleVersion(0)]
	public Type_idContext type_id() {
		Type_idContext _localctx = new Type_idContext(Context, State);
		EnterRule(_localctx, 858, RULE_type_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4559;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1126037345796097L) != 0) || _la==FLOW || _la==LIST || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & 1152921642045800449L) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & 68721575937L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBool_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBool_value(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		Bool_valueContext _localctx = new Bool_valueContext(Context, State);
		EnterRule(_localctx, 860, RULE_bool_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4561;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(YQLParser.REAL, 0); }
		public RealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReal(this);
		}
	}

	[RuleVersion(0)]
	public RealContext real() {
		RealContext _localctx = new RealContext(Context, State);
		EnterRule(_localctx, 862, RULE_real);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4563;
			Match(REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(YQLParser.DIGITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(YQLParser.INTEGER_VALUE, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 864, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4565;
			_la = TokenStream.LA(1);
			if ( !(_la==DIGITS || _la==INTEGER_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,332,4568,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,1,0,1,0,1,0,1,0,1,0,3,
		0,872,8,0,1,1,5,1,875,8,1,10,1,12,1,878,9,1,1,1,1,1,4,1,882,8,1,11,1,12,
		1,883,1,1,5,1,887,8,1,10,1,12,1,890,9,1,1,1,5,1,893,8,1,10,1,12,1,896,
		9,1,1,1,1,1,1,2,5,2,901,8,2,10,2,12,2,904,9,2,1,2,1,2,1,3,5,3,909,8,3,
		10,3,12,3,912,9,3,1,3,1,3,4,3,916,8,3,11,3,12,3,917,5,3,920,8,3,10,3,12,
		3,923,9,3,1,3,1,3,1,3,5,3,928,8,3,10,3,12,3,931,9,3,1,4,1,4,3,4,935,8,
		4,1,5,1,5,1,5,3,5,940,8,5,3,5,942,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1003,
		8,6,1,7,1,7,1,7,5,7,1008,8,7,10,7,12,7,1011,9,7,1,7,3,7,1014,8,7,1,8,1,
		8,1,8,5,8,1019,8,8,10,8,12,8,1022,9,8,1,9,1,9,1,9,5,9,1027,8,9,10,9,12,
		9,1030,9,9,1,10,1,10,3,10,1034,8,10,1,11,1,11,3,11,1038,8,11,1,11,1,11,
		1,11,1,12,3,12,1044,8,12,1,12,1,12,1,12,1,12,3,12,1050,8,12,1,12,3,12,
		1053,8,12,1,12,1,12,3,12,1057,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
		1065,8,12,1,12,1,12,3,12,1069,8,12,1,12,3,12,1072,8,12,1,12,1,12,3,12,
		1076,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1087,8,12,
		1,12,4,12,1090,8,12,11,12,12,12,1091,3,12,1094,8,12,1,13,1,13,1,14,1,14,
		1,14,5,14,1101,8,14,10,14,12,14,1104,9,14,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1124,
		8,18,1,18,5,18,1127,8,18,10,18,12,18,1130,9,18,1,18,1,18,1,18,1,18,4,18,
		1136,8,18,11,18,12,18,1137,3,18,1140,8,18,1,19,1,19,1,19,5,19,1145,8,19,
		10,19,12,19,1148,9,19,1,20,1,20,1,20,5,20,1153,8,20,10,20,12,20,1156,9,
		20,1,21,1,21,1,21,5,21,1161,8,21,10,21,12,21,1164,9,21,1,22,1,22,1,22,
		1,22,3,22,1170,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1180,
		8,24,3,24,1182,8,24,5,24,1184,8,24,10,24,12,24,1187,9,24,1,24,1,24,3,24,
		1191,8,24,1,25,1,25,3,25,1195,8,25,1,25,1,25,1,26,1,26,3,26,1201,8,26,
		1,26,1,26,1,27,1,27,3,27,1207,8,27,1,28,1,28,3,28,1211,8,28,1,29,1,29,
		3,29,1215,8,29,1,29,3,29,1218,8,29,1,29,1,29,1,30,1,30,1,30,3,30,1225,
		8,30,1,30,1,30,1,30,1,30,3,30,1231,8,30,5,30,1233,8,30,10,30,12,30,1236,
		9,30,1,31,1,31,3,31,1240,8,31,1,31,3,31,1243,8,31,1,31,1,31,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,5,32,1255,8,32,10,32,12,32,1258,9,32,1,33,
		1,33,3,33,1262,8,33,1,33,3,33,1265,8,33,1,33,1,33,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,3,34,1279,8,34,1,34,1,34,1,34,1,34,1,34,
		3,34,1286,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1297,
		8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1308,8,35,1,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,
		1,38,1,38,1,38,3,38,1328,8,38,1,38,1,38,1,39,1,39,3,39,1334,8,39,1,39,
		4,39,1337,8,39,11,39,12,39,1338,1,39,1,39,3,39,1343,8,39,1,39,1,39,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1357,8,40,3,40,1359,
		8,40,1,41,1,41,1,42,1,42,1,42,3,42,1366,8,42,1,43,1,43,1,44,1,44,3,44,
		1372,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,1381,8,46,10,46,12,46,
		1384,9,46,1,47,1,47,1,47,1,47,1,47,3,47,1391,8,47,1,48,1,48,1,48,1,48,
		3,48,1397,8,48,1,49,1,49,1,49,1,49,1,49,3,49,1404,8,49,1,49,1,49,1,49,
		1,49,5,49,1410,8,49,10,49,12,49,1413,9,49,1,49,1,49,1,50,1,50,1,50,1,50,
		1,51,1,51,1,51,1,51,3,51,1425,8,51,1,51,1,51,1,52,1,52,3,52,1431,8,52,
		1,52,1,52,3,52,1435,8,52,1,52,3,52,1438,8,52,3,52,1440,8,52,1,53,1,53,
		1,53,1,53,1,53,1,53,3,53,1448,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
		1456,8,54,1,54,1,54,1,54,1,54,3,54,1462,8,54,1,54,1,54,1,54,1,54,3,54,
		1468,8,54,1,54,1,54,1,55,1,55,3,55,1474,8,55,1,55,3,55,1477,8,55,1,55,
		1,55,1,56,1,56,1,56,5,56,1484,8,56,10,56,12,56,1487,9,56,1,57,1,57,1,57,
		1,57,5,57,1493,8,57,10,57,12,57,1496,9,57,1,57,1,57,1,58,1,58,3,58,1502,
		8,58,1,59,1,59,1,59,1,59,5,59,1508,8,59,10,59,12,59,1511,9,59,1,59,1,59,
		1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1523,8,61,1,62,1,62,1,62,
		5,62,1528,8,62,10,62,12,62,1531,9,62,1,62,3,62,1534,8,62,1,63,1,63,1,63,
		5,63,1539,8,63,10,63,12,63,1542,9,63,1,63,3,63,1545,8,63,1,64,1,64,1,64,
		3,64,1550,8,64,1,65,1,65,1,65,5,65,1555,8,65,10,65,12,65,1558,9,65,1,66,
		1,66,1,66,1,66,3,66,1564,8,66,1,66,3,66,1567,8,66,1,66,1,66,1,66,1,67,
		1,67,3,67,1574,8,67,1,67,1,67,3,67,1578,8,67,1,68,1,68,1,68,1,68,1,68,
		1,68,1,68,1,68,3,68,1588,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,
		1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
		1611,8,71,1,72,1,72,1,72,1,72,3,72,1617,8,72,1,73,1,73,3,73,1621,8,73,
		1,74,1,74,1,74,5,74,1626,8,74,10,74,12,74,1629,9,74,1,75,1,75,1,75,3,75,
		1634,8,75,1,76,1,76,1,76,5,76,1639,8,76,10,76,12,76,1642,9,76,1,77,3,77,
		1645,8,77,1,77,1,77,3,77,1649,8,77,1,78,1,78,1,79,1,79,3,79,1655,8,79,
		1,80,1,80,1,80,3,80,1660,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,
		1669,8,82,1,82,3,82,1672,8,82,1,82,1,82,1,82,1,82,3,82,1678,8,82,1,83,
		1,83,1,83,3,83,1683,8,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1691,8,84,
		1,85,1,85,1,85,5,85,1696,8,85,10,85,12,85,1699,9,85,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,
		1718,8,88,10,88,12,88,1721,9,88,1,88,3,88,1724,8,88,3,88,1726,8,88,1,88,
		1,88,3,88,1730,8,88,1,89,1,89,1,89,1,89,1,89,5,89,1737,8,89,10,89,12,89,
		1740,9,89,1,89,3,89,1743,8,89,3,89,1745,8,89,1,89,1,89,3,89,1749,8,89,
		1,90,1,90,1,90,1,90,1,90,5,90,1756,8,90,10,90,12,90,1759,9,90,1,90,3,90,
		1762,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,
		1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,
		1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,5,96,1798,8,96,10,96,12,96,1801,
		9,96,1,96,3,96,1804,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,
		1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,1824,8,99,1,99,3,99,
		1827,8,99,1,99,1,99,1,99,1,99,3,99,1833,8,99,1,99,1,99,1,99,1,99,1,99,
		1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
		1,100,3,100,1853,8,100,1,100,5,100,1856,8,100,10,100,12,100,1859,9,100,
		1,101,1,101,1,101,3,101,1864,8,101,1,101,5,101,1867,8,101,10,101,12,101,
		1870,9,101,3,101,1872,8,101,1,102,1,102,3,102,1876,8,102,1,103,1,103,1,
		104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
		1903,8,104,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1911,8,105,1,106,
		3,106,1914,8,106,1,106,1,106,1,106,5,106,1919,8,106,10,106,12,106,1922,
		9,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,109,1,109,3,109,
		1934,8,109,1,109,1,109,3,109,1938,8,109,1,109,1,109,1,110,1,110,1,110,
		1,110,1,110,1,111,1,111,1,111,3,111,1950,8,111,1,112,1,112,1,112,1,112,
		1,112,1,112,1,112,1,112,1,112,5,112,1961,8,112,10,112,12,112,1964,9,112,
		1,112,1,112,3,112,1968,8,112,1,113,1,113,1,113,1,113,1,113,3,113,1975,
		8,113,1,114,1,114,3,114,1979,8,114,1,115,1,115,1,115,5,115,1984,8,115,
		10,115,12,115,1987,9,115,1,116,1,116,1,116,1,116,5,116,1993,8,116,10,116,
		12,116,1996,9,116,1,117,1,117,1,117,1,117,5,117,2002,8,117,10,117,12,117,
		2005,9,117,1,118,1,118,1,118,1,118,1,118,3,118,2012,8,118,1,119,1,119,
		3,119,2016,8,119,1,119,1,119,3,119,2020,8,119,1,120,1,120,1,120,1,120,
		1,120,3,120,2027,8,120,3,120,2029,8,120,1,121,3,121,2032,8,121,1,121,1,
		121,1,121,3,121,2037,8,121,1,121,1,121,1,121,3,121,2042,8,121,1,122,1,
		122,3,122,2046,8,122,1,122,1,122,1,122,5,122,2051,8,122,10,122,12,122,
		2054,9,122,1,122,1,122,1,122,1,122,3,122,2060,8,122,1,122,1,122,3,122,
		2064,8,122,1,122,1,122,3,122,2068,8,122,1,122,1,122,3,122,2072,8,122,1,
		122,1,122,3,122,2076,8,122,3,122,2078,8,122,1,123,1,123,1,123,1,123,1,
		124,1,124,1,124,5,124,2087,8,124,10,124,12,124,2090,9,124,1,125,1,125,
		1,125,1,125,5,125,2096,8,125,10,125,12,125,2099,9,125,1,125,1,125,3,125,
		2103,8,125,1,125,1,125,1,125,1,125,3,125,2109,8,125,1,125,1,125,1,125,
		3,125,2114,8,125,1,125,1,125,3,125,2118,8,125,1,125,1,125,3,125,2122,8,
		125,1,125,1,125,3,125,2126,8,125,1,126,3,126,2129,8,126,1,127,1,127,3,
		127,2133,8,127,1,127,1,127,3,127,2137,8,127,1,127,1,127,1,127,1,127,5,
		127,2143,8,127,10,127,12,127,2146,9,127,1,127,3,127,2149,8,127,1,127,1,
		127,3,127,2153,8,127,1,127,1,127,3,127,2157,8,127,1,127,1,127,3,127,2161,
		8,127,1,127,3,127,2164,8,127,1,127,1,127,3,127,2168,8,127,1,127,3,127,
		2171,8,127,1,127,3,127,2174,8,127,1,128,1,128,1,128,3,128,2179,8,128,1,
		128,3,128,2182,8,128,1,128,3,128,2185,8,128,1,128,3,128,2188,8,128,1,128,
		1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
		2202,8,129,3,129,2204,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
		1,130,1,130,3,130,2215,8,130,1,131,1,131,1,131,1,132,1,132,1,132,5,132,
		2223,8,132,10,132,12,132,2226,9,132,1,133,1,133,1,133,1,133,1,134,1,134,
		1,134,3,134,2235,8,134,1,134,3,134,2238,8,134,1,134,1,134,1,134,1,134,
		1,134,3,134,2245,8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,
		1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
		1,135,1,135,3,135,2269,8,135,1,136,1,136,1,137,1,137,1,138,1,138,1,138,
		5,138,2278,8,138,10,138,12,138,2281,9,138,1,139,4,139,2284,8,139,11,139,
		12,139,2285,1,140,1,140,3,140,2290,8,140,1,141,1,141,3,141,2294,8,141,
		1,141,1,141,3,141,2298,8,141,1,141,1,141,3,141,2302,8,141,1,141,1,141,
		3,141,2306,8,141,1,141,1,141,3,141,2310,8,141,1,141,1,141,3,141,2314,8,
		141,1,141,1,141,1,141,1,141,3,141,2320,8,141,1,142,1,142,1,142,1,142,1,
		142,3,142,2327,8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,
		142,2337,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,5,144,2346,8,
		144,10,144,12,144,2349,9,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,
		1,146,5,146,2359,8,146,10,146,12,146,2362,9,146,1,147,1,147,1,147,1,147,
		1,147,1,147,1,148,1,148,1,149,1,149,1,149,5,149,2375,8,149,10,149,12,149,
		2378,9,149,1,150,1,150,1,151,1,151,1,151,5,151,2385,8,151,10,151,12,151,
		2388,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,
		1,156,1,156,1,157,1,157,1,157,1,157,1,158,3,158,2407,8,158,1,158,1,158,
		1,159,1,159,3,159,2413,8,159,1,159,1,159,1,159,1,159,1,159,3,159,2420,
		8,159,1,160,1,160,1,160,5,160,2425,8,160,10,160,12,160,2428,9,160,1,161,
		1,161,1,161,1,161,1,161,3,161,2435,8,161,1,162,1,162,1,163,1,163,1,163,
		5,163,2442,8,163,10,163,12,163,2445,9,163,1,164,1,164,1,164,1,164,1,164,
		1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,
		1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,3,168,2481,8,168,3,168,2483,8,168,1,169,
		3,169,2486,8,169,1,169,1,169,1,169,3,169,2491,8,169,1,169,1,169,3,169,
		2495,8,169,5,169,2497,8,169,10,169,12,169,2500,9,169,1,170,1,170,1,170,
		3,170,2505,8,170,1,171,1,171,1,171,1,171,3,171,2511,8,171,1,171,1,171,
		3,171,2515,8,171,1,172,1,172,1,172,3,172,2520,8,172,1,172,1,172,1,172,
		3,172,2525,8,172,3,172,2527,8,172,1,173,1,173,3,173,2531,8,173,1,173,1,
		173,1,173,3,173,2536,8,173,1,173,3,173,2539,8,173,3,173,2541,8,173,1,173,
		1,173,3,173,2545,8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
		1,174,3,174,2556,8,174,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,
		1,176,3,176,2567,8,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,
		1,179,3,179,2578,8,179,1,179,1,179,3,179,2582,8,179,1,179,1,179,3,179,
		2586,8,179,1,179,1,179,3,179,2590,8,179,1,179,3,179,2593,8,179,1,179,1,
		179,3,179,2597,8,179,1,179,3,179,2600,8,179,1,180,1,180,1,180,1,180,3,
		180,2606,8,180,1,181,1,181,1,181,1,181,1,181,5,181,2613,8,181,10,181,12,
		181,2616,9,181,3,181,2618,8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,
		182,1,182,1,182,1,182,1,182,1,182,3,182,2632,8,182,1,182,1,182,1,182,1,
		182,3,182,2638,8,182,1,183,3,183,2641,8,183,1,183,1,183,1,183,3,183,2646,
		8,183,1,184,1,184,1,184,1,185,1,185,3,185,2653,8,185,1,186,1,186,1,186,
		5,186,2658,8,186,10,186,12,186,2661,9,186,1,187,1,187,1,187,1,187,1,188,
		1,188,3,188,2669,8,188,1,189,1,189,1,189,3,189,2674,8,189,1,189,1,189,
		1,189,1,189,1,189,1,189,3,189,2682,8,189,1,189,1,189,1,189,1,190,1,190,
		1,190,1,190,1,190,1,190,1,190,1,190,5,190,2695,8,190,10,190,12,190,2698,
		9,190,1,191,1,191,1,191,3,191,2703,8,191,1,192,1,192,1,192,1,192,1,192,
		1,192,3,192,2711,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,3,193,
		2720,8,193,1,193,1,193,3,193,2724,8,193,1,193,1,193,1,193,1,194,1,194,
		1,194,1,194,3,194,2733,8,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,
		1,195,1,195,1,195,3,195,2745,8,195,1,196,1,196,1,196,1,196,1,196,3,196,
		2752,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2760,8,196,1,197,
		1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,
		1,199,1,199,1,200,1,200,1,200,1,200,3,200,2781,8,200,1,200,1,200,1,200,
		1,200,1,200,1,200,3,200,2789,8,200,1,201,1,201,1,201,1,202,1,202,1,202,
		1,202,3,202,2798,8,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,
		3,205,2808,8,205,1,206,1,206,1,206,1,206,1,206,5,206,2815,8,206,10,206,
		12,206,2818,9,206,1,206,1,206,3,206,2822,8,206,1,207,1,207,1,208,1,208,
		1,208,3,208,2829,8,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
		3,208,2839,8,208,1,208,1,208,1,208,3,208,2844,8,208,1,208,1,208,1,208,
		1,208,1,208,5,208,2851,8,208,10,208,12,208,2854,9,208,1,208,3,208,2857,
		8,208,1,208,1,208,3,208,2861,8,208,1,208,3,208,2864,8,208,1,208,3,208,
		2867,8,208,1,208,3,208,2870,8,208,1,208,3,208,2873,8,208,1,209,1,209,1,
		209,1,209,1,209,1,209,3,209,2881,8,209,1,210,1,210,1,210,3,210,2886,8,
		210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,3,211,2897,8,
		211,1,212,1,212,1,212,1,213,1,213,3,213,2904,8,213,1,214,1,214,1,214,1,
		214,1,215,1,215,1,215,1,215,1,215,5,215,2915,8,215,10,215,12,215,2918,
		9,215,1,216,1,216,1,216,5,216,2923,8,216,10,216,12,216,2926,9,216,1,217,
		1,217,3,217,2930,8,217,1,218,1,218,1,218,5,218,2935,8,218,10,218,12,218,
		2938,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
		3,219,2950,8,219,1,220,1,220,1,220,1,220,1,221,1,221,1,221,5,221,2959,
		8,221,10,221,12,221,2962,9,221,1,222,1,222,1,222,1,222,1,223,1,223,1,223,
		3,223,2971,8,223,1,224,1,224,1,224,1,224,3,224,2977,8,224,1,225,1,225,
		1,225,1,225,1,225,5,225,2984,8,225,10,225,12,225,2987,9,225,1,225,1,225,
		1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,227,5,227,3001,
		8,227,10,227,12,227,3004,9,227,1,227,1,227,1,228,1,228,1,228,1,229,1,229,
		1,229,1,229,1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,231,1,231,5,231,
		3024,8,231,10,231,12,231,3027,9,231,1,232,1,232,1,232,1,232,1,232,1,232,
		1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,
		3046,8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,5,233,3055,8,233,
		10,233,12,233,3058,9,233,1,234,1,234,1,234,1,234,1,234,3,234,3065,8,234,
		1,235,1,235,1,235,1,235,1,235,1,235,5,235,3073,8,235,10,235,12,235,3076,
		9,235,1,236,1,236,3,236,3080,8,236,1,237,1,237,3,237,3084,8,237,1,237,
		1,237,1,238,1,238,3,238,3090,8,238,1,238,1,238,1,239,1,239,1,239,1,239,
		1,239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,241,1,241,1,241,
		1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,
		1,244,1,244,1,244,1,244,5,244,3126,8,244,10,244,12,244,3129,9,244,1,244,
		1,244,1,245,1,245,1,245,1,245,1,245,5,245,3138,8,245,10,245,12,245,3141,
		9,245,1,245,1,245,1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,248,1,248,
		1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,250,1,250,1,250,1,251,
		1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,253,1,253,1,253,1,253,
		1,253,1,254,1,254,1,254,3,254,3182,8,254,1,254,1,254,1,255,1,255,1,255,
		1,256,3,256,3190,8,256,1,256,3,256,3193,8,256,1,256,1,256,3,256,3197,8,
		256,1,257,1,257,3,257,3201,8,257,1,258,1,258,1,258,1,258,1,258,1,258,5,
		258,3209,8,258,10,258,12,258,3212,9,258,1,258,1,258,1,258,1,258,1,258,
		1,258,1,258,1,258,5,258,3222,8,258,10,258,12,258,3225,9,258,1,258,1,258,
		1,258,1,258,1,258,1,258,1,258,1,258,5,258,3235,8,258,10,258,12,258,3238,
		9,258,1,258,1,258,3,258,3242,8,258,1,259,1,259,1,259,1,259,1,259,1,259,
		1,259,1,259,5,259,3252,8,259,10,259,12,259,3255,9,259,1,259,1,259,1,259,
		1,259,1,259,1,259,5,259,3263,8,259,10,259,12,259,3266,9,259,1,259,1,259,
		3,259,3270,8,259,1,259,3,259,3273,8,259,1,260,1,260,3,260,3277,8,260,1,
		260,1,260,3,260,3281,8,260,1,261,1,261,3,261,3285,8,261,1,261,3,261,3288,
		8,261,1,262,1,262,1,263,1,263,1,264,1,264,1,264,1,264,1,264,5,264,3299,
		8,264,10,264,12,264,3302,9,264,1,264,3,264,3305,8,264,1,264,1,264,1,265,
		1,265,1,265,1,265,1,266,1,266,1,266,1,266,3,266,3317,8,266,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,268,1,268,1,268,5,268,3329,8,268,10,268,
		12,268,3332,9,268,1,269,1,269,1,269,1,269,1,270,1,270,1,271,1,271,1,271,
		1,271,1,271,1,271,3,271,3346,8,271,1,272,1,272,1,272,1,272,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,3361,8,273,1,273,3,273,
		3364,8,273,1,274,1,274,1,274,1,274,1,274,1,274,5,274,3372,8,274,10,274,
		12,274,3375,9,274,3,274,3377,8,274,1,275,1,275,1,275,1,275,1,275,1,275,
		3,275,3385,8,275,1,276,1,276,1,276,1,276,1,277,1,277,1,277,1,277,5,277,
		3395,8,277,10,277,12,277,3398,9,277,3,277,3400,8,277,1,277,1,277,1,278,
		1,278,1,278,1,278,1,279,1,279,3,279,3410,8,279,1,280,1,280,1,280,1,280,
		5,280,3416,8,280,10,280,12,280,3419,9,280,1,280,1,280,1,280,3,280,3424,
		8,280,1,281,1,281,1,281,1,281,5,281,3430,8,281,10,281,12,281,3433,9,281,
		1,281,1,281,1,282,1,282,1,282,3,282,3440,8,282,1,283,1,283,1,283,1,283,
		1,283,3,283,3447,8,283,1,283,1,283,3,283,3451,8,283,1,283,1,283,1,284,
		1,284,1,284,1,284,5,284,3459,8,284,10,284,12,284,3462,9,284,1,285,1,285,
		1,285,1,285,3,285,3468,8,285,1,285,4,285,3471,8,285,11,285,12,285,3472,
		1,285,1,285,1,285,3,285,3478,8,285,1,286,1,286,1,286,1,286,1,286,1,286,
		1,286,1,286,5,286,3488,8,286,10,286,12,286,3491,9,286,1,286,3,286,3494,
		8,286,3,286,3496,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
		5,287,3506,8,287,10,287,12,287,3509,9,287,1,287,3,287,3512,8,287,1,287,
		1,287,1,287,3,287,3517,8,287,1,288,1,288,1,288,1,288,3,288,3523,8,288,
		1,288,1,288,1,288,5,288,3528,8,288,10,288,12,288,3531,9,288,1,288,3,288,
		3534,8,288,1,289,1,289,3,289,3538,8,289,1,290,1,290,3,290,3542,8,290,1,
		291,3,291,3545,8,291,1,291,1,291,1,291,1,292,1,292,1,293,1,293,1,293,1,
		293,1,293,1,293,5,293,3558,8,293,10,293,12,293,3561,9,293,1,293,1,293,
		1,293,1,293,5,293,3567,8,293,10,293,12,293,3570,9,293,1,293,3,293,3573,
		8,293,1,293,1,293,1,293,3,293,3578,8,293,1,294,1,294,1,294,1,294,3,294,
		3584,8,294,1,294,1,294,1,294,1,294,1,294,5,294,3591,8,294,10,294,12,294,
		3594,9,294,1,294,1,294,1,294,1,294,5,294,3600,8,294,10,294,12,294,3603,
		9,294,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,
		1,295,1,295,1,295,3,295,3619,8,295,1,295,1,295,3,295,3623,8,295,1,295,
		1,295,3,295,3627,8,295,3,295,3629,8,295,1,296,1,296,3,296,3633,8,296,1,
		297,1,297,1,297,5,297,3638,8,297,10,297,12,297,3641,9,297,1,297,3,297,
		3644,8,297,1,297,1,297,3,297,3648,8,297,3,297,3650,8,297,1,298,1,298,1,
		298,1,298,1,298,1,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,5,299,
		3665,8,299,10,299,12,299,3668,9,299,1,300,1,300,3,300,3672,8,300,1,301,
		1,301,1,301,1,301,1,301,1,302,1,302,1,302,1,302,1,302,1,302,1,302,1,303,
		1,303,1,303,1,303,1,303,1,303,1,303,1,303,5,303,3694,8,303,10,303,12,303,
		3697,9,303,1,304,1,304,3,304,3701,8,304,1,305,1,305,1,305,1,305,1,305,
		1,305,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,5,306,3717,8,306,
		10,306,12,306,3720,9,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,
		1,307,1,308,1,308,1,308,5,308,3734,8,308,10,308,12,308,3737,9,308,1,309,
		1,309,1,309,1,309,1,310,1,310,1,310,1,310,1,310,1,310,1,310,5,310,3750,
		8,310,10,310,12,310,3753,9,310,1,311,1,311,1,312,1,312,1,312,1,312,1,312,
		1,313,1,313,1,313,1,313,1,313,3,313,3767,8,313,1,314,1,314,1,314,5,314,
		3772,8,314,10,314,12,314,3775,9,314,1,315,1,315,1,315,1,315,1,315,3,315,
		3782,8,315,1,315,1,315,1,315,1,315,1,315,1,315,1,316,5,316,3791,8,316,
		10,316,12,316,3794,9,316,1,316,1,316,4,316,3798,8,316,11,316,12,316,3799,
		1,316,5,316,3803,8,316,10,316,12,316,3806,9,316,1,316,5,316,3809,8,316,
		10,316,12,316,3812,9,316,3,316,3814,8,316,1,317,3,317,3817,8,317,1,317,
		1,317,1,317,1,317,1,317,3,317,3824,8,317,1,318,3,318,3827,8,318,1,318,
		3,318,3830,8,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,3839,
		8,318,1,319,1,319,1,319,3,319,3844,8,319,1,319,3,319,3847,8,319,1,319,
		1,319,1,319,1,319,1,319,1,319,5,319,3855,8,319,10,319,12,319,3858,9,319,
		1,319,3,319,3861,8,319,3,319,3863,8,319,1,319,1,319,1,319,1,319,1,319,
		3,319,3870,8,319,1,319,3,319,3873,8,319,1,319,1,319,3,319,3877,8,319,3,
		319,3879,8,319,1,319,3,319,3882,8,319,1,320,1,320,1,320,3,320,3887,8,320,
		1,321,3,321,3890,8,321,1,321,1,321,1,321,3,321,3895,8,321,1,322,1,322,
		1,322,1,322,1,322,1,322,5,322,3903,8,322,10,322,12,322,3906,9,322,1,322,
		1,322,3,322,3910,8,322,1,323,1,323,1,323,1,323,1,323,1,323,1,323,5,323,
		3919,8,323,10,323,12,323,3922,9,323,1,323,3,323,3925,8,323,1,323,1,323,
		3,323,3929,8,323,3,323,3931,8,323,1,323,1,323,3,323,3935,8,323,1,323,1,
		323,1,323,3,323,3940,8,323,1,323,1,323,1,323,1,323,5,323,3946,8,323,10,
		323,12,323,3949,9,323,3,323,3951,8,323,1,323,3,323,3954,8,323,1,323,3,
		323,3957,8,323,1,324,1,324,1,324,3,324,3962,8,324,1,324,1,324,1,325,1,
		325,3,325,3968,8,325,1,325,3,325,3971,8,325,1,326,1,326,3,326,3975,8,326,
		1,327,1,327,1,327,1,327,3,327,3981,8,327,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,3,328,3990,8,328,1,328,3,328,3993,8,328,1,329,1,329,1,329,
		1,329,1,329,1,329,3,329,4001,8,329,1,329,1,329,3,329,4005,8,329,1,329,
		3,329,4008,8,329,1,330,1,330,3,330,4012,8,330,1,331,1,331,1,331,5,331,
		4017,8,331,10,331,12,331,4020,9,331,1,332,1,332,1,332,1,332,1,333,1,333,
		1,334,1,334,1,334,1,334,1,334,1,334,1,335,1,335,1,335,1,335,5,335,4038,
		8,335,10,335,12,335,4041,9,335,1,335,1,335,1,336,1,336,1,336,1,336,1,336,
		3,336,4050,8,336,1,336,1,336,3,336,4054,8,336,1,336,3,336,4057,8,336,1,
		337,1,337,1,337,1,337,5,337,4063,8,337,10,337,12,337,4066,9,337,1,337,
		1,337,1,338,1,338,1,339,1,339,1,339,1,339,1,339,1,340,1,340,1,340,1,340,
		3,340,4081,8,340,1,340,1,340,1,340,1,340,5,340,4087,8,340,10,340,12,340,
		4090,9,340,1,341,1,341,1,341,1,341,1,341,3,341,4097,8,341,1,342,1,342,
		1,342,1,343,1,343,1,343,3,343,4105,8,343,1,344,1,344,1,344,1,344,1,344,
		1,345,1,345,3,345,4114,8,345,1,346,1,346,1,346,1,346,1,347,1,347,1,347,
		1,347,1,347,1,348,1,348,1,348,1,348,1,348,5,348,4130,8,348,10,348,12,348,
		4133,9,348,1,348,1,348,1,349,1,349,1,349,1,349,1,349,1,350,1,350,1,350,
		1,350,1,350,5,350,4147,8,350,10,350,12,350,4150,9,350,1,350,1,350,1,351,
		1,351,1,351,1,351,3,351,4158,8,351,1,351,1,351,1,352,1,352,1,352,5,352,
		4165,8,352,10,352,12,352,4168,9,352,1,353,1,353,1,353,1,353,1,354,1,354,
		1,355,1,355,1,355,1,355,1,355,1,356,1,356,1,356,5,356,4184,8,356,10,356,
		12,356,4187,9,356,1,357,1,357,1,357,1,357,1,358,1,358,1,359,1,359,1,359,
		3,359,4198,8,359,1,359,1,359,1,360,1,360,1,361,1,361,1,361,1,361,3,361,
		4208,8,361,1,362,1,362,1,362,1,362,1,362,1,362,1,363,1,363,3,363,4218,
		8,363,1,364,1,364,1,365,1,365,1,365,1,366,1,366,1,366,5,366,4228,8,366,
		10,366,12,366,4231,9,366,1,367,1,367,1,367,1,367,1,368,1,368,1,369,1,369,
		1,369,1,369,1,370,3,370,4244,8,370,1,370,3,370,4247,8,370,1,370,3,370,
		4250,8,370,1,370,3,370,4253,8,370,1,371,1,371,1,372,1,372,3,372,4259,8,
		372,1,372,1,372,1,372,1,373,1,373,1,374,1,374,1,374,3,374,4269,8,374,1,
		375,1,375,1,376,1,376,3,376,4275,8,376,1,377,1,377,1,377,1,377,1,377,1,
		378,1,378,1,378,1,378,3,378,4286,8,378,1,378,3,378,4289,8,378,1,379,1,
		379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,4301,8,379,1,
		380,1,380,1,380,1,381,1,381,1,381,1,381,1,381,3,381,4311,8,381,1,382,1,
		382,1,382,1,382,3,382,4317,8,382,1,383,1,383,1,384,1,384,1,385,1,385,1,
		385,1,385,1,385,3,385,4328,8,385,1,386,1,386,1,386,5,386,4333,8,386,10,
		386,12,386,4336,9,386,1,386,3,386,4339,8,386,1,387,1,387,1,387,1,388,1,
		388,1,388,1,388,3,388,4348,8,388,1,388,1,388,4,388,4352,8,388,11,388,12,
		388,4353,1,389,1,389,3,389,4358,8,389,1,389,1,389,1,389,3,389,4363,8,389,
		1,389,1,389,1,389,1,389,3,389,4369,8,389,1,389,3,389,4372,8,389,1,390,
		1,390,1,391,1,391,3,391,4378,8,391,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,3,392,4387,8,392,1,393,1,393,1,393,1,393,1,393,1,393,3,393,4395,
		8,393,1,394,1,394,1,394,1,394,1,394,3,394,4402,8,394,1,395,1,395,1,395,
		1,395,1,395,1,395,1,395,1,395,3,395,4412,8,395,1,396,1,396,1,396,1,396,
		1,396,1,396,1,396,3,396,4421,8,396,1,397,1,397,1,397,1,397,1,397,1,397,
		1,397,3,397,4430,8,397,1,398,1,398,1,398,1,398,1,398,1,398,1,398,1,398,
		3,398,4440,8,398,1,399,1,399,3,399,4444,8,399,1,400,1,400,3,400,4448,8,
		400,1,401,1,401,3,401,4452,8,401,1,402,1,402,3,402,4456,8,402,1,403,1,
		403,3,403,4460,8,403,1,404,1,404,3,404,4464,8,404,1,405,1,405,3,405,4468,
		8,405,1,406,1,406,3,406,4472,8,406,1,407,1,407,3,407,4476,8,407,1,408,
		1,408,3,408,4480,8,408,1,409,1,409,3,409,4484,8,409,1,410,1,410,3,410,
		4488,8,410,1,411,1,411,1,411,3,411,4493,8,411,1,412,1,412,1,412,3,412,
		4498,8,412,1,413,1,413,1,413,3,413,4503,8,413,1,413,1,413,3,413,4507,8,
		413,1,414,1,414,3,414,4511,8,414,1,415,1,415,1,415,3,415,4516,8,415,1,
		416,3,416,4519,8,416,1,416,1,416,1,417,1,417,3,417,4525,8,417,1,418,3,
		418,4528,8,418,1,418,1,418,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
		419,3,419,4540,8,419,1,420,1,420,1,421,1,421,1,422,1,422,1,423,1,423,1,
		424,1,424,1,425,1,425,1,426,1,426,1,427,1,427,1,428,1,428,1,429,1,429,
		1,430,1,430,1,431,1,431,1,432,1,432,1,432,0,0,433,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
		182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
		218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
		254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
		290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
		326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
		362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
		398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
		434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
		470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
		506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
		542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
		578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
		614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
		650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,
		686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
		722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
		758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
		794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
		830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
		0,40,2,0,52,52,282,282,6,0,143,143,154,154,180,180,186,186,238,238,258,
		258,1,0,5,8,1,0,16,17,1,0,19,21,2,0,16,18,198,198,2,0,113,113,119,119,
		4,0,119,119,131,131,298,298,305,305,2,0,79,79,302,302,2,0,50,50,101,101,
		2,0,24,24,204,204,2,0,42,42,108,108,2,0,163,163,267,267,3,0,104,104,182,
		182,210,210,2,0,63,63,284,284,2,0,208,208,269,269,2,0,53,53,283,283,3,
		0,190,191,193,193,266,266,2,0,40,40,110,110,2,0,146,146,310,310,2,0,184,
		184,197,197,2,0,56,56,286,286,2,0,118,118,307,307,3,0,43,43,102,102,241,
		241,3,0,56,56,261,261,286,286,2,0,141,141,309,309,3,0,105,105,233,233,
		285,285,2,0,39,39,279,279,2,0,76,76,265,265,3,0,148,148,235,235,262,262,
		2,0,137,137,227,227,1,0,325,326,20,0,52,52,64,65,69,70,87,87,89,91,114,
		114,126,126,140,141,151,151,173,175,198,198,200,200,231,231,236,236,253,
		254,260,260,268,268,282,282,301,301,317,318,3,0,47,47,118,118,277,277,
		11,0,42,42,49,49,51,51,108,108,122,122,150,150,168,168,181,181,303,303,
		319,319,321,321,56,0,38,41,43,46,48,48,50,50,53,57,59,63,66,66,68,68,71,
		73,77,77,79,85,88,88,92,98,100,103,105,107,110,113,115,116,119,121,123,
		123,125,125,127,130,132,135,137,139,142,147,149,149,152,164,166,167,169,
		170,177,177,179,180,183,193,195,197,201,205,207,209,211,213,216,227,229,
		230,232,234,237,242,244,246,248,251,255,256,258,259,261,261,264,264,266,
		267,271,276,279,281,283,288,290,297,300,300,302,302,304,310,312,313,316,
		316,322,323,49,0,38,41,43,46,48,48,50,50,53,57,59,63,66,66,68,68,71,74,
		77,77,79,86,88,88,92,103,105,107,109,113,115,116,119,121,123,125,127,130,
		132,135,137,139,142,147,149,149,152,167,169,172,176,180,183,197,199,199,
		201,209,211,230,232,234,237,242,244,246,248,252,255,259,261,261,263,264,
		266,267,269,269,271,276,279,281,283,288,290,297,300,300,302,302,304,313,
		315,316,320,320,322,323,12,0,67,67,104,104,117,117,136,136,182,182,210,
		210,247,247,270,270,278,278,289,289,299,299,314,314,2,0,131,131,298,298,
		1,0,327,328,4890,0,871,1,0,0,0,2,876,1,0,0,0,4,902,1,0,0,0,6,910,1,0,0,
		0,8,934,1,0,0,0,10,941,1,0,0,0,12,1002,1,0,0,0,14,1013,1,0,0,0,16,1015,
		1,0,0,0,18,1023,1,0,0,0,20,1031,1,0,0,0,22,1035,1,0,0,0,24,1093,1,0,0,
		0,26,1095,1,0,0,0,28,1097,1,0,0,0,30,1105,1,0,0,0,32,1108,1,0,0,0,34,1112,
		1,0,0,0,36,1115,1,0,0,0,38,1141,1,0,0,0,40,1149,1,0,0,0,42,1157,1,0,0,
		0,44,1169,1,0,0,0,46,1171,1,0,0,0,48,1185,1,0,0,0,50,1194,1,0,0,0,52,1200,
		1,0,0,0,54,1206,1,0,0,0,56,1210,1,0,0,0,58,1212,1,0,0,0,60,1221,1,0,0,
		0,62,1237,1,0,0,0,64,1246,1,0,0,0,66,1259,1,0,0,0,68,1285,1,0,0,0,70,1307,
		1,0,0,0,72,1309,1,0,0,0,74,1316,1,0,0,0,76,1323,1,0,0,0,78,1331,1,0,0,
		0,80,1346,1,0,0,0,82,1360,1,0,0,0,84,1365,1,0,0,0,86,1367,1,0,0,0,88,1371,
		1,0,0,0,90,1373,1,0,0,0,92,1377,1,0,0,0,94,1385,1,0,0,0,96,1396,1,0,0,
		0,98,1398,1,0,0,0,100,1416,1,0,0,0,102,1420,1,0,0,0,104,1439,1,0,0,0,106,
		1447,1,0,0,0,108,1449,1,0,0,0,110,1471,1,0,0,0,112,1480,1,0,0,0,114,1488,
		1,0,0,0,116,1501,1,0,0,0,118,1503,1,0,0,0,120,1514,1,0,0,0,122,1522,1,
		0,0,0,124,1524,1,0,0,0,126,1535,1,0,0,0,128,1546,1,0,0,0,130,1551,1,0,
		0,0,132,1559,1,0,0,0,134,1573,1,0,0,0,136,1587,1,0,0,0,138,1591,1,0,0,
		0,140,1595,1,0,0,0,142,1610,1,0,0,0,144,1612,1,0,0,0,146,1618,1,0,0,0,
		148,1622,1,0,0,0,150,1630,1,0,0,0,152,1635,1,0,0,0,154,1644,1,0,0,0,156,
		1650,1,0,0,0,158,1654,1,0,0,0,160,1659,1,0,0,0,162,1661,1,0,0,0,164,1677,
		1,0,0,0,166,1682,1,0,0,0,168,1686,1,0,0,0,170,1692,1,0,0,0,172,1700,1,
		0,0,0,174,1707,1,0,0,0,176,1712,1,0,0,0,178,1731,1,0,0,0,180,1750,1,0,
		0,0,182,1765,1,0,0,0,184,1770,1,0,0,0,186,1775,1,0,0,0,188,1780,1,0,0,
		0,190,1787,1,0,0,0,192,1792,1,0,0,0,194,1807,1,0,0,0,196,1812,1,0,0,0,
		198,1819,1,0,0,0,200,1852,1,0,0,0,202,1871,1,0,0,0,204,1875,1,0,0,0,206,
		1877,1,0,0,0,208,1902,1,0,0,0,210,1904,1,0,0,0,212,1913,1,0,0,0,214,1923,
		1,0,0,0,216,1928,1,0,0,0,218,1933,1,0,0,0,220,1941,1,0,0,0,222,1946,1,
		0,0,0,224,1951,1,0,0,0,226,1974,1,0,0,0,228,1976,1,0,0,0,230,1980,1,0,
		0,0,232,1988,1,0,0,0,234,1997,1,0,0,0,236,2011,1,0,0,0,238,2019,1,0,0,
		0,240,2021,1,0,0,0,242,2031,1,0,0,0,244,2043,1,0,0,0,246,2079,1,0,0,0,
		248,2083,1,0,0,0,250,2091,1,0,0,0,252,2128,1,0,0,0,254,2132,1,0,0,0,256,
		2175,1,0,0,0,258,2203,1,0,0,0,260,2214,1,0,0,0,262,2216,1,0,0,0,264,2219,
		1,0,0,0,266,2227,1,0,0,0,268,2234,1,0,0,0,270,2268,1,0,0,0,272,2270,1,
		0,0,0,274,2272,1,0,0,0,276,2274,1,0,0,0,278,2283,1,0,0,0,280,2287,1,0,
		0,0,282,2319,1,0,0,0,284,2336,1,0,0,0,286,2338,1,0,0,0,288,2340,1,0,0,
		0,290,2352,1,0,0,0,292,2355,1,0,0,0,294,2363,1,0,0,0,296,2369,1,0,0,0,
		298,2371,1,0,0,0,300,2379,1,0,0,0,302,2381,1,0,0,0,304,2389,1,0,0,0,306,
		2393,1,0,0,0,308,2395,1,0,0,0,310,2397,1,0,0,0,312,2399,1,0,0,0,314,2401,
		1,0,0,0,316,2406,1,0,0,0,318,2410,1,0,0,0,320,2421,1,0,0,0,322,2434,1,
		0,0,0,324,2436,1,0,0,0,326,2438,1,0,0,0,328,2446,1,0,0,0,330,2451,1,0,
		0,0,332,2456,1,0,0,0,334,2462,1,0,0,0,336,2482,1,0,0,0,338,2485,1,0,0,
		0,340,2501,1,0,0,0,342,2514,1,0,0,0,344,2516,1,0,0,0,346,2528,1,0,0,0,
		348,2555,1,0,0,0,350,2557,1,0,0,0,352,2560,1,0,0,0,354,2568,1,0,0,0,356,
		2570,1,0,0,0,358,2599,1,0,0,0,360,2605,1,0,0,0,362,2607,1,0,0,0,364,2631,
		1,0,0,0,366,2645,1,0,0,0,368,2647,1,0,0,0,370,2652,1,0,0,0,372,2654,1,
		0,0,0,374,2662,1,0,0,0,376,2668,1,0,0,0,378,2670,1,0,0,0,380,2686,1,0,
		0,0,382,2702,1,0,0,0,384,2704,1,0,0,0,386,2714,1,0,0,0,388,2728,1,0,0,
		0,390,2736,1,0,0,0,392,2746,1,0,0,0,394,2761,1,0,0,0,396,2764,1,0,0,0,
		398,2773,1,0,0,0,400,2776,1,0,0,0,402,2790,1,0,0,0,404,2797,1,0,0,0,406,
		2799,1,0,0,0,408,2803,1,0,0,0,410,2807,1,0,0,0,412,2821,1,0,0,0,414,2823,
		1,0,0,0,416,2825,1,0,0,0,418,2880,1,0,0,0,420,2882,1,0,0,0,422,2892,1,
		0,0,0,424,2898,1,0,0,0,426,2903,1,0,0,0,428,2905,1,0,0,0,430,2909,1,0,
		0,0,432,2919,1,0,0,0,434,2929,1,0,0,0,436,2931,1,0,0,0,438,2949,1,0,0,
		0,440,2951,1,0,0,0,442,2955,1,0,0,0,444,2963,1,0,0,0,446,2967,1,0,0,0,
		448,2972,1,0,0,0,450,2978,1,0,0,0,452,2990,1,0,0,0,454,2995,1,0,0,0,456,
		3007,1,0,0,0,458,3010,1,0,0,0,460,3014,1,0,0,0,462,3017,1,0,0,0,464,3045,
		1,0,0,0,466,3047,1,0,0,0,468,3064,1,0,0,0,470,3066,1,0,0,0,472,3079,1,
		0,0,0,474,3081,1,0,0,0,476,3087,1,0,0,0,478,3093,1,0,0,0,480,3099,1,0,
		0,0,482,3106,1,0,0,0,484,3109,1,0,0,0,486,3116,1,0,0,0,488,3120,1,0,0,
		0,490,3132,1,0,0,0,492,3144,1,0,0,0,494,3147,1,0,0,0,496,3151,1,0,0,0,
		498,3155,1,0,0,0,500,3161,1,0,0,0,502,3164,1,0,0,0,504,3169,1,0,0,0,506,
		3173,1,0,0,0,508,3178,1,0,0,0,510,3185,1,0,0,0,512,3192,1,0,0,0,514,3198,
		1,0,0,0,516,3241,1,0,0,0,518,3243,1,0,0,0,520,3276,1,0,0,0,522,3282,1,
		0,0,0,524,3289,1,0,0,0,526,3291,1,0,0,0,528,3293,1,0,0,0,530,3308,1,0,
		0,0,532,3316,1,0,0,0,534,3318,1,0,0,0,536,3325,1,0,0,0,538,3333,1,0,0,
		0,540,3337,1,0,0,0,542,3345,1,0,0,0,544,3347,1,0,0,0,546,3363,1,0,0,0,
		548,3365,1,0,0,0,550,3384,1,0,0,0,552,3386,1,0,0,0,554,3390,1,0,0,0,556,
		3403,1,0,0,0,558,3409,1,0,0,0,560,3423,1,0,0,0,562,3425,1,0,0,0,564,3439,
		1,0,0,0,566,3441,1,0,0,0,568,3454,1,0,0,0,570,3463,1,0,0,0,572,3479,1,
		0,0,0,574,3497,1,0,0,0,576,3518,1,0,0,0,578,3537,1,0,0,0,580,3541,1,0,
		0,0,582,3544,1,0,0,0,584,3549,1,0,0,0,586,3551,1,0,0,0,588,3579,1,0,0,
		0,590,3628,1,0,0,0,592,3632,1,0,0,0,594,3649,1,0,0,0,596,3651,1,0,0,0,
		598,3657,1,0,0,0,600,3671,1,0,0,0,602,3673,1,0,0,0,604,3678,1,0,0,0,606,
		3685,1,0,0,0,608,3700,1,0,0,0,610,3702,1,0,0,0,612,3708,1,0,0,0,614,3726,
		1,0,0,0,616,3730,1,0,0,0,618,3738,1,0,0,0,620,3742,1,0,0,0,622,3754,1,
		0,0,0,624,3756,1,0,0,0,626,3761,1,0,0,0,628,3768,1,0,0,0,630,3776,1,0,
		0,0,632,3792,1,0,0,0,634,3816,1,0,0,0,636,3826,1,0,0,0,638,3843,1,0,0,
		0,640,3883,1,0,0,0,642,3889,1,0,0,0,644,3896,1,0,0,0,646,3956,1,0,0,0,
		648,3961,1,0,0,0,650,3970,1,0,0,0,652,3972,1,0,0,0,654,3976,1,0,0,0,656,
		3982,1,0,0,0,658,3994,1,0,0,0,660,4011,1,0,0,0,662,4013,1,0,0,0,664,4021,
		1,0,0,0,666,4025,1,0,0,0,668,4027,1,0,0,0,670,4033,1,0,0,0,672,4044,1,
		0,0,0,674,4058,1,0,0,0,676,4069,1,0,0,0,678,4071,1,0,0,0,680,4076,1,0,
		0,0,682,4096,1,0,0,0,684,4098,1,0,0,0,686,4101,1,0,0,0,688,4106,1,0,0,
		0,690,4113,1,0,0,0,692,4115,1,0,0,0,694,4119,1,0,0,0,696,4124,1,0,0,0,
		698,4136,1,0,0,0,700,4141,1,0,0,0,702,4153,1,0,0,0,704,4161,1,0,0,0,706,
		4169,1,0,0,0,708,4173,1,0,0,0,710,4175,1,0,0,0,712,4180,1,0,0,0,714,4188,
		1,0,0,0,716,4192,1,0,0,0,718,4197,1,0,0,0,720,4201,1,0,0,0,722,4207,1,
		0,0,0,724,4209,1,0,0,0,726,4217,1,0,0,0,728,4219,1,0,0,0,730,4221,1,0,
		0,0,732,4224,1,0,0,0,734,4232,1,0,0,0,736,4236,1,0,0,0,738,4238,1,0,0,
		0,740,4243,1,0,0,0,742,4254,1,0,0,0,744,4256,1,0,0,0,746,4263,1,0,0,0,
		748,4265,1,0,0,0,750,4270,1,0,0,0,752,4274,1,0,0,0,754,4276,1,0,0,0,756,
		4288,1,0,0,0,758,4300,1,0,0,0,760,4302,1,0,0,0,762,4310,1,0,0,0,764,4312,
		1,0,0,0,766,4318,1,0,0,0,768,4320,1,0,0,0,770,4322,1,0,0,0,772,4329,1,
		0,0,0,774,4340,1,0,0,0,776,4343,1,0,0,0,778,4371,1,0,0,0,780,4373,1,0,
		0,0,782,4377,1,0,0,0,784,4386,1,0,0,0,786,4394,1,0,0,0,788,4401,1,0,0,
		0,790,4411,1,0,0,0,792,4420,1,0,0,0,794,4429,1,0,0,0,796,4439,1,0,0,0,
		798,4443,1,0,0,0,800,4447,1,0,0,0,802,4451,1,0,0,0,804,4455,1,0,0,0,806,
		4459,1,0,0,0,808,4463,1,0,0,0,810,4467,1,0,0,0,812,4471,1,0,0,0,814,4475,
		1,0,0,0,816,4479,1,0,0,0,818,4483,1,0,0,0,820,4487,1,0,0,0,822,4492,1,
		0,0,0,824,4497,1,0,0,0,826,4502,1,0,0,0,828,4510,1,0,0,0,830,4515,1,0,
		0,0,832,4518,1,0,0,0,834,4524,1,0,0,0,836,4527,1,0,0,0,838,4539,1,0,0,
		0,840,4541,1,0,0,0,842,4543,1,0,0,0,844,4545,1,0,0,0,846,4547,1,0,0,0,
		848,4549,1,0,0,0,850,4551,1,0,0,0,852,4553,1,0,0,0,854,4555,1,0,0,0,856,
		4557,1,0,0,0,858,4559,1,0,0,0,860,4561,1,0,0,0,862,4563,1,0,0,0,864,4565,
		1,0,0,0,866,872,3,2,1,0,867,868,5,226,0,0,868,869,5,46,0,0,869,870,5,327,
		0,0,870,872,3,4,2,0,871,866,1,0,0,0,871,867,1,0,0,0,872,1,1,0,0,0,873,
		875,5,22,0,0,874,873,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,
		0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,888,3,10,5,0,880,882,5,22,0,
		0,881,880,1,0,0,0,882,883,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,
		885,1,0,0,0,885,887,3,10,5,0,886,881,1,0,0,0,887,890,1,0,0,0,888,886,1,
		0,0,0,888,889,1,0,0,0,889,894,1,0,0,0,890,888,1,0,0,0,891,893,5,22,0,0,
		892,891,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,897,
		1,0,0,0,896,894,1,0,0,0,897,898,5,0,0,1,898,3,1,0,0,0,899,901,5,22,0,0,
		900,899,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,
		1,0,0,0,904,902,1,0,0,0,905,906,5,0,0,1,906,5,1,0,0,0,907,909,5,22,0,0,
		908,907,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,921,
		1,0,0,0,912,910,1,0,0,0,913,915,3,8,4,0,914,916,5,22,0,0,915,914,1,0,0,
		0,916,917,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,
		913,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,
		0,0,0,923,921,1,0,0,0,924,925,5,253,0,0,925,929,3,14,7,0,926,928,5,22,
		0,0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,
		7,1,0,0,0,931,929,1,0,0,0,932,935,3,764,382,0,933,935,3,214,107,0,934,
		932,1,0,0,0,934,933,1,0,0,0,935,9,1,0,0,0,936,939,5,127,0,0,937,938,5,
		232,0,0,938,940,5,224,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,
		0,0,941,936,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,3,12,6,0,944,
		11,1,0,0,0,945,1003,3,224,112,0,946,1003,3,232,116,0,947,1003,3,764,382,
		0,948,1003,3,416,208,0,949,1003,3,566,283,0,950,1003,3,760,380,0,951,1003,
		3,364,182,0,952,1003,3,766,383,0,953,1003,3,658,329,0,954,1003,3,656,328,
		0,955,1003,3,768,384,0,956,1003,3,210,105,0,957,1003,3,214,107,0,958,1003,
		3,216,108,0,959,1003,3,462,231,0,960,1003,3,466,233,0,961,1003,3,222,111,
		0,962,1003,3,630,315,0,963,1003,3,634,317,0,964,1003,3,636,318,0,965,1003,
		3,368,184,0,966,1003,3,568,284,0,967,1003,3,570,285,0,968,1003,3,572,286,
		0,969,1003,3,574,287,0,970,1003,3,576,288,0,971,1003,3,392,196,0,972,1003,
		3,396,198,0,973,1003,3,400,200,0,974,1003,3,378,189,0,975,1003,3,380,190,
		0,976,1003,3,384,192,0,977,1003,3,612,306,0,978,1003,3,626,313,0,979,1003,
		3,672,336,0,980,1003,3,680,340,0,981,1003,3,702,351,0,982,1003,3,586,293,
		0,983,1003,3,588,294,0,984,1003,3,470,235,0,985,1003,3,390,195,0,986,1003,
		3,386,193,0,987,1003,3,388,194,0,988,1003,3,620,310,0,989,1003,3,596,298,
		0,990,1003,3,598,299,0,991,1003,3,602,301,0,992,1003,3,420,210,0,993,1003,
		3,422,211,0,994,1003,3,424,212,0,995,1003,3,774,387,0,996,1003,3,604,302,
		0,997,1003,3,606,303,0,998,1003,3,610,305,0,999,1003,3,446,223,0,1000,
		1003,3,448,224,0,1001,1003,3,776,388,0,1002,945,1,0,0,0,1002,946,1,0,0,
		0,1002,947,1,0,0,0,1002,948,1,0,0,0,1002,949,1,0,0,0,1002,950,1,0,0,0,
		1002,951,1,0,0,0,1002,952,1,0,0,0,1002,953,1,0,0,0,1002,954,1,0,0,0,1002,
		955,1,0,0,0,1002,956,1,0,0,0,1002,957,1,0,0,0,1002,958,1,0,0,0,1002,959,
		1,0,0,0,1002,960,1,0,0,0,1002,961,1,0,0,0,1002,962,1,0,0,0,1002,963,1,
		0,0,0,1002,964,1,0,0,0,1002,965,1,0,0,0,1002,966,1,0,0,0,1002,967,1,0,
		0,0,1002,968,1,0,0,0,1002,969,1,0,0,0,1002,970,1,0,0,0,1002,971,1,0,0,
		0,1002,972,1,0,0,0,1002,973,1,0,0,0,1002,974,1,0,0,0,1002,975,1,0,0,0,
		1002,976,1,0,0,0,1002,977,1,0,0,0,1002,978,1,0,0,0,1002,979,1,0,0,0,1002,
		980,1,0,0,0,1002,981,1,0,0,0,1002,982,1,0,0,0,1002,983,1,0,0,0,1002,984,
		1,0,0,0,1002,985,1,0,0,0,1002,986,1,0,0,0,1002,987,1,0,0,0,1002,988,1,
		0,0,0,1002,989,1,0,0,0,1002,990,1,0,0,0,1002,991,1,0,0,0,1002,992,1,0,
		0,0,1002,993,1,0,0,0,1002,994,1,0,0,0,1002,995,1,0,0,0,1002,996,1,0,0,
		0,1002,997,1,0,0,0,1002,998,1,0,0,0,1002,999,1,0,0,0,1002,1000,1,0,0,0,
		1002,1001,1,0,0,0,1003,13,1,0,0,0,1004,1009,3,16,8,0,1005,1006,5,211,0,
		0,1006,1008,3,16,8,0,1007,1005,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,
		0,0,1009,1010,1,0,0,0,1010,1014,1,0,0,0,1011,1009,1,0,0,0,1012,1014,3,
		200,100,0,1013,1004,1,0,0,0,1013,1012,1,0,0,0,1014,15,1,0,0,0,1015,1020,
		3,18,9,0,1016,1017,5,45,0,0,1017,1019,3,18,9,0,1018,1016,1,0,0,0,1019,
		1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,17,1,0,0,0,1022,
		1020,1,0,0,0,1023,1028,3,20,10,0,1024,1025,5,323,0,0,1025,1027,3,20,10,
		0,1026,1024,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,
		0,0,1029,19,1,0,0,0,1030,1028,1,0,0,0,1031,1033,3,28,14,0,1032,1034,3,
		24,12,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,21,1,0,0,0,1035,1037,
		5,170,0,0,1036,1038,5,198,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
		1039,1,0,0,0,1039,1040,5,108,0,0,1040,1041,5,140,0,0,1041,23,1,0,0,0,1042,
		1044,5,198,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
		1046,3,26,13,0,1046,1049,3,28,14,0,1047,1048,5,120,0,0,1048,1050,3,28,
		14,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1094,1,0,0,0,1051,1053,5,
		198,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1056,
		5,157,0,0,1055,1057,5,78,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,
		1058,1,0,0,0,1058,1094,3,82,41,0,1059,1069,5,171,0,0,1060,1069,5,199,0,
		0,1061,1062,5,170,0,0,1062,1069,5,200,0,0,1063,1065,5,170,0,0,1064,1063,
		1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,0,1066,1067,5,198,0,0,1067,1069,
		5,200,0,0,1068,1059,1,0,0,0,1068,1060,1,0,0,0,1068,1061,1,0,0,0,1068,1064,
		1,0,0,0,1069,1094,1,0,0,0,1070,1072,5,198,0,0,1071,1070,1,0,0,0,1071,1072,
		1,0,0,0,1072,1073,1,0,0,0,1073,1075,5,64,0,0,1074,1076,7,0,0,0,1075,1074,
		1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,28,14,0,1078,1079,
		5,45,0,0,1079,1080,3,28,14,0,1080,1094,1,0,0,0,1081,1087,5,1,0,0,1082,
		1087,5,2,0,0,1083,1087,5,3,0,0,1084,1087,5,4,0,0,1085,1087,3,22,11,0,1086,
		1081,1,0,0,0,1086,1082,1,0,0,0,1086,1083,1,0,0,0,1086,1084,1,0,0,0,1086,
		1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,3,28,14,0,1089,1086,1,0,0,0,1090,
		1091,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,
		1043,1,0,0,0,1093,1052,1,0,0,0,1093,1068,1,0,0,0,1093,1071,1,0,0,0,1093,
		1089,1,0,0,0,1094,25,1,0,0,0,1095,1096,7,1,0,0,1096,27,1,0,0,0,1097,1102,
		3,36,18,0,1098,1099,7,2,0,0,1099,1101,3,36,18,0,1100,1098,1,0,0,0,1101,
		1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,29,1,0,0,0,1104,
		1102,1,0,0,0,1105,1106,5,7,0,0,1106,1107,5,7,0,0,1107,31,1,0,0,0,1108,
		1109,5,7,0,0,1109,1110,5,7,0,0,1110,1111,5,12,0,0,1111,33,1,0,0,0,1112,
		1113,5,27,0,0,1113,1114,5,27,0,0,1114,35,1,0,0,0,1115,1128,3,38,19,0,1116,
		1124,5,9,0,0,1117,1124,3,30,15,0,1118,1124,5,10,0,0,1119,1124,3,32,16,
		0,1120,1124,5,11,0,0,1121,1124,5,12,0,0,1122,1124,5,33,0,0,1123,1116,1,
		0,0,0,1123,1117,1,0,0,0,1123,1118,1,0,0,0,1123,1119,1,0,0,0,1123,1120,
		1,0,0,0,1123,1121,1,0,0,0,1123,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1127,
		3,38,19,0,1126,1123,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,
		1,0,0,0,1129,1139,1,0,0,0,1130,1128,1,0,0,0,1131,1132,3,34,17,0,1132,1133,
		3,36,18,0,1133,1140,1,0,0,0,1134,1136,5,27,0,0,1135,1134,1,0,0,0,1136,
		1137,1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,
		1131,1,0,0,0,1139,1135,1,0,0,0,1139,1140,1,0,0,0,1140,37,1,0,0,0,1141,
		1146,3,40,20,0,1142,1143,7,3,0,0,1143,1145,3,40,20,0,1144,1142,1,0,0,0,
		1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,39,1,0,0,0,
		1148,1146,1,0,0,0,1149,1154,3,42,21,0,1150,1151,7,4,0,0,1151,1153,3,42,
		21,0,1152,1150,1,0,0,0,1153,1156,1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,
		0,0,0,1155,41,1,0,0,0,1156,1154,1,0,0,0,1157,1162,3,44,22,0,1158,1159,
		5,13,0,0,1159,1161,3,44,22,0,1160,1158,1,0,0,0,1161,1164,1,0,0,0,1162,
		1160,1,0,0,0,1162,1163,1,0,0,0,1163,43,1,0,0,0,1164,1162,1,0,0,0,1165,
		1170,3,54,27,0,1166,1167,3,46,23,0,1167,1168,3,54,27,0,1168,1170,1,0,0,
		0,1169,1165,1,0,0,0,1169,1166,1,0,0,0,1170,45,1,0,0,0,1171,1172,7,5,0,
		0,1172,47,1,0,0,0,1173,1182,3,138,69,0,1174,1182,3,132,66,0,1175,1179,
		5,23,0,0,1176,1180,3,144,72,0,1177,1180,5,327,0,0,1178,1180,3,802,401,
		0,1179,1176,1,0,0,0,1179,1177,1,0,0,0,1179,1178,1,0,0,0,1180,1182,1,0,
		0,0,1181,1173,1,0,0,0,1181,1174,1,0,0,0,1181,1175,1,0,0,0,1182,1184,1,
		0,0,0,1183,1181,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,
		1,0,0,0,1186,1190,1,0,0,0,1187,1185,1,0,0,0,1188,1189,5,74,0,0,1189,1191,
		3,800,400,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,49,1,0,0,0,1192,1195,
		3,786,393,0,1193,1195,3,68,34,0,1194,1192,1,0,0,0,1194,1193,1,0,0,0,1195,
		1196,1,0,0,0,1196,1197,3,48,24,0,1197,51,1,0,0,0,1198,1201,3,788,394,0,
		1199,1201,3,70,35,0,1200,1198,1,0,0,0,1200,1199,1,0,0,0,1201,1202,1,0,
		0,0,1202,1203,3,48,24,0,1203,53,1,0,0,0,1204,1207,3,50,25,0,1205,1207,
		3,84,42,0,1206,1204,1,0,0,0,1206,1205,1,0,0,0,1207,55,1,0,0,0,1208,1211,
		3,52,26,0,1209,1211,3,84,42,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,
		57,1,0,0,0,1212,1214,5,37,0,0,1213,1215,3,112,56,0,1214,1213,1,0,0,0,1214,
		1215,1,0,0,0,1215,1217,1,0,0,0,1216,1218,5,24,0,0,1217,1216,1,0,0,0,1217,
		1218,1,0,0,0,1218,1219,1,0,0,0,1219,1220,5,36,0,0,1220,59,1,0,0,0,1221,
		1224,3,14,7,0,1222,1223,5,28,0,0,1223,1225,3,14,7,0,1224,1222,1,0,0,0,
		1224,1225,1,0,0,0,1225,1234,1,0,0,0,1226,1227,5,24,0,0,1227,1230,3,14,
		7,0,1228,1229,5,28,0,0,1229,1231,3,14,7,0,1230,1228,1,0,0,0,1230,1231,
		1,0,0,0,1231,1233,1,0,0,0,1232,1226,1,0,0,0,1233,1236,1,0,0,0,1234,1232,
		1,0,0,0,1234,1235,1,0,0,0,1235,61,1,0,0,0,1236,1234,1,0,0,0,1237,1239,
		5,31,0,0,1238,1240,3,60,30,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,
		1242,1,0,0,0,1241,1243,5,24,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,
		1244,1,0,0,0,1244,1245,5,32,0,0,1245,63,1,0,0,0,1246,1247,3,14,7,0,1247,
		1248,5,28,0,0,1248,1256,3,14,7,0,1249,1250,5,24,0,0,1250,1251,3,14,7,0,
		1251,1252,5,28,0,0,1252,1253,3,14,7,0,1253,1255,1,0,0,0,1254,1249,1,0,
		0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,65,1,0,
		0,0,1258,1256,1,0,0,0,1259,1261,5,14,0,0,1260,1262,3,64,32,0,1261,1260,
		1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,1265,5,24,0,0,1264,1263,
		1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,5,15,0,0,1267,67,
		1,0,0,0,1268,1286,3,142,71,0,1269,1286,3,144,72,0,1270,1286,3,80,40,0,
		1271,1286,3,72,36,0,1272,1286,3,76,38,0,1273,1286,3,78,39,0,1274,1275,
		3,802,401,0,1275,1278,5,34,0,0,1276,1279,3,828,414,0,1277,1279,5,324,0,
		0,1278,1276,1,0,0,0,1278,1277,1,0,0,0,1279,1286,1,0,0,0,1280,1286,3,208,
		104,0,1281,1286,3,74,37,0,1282,1286,3,58,29,0,1283,1286,3,62,31,0,1284,
		1286,3,66,33,0,1285,1268,1,0,0,0,1285,1269,1,0,0,0,1285,1270,1,0,0,0,1285,
		1271,1,0,0,0,1285,1272,1,0,0,0,1285,1273,1,0,0,0,1285,1274,1,0,0,0,1285,
		1280,1,0,0,0,1285,1281,1,0,0,0,1285,1282,1,0,0,0,1285,1283,1,0,0,0,1285,
		1284,1,0,0,0,1286,69,1,0,0,0,1287,1308,3,142,71,0,1288,1308,3,144,72,0,
		1289,1308,3,80,40,0,1290,1308,3,72,36,0,1291,1308,3,78,39,0,1292,1293,
		3,802,401,0,1293,1296,5,34,0,0,1294,1297,3,828,414,0,1295,1297,5,324,0,
		0,1296,1294,1,0,0,0,1296,1295,1,0,0,0,1297,1308,1,0,0,0,1298,1299,5,25,
		0,0,1299,1300,3,232,116,0,1300,1301,5,26,0,0,1301,1308,1,0,0,0,1302,1308,
		3,208,104,0,1303,1308,3,74,37,0,1304,1308,3,58,29,0,1305,1308,3,62,31,
		0,1306,1308,3,66,33,0,1307,1287,1,0,0,0,1307,1288,1,0,0,0,1307,1289,1,
		0,0,0,1307,1290,1,0,0,0,1307,1291,1,0,0,0,1307,1292,1,0,0,0,1307,1298,
		1,0,0,0,1307,1302,1,0,0,0,1307,1303,1,0,0,0,1307,1304,1,0,0,0,1307,1305,
		1,0,0,0,1307,1306,1,0,0,0,1308,71,1,0,0,0,1309,1310,5,70,0,0,1310,1311,
		5,25,0,0,1311,1312,3,14,7,0,1312,1313,5,49,0,0,1313,1314,3,204,102,0,1314,
		1315,5,26,0,0,1315,73,1,0,0,0,1316,1317,5,65,0,0,1317,1318,5,25,0,0,1318,
		1319,3,14,7,0,1319,1320,5,49,0,0,1320,1321,3,156,78,0,1321,1322,5,26,0,
		0,1322,75,1,0,0,0,1323,1324,5,126,0,0,1324,1327,5,25,0,0,1325,1328,3,232,
		116,0,1326,1328,3,368,184,0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,1329,
		1,0,0,0,1329,1330,5,26,0,0,1330,77,1,0,0,0,1331,1333,5,69,0,0,1332,1334,
		3,14,7,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1337,
		3,140,70,0,1336,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1336,1,0,0,0,1338,
		1339,1,0,0,0,1339,1342,1,0,0,0,1340,1341,5,112,0,0,1341,1343,3,14,7,0,
		1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,5,116,
		0,0,1345,79,1,0,0,0,1346,1358,3,110,55,0,1347,1356,5,35,0,0,1348,1349,
		5,25,0,0,1349,1350,3,14,7,0,1350,1351,5,26,0,0,1351,1357,1,0,0,0,1352,
		1353,5,31,0,0,1353,1354,3,6,3,0,1354,1355,5,32,0,0,1355,1357,1,0,0,0,1356,
		1348,1,0,0,0,1356,1352,1,0,0,0,1357,1359,1,0,0,0,1358,1347,1,0,0,0,1358,
		1359,1,0,0,0,1359,81,1,0,0,0,1360,1361,3,56,28,0,1361,83,1,0,0,0,1362,
		1366,3,98,49,0,1363,1366,3,102,51,0,1364,1366,3,108,54,0,1365,1362,1,0,
		0,0,1365,1363,1,0,0,0,1365,1364,1,0,0,0,1366,85,1,0,0,0,1367,1368,5,324,
		0,0,1368,87,1,0,0,0,1369,1372,3,786,393,0,1370,1372,5,324,0,0,1371,1369,
		1,0,0,0,1371,1370,1,0,0,0,1372,89,1,0,0,0,1373,1374,3,14,7,0,1374,1375,
		5,49,0,0,1375,1376,3,88,44,0,1376,91,1,0,0,0,1377,1382,3,90,45,0,1378,
		1379,5,24,0,0,1379,1381,3,90,45,0,1380,1378,1,0,0,0,1381,1384,1,0,0,0,
		1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,93,1,0,0,0,1384,1382,1,0,0,0,
		1385,1386,3,14,7,0,1386,1387,5,24,0,0,1387,1390,3,86,43,0,1388,1389,5,
		218,0,0,1389,1391,3,92,46,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,95,
		1,0,0,0,1392,1397,5,119,0,0,1393,1397,5,200,0,0,1394,1395,5,96,0,0,1395,
		1397,3,14,7,0,1396,1392,1,0,0,0,1396,1393,1,0,0,0,1396,1394,1,0,0,0,1397,
		97,1,0,0,0,1398,1399,5,175,0,0,1399,1400,5,25,0,0,1400,1403,3,94,47,0,
		1401,1402,5,254,0,0,1402,1404,3,156,78,0,1403,1401,1,0,0,0,1403,1404,1,
		0,0,0,1404,1411,1,0,0,0,1405,1406,3,96,48,0,1406,1407,5,206,0,0,1407,1408,
		7,6,0,0,1408,1410,1,0,0,0,1409,1405,1,0,0,0,1410,1413,1,0,0,0,1411,1409,
		1,0,0,0,1411,1412,1,0,0,0,1412,1414,1,0,0,0,1413,1411,1,0,0,0,1414,1415,
		5,26,0,0,1415,99,1,0,0,0,1416,1417,7,7,0,0,1417,1418,5,206,0,0,1418,1419,
		5,119,0,0,1419,101,1,0,0,0,1420,1421,5,173,0,0,1421,1422,5,25,0,0,1422,
		1424,3,94,47,0,1423,1425,3,100,50,0,1424,1423,1,0,0,0,1424,1425,1,0,0,
		0,1425,1426,1,0,0,0,1426,1427,5,26,0,0,1427,103,1,0,0,0,1428,1430,5,321,
		0,0,1429,1431,5,48,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1440,1,
		0,0,0,1432,1434,5,320,0,0,1433,1435,7,8,0,0,1434,1433,1,0,0,0,1434,1435,
		1,0,0,0,1435,1437,1,0,0,0,1436,1438,5,48,0,0,1437,1436,1,0,0,0,1437,1438,
		1,0,0,0,1438,1440,1,0,0,0,1439,1428,1,0,0,0,1439,1432,1,0,0,0,1440,105,
		1,0,0,0,1441,1448,5,119,0,0,1442,1448,5,200,0,0,1443,1444,5,113,0,0,1444,
		1448,5,48,0,0,1445,1446,5,113,0,0,1446,1448,5,202,0,0,1447,1441,1,0,0,
		0,1447,1442,1,0,0,0,1447,1443,1,0,0,0,1447,1445,1,0,0,0,1448,107,1,0,0,
		0,1449,1450,5,174,0,0,1450,1451,5,25,0,0,1451,1455,3,94,47,0,1452,1453,
		3,104,52,0,1453,1454,5,322,0,0,1454,1456,1,0,0,0,1455,1452,1,0,0,0,1455,
		1456,1,0,0,0,1456,1461,1,0,0,0,1457,1458,3,106,53,0,1458,1459,5,206,0,
		0,1459,1460,5,113,0,0,1460,1462,1,0,0,0,1461,1457,1,0,0,0,1461,1462,1,
		0,0,0,1462,1467,1,0,0,0,1463,1464,3,106,53,0,1464,1465,5,206,0,0,1465,
		1466,5,119,0,0,1466,1468,1,0,0,0,1467,1463,1,0,0,0,1467,1468,1,0,0,0,1468,
		1469,1,0,0,0,1469,1470,5,26,0,0,1470,109,1,0,0,0,1471,1473,5,25,0,0,1472,
		1474,3,130,65,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,
		1475,1477,5,24,0,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,
		0,1478,1479,5,26,0,0,1479,111,1,0,0,0,1480,1485,3,14,7,0,1481,1482,5,24,
		0,0,1482,1484,3,14,7,0,1483,1481,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,
		0,0,0,1485,1486,1,0,0,0,1486,113,1,0,0,0,1487,1485,1,0,0,0,1488,1489,5,
		25,0,0,1489,1494,3,800,400,0,1490,1491,5,24,0,0,1491,1493,3,800,400,0,
		1492,1490,1,0,0,0,1493,1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,
		0,1495,1497,1,0,0,0,1496,1494,1,0,0,0,1497,1498,5,26,0,0,1498,115,1,0,
		0,0,1499,1502,3,144,72,0,1500,1502,3,800,400,0,1501,1499,1,0,0,0,1501,
		1500,1,0,0,0,1502,117,1,0,0,0,1503,1504,5,25,0,0,1504,1509,3,116,58,0,
		1505,1506,5,24,0,0,1506,1508,3,116,58,0,1507,1505,1,0,0,0,1508,1511,1,
		0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1512,1,0,0,0,1511,1509,
		1,0,0,0,1512,1513,5,26,0,0,1513,119,1,0,0,0,1514,1515,3,824,412,0,1515,
		1516,3,800,400,0,1516,121,1,0,0,0,1517,1518,3,800,400,0,1518,1519,5,23,
		0,0,1519,1520,3,800,400,0,1520,1523,1,0,0,0,1521,1523,3,814,407,0,1522,
		1517,1,0,0,0,1522,1521,1,0,0,0,1523,123,1,0,0,0,1524,1529,3,120,60,0,1525,
		1526,5,24,0,0,1526,1528,3,120,60,0,1527,1525,1,0,0,0,1528,1531,1,0,0,0,
		1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,
		0,1532,1534,5,24,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,125,1,0,
		0,0,1535,1540,3,122,61,0,1536,1537,5,24,0,0,1537,1539,3,122,61,0,1538,
		1536,1,0,0,0,1539,1542,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,
		1544,1,0,0,0,1542,1540,1,0,0,0,1543,1545,5,24,0,0,1544,1543,1,0,0,0,1544,
		1545,1,0,0,0,1545,127,1,0,0,0,1546,1549,3,14,7,0,1547,1548,5,49,0,0,1548,
		1550,3,802,401,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,129,1,0,0,0,
		1551,1556,3,128,64,0,1552,1553,5,24,0,0,1553,1555,3,128,64,0,1554,1552,
		1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,131,
		1,0,0,0,1558,1556,1,0,0,0,1559,1566,5,25,0,0,1560,1561,3,252,126,0,1561,
		1563,3,130,65,0,1562,1564,5,24,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,
		1564,1567,1,0,0,0,1565,1567,5,19,0,0,1566,1560,1,0,0,0,1566,1565,1,0,0,
		0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1569,5,26,0,0,1569,1570,3,134,
		67,0,1570,133,1,0,0,0,1571,1574,3,722,361,0,1572,1574,3,724,362,0,1573,
		1571,1,0,0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1577,1,0,0,0,1575,
		1576,5,215,0,0,1576,1578,3,726,363,0,1577,1575,1,0,0,0,1577,1578,1,0,0,
		0,1578,135,1,0,0,0,1579,1580,3,802,401,0,1580,1581,5,34,0,0,1581,1582,
		3,802,401,0,1582,1588,1,0,0,0,1583,1588,3,806,403,0,1584,1588,3,144,72,
		0,1585,1586,5,129,0,0,1586,1588,5,142,0,0,1587,1579,1,0,0,0,1587,1583,
		1,0,0,0,1587,1584,1,0,0,0,1587,1585,1,0,0,0,1588,1589,1,0,0,0,1589,1590,
		3,132,66,0,1590,137,1,0,0,0,1591,1592,5,37,0,0,1592,1593,3,14,7,0,1593,
		1594,5,36,0,0,1594,139,1,0,0,0,1595,1596,5,317,0,0,1596,1597,3,14,7,0,
		1597,1598,5,292,0,0,1598,1599,3,14,7,0,1599,141,1,0,0,0,1600,1611,3,864,
		432,0,1601,1611,3,862,431,0,1602,1611,5,324,0,0,1603,1611,5,330,0,0,1604,
		1611,5,200,0,0,1605,1611,5,90,0,0,1606,1611,5,89,0,0,1607,1611,5,91,0,
		0,1608,1611,3,860,430,0,1609,1611,5,114,0,0,1610,1600,1,0,0,0,1610,1601,
		1,0,0,0,1610,1602,1,0,0,0,1610,1603,1,0,0,0,1610,1604,1,0,0,0,1610,1605,
		1,0,0,0,1610,1606,1,0,0,0,1610,1607,1,0,0,0,1610,1608,1,0,0,0,1610,1609,
		1,0,0,0,1611,143,1,0,0,0,1612,1616,5,30,0,0,1613,1617,3,802,401,0,1614,
		1617,5,298,0,0,1615,1617,5,131,0,0,1616,1613,1,0,0,0,1616,1614,1,0,0,0,
		1616,1615,1,0,0,0,1617,145,1,0,0,0,1618,1620,3,144,72,0,1619,1621,5,27,
		0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,147,1,0,0,0,1622,1627,3,144,
		72,0,1623,1624,5,24,0,0,1624,1626,3,144,72,0,1625,1623,1,0,0,0,1626,1629,
		1,0,0,0,1627,1625,1,0,0,0,1627,1628,1,0,0,0,1628,149,1,0,0,0,1629,1627,
		1,0,0,0,1630,1633,3,144,72,0,1631,1632,5,49,0,0,1632,1634,3,144,72,0,1633,
		1631,1,0,0,0,1633,1634,1,0,0,0,1634,151,1,0,0,0,1635,1640,3,150,75,0,1636,
		1637,5,24,0,0,1637,1639,3,150,75,0,1638,1636,1,0,0,0,1639,1642,1,0,0,0,
		1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,153,1,0,0,0,1642,1640,1,0,0,0,
		1643,1645,7,3,0,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,1648,1,0,0,
		0,1646,1649,3,864,432,0,1647,1649,3,862,431,0,1648,1646,1,0,0,0,1648,1647,
		1,0,0,0,1649,155,1,0,0,0,1650,1651,3,818,409,0,1651,157,1,0,0,0,1652,1655,
		3,864,432,0,1653,1655,3,144,72,0,1654,1652,1,0,0,0,1654,1653,1,0,0,0,1655,
		159,1,0,0,0,1656,1660,3,782,391,0,1657,1660,5,324,0,0,1658,1660,3,144,
		72,0,1659,1656,1,0,0,0,1659,1657,1,0,0,0,1659,1658,1,0,0,0,1660,161,1,
		0,0,0,1661,1662,3,160,80,0,1662,1663,5,28,0,0,1663,1664,3,204,102,0,1664,
		163,1,0,0,0,1665,1666,3,160,80,0,1666,1671,3,204,102,0,1667,1669,5,198,
		0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1672,5,
		200,0,0,1671,1668,1,0,0,0,1671,1672,1,0,0,0,1672,1678,1,0,0,0,1673,1674,
		3,204,102,0,1674,1675,5,49,0,0,1675,1676,3,160,80,0,1676,1678,1,0,0,0,
		1677,1665,1,0,0,0,1677,1673,1,0,0,0,1678,165,1,0,0,0,1679,1680,3,160,80,
		0,1680,1681,5,28,0,0,1681,1683,1,0,0,0,1682,1679,1,0,0,0,1682,1683,1,0,
		0,0,1683,1684,1,0,0,0,1684,1685,3,204,102,0,1685,167,1,0,0,0,1686,1690,
		3,166,83,0,1687,1688,5,31,0,0,1688,1689,5,58,0,0,1689,1691,5,32,0,0,1690,
		1687,1,0,0,0,1690,1691,1,0,0,0,1691,169,1,0,0,0,1692,1697,3,168,84,0,1693,
		1694,5,24,0,0,1694,1696,3,168,84,0,1695,1693,1,0,0,0,1696,1699,1,0,0,0,
		1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,171,1,0,0,0,1699,1697,1,0,0,0,
		1700,1701,5,94,0,0,1701,1702,5,25,0,0,1702,1703,3,158,79,0,1703,1704,5,
		24,0,0,1704,1705,3,158,79,0,1705,1706,5,26,0,0,1706,173,1,0,0,0,1707,1708,
		5,210,0,0,1708,1709,5,5,0,0,1709,1710,3,204,102,0,1710,1711,5,7,0,0,1711,
		175,1,0,0,0,1712,1729,5,299,0,0,1713,1725,5,5,0,0,1714,1719,3,204,102,
		0,1715,1716,5,24,0,0,1716,1718,3,204,102,0,1717,1715,1,0,0,0,1718,1721,
		1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,1723,1,0,0,0,1721,1719,
		1,0,0,0,1722,1724,5,24,0,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1726,
		1,0,0,0,1725,1714,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1730,
		5,7,0,0,1728,1730,5,4,0,0,1729,1713,1,0,0,0,1729,1728,1,0,0,0,1730,177,
		1,0,0,0,1731,1748,5,278,0,0,1732,1744,5,5,0,0,1733,1738,3,162,81,0,1734,
		1735,5,24,0,0,1735,1737,3,162,81,0,1736,1734,1,0,0,0,1737,1740,1,0,0,0,
		1738,1736,1,0,0,0,1738,1739,1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,
		0,1741,1743,5,24,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,
		0,0,1744,1733,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1749,5,
		7,0,0,1747,1749,5,4,0,0,1748,1732,1,0,0,0,1748,1747,1,0,0,0,1749,179,1,
		0,0,0,1750,1751,5,314,0,0,1751,1752,5,5,0,0,1752,1757,3,166,83,0,1753,
		1754,5,24,0,0,1754,1756,3,166,83,0,1755,1753,1,0,0,0,1756,1759,1,0,0,0,
		1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,
		0,1760,1762,5,24,0,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,
		0,0,1763,1764,5,7,0,0,1764,181,1,0,0,0,1765,1766,5,182,0,0,1766,1767,5,
		5,0,0,1767,1768,3,204,102,0,1768,1769,5,7,0,0,1769,183,1,0,0,0,1770,1771,
		5,277,0,0,1771,1772,5,5,0,0,1772,1773,3,204,102,0,1773,1774,5,7,0,0,1774,
		185,1,0,0,0,1775,1776,5,136,0,0,1776,1777,5,5,0,0,1777,1778,3,204,102,
		0,1778,1779,5,7,0,0,1779,187,1,0,0,0,1780,1781,5,104,0,0,1781,1782,5,5,
		0,0,1782,1783,3,204,102,0,1783,1784,5,24,0,0,1784,1785,3,204,102,0,1785,
		1786,5,7,0,0,1786,189,1,0,0,0,1787,1788,5,270,0,0,1788,1789,5,5,0,0,1789,
		1790,3,204,102,0,1790,1791,5,7,0,0,1791,191,1,0,0,0,1792,1793,5,117,0,
		0,1793,1794,5,5,0,0,1794,1799,3,160,80,0,1795,1796,5,24,0,0,1796,1798,
		3,160,80,0,1797,1795,1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,
		1800,1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,0,0,0,1802,1804,5,24,0,0,1803,
		1802,1,0,0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,1806,5,7,0,0,1806,
		193,1,0,0,0,1807,1808,5,247,0,0,1808,1809,5,5,0,0,1809,1810,3,160,80,0,
		1810,1811,5,7,0,0,1811,195,1,0,0,0,1812,1813,5,289,0,0,1813,1814,5,5,0,
		0,1814,1815,3,204,102,0,1815,1816,5,24,0,0,1816,1817,3,160,80,0,1817,1818,
		5,7,0,0,1818,197,1,0,0,0,1819,1820,5,67,0,0,1820,1821,5,5,0,0,1821,1823,
		5,25,0,0,1822,1824,3,170,85,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
		1826,1,0,0,0,1825,1827,5,24,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,
		1832,1,0,0,0,1828,1829,5,37,0,0,1829,1830,3,170,85,0,1830,1831,5,36,0,
		0,1831,1833,1,0,0,0,1832,1828,1,0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,
		0,0,1834,1835,5,26,0,0,1835,1836,5,35,0,0,1836,1837,3,204,102,0,1837,1838,
		5,7,0,0,1838,199,1,0,0,0,1839,1853,3,174,87,0,1840,1853,3,176,88,0,1841,
		1853,3,178,89,0,1842,1853,3,180,90,0,1843,1853,3,182,91,0,1844,1853,3,
		184,92,0,1845,1853,3,186,93,0,1846,1853,3,188,94,0,1847,1853,3,190,95,
		0,1848,1853,3,192,96,0,1849,1853,3,194,97,0,1850,1853,3,196,98,0,1851,
		1853,3,198,99,0,1852,1839,1,0,0,0,1852,1840,1,0,0,0,1852,1841,1,0,0,0,
		1852,1842,1,0,0,0,1852,1843,1,0,0,0,1852,1844,1,0,0,0,1852,1845,1,0,0,
		0,1852,1846,1,0,0,0,1852,1847,1,0,0,0,1852,1848,1,0,0,0,1852,1849,1,0,
		0,0,1852,1850,1,0,0,0,1852,1851,1,0,0,0,1853,1857,1,0,0,0,1854,1856,5,
		27,0,0,1855,1854,1,0,0,0,1856,1859,1,0,0,0,1857,1855,1,0,0,0,1857,1858,
		1,0,0,0,1858,201,1,0,0,0,1859,1857,1,0,0,0,1860,1872,3,200,100,0,1861,
		1864,3,172,86,0,1862,1864,3,156,78,0,1863,1861,1,0,0,0,1863,1862,1,0,0,
		0,1864,1868,1,0,0,0,1865,1867,5,27,0,0,1866,1865,1,0,0,0,1867,1870,1,0,
		0,0,1868,1866,1,0,0,0,1868,1869,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,
		0,0,0,1871,1860,1,0,0,0,1871,1863,1,0,0,0,1872,203,1,0,0,0,1873,1876,3,
		202,101,0,1874,1876,3,144,72,0,1875,1873,1,0,0,0,1875,1874,1,0,0,0,1876,
		205,1,0,0,0,1877,1878,5,324,0,0,1878,207,1,0,0,0,1879,1880,5,314,0,0,1880,
		1881,5,25,0,0,1881,1882,3,14,7,0,1882,1883,5,24,0,0,1883,1884,3,14,7,0,
		1884,1885,5,24,0,0,1885,1886,3,14,7,0,1886,1887,5,26,0,0,1887,1903,1,0,
		0,0,1888,1889,5,117,0,0,1889,1890,5,25,0,0,1890,1891,3,14,7,0,1891,1892,
		5,24,0,0,1892,1893,3,14,7,0,1893,1894,5,26,0,0,1894,1903,1,0,0,0,1895,
		1896,5,67,0,0,1896,1897,5,25,0,0,1897,1898,3,14,7,0,1898,1899,5,24,0,0,
		1899,1900,3,14,7,0,1900,1901,5,26,0,0,1901,1903,1,0,0,0,1902,1879,1,0,
		0,0,1902,1888,1,0,0,0,1902,1895,1,0,0,0,1903,209,1,0,0,0,1904,1905,5,95,
		0,0,1905,1906,3,144,72,0,1906,1907,5,49,0,0,1907,1910,3,202,101,0,1908,
		1909,5,1,0,0,1909,1911,3,142,71,0,1910,1908,1,0,0,0,1910,1911,1,0,0,0,
		1911,211,1,0,0,0,1912,1914,5,23,0,0,1913,1912,1,0,0,0,1913,1914,1,0,0,
		0,1914,1915,1,0,0,0,1915,1920,3,800,400,0,1916,1917,5,23,0,0,1917,1919,
		3,800,400,0,1918,1916,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,
		1921,1,0,0,0,1921,213,1,0,0,0,1922,1920,1,0,0,0,1923,1924,5,156,0,0,1924,
		1925,3,212,106,0,1925,1926,5,281,0,0,1926,1927,3,152,76,0,1927,215,1,0,
		0,0,1928,1929,5,128,0,0,1929,1930,3,148,74,0,1930,217,1,0,0,0,1931,1934,
		3,144,72,0,1932,1934,5,114,0,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,1934,
		1935,1,0,0,0,1935,1937,5,25,0,0,1936,1938,3,112,56,0,1937,1936,1,0,0,0,
		1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,5,26,0,0,1940,219,1,0,0,
		0,1941,1942,5,62,0,0,1942,1943,3,632,316,0,1943,1944,5,116,0,0,1944,1945,
		5,109,0,0,1945,221,1,0,0,0,1946,1949,5,109,0,0,1947,1950,3,218,109,0,1948,
		1950,3,220,110,0,1949,1947,1,0,0,0,1949,1948,1,0,0,0,1950,223,1,0,0,0,
		1951,1952,5,226,0,0,1952,1953,3,830,415,0,1953,1967,3,800,400,0,1954,1955,
		5,1,0,0,1955,1968,3,226,113,0,1956,1957,5,25,0,0,1957,1962,3,226,113,0,
		1958,1959,5,24,0,0,1959,1961,3,226,113,0,1960,1958,1,0,0,0,1961,1964,1,
		0,0,0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1965,1,0,0,0,1964,1962,
		1,0,0,0,1965,1966,5,26,0,0,1966,1968,1,0,0,0,1967,1954,1,0,0,0,1967,1956,
		1,0,0,0,1967,1968,1,0,0,0,1968,225,1,0,0,0,1969,1975,3,154,77,0,1970,1975,
		3,782,391,0,1971,1975,5,324,0,0,1972,1975,3,860,430,0,1973,1975,3,144,
		72,0,1974,1969,1,0,0,0,1974,1970,1,0,0,0,1974,1971,1,0,0,0,1974,1972,1,
		0,0,0,1974,1973,1,0,0,0,1975,227,1,0,0,0,1976,1978,3,14,7,0,1977,1979,
		7,9,0,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,229,1,0,0,0,1980,1985,
		3,228,114,0,1981,1982,5,24,0,0,1982,1984,3,228,114,0,1983,1981,1,0,0,0,
		1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,1986,1,0,0,0,1986,231,1,0,0,0,
		1987,1985,1,0,0,0,1988,1994,3,236,118,0,1989,1990,3,238,119,0,1990,1991,
		3,236,118,0,1991,1993,1,0,0,0,1992,1989,1,0,0,0,1993,1996,1,0,0,0,1994,
		1992,1,0,0,0,1994,1995,1,0,0,0,1995,233,1,0,0,0,1996,1994,1,0,0,0,1997,
		2003,3,240,120,0,1998,1999,3,238,119,0,1999,2000,3,236,118,0,2000,2002,
		1,0,0,0,2001,1998,1,0,0,0,2002,2005,1,0,0,0,2003,2001,1,0,0,0,2003,2004,
		1,0,0,0,2004,235,1,0,0,0,2005,2003,1,0,0,0,2006,2012,3,240,120,0,2007,
		2008,5,25,0,0,2008,2009,3,240,120,0,2009,2010,5,26,0,0,2010,2012,1,0,0,
		0,2011,2006,1,0,0,0,2011,2007,1,0,0,0,2012,237,1,0,0,0,2013,2015,5,303,
		0,0,2014,2016,5,42,0,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,2020,1,
		0,0,0,2017,2020,5,168,0,0,2018,2020,5,122,0,0,2019,2013,1,0,0,0,2019,2017,
		1,0,0,0,2019,2018,1,0,0,0,2020,239,1,0,0,0,2021,2028,3,242,121,0,2022,
		2023,5,181,0,0,2023,2026,3,14,7,0,2024,2025,7,10,0,0,2025,2027,3,14,7,
		0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,2022,1,0,
		0,0,2028,2029,1,0,0,0,2029,241,1,0,0,0,2030,2032,5,107,0,0,2031,2030,1,
		0,0,0,2031,2032,1,0,0,0,2032,2036,1,0,0,0,2033,2037,3,244,122,0,2034,2037,
		3,250,125,0,2035,2037,3,254,127,0,2036,2033,1,0,0,0,2036,2034,1,0,0,0,
		2036,2035,1,0,0,0,2037,2041,1,0,0,0,2038,2039,5,169,0,0,2039,2040,5,252,
		0,0,2040,2042,3,116,58,0,2041,2038,1,0,0,0,2041,2042,1,0,0,0,2042,243,
		1,0,0,0,2043,2045,5,231,0,0,2044,2046,5,277,0,0,2045,2044,1,0,0,0,2045,
		2046,1,0,0,0,2046,2047,1,0,0,0,2047,2052,3,346,173,0,2048,2049,5,24,0,
		0,2049,2051,3,346,173,0,2050,2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,
		1,0,0,0,2052,2053,1,0,0,0,2053,2077,1,0,0,0,2054,2052,1,0,0,0,2055,2056,
		5,311,0,0,2056,2059,3,136,68,0,2057,2058,5,49,0,0,2058,2060,3,800,400,
		0,2059,2057,1,0,0,0,2059,2060,1,0,0,0,2060,2063,1,0,0,0,2061,2062,5,320,
		0,0,2062,2064,3,248,124,0,2063,2061,1,0,0,0,2063,2064,1,0,0,0,2064,2067,
		1,0,0,0,2065,2066,5,318,0,0,2066,2068,3,14,7,0,2067,2065,1,0,0,0,2067,
		2068,1,0,0,0,2068,2071,1,0,0,0,2069,2070,5,150,0,0,2070,2072,3,14,7,0,
		2071,2069,1,0,0,0,2071,2072,1,0,0,0,2072,2075,1,0,0,0,2073,2074,5,51,0,
		0,2074,2076,3,314,157,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,2078,
		1,0,0,0,2077,2055,1,0,0,0,2077,2078,1,0,0,0,2078,245,1,0,0,0,2079,2080,
		3,800,400,0,2080,2081,5,1,0,0,2081,2082,3,14,7,0,2082,247,1,0,0,0,2083,
		2088,3,246,123,0,2084,2085,5,24,0,0,2085,2087,3,246,123,0,2086,2084,1,
		0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,0,2088,2089,1,0,0,0,2089,249,1,
		0,0,0,2090,2088,1,0,0,0,2091,2092,5,236,0,0,2092,2097,3,346,173,0,2093,
		2094,5,24,0,0,2094,2096,3,346,173,0,2095,2093,1,0,0,0,2096,2099,1,0,0,
		0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,2102,1,0,0,0,2099,2097,1,0,
		0,0,2100,2101,5,228,0,0,2101,2103,3,230,115,0,2102,2100,1,0,0,0,2102,2103,
		1,0,0,0,2103,2104,1,0,0,0,2104,2105,5,206,0,0,2105,2106,3,124,62,0,2106,
		2108,5,311,0,0,2107,2109,5,42,0,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,
		2109,2110,1,0,0,0,2110,2113,3,136,68,0,2111,2112,5,49,0,0,2112,2114,3,
		800,400,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,2117,1,0,0,0,2115,2116,
		5,318,0,0,2116,2118,3,14,7,0,2117,2115,1,0,0,0,2117,2118,1,0,0,0,2118,
		2121,1,0,0,0,2119,2120,5,150,0,0,2120,2122,3,14,7,0,2121,2119,1,0,0,0,
		2121,2122,1,0,0,0,2122,2125,1,0,0,0,2123,2124,5,51,0,0,2124,2126,3,314,
		157,0,2125,2123,1,0,0,0,2125,2126,1,0,0,0,2126,251,1,0,0,0,2127,2129,7,
		11,0,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,253,1,0,0,0,2130,2131,
		5,140,0,0,2131,2133,3,338,169,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,2133,
		2134,1,0,0,0,2134,2136,5,268,0,0,2135,2137,5,277,0,0,2136,2135,1,0,0,0,
		2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2139,3,252,126,0,2139,2144,3,
		336,168,0,2140,2141,5,24,0,0,2141,2143,3,336,168,0,2142,2140,1,0,0,0,2143,
		2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,
		2144,1,0,0,0,2147,2149,5,24,0,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,
		2152,1,0,0,0,2150,2151,5,321,0,0,2151,2153,3,126,63,0,2152,2150,1,0,0,
		0,2152,2153,1,0,0,0,2153,2156,1,0,0,0,2154,2155,5,140,0,0,2155,2157,3,
		338,169,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,2160,1,0,0,0,2158,2159,
		5,318,0,0,2159,2161,3,14,7,0,2160,2158,1,0,0,0,2160,2161,1,0,0,0,2161,
		2163,1,0,0,0,2162,2164,3,318,159,0,2163,2162,1,0,0,0,2163,2164,1,0,0,0,
		2164,2167,1,0,0,0,2165,2166,5,150,0,0,2166,2168,3,14,7,0,2167,2165,1,0,
		0,0,2167,2168,1,0,0,0,2168,2170,1,0,0,0,2169,2171,3,730,365,0,2170,2169,
		1,0,0,0,2170,2171,1,0,0,0,2171,2173,1,0,0,0,2172,2174,3,316,158,0,2173,
		2172,1,0,0,0,2173,2174,1,0,0,0,2174,255,1,0,0,0,2175,2176,5,188,0,0,2176,
		2178,5,25,0,0,2177,2179,3,744,372,0,2178,2177,1,0,0,0,2178,2179,1,0,0,
		0,2179,2181,1,0,0,0,2180,2182,3,314,157,0,2181,2180,1,0,0,0,2181,2182,
		1,0,0,0,2182,2184,1,0,0,0,2183,2185,3,262,131,0,2184,2183,1,0,0,0,2184,
		2185,1,0,0,0,2185,2187,1,0,0,0,2186,2188,3,258,129,0,2187,2186,1,0,0,0,
		2187,2188,1,0,0,0,2188,2189,1,0,0,0,2189,2190,3,268,134,0,2190,2191,5,
		26,0,0,2191,257,1,0,0,0,2192,2193,5,207,0,0,2193,2194,5,261,0,0,2194,2195,
		5,222,0,0,2195,2204,5,186,0,0,2196,2197,5,42,0,0,2197,2198,5,262,0,0,2198,
		2199,5,222,0,0,2199,2201,5,186,0,0,2200,2202,3,260,130,0,2201,2200,1,0,
		0,0,2201,2202,1,0,0,0,2202,2204,1,0,0,0,2203,2192,1,0,0,0,2203,2196,1,
		0,0,0,2204,259,1,0,0,0,2205,2206,5,272,0,0,2206,2207,5,113,0,0,2207,2215,
		5,187,0,0,2208,2209,5,205,0,0,2209,2210,5,113,0,0,2210,2215,5,187,0,0,
		2211,2212,5,320,0,0,2212,2213,5,306,0,0,2213,2215,5,262,0,0,2214,2205,
		1,0,0,0,2214,2208,1,0,0,0,2214,2211,1,0,0,0,2215,261,1,0,0,0,2216,2217,
		5,189,0,0,2217,2218,3,264,132,0,2218,263,1,0,0,0,2219,2224,3,266,133,0,
		2220,2221,5,24,0,0,2221,2223,3,266,133,0,2222,2220,1,0,0,0,2223,2226,1,
		0,0,0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,265,1,0,0,0,2226,2224,1,
		0,0,0,2227,2228,3,14,7,0,2228,2229,5,49,0,0,2229,2230,3,800,400,0,2230,
		267,1,0,0,0,2231,2232,5,41,0,0,2232,2233,5,186,0,0,2233,2235,3,270,135,
		0,2234,2231,1,0,0,0,2234,2235,1,0,0,0,2235,2237,1,0,0,0,2236,2238,3,274,
		137,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2240,
		5,221,0,0,2240,2241,5,25,0,0,2241,2242,3,276,138,0,2242,2244,5,26,0,0,
		2243,2245,3,290,145,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,
		0,0,0,2246,2247,5,99,0,0,2247,2248,3,302,151,0,2248,269,1,0,0,0,2249,2250,
		5,273,0,0,2250,2251,5,294,0,0,2251,2252,5,195,0,0,2252,2269,5,261,0,0,
		2253,2254,5,273,0,0,2254,2255,5,220,0,0,2255,2256,5,177,0,0,2256,2269,
		5,261,0,0,2257,2258,5,273,0,0,2258,2259,5,294,0,0,2259,2260,5,134,0,0,
		2260,2269,3,272,136,0,2261,2262,5,273,0,0,2262,2263,5,294,0,0,2263,2264,
		5,177,0,0,2264,2269,3,272,136,0,2265,2266,5,273,0,0,2266,2267,5,294,0,
		0,2267,2269,3,272,136,0,2268,2249,1,0,0,0,2268,2253,1,0,0,0,2268,2257,
		1,0,0,0,2268,2261,1,0,0,0,2268,2265,1,0,0,0,2269,271,1,0,0,0,2270,2271,
		3,312,156,0,2271,273,1,0,0,0,2272,2273,7,12,0,0,2273,275,1,0,0,0,2274,
		2279,3,278,139,0,2275,2276,5,12,0,0,2276,2278,3,278,139,0,2277,2275,1,
		0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,0,2279,2280,1,0,0,0,2280,277,1,
		0,0,0,2281,2279,1,0,0,0,2282,2284,3,280,140,0,2283,2282,1,0,0,0,2284,2285,
		1,0,0,0,2285,2283,1,0,0,0,2285,2286,1,0,0,0,2286,279,1,0,0,0,2287,2289,
		3,284,142,0,2288,2290,3,282,141,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,
		2290,281,1,0,0,0,2291,2293,5,19,0,0,2292,2294,5,27,0,0,2293,2292,1,0,0,
		0,2293,2294,1,0,0,0,2294,2320,1,0,0,0,2295,2297,5,16,0,0,2296,2298,5,27,
		0,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,2320,1,0,0,0,2299,2301,5,
		27,0,0,2300,2302,5,27,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2320,
		1,0,0,0,2303,2305,5,31,0,0,2304,2306,3,864,432,0,2305,2304,1,0,0,0,2305,
		2306,1,0,0,0,2306,2307,1,0,0,0,2307,2309,5,24,0,0,2308,2310,3,864,432,
		0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2313,5,32,
		0,0,2312,2314,5,27,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2320,1,
		0,0,0,2315,2316,5,31,0,0,2316,2317,3,864,432,0,2317,2318,5,32,0,0,2318,
		2320,1,0,0,0,2319,2291,1,0,0,0,2319,2295,1,0,0,0,2319,2299,1,0,0,0,2319,
		2303,1,0,0,0,2319,2315,1,0,0,0,2320,283,1,0,0,0,2321,2337,3,286,143,0,
		2322,2337,5,30,0,0,2323,2337,5,33,0,0,2324,2326,5,25,0,0,2325,2327,3,276,
		138,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,0,0,2328,2337,
		5,26,0,0,2329,2330,5,31,0,0,2330,2331,5,17,0,0,2331,2332,3,276,138,0,2332,
		2333,5,17,0,0,2333,2334,5,32,0,0,2334,2337,1,0,0,0,2335,2337,3,288,144,
		0,2336,2321,1,0,0,0,2336,2322,1,0,0,0,2336,2323,1,0,0,0,2336,2324,1,0,
		0,0,2336,2329,1,0,0,0,2336,2335,1,0,0,0,2337,285,1,0,0,0,2338,2339,3,312,
		156,0,2339,287,1,0,0,0,2340,2341,5,223,0,0,2341,2342,5,25,0,0,2342,2347,
		3,276,138,0,2343,2344,5,24,0,0,2344,2346,3,276,138,0,2345,2343,1,0,0,0,
		2346,2349,1,0,0,0,2347,2345,1,0,0,0,2347,2348,1,0,0,0,2348,2350,1,0,0,
		0,2349,2347,1,0,0,0,2350,2351,5,26,0,0,2351,289,1,0,0,0,2352,2353,5,280,
		0,0,2353,2354,3,292,146,0,2354,291,1,0,0,0,2355,2360,3,294,147,0,2356,
		2357,5,24,0,0,2357,2359,3,294,147,0,2358,2356,1,0,0,0,2359,2362,1,0,0,
		0,2360,2358,1,0,0,0,2360,2361,1,0,0,0,2361,293,1,0,0,0,2362,2360,1,0,0,
		0,2363,2364,3,296,148,0,2364,2365,5,1,0,0,2365,2366,5,25,0,0,2366,2367,
		3,298,149,0,2367,2368,5,26,0,0,2368,295,1,0,0,0,2369,2370,3,312,156,0,
		2370,297,1,0,0,0,2371,2376,3,300,150,0,2372,2373,5,24,0,0,2373,2375,3,
		300,150,0,2374,2372,1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,0,0,0,2376,2377,
		1,0,0,0,2377,299,1,0,0,0,2378,2376,1,0,0,0,2379,2380,3,312,156,0,2380,
		301,1,0,0,0,2381,2386,3,304,152,0,2382,2383,5,24,0,0,2383,2385,3,304,152,
		0,2384,2382,1,0,0,0,2385,2388,1,0,0,0,2386,2384,1,0,0,0,2386,2387,1,0,
		0,0,2387,303,1,0,0,0,2388,2386,1,0,0,0,2389,2390,3,306,153,0,2390,2391,
		5,49,0,0,2391,2392,3,308,154,0,2392,305,1,0,0,0,2393,2394,3,312,156,0,
		2394,307,1,0,0,0,2395,2396,3,310,155,0,2396,309,1,0,0,0,2397,2398,3,14,
		7,0,2398,311,1,0,0,0,2399,2400,3,780,390,0,2400,313,1,0,0,0,2401,2402,
		5,212,0,0,2402,2403,5,66,0,0,2403,2404,3,230,115,0,2404,315,1,0,0,0,2405,
		2407,5,51,0,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,2408,1,0,0,0,2408,
		2409,3,314,157,0,2409,317,1,0,0,0,2410,2412,5,146,0,0,2411,2413,5,78,0,
		0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,2415,5,66,
		0,0,2415,2416,3,252,126,0,2416,2419,3,320,160,0,2417,2418,5,320,0,0,2418,
		2420,3,800,400,0,2419,2417,1,0,0,0,2419,2420,1,0,0,0,2420,319,1,0,0,0,
		2421,2426,3,322,161,0,2422,2423,5,24,0,0,2423,2425,3,322,161,0,2424,2422,
		1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,0,0,0,2426,2427,1,0,0,0,2427,321,
		1,0,0,0,2428,2426,1,0,0,0,2429,2435,3,324,162,0,2430,2435,3,328,164,0,
		2431,2435,3,330,165,0,2432,2435,3,332,166,0,2433,2435,3,334,167,0,2434,
		2429,1,0,0,0,2434,2430,1,0,0,0,2434,2431,1,0,0,0,2434,2432,1,0,0,0,2434,
		2433,1,0,0,0,2435,323,1,0,0,0,2436,2437,3,128,64,0,2437,325,1,0,0,0,2438,
		2443,3,324,162,0,2439,2440,5,24,0,0,2440,2442,3,324,162,0,2441,2439,1,
		0,0,0,2442,2445,1,0,0,0,2443,2441,1,0,0,0,2443,2444,1,0,0,0,2444,327,1,
		0,0,0,2445,2443,1,0,0,0,2446,2447,5,260,0,0,2447,2448,5,25,0,0,2448,2449,
		3,326,163,0,2449,2450,5,26,0,0,2450,329,1,0,0,0,2451,2452,5,87,0,0,2452,
		2453,5,25,0,0,2453,2454,3,326,163,0,2454,2455,5,26,0,0,2455,331,1,0,0,
		0,2456,2457,5,147,0,0,2457,2458,5,271,0,0,2458,2459,5,25,0,0,2459,2460,
		3,320,160,0,2460,2461,5,26,0,0,2461,333,1,0,0,0,2462,2463,5,151,0,0,2463,
		2464,5,25,0,0,2464,2465,3,14,7,0,2465,2466,5,24,0,0,2466,2467,3,14,7,0,
		2467,2468,5,24,0,0,2468,2469,3,14,7,0,2469,2470,5,24,0,0,2470,2471,3,14,
		7,0,2471,2472,5,26,0,0,2472,335,1,0,0,0,2473,2474,3,824,412,0,2474,2475,
		5,19,0,0,2475,2483,1,0,0,0,2476,2480,3,14,7,0,2477,2478,5,49,0,0,2478,
		2481,3,802,401,0,2479,2481,3,820,410,0,2480,2477,1,0,0,0,2480,2479,1,0,
		0,0,2480,2481,1,0,0,0,2481,2483,1,0,0,0,2482,2473,1,0,0,0,2482,2476,1,
		0,0,0,2483,337,1,0,0,0,2484,2486,5,47,0,0,2485,2484,1,0,0,0,2485,2486,
		1,0,0,0,2486,2487,1,0,0,0,2487,2498,3,344,172,0,2488,2490,3,358,179,0,
		2489,2491,5,47,0,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,2492,1,0,0,
		0,2492,2494,3,344,172,0,2493,2495,3,360,180,0,2494,2493,1,0,0,0,2494,2495,
		1,0,0,0,2495,2497,1,0,0,0,2496,2488,1,0,0,0,2497,2500,1,0,0,0,2498,2496,
		1,0,0,0,2498,2499,1,0,0,0,2499,339,1,0,0,0,2500,2498,1,0,0,0,2501,2504,
		3,120,60,0,2502,2503,5,49,0,0,2503,2505,3,800,400,0,2504,2502,1,0,0,0,
		2504,2505,1,0,0,0,2505,341,1,0,0,0,2506,2515,3,340,170,0,2507,2508,5,25,
		0,0,2508,2510,3,130,65,0,2509,2511,5,24,0,0,2510,2509,1,0,0,0,2510,2511,
		1,0,0,0,2511,2512,1,0,0,0,2512,2513,5,26,0,0,2513,2515,1,0,0,0,2514,2506,
		1,0,0,0,2514,2507,1,0,0,0,2515,343,1,0,0,0,2516,2526,3,346,173,0,2517,
		2524,5,135,0,0,2518,2520,7,13,0,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,
		2520,2521,1,0,0,0,2521,2522,5,66,0,0,2522,2525,3,342,171,0,2523,2525,5,
		76,0,0,2524,2519,1,0,0,0,2524,2523,1,0,0,0,2525,2527,1,0,0,0,2526,2517,
		1,0,0,0,2526,2527,1,0,0,0,2527,345,1,0,0,0,2528,2530,3,348,174,0,2529,
		2531,3,256,128,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,2540,1,0,0,0,
		2532,2533,5,49,0,0,2533,2536,3,800,400,0,2534,2536,3,820,410,0,2535,2532,
		1,0,0,0,2535,2534,1,0,0,0,2536,2538,1,0,0,0,2537,2539,3,114,57,0,2538,
		2537,1,0,0,0,2538,2539,1,0,0,0,2539,2541,1,0,0,0,2540,2535,1,0,0,0,2540,
		2541,1,0,0,0,2541,2544,1,0,0,0,2542,2545,3,350,175,0,2543,2545,3,352,176,
		0,2544,2542,1,0,0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,347,1,0,0,
		0,2546,2556,3,638,319,0,2547,2548,5,25,0,0,2548,2549,3,232,116,0,2549,
		2550,5,26,0,0,2550,2556,1,0,0,0,2551,2552,5,25,0,0,2552,2553,3,368,184,
		0,2553,2554,5,26,0,0,2554,2556,1,0,0,0,2555,2546,1,0,0,0,2555,2547,1,0,
		0,0,2555,2551,1,0,0,0,2556,349,1,0,0,0,2557,2558,5,263,0,0,2558,2559,3,
		14,7,0,2559,351,1,0,0,0,2560,2561,5,287,0,0,2561,2562,3,354,177,0,2562,
		2563,5,25,0,0,2563,2564,3,14,7,0,2564,2566,5,26,0,0,2565,2567,3,356,178,
		0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,353,1,0,0,0,2568,2569,7,14,
		0,0,2569,355,1,0,0,0,2570,2571,5,243,0,0,2571,2572,5,25,0,0,2572,2573,
		3,14,7,0,2573,2574,5,26,0,0,2574,357,1,0,0,0,2575,2600,5,24,0,0,2576,2578,
		5,194,0,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,2596,1,0,0,0,2579,2581,
		5,178,0,0,2580,2582,7,15,0,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,
		2590,1,0,0,0,2583,2585,5,257,0,0,2584,2586,7,15,0,0,2585,2584,1,0,0,0,
		2585,2586,1,0,0,0,2586,2590,1,0,0,0,2587,2590,5,124,0,0,2588,2590,5,141,
		0,0,2589,2579,1,0,0,0,2589,2583,1,0,0,0,2589,2587,1,0,0,0,2589,2588,1,
		0,0,0,2589,2590,1,0,0,0,2590,2592,1,0,0,0,2591,2593,5,214,0,0,2592,2591,
		1,0,0,0,2592,2593,1,0,0,0,2593,2597,1,0,0,0,2594,2597,5,165,0,0,2595,2597,
		5,86,0,0,2596,2589,1,0,0,0,2596,2594,1,0,0,0,2596,2595,1,0,0,0,2597,2598,
		1,0,0,0,2598,2600,5,172,0,0,2599,2575,1,0,0,0,2599,2577,1,0,0,0,2600,359,
		1,0,0,0,2601,2602,5,206,0,0,2602,2606,3,14,7,0,2603,2604,5,311,0,0,2604,
		2606,3,118,59,0,2605,2601,1,0,0,0,2605,2603,1,0,0,0,2606,361,1,0,0,0,2607,
		2617,5,254,0,0,2608,2618,5,19,0,0,2609,2614,3,800,400,0,2610,2611,5,24,
		0,0,2611,2613,3,800,400,0,2612,2610,1,0,0,0,2613,2616,1,0,0,0,2614,2612,
		1,0,0,0,2614,2615,1,0,0,0,2615,2618,1,0,0,0,2616,2614,1,0,0,0,2617,2608,
		1,0,0,0,2617,2609,1,0,0,0,2618,363,1,0,0,0,2619,2632,5,166,0,0,2620,2621,
		5,166,0,0,2621,2622,5,211,0,0,2622,2632,5,38,0,0,2623,2624,5,166,0,0,2624,
		2625,5,211,0,0,2625,2632,5,255,0,0,2626,2627,5,166,0,0,2627,2628,5,211,
		0,0,2628,2632,5,153,0,0,2629,2632,5,308,0,0,2630,2632,5,244,0,0,2631,2619,
		1,0,0,0,2631,2620,1,0,0,0,2631,2623,1,0,0,0,2631,2626,1,0,0,0,2631,2629,
		1,0,0,0,2631,2630,1,0,0,0,2632,2633,1,0,0,0,2633,2634,5,169,0,0,2634,2635,
		3,654,327,0,2635,2637,3,366,183,0,2636,2638,3,362,181,0,2637,2636,1,0,
		0,0,2637,2638,1,0,0,0,2638,365,1,0,0,0,2639,2641,3,114,57,0,2640,2639,
		1,0,0,0,2640,2641,1,0,0,0,2641,2642,1,0,0,0,2642,2646,3,370,185,0,2643,
		2644,5,96,0,0,2644,2646,5,313,0,0,2645,2640,1,0,0,0,2645,2643,1,0,0,0,
		2646,367,1,0,0,0,2647,2648,5,313,0,0,2648,2649,3,372,186,0,2649,369,1,
		0,0,0,2650,2653,3,368,184,0,2651,2653,3,232,116,0,2652,2650,1,0,0,0,2652,
		2651,1,0,0,0,2653,371,1,0,0,0,2654,2659,3,374,187,0,2655,2656,5,24,0,0,
		2656,2658,3,374,187,0,2657,2655,1,0,0,0,2658,2661,1,0,0,0,2659,2657,1,
		0,0,0,2659,2660,1,0,0,0,2660,373,1,0,0,0,2661,2659,1,0,0,0,2662,2663,5,
		25,0,0,2663,2664,3,112,56,0,2664,2665,5,26,0,0,2665,375,1,0,0,0,2666,2669,
		3,112,56,0,2667,2669,3,232,116,0,2668,2666,1,0,0,0,2668,2667,1,0,0,0,2669,
		377,1,0,0,0,2670,2673,5,85,0,0,2671,2672,5,211,0,0,2672,2674,5,244,0,0,
		2673,2671,1,0,0,0,2673,2674,1,0,0,0,2674,2675,1,0,0,0,2675,2676,5,129,
		0,0,2676,2677,5,92,0,0,2677,2681,5,275,0,0,2678,2679,5,152,0,0,2679,2680,
		5,198,0,0,2680,2682,5,126,0,0,2681,2678,1,0,0,0,2681,2682,1,0,0,0,2682,
		2683,1,0,0,0,2683,2684,3,648,324,0,2684,2685,3,454,227,0,2685,379,1,0,
		0,0,2686,2687,5,43,0,0,2687,2688,5,129,0,0,2688,2689,5,92,0,0,2689,2690,
		5,275,0,0,2690,2691,3,648,324,0,2691,2696,3,382,191,0,2692,2693,5,24,0,
		0,2693,2695,3,382,191,0,2694,2692,1,0,0,0,2695,2698,1,0,0,0,2696,2694,
		1,0,0,0,2696,2697,1,0,0,0,2697,381,1,0,0,0,2698,2696,1,0,0,0,2699,2703,
		3,486,243,0,2700,2703,3,488,244,0,2701,2703,3,490,245,0,2702,2699,1,0,
		0,0,2702,2700,1,0,0,0,2702,2701,1,0,0,0,2703,383,1,0,0,0,2704,2705,5,110,
		0,0,2705,2706,5,129,0,0,2706,2707,5,92,0,0,2707,2710,5,275,0,0,2708,2709,
		5,152,0,0,2709,2711,5,126,0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,
		2712,1,0,0,0,2712,2713,3,648,324,0,2713,385,1,0,0,0,2714,2715,5,85,0,0,
		2715,2719,5,315,0,0,2716,2717,5,152,0,0,2717,2718,5,198,0,0,2718,2720,
		5,126,0,0,2719,2716,1,0,0,0,2719,2720,1,0,0,0,2720,2721,1,0,0,0,2721,2723,
		3,648,324,0,2722,2724,3,394,197,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,
		2724,2725,1,0,0,0,2725,2726,5,49,0,0,2726,2727,3,232,116,0,2727,387,1,
		0,0,0,2728,2729,5,110,0,0,2729,2732,5,315,0,0,2730,2731,5,152,0,0,2731,
		2733,5,126,0,0,2732,2730,1,0,0,0,2732,2733,1,0,0,0,2733,2734,1,0,0,0,2734,
		2735,3,648,324,0,2735,389,1,0,0,0,2736,2737,5,308,0,0,2737,2738,5,202,
		0,0,2738,2739,3,648,324,0,2739,2740,5,25,0,0,2740,2741,5,300,0,0,2741,
		2742,3,414,207,0,2742,2744,5,26,0,0,2743,2745,3,394,197,0,2744,2743,1,
		0,0,0,2744,2745,1,0,0,0,2745,391,1,0,0,0,2746,2747,5,85,0,0,2747,2751,
		5,202,0,0,2748,2749,5,152,0,0,2749,2750,5,198,0,0,2750,2752,5,126,0,0,
		2751,2748,1,0,0,0,2751,2752,1,0,0,0,2752,2753,1,0,0,0,2753,2754,3,648,
		324,0,2754,2755,5,25,0,0,2755,2756,5,300,0,0,2756,2757,3,414,207,0,2757,
		2759,5,26,0,0,2758,2760,3,394,197,0,2759,2758,1,0,0,0,2759,2760,1,0,0,
		0,2760,393,1,0,0,0,2761,2762,5,320,0,0,2762,2763,3,412,206,0,2763,395,
		1,0,0,0,2764,2765,5,43,0,0,2765,2766,5,202,0,0,2766,2767,3,648,324,0,2767,
		2768,5,25,0,0,2768,2769,5,300,0,0,2769,2770,3,414,207,0,2770,2771,5,26,
		0,0,2771,2772,3,398,199,0,2772,397,1,0,0,0,2773,2774,5,270,0,0,2774,2775,
		3,412,206,0,2775,399,1,0,0,0,2776,2777,5,110,0,0,2777,2780,5,202,0,0,2778,
		2779,5,152,0,0,2779,2781,5,126,0,0,2780,2778,1,0,0,0,2780,2781,1,0,0,0,
		2781,2782,1,0,0,0,2782,2783,3,648,324,0,2783,2784,5,25,0,0,2784,2785,5,
		300,0,0,2785,2786,3,414,207,0,2786,2788,5,26,0,0,2787,2789,3,402,201,0,
		2788,2787,1,0,0,0,2788,2789,1,0,0,0,2789,401,1,0,0,0,2790,2791,5,320,0,
		0,2791,2792,3,412,206,0,2792,403,1,0,0,0,2793,2798,3,828,414,0,2794,2798,
		3,144,72,0,2795,2798,5,324,0,0,2796,2798,3,860,430,0,2797,2793,1,0,0,0,
		2797,2794,1,0,0,0,2797,2795,1,0,0,0,2797,2796,1,0,0,0,2798,405,1,0,0,0,
		2799,2800,3,802,401,0,2800,2801,5,1,0,0,2801,2802,3,404,202,0,2802,407,
		1,0,0,0,2803,2804,3,802,401,0,2804,409,1,0,0,0,2805,2808,3,406,203,0,2806,
		2808,3,408,204,0,2807,2805,1,0,0,0,2807,2806,1,0,0,0,2808,411,1,0,0,0,
		2809,2822,3,410,205,0,2810,2811,5,25,0,0,2811,2816,3,410,205,0,2812,2813,
		5,24,0,0,2813,2815,3,410,205,0,2814,2812,1,0,0,0,2815,2818,1,0,0,0,2816,
		2814,1,0,0,0,2816,2817,1,0,0,0,2817,2819,1,0,0,0,2818,2816,1,0,0,0,2819,
		2820,5,26,0,0,2820,2822,1,0,0,0,2821,2809,1,0,0,0,2821,2810,1,0,0,0,2822,
		413,1,0,0,0,2823,2824,3,802,401,0,2824,415,1,0,0,0,2825,2828,5,85,0,0,
		2826,2827,5,211,0,0,2827,2829,5,244,0,0,2828,2826,1,0,0,0,2828,2829,1,
		0,0,0,2829,2838,1,0,0,0,2830,2839,5,285,0,0,2831,2839,5,288,0,0,2832,2833,
		5,129,0,0,2833,2839,5,285,0,0,2834,2835,5,290,0,0,2835,2839,5,285,0,0,
		2836,2837,5,291,0,0,2837,2839,5,285,0,0,2838,2830,1,0,0,0,2838,2831,1,
		0,0,0,2838,2832,1,0,0,0,2838,2834,1,0,0,0,2838,2836,1,0,0,0,2839,2843,
		1,0,0,0,2840,2841,5,152,0,0,2841,2842,5,198,0,0,2842,2844,5,126,0,0,2843,
		2840,1,0,0,0,2843,2844,1,0,0,0,2844,2845,1,0,0,0,2845,2846,3,652,326,0,
		2846,2847,5,25,0,0,2847,2852,3,418,209,0,2848,2849,5,24,0,0,2849,2851,
		3,418,209,0,2850,2848,1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,
		2853,1,0,0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,2855,2857,5,24,0,0,2856,
		2855,1,0,0,0,2856,2857,1,0,0,0,2857,2858,1,0,0,0,2858,2860,5,26,0,0,2859,
		2861,3,450,225,0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,2863,1,0,0,0,
		2862,2864,3,452,226,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2866,1,
		0,0,0,2865,2867,3,454,227,0,2866,2865,1,0,0,0,2866,2867,1,0,0,0,2867,2869,
		1,0,0,0,2868,2870,3,456,228,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,
		2872,1,0,0,0,2871,2873,3,460,230,0,2872,2871,1,0,0,0,2872,2873,1,0,0,0,
		2873,417,1,0,0,0,2874,2881,3,508,254,0,2875,2881,3,516,258,0,2876,2881,
		3,518,259,0,2877,2881,3,552,276,0,2878,2881,3,534,267,0,2879,2881,3,804,
		402,0,2880,2874,1,0,0,0,2880,2875,1,0,0,0,2880,2876,1,0,0,0,2880,2877,
		1,0,0,0,2880,2878,1,0,0,0,2880,2879,1,0,0,0,2881,419,1,0,0,0,2882,2883,
		5,85,0,0,2883,2885,3,440,220,0,2884,2886,3,426,213,0,2885,2884,1,0,0,0,
		2885,2886,1,0,0,0,2886,2887,1,0,0,0,2887,2888,5,320,0,0,2888,2889,5,25,
		0,0,2889,2890,3,442,221,0,2890,2891,5,26,0,0,2891,421,1,0,0,0,2892,2893,
		5,43,0,0,2893,2896,3,440,220,0,2894,2897,3,432,216,0,2895,2897,3,436,218,
		0,2896,2894,1,0,0,0,2896,2895,1,0,0,0,2897,423,1,0,0,0,2898,2899,5,110,
		0,0,2899,2900,3,440,220,0,2900,425,1,0,0,0,2901,2904,5,93,0,0,2902,2904,
		3,428,214,0,2903,2901,1,0,0,0,2903,2902,1,0,0,0,2904,427,1,0,0,0,2905,
		2906,5,25,0,0,2906,2907,3,430,215,0,2907,2908,5,26,0,0,2908,429,1,0,0,
		0,2909,2910,5,285,0,0,2910,2916,3,812,406,0,2911,2912,5,24,0,0,2912,2913,
		5,285,0,0,2913,2915,3,812,406,0,2914,2911,1,0,0,0,2915,2918,1,0,0,0,2916,
		2914,1,0,0,0,2916,2917,1,0,0,0,2917,431,1,0,0,0,2918,2916,1,0,0,0,2919,
		2924,3,434,217,0,2920,2921,5,24,0,0,2921,2923,3,434,217,0,2922,2920,1,
		0,0,0,2923,2926,1,0,0,0,2924,2922,1,0,0,0,2924,2925,1,0,0,0,2925,433,1,
		0,0,0,2926,2924,1,0,0,0,2927,2930,3,488,244,0,2928,2930,3,490,245,0,2929,
		2927,1,0,0,0,2929,2928,1,0,0,0,2930,435,1,0,0,0,2931,2936,3,438,219,0,
		2932,2933,5,24,0,0,2933,2935,3,438,219,0,2934,2932,1,0,0,0,2935,2938,1,
		0,0,0,2936,2934,1,0,0,0,2936,2937,1,0,0,0,2937,437,1,0,0,0,2938,2936,1,
		0,0,0,2939,2940,5,40,0,0,2940,2950,5,93,0,0,2941,2942,5,110,0,0,2942,2950,
		5,93,0,0,2943,2944,5,40,0,0,2944,2945,5,285,0,0,2945,2950,3,812,406,0,
		2946,2947,5,110,0,0,2947,2948,5,285,0,0,2948,2950,3,812,406,0,2949,2939,
		1,0,0,0,2949,2941,1,0,0,0,2949,2943,1,0,0,0,2949,2946,1,0,0,0,2950,439,
		1,0,0,0,2951,2952,5,59,0,0,2952,2953,5,60,0,0,2953,2954,3,648,324,0,2954,
		441,1,0,0,0,2955,2960,3,444,222,0,2956,2957,5,24,0,0,2957,2959,3,444,222,
		0,2958,2956,1,0,0,0,2959,2962,1,0,0,0,2960,2958,1,0,0,0,2960,2961,1,0,
		0,0,2961,443,1,0,0,0,2962,2960,1,0,0,0,2963,2964,3,800,400,0,2964,2965,
		5,1,0,0,2965,2966,3,546,273,0,2966,445,1,0,0,0,2967,2968,5,59,0,0,2968,
		2970,3,648,324,0,2969,2971,5,159,0,0,2970,2969,1,0,0,0,2970,2971,1,0,0,
		0,2971,447,1,0,0,0,2972,2973,5,250,0,0,2973,2976,3,648,324,0,2974,2975,
		5,54,0,0,2975,2977,5,324,0,0,2976,2974,1,0,0,0,2976,2977,1,0,0,0,2977,
		449,1,0,0,0,2978,2979,5,162,0,0,2979,2980,5,25,0,0,2980,2985,3,650,325,
		0,2981,2982,5,24,0,0,2982,2984,3,650,325,0,2983,2981,1,0,0,0,2984,2987,
		1,0,0,0,2985,2983,1,0,0,0,2985,2986,1,0,0,0,2986,2988,1,0,0,0,2987,2985,
		1,0,0,0,2988,2989,5,26,0,0,2989,451,1,0,0,0,2990,2991,5,217,0,0,2991,2992,
		5,66,0,0,2992,2993,5,149,0,0,2993,2994,3,114,57,0,2994,453,1,0,0,0,2995,
		2996,5,320,0,0,2996,2997,5,25,0,0,2997,3002,3,458,229,0,2998,2999,5,24,
		0,0,2999,3001,3,458,229,0,3000,2998,1,0,0,0,3001,3004,1,0,0,0,3002,3000,
		1,0,0,0,3002,3003,1,0,0,0,3003,3005,1,0,0,0,3004,3002,1,0,0,0,3005,3006,
		5,26,0,0,3006,455,1,0,0,0,3007,3008,5,288,0,0,3008,3009,3,650,325,0,3009,
		457,1,0,0,0,3010,3011,3,800,400,0,3011,3012,5,1,0,0,3012,3013,3,546,273,
		0,3013,459,1,0,0,0,3014,3015,5,49,0,0,3015,3016,3,370,185,0,3016,461,1,
		0,0,0,3017,3018,5,43,0,0,3018,3019,5,285,0,0,3019,3020,3,652,326,0,3020,
		3025,3,464,232,0,3021,3022,5,24,0,0,3022,3024,3,464,232,0,3023,3021,1,
		0,0,0,3024,3027,1,0,0,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,463,1,
		0,0,0,3027,3025,1,0,0,0,3028,3046,3,474,237,0,3029,3046,3,476,238,0,3030,
		3046,3,478,239,0,3031,3046,3,482,241,0,3032,3046,3,484,242,0,3033,3046,
		3,486,243,0,3034,3046,3,488,244,0,3035,3046,3,490,245,0,3036,3046,3,492,
		246,0,3037,3046,3,494,247,0,3038,3046,3,496,248,0,3039,3046,3,500,250,
		0,3040,3046,3,502,251,0,3041,3046,3,504,252,0,3042,3046,3,498,249,0,3043,
		3046,3,506,253,0,3044,3046,3,480,240,0,3045,3028,1,0,0,0,3045,3029,1,0,
		0,0,3045,3030,1,0,0,0,3045,3031,1,0,0,0,3045,3032,1,0,0,0,3045,3033,1,
		0,0,0,3045,3034,1,0,0,0,3045,3035,1,0,0,0,3045,3036,1,0,0,0,3045,3037,
		1,0,0,0,3045,3038,1,0,0,0,3045,3039,1,0,0,0,3045,3040,1,0,0,0,3045,3041,
		1,0,0,0,3045,3042,1,0,0,0,3045,3043,1,0,0,0,3045,3044,1,0,0,0,3046,465,
		1,0,0,0,3047,3048,5,43,0,0,3048,3049,5,129,0,0,3049,3050,5,285,0,0,3050,
		3051,3,652,326,0,3051,3056,3,468,234,0,3052,3053,5,24,0,0,3053,3055,3,
		468,234,0,3054,3052,1,0,0,0,3055,3058,1,0,0,0,3056,3054,1,0,0,0,3056,3057,
		1,0,0,0,3057,467,1,0,0,0,3058,3056,1,0,0,0,3059,3065,3,474,237,0,3060,
		3065,3,476,238,0,3061,3065,3,486,243,0,3062,3065,3,488,244,0,3063,3065,
		3,490,245,0,3064,3059,1,0,0,0,3064,3060,1,0,0,0,3064,3061,1,0,0,0,3064,
		3062,1,0,0,0,3064,3063,1,0,0,0,3065,469,1,0,0,0,3066,3067,5,43,0,0,3067,
		3068,5,288,0,0,3068,3069,3,648,324,0,3069,3074,3,472,236,0,3070,3071,5,
		24,0,0,3071,3073,3,472,236,0,3072,3070,1,0,0,0,3073,3076,1,0,0,0,3074,
		3072,1,0,0,0,3074,3075,1,0,0,0,3075,471,1,0,0,0,3076,3074,1,0,0,0,3077,
		3080,3,474,237,0,3078,3080,3,476,238,0,3079,3077,1,0,0,0,3079,3078,1,0,
		0,0,3080,473,1,0,0,0,3081,3083,5,40,0,0,3082,3084,5,75,0,0,3083,3082,1,
		0,0,0,3083,3084,1,0,0,0,3084,3085,1,0,0,0,3085,3086,3,508,254,0,3086,475,
		1,0,0,0,3087,3089,5,110,0,0,3088,3090,5,75,0,0,3089,3088,1,0,0,0,3089,
		3090,1,0,0,0,3090,3091,1,0,0,0,3091,3092,3,800,400,0,3092,477,1,0,0,0,
		3093,3094,5,43,0,0,3094,3095,5,75,0,0,3095,3096,3,800,400,0,3096,3097,
		5,270,0,0,3097,3098,3,510,255,0,3098,479,1,0,0,0,3099,3100,5,43,0,0,3100,
		3101,5,75,0,0,3101,3102,3,800,400,0,3102,3103,5,110,0,0,3103,3104,5,198,
		0,0,3104,3105,5,200,0,0,3105,481,1,0,0,0,3106,3107,5,40,0,0,3107,3108,
		3,552,276,0,3108,483,1,0,0,0,3109,3110,5,43,0,0,3110,3111,5,132,0,0,3111,
		3112,3,800,400,0,3112,3113,5,270,0,0,3113,3114,3,800,400,0,3114,3115,3,
		558,279,0,3115,485,1,0,0,0,3116,3117,5,270,0,0,3117,3118,3,800,400,0,3118,
		3119,3,546,273,0,3119,487,1,0,0,0,3120,3121,5,270,0,0,3121,3122,5,25,0,
		0,3122,3127,3,544,272,0,3123,3124,5,24,0,0,3124,3126,3,544,272,0,3125,
		3123,1,0,0,0,3126,3129,1,0,0,0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,
		3130,1,0,0,0,3129,3127,1,0,0,0,3130,3131,5,26,0,0,3131,489,1,0,0,0,3132,
		3133,5,246,0,0,3133,3134,5,25,0,0,3134,3139,3,800,400,0,3135,3136,5,24,
		0,0,3136,3138,3,800,400,0,3137,3135,1,0,0,0,3138,3141,1,0,0,0,3139,3137,
		1,0,0,0,3139,3140,1,0,0,0,3140,3142,1,0,0,0,3141,3139,1,0,0,0,3142,3143,
		5,26,0,0,3143,491,1,0,0,0,3144,3145,5,40,0,0,3145,3146,3,518,259,0,3146,
		493,1,0,0,0,3147,3148,5,110,0,0,3148,3149,5,160,0,0,3149,3150,3,800,400,
		0,3150,495,1,0,0,0,3151,3152,5,242,0,0,3152,3153,5,294,0,0,3153,3154,3,
		812,406,0,3154,497,1,0,0,0,3155,3156,5,242,0,0,3156,3157,5,160,0,0,3157,
		3158,3,800,400,0,3158,3159,5,294,0,0,3159,3160,3,800,400,0,3160,499,1,
		0,0,0,3161,3162,5,40,0,0,3162,3163,3,534,267,0,3163,501,1,0,0,0,3164,3165,
		5,43,0,0,3165,3166,5,71,0,0,3166,3167,3,800,400,0,3167,3168,3,542,271,
		0,3168,503,1,0,0,0,3169,3170,5,110,0,0,3170,3171,5,71,0,0,3171,3172,3,
		800,400,0,3172,505,1,0,0,0,3173,3174,5,43,0,0,3174,3175,5,160,0,0,3175,
		3176,3,800,400,0,3176,3177,3,564,282,0,3177,507,1,0,0,0,3178,3179,3,804,
		402,0,3179,3181,3,204,102,0,3180,3182,3,510,255,0,3181,3180,1,0,0,0,3181,
		3182,1,0,0,0,3182,3183,1,0,0,0,3183,3184,3,512,256,0,3184,509,1,0,0,0,
		3185,3186,5,132,0,0,3186,3187,3,800,400,0,3187,511,1,0,0,0,3188,3190,5,
		198,0,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3191,1,0,0,0,3191,3193,
		5,200,0,0,3192,3189,1,0,0,0,3192,3193,1,0,0,0,3193,3196,1,0,0,0,3194,3195,
		5,96,0,0,3195,3197,3,14,7,0,3196,3194,1,0,0,0,3196,3197,1,0,0,0,3197,513,
		1,0,0,0,3198,3200,3,800,400,0,3199,3201,7,9,0,0,3200,3199,1,0,0,0,3200,
		3201,1,0,0,0,3201,515,1,0,0,0,3202,3203,5,229,0,0,3203,3204,5,176,0,0,
		3204,3205,5,25,0,0,3205,3210,3,800,400,0,3206,3207,5,24,0,0,3207,3209,
		3,800,400,0,3208,3206,1,0,0,0,3209,3212,1,0,0,0,3210,3208,1,0,0,0,3210,
		3211,1,0,0,0,3211,3213,1,0,0,0,3212,3210,1,0,0,0,3213,3214,5,26,0,0,3214,
		3242,1,0,0,0,3215,3216,5,217,0,0,3216,3217,5,66,0,0,3217,3218,5,25,0,0,
		3218,3223,3,800,400,0,3219,3220,5,24,0,0,3220,3222,3,800,400,0,3221,3219,
		1,0,0,0,3222,3225,1,0,0,0,3223,3221,1,0,0,0,3223,3224,1,0,0,0,3224,3226,
		1,0,0,0,3225,3223,1,0,0,0,3226,3227,5,26,0,0,3227,3242,1,0,0,0,3228,3229,
		5,212,0,0,3229,3230,5,66,0,0,3230,3231,5,25,0,0,3231,3236,3,514,257,0,
		3232,3233,5,24,0,0,3233,3235,3,514,257,0,3234,3232,1,0,0,0,3235,3238,1,
		0,0,0,3236,3234,1,0,0,0,3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,3236,
		1,0,0,0,3239,3240,5,26,0,0,3240,3242,1,0,0,0,3241,3202,1,0,0,0,3241,3215,
		1,0,0,0,3241,3228,1,0,0,0,3242,517,1,0,0,0,3243,3244,5,160,0,0,3244,3245,
		3,800,400,0,3245,3246,3,520,260,0,3246,3247,5,206,0,0,3247,3248,5,25,0,
		0,3248,3253,3,804,402,0,3249,3250,5,24,0,0,3250,3252,3,804,402,0,3251,
		3249,1,0,0,0,3252,3255,1,0,0,0,3253,3251,1,0,0,0,3253,3254,1,0,0,0,3254,
		3256,1,0,0,0,3255,3253,1,0,0,0,3256,3269,5,26,0,0,3257,3258,5,84,0,0,3258,
		3259,5,25,0,0,3259,3264,3,804,402,0,3260,3261,5,24,0,0,3261,3263,3,804,
		402,0,3262,3260,1,0,0,0,3263,3266,1,0,0,0,3264,3262,1,0,0,0,3264,3265,
		1,0,0,0,3265,3267,1,0,0,0,3266,3264,1,0,0,0,3267,3268,5,26,0,0,3268,3270,
		1,0,0,0,3269,3257,1,0,0,0,3269,3270,1,0,0,0,3270,3272,1,0,0,0,3271,3273,
		3,528,264,0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,519,1,0,0,0,3274,
		3277,3,522,261,0,3275,3277,3,524,262,0,3276,3274,1,0,0,0,3276,3275,1,0,
		0,0,3277,3280,1,0,0,0,3278,3279,5,311,0,0,3279,3281,3,526,263,0,3280,3278,
		1,0,0,0,3280,3281,1,0,0,0,3281,521,1,0,0,0,3282,3284,5,144,0,0,3283,3285,
		5,304,0,0,3284,3283,1,0,0,0,3284,3285,1,0,0,0,3285,3287,1,0,0,0,3286,3288,
		7,16,0,0,3287,3286,1,0,0,0,3287,3288,1,0,0,0,3288,523,1,0,0,0,3289,3290,
		5,183,0,0,3290,525,1,0,0,0,3291,3292,3,800,400,0,3292,527,1,0,0,0,3293,
		3294,5,320,0,0,3294,3295,5,25,0,0,3295,3300,3,530,265,0,3296,3297,5,24,
		0,0,3297,3299,3,530,265,0,3298,3296,1,0,0,0,3299,3302,1,0,0,0,3300,3298,
		1,0,0,0,3300,3301,1,0,0,0,3301,3304,1,0,0,0,3302,3300,1,0,0,0,3303,3305,
		5,24,0,0,3304,3303,1,0,0,0,3304,3305,1,0,0,0,3305,3306,1,0,0,0,3306,3307,
		5,26,0,0,3307,529,1,0,0,0,3308,3309,3,800,400,0,3309,3310,5,1,0,0,3310,
		3311,3,532,266,0,3311,531,1,0,0,0,3312,3317,3,828,414,0,3313,3317,5,324,
		0,0,3314,3317,3,864,432,0,3315,3317,3,860,430,0,3316,3312,1,0,0,0,3316,
		3313,1,0,0,0,3316,3314,1,0,0,0,3316,3315,1,0,0,0,3317,533,1,0,0,0,3318,
		3319,5,71,0,0,3319,3320,3,800,400,0,3320,3321,5,320,0,0,3321,3322,5,25,
		0,0,3322,3323,3,536,268,0,3323,3324,5,26,0,0,3324,535,1,0,0,0,3325,3330,
		3,538,269,0,3326,3327,5,24,0,0,3327,3329,3,538,269,0,3328,3326,1,0,0,0,
		3329,3332,1,0,0,0,3330,3328,1,0,0,0,3330,3331,1,0,0,0,3331,537,1,0,0,0,
		3332,3330,1,0,0,0,3333,3334,3,800,400,0,3334,3335,5,1,0,0,3335,3336,3,
		540,270,0,3336,539,1,0,0,0,3337,3338,3,14,7,0,3338,541,1,0,0,0,3339,3346,
		5,106,0,0,3340,3341,5,270,0,0,3341,3342,5,25,0,0,3342,3343,3,536,268,0,
		3343,3344,5,26,0,0,3344,3346,1,0,0,0,3345,3339,1,0,0,0,3345,3340,1,0,0,
		0,3346,543,1,0,0,0,3347,3348,3,800,400,0,3348,3349,5,1,0,0,3349,3350,3,
		546,273,0,3350,545,1,0,0,0,3351,3364,3,782,391,0,3352,3364,5,324,0,0,3353,
		3364,3,864,432,0,3354,3364,3,560,280,0,3355,3356,3,548,274,0,3356,3357,
		5,206,0,0,3357,3360,3,800,400,0,3358,3359,5,49,0,0,3359,3361,7,17,0,0,
		3360,3358,1,0,0,0,3360,3361,1,0,0,0,3361,3364,1,0,0,0,3362,3364,3,860,
		430,0,3363,3351,1,0,0,0,3363,3352,1,0,0,0,3363,3353,1,0,0,0,3363,3354,
		1,0,0,0,3363,3355,1,0,0,0,3363,3362,1,0,0,0,3364,547,1,0,0,0,3365,3376,
		3,14,7,0,3366,3373,3,550,275,0,3367,3368,5,24,0,0,3368,3369,3,14,7,0,3369,
		3370,3,550,275,0,3370,3372,1,0,0,0,3371,3367,1,0,0,0,3372,3375,1,0,0,0,
		3373,3371,1,0,0,0,3373,3374,1,0,0,0,3374,3377,1,0,0,0,3375,3373,1,0,0,
		0,3376,3366,1,0,0,0,3376,3377,1,0,0,0,3377,549,1,0,0,0,3378,3379,5,294,
		0,0,3379,3380,5,129,0,0,3380,3381,5,92,0,0,3381,3382,5,275,0,0,3382,3385,
		3,800,400,0,3383,3385,5,100,0,0,3384,3378,1,0,0,0,3384,3383,1,0,0,0,3385,
		551,1,0,0,0,3386,3387,5,132,0,0,3387,3388,3,800,400,0,3388,3389,3,554,
		277,0,3389,553,1,0,0,0,3390,3399,5,25,0,0,3391,3396,3,556,278,0,3392,3393,
		5,24,0,0,3393,3395,3,556,278,0,3394,3392,1,0,0,0,3395,3398,1,0,0,0,3396,
		3394,1,0,0,0,3396,3397,1,0,0,0,3397,3400,1,0,0,0,3398,3396,1,0,0,0,3399,
		3391,1,0,0,0,3399,3400,1,0,0,0,3400,3401,1,0,0,0,3401,3402,5,26,0,0,3402,
		555,1,0,0,0,3403,3404,3,800,400,0,3404,3405,5,1,0,0,3405,3406,3,558,279,
		0,3406,557,1,0,0,0,3407,3410,5,324,0,0,3408,3410,3,864,432,0,3409,3407,
		1,0,0,0,3409,3408,1,0,0,0,3410,559,1,0,0,0,3411,3412,5,25,0,0,3412,3417,
		3,562,281,0,3413,3414,5,24,0,0,3414,3416,3,562,281,0,3415,3413,1,0,0,0,
		3416,3419,1,0,0,0,3417,3415,1,0,0,0,3417,3418,1,0,0,0,3418,3420,1,0,0,
		0,3419,3417,1,0,0,0,3420,3421,5,26,0,0,3421,3424,1,0,0,0,3422,3424,3,562,
		281,0,3423,3411,1,0,0,0,3423,3422,1,0,0,0,3424,561,1,0,0,0,3425,3426,5,
		25,0,0,3426,3431,3,142,71,0,3427,3428,5,24,0,0,3428,3430,3,142,71,0,3429,
		3427,1,0,0,0,3430,3433,1,0,0,0,3431,3429,1,0,0,0,3431,3432,1,0,0,0,3432,
		3434,1,0,0,0,3433,3431,1,0,0,0,3434,3435,5,26,0,0,3435,563,1,0,0,0,3436,
		3440,3,486,243,0,3437,3440,3,488,244,0,3438,3440,3,490,245,0,3439,3436,
		1,0,0,0,3439,3437,1,0,0,0,3439,3438,1,0,0,0,3440,565,1,0,0,0,3441,3446,
		5,110,0,0,3442,3447,5,285,0,0,3443,3447,5,288,0,0,3444,3445,5,129,0,0,
		3445,3447,5,285,0,0,3446,3442,1,0,0,0,3446,3443,1,0,0,0,3446,3444,1,0,
		0,0,3447,3450,1,0,0,0,3448,3449,5,152,0,0,3449,3451,5,126,0,0,3450,3448,
		1,0,0,0,3450,3451,1,0,0,0,3451,3452,1,0,0,0,3452,3453,3,652,326,0,3453,
		567,1,0,0,0,3454,3455,5,85,0,0,3455,3456,5,310,0,0,3456,3460,3,578,289,
		0,3457,3459,3,580,290,0,3458,3457,1,0,0,0,3459,3462,1,0,0,0,3460,3458,
		1,0,0,0,3460,3461,1,0,0,0,3461,569,1,0,0,0,3462,3460,1,0,0,0,3463,3464,
		5,43,0,0,3464,3465,5,310,0,0,3465,3477,3,578,289,0,3466,3468,5,320,0,0,
		3467,3466,1,0,0,0,3467,3468,1,0,0,0,3468,3470,1,0,0,0,3469,3471,3,580,
		290,0,3470,3469,1,0,0,0,3471,3472,1,0,0,0,3472,3470,1,0,0,0,3472,3473,
		1,0,0,0,3473,3478,1,0,0,0,3474,3475,5,242,0,0,3475,3476,5,294,0,0,3476,
		3478,3,578,289,0,3477,3467,1,0,0,0,3477,3474,1,0,0,0,3478,571,1,0,0,0,
		3479,3480,5,85,0,0,3480,3481,5,146,0,0,3481,3495,3,578,289,0,3482,3483,
		5,320,0,0,3483,3484,5,310,0,0,3484,3489,3,578,289,0,3485,3486,5,24,0,0,
		3486,3488,3,578,289,0,3487,3485,1,0,0,0,3488,3491,1,0,0,0,3489,3487,1,
		0,0,0,3489,3490,1,0,0,0,3490,3493,1,0,0,0,3491,3489,1,0,0,0,3492,3494,
		5,24,0,0,3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3496,1,0,0,0,3495,3482,
		1,0,0,0,3495,3496,1,0,0,0,3496,573,1,0,0,0,3497,3498,5,43,0,0,3498,3499,
		5,146,0,0,3499,3516,3,578,289,0,3500,3501,7,18,0,0,3501,3502,5,310,0,0,
		3502,3507,3,578,289,0,3503,3504,5,24,0,0,3504,3506,3,578,289,0,3505,3503,
		1,0,0,0,3506,3509,1,0,0,0,3507,3505,1,0,0,0,3507,3508,1,0,0,0,3508,3511,
		1,0,0,0,3509,3507,1,0,0,0,3510,3512,5,24,0,0,3511,3510,1,0,0,0,3511,3512,
		1,0,0,0,3512,3517,1,0,0,0,3513,3514,5,242,0,0,3514,3515,5,294,0,0,3515,
		3517,3,578,289,0,3516,3500,1,0,0,0,3516,3513,1,0,0,0,3517,575,1,0,0,0,
		3518,3519,5,110,0,0,3519,3522,7,19,0,0,3520,3521,5,152,0,0,3521,3523,5,
		126,0,0,3522,3520,1,0,0,0,3522,3523,1,0,0,0,3523,3524,1,0,0,0,3524,3529,
		3,578,289,0,3525,3526,5,24,0,0,3526,3528,3,578,289,0,3527,3525,1,0,0,0,
		3528,3531,1,0,0,0,3529,3527,1,0,0,0,3529,3530,1,0,0,0,3530,3533,1,0,0,
		0,3531,3529,1,0,0,0,3532,3534,5,24,0,0,3533,3532,1,0,0,0,3533,3534,1,0,
		0,0,3534,577,1,0,0,0,3535,3538,3,802,401,0,3536,3538,3,144,72,0,3537,3535,
		1,0,0,0,3537,3536,1,0,0,0,3538,579,1,0,0,0,3539,3542,3,582,291,0,3540,
		3542,3,584,292,0,3541,3539,1,0,0,0,3541,3540,1,0,0,0,3542,581,1,0,0,0,
		3543,3545,5,115,0,0,3544,3543,1,0,0,0,3544,3545,1,0,0,0,3545,3546,1,0,
		0,0,3546,3547,5,219,0,0,3547,3548,3,14,7,0,3548,583,1,0,0,0,3549,3550,
		7,20,0,0,3550,585,1,0,0,0,3551,3552,5,145,0,0,3552,3553,3,594,297,0,3553,
		3554,5,206,0,0,3554,3559,3,804,402,0,3555,3556,5,24,0,0,3556,3558,3,804,
		402,0,3557,3555,1,0,0,0,3558,3561,1,0,0,0,3559,3557,1,0,0,0,3559,3560,
		1,0,0,0,3560,3562,1,0,0,0,3561,3559,1,0,0,0,3562,3563,5,294,0,0,3563,3568,
		3,578,289,0,3564,3565,5,24,0,0,3565,3567,3,578,289,0,3566,3564,1,0,0,0,
		3567,3570,1,0,0,0,3568,3566,1,0,0,0,3568,3569,1,0,0,0,3569,3572,1,0,0,
		0,3570,3568,1,0,0,0,3571,3573,5,24,0,0,3572,3571,1,0,0,0,3572,3573,1,0,
		0,0,3573,3577,1,0,0,0,3574,3575,5,320,0,0,3575,3576,5,145,0,0,3576,3578,
		5,209,0,0,3577,3574,1,0,0,0,3577,3578,1,0,0,0,3578,587,1,0,0,0,3579,3583,
		5,256,0,0,3580,3581,5,145,0,0,3581,3582,5,209,0,0,3582,3584,5,138,0,0,
		3583,3580,1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,0,0,3585,3586,3,594,
		297,0,3586,3587,5,206,0,0,3587,3592,3,804,402,0,3588,3589,5,24,0,0,3589,
		3591,3,804,402,0,3590,3588,1,0,0,0,3591,3594,1,0,0,0,3592,3590,1,0,0,0,
		3592,3593,1,0,0,0,3593,3595,1,0,0,0,3594,3592,1,0,0,0,3595,3596,5,140,
		0,0,3596,3601,3,578,289,0,3597,3598,5,24,0,0,3598,3600,3,578,289,0,3599,
		3597,1,0,0,0,3600,3603,1,0,0,0,3601,3599,1,0,0,0,3601,3602,1,0,0,0,3602,
		589,1,0,0,0,3603,3601,1,0,0,0,3604,3629,5,81,0,0,3605,3629,5,182,0,0,3606,
		3629,5,166,0,0,3607,3629,5,185,0,0,3608,3629,5,110,0,0,3609,3629,5,145,
		0,0,3610,3611,5,192,0,0,3611,3629,7,21,0,0,3612,3613,7,22,0,0,3613,3629,
		5,261,0,0,3614,3615,7,23,0,0,3615,3629,5,265,0,0,3616,3618,5,268,0,0,3617,
		3619,7,24,0,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,3629,1,0,0,0,3620,
		3622,7,25,0,0,3621,3623,5,179,0,0,3622,3621,1,0,0,0,3622,3623,1,0,0,0,
		3623,3629,1,0,0,0,3624,3626,5,85,0,0,3625,3627,7,26,0,0,3626,3625,1,0,
		0,0,3626,3627,1,0,0,0,3627,3629,1,0,0,0,3628,3604,1,0,0,0,3628,3605,1,
		0,0,0,3628,3606,1,0,0,0,3628,3607,1,0,0,0,3628,3608,1,0,0,0,3628,3609,
		1,0,0,0,3628,3610,1,0,0,0,3628,3612,1,0,0,0,3628,3614,1,0,0,0,3628,3616,
		1,0,0,0,3628,3620,1,0,0,0,3628,3624,1,0,0,0,3629,591,1,0,0,0,3630,3633,
		3,590,295,0,3631,3633,5,324,0,0,3632,3630,1,0,0,0,3632,3631,1,0,0,0,3633,
		593,1,0,0,0,3634,3639,3,592,296,0,3635,3636,5,24,0,0,3636,3638,3,592,296,
		0,3637,3635,1,0,0,0,3638,3641,1,0,0,0,3639,3637,1,0,0,0,3639,3640,1,0,
		0,0,3640,3643,1,0,0,0,3641,3639,1,0,0,0,3642,3644,5,24,0,0,3643,3642,1,
		0,0,0,3643,3644,1,0,0,0,3644,3650,1,0,0,0,3645,3647,5,42,0,0,3646,3648,
		5,230,0,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3650,1,0,0,0,3649,3634,
		1,0,0,0,3649,3645,1,0,0,0,3650,595,1,0,0,0,3651,3652,5,85,0,0,3652,3653,
		5,247,0,0,3653,3654,5,225,0,0,3654,3655,3,648,324,0,3655,3656,3,454,227,
		0,3656,597,1,0,0,0,3657,3658,5,43,0,0,3658,3659,5,247,0,0,3659,3660,5,
		225,0,0,3660,3661,3,648,324,0,3661,3666,3,600,300,0,3662,3663,5,24,0,0,
		3663,3665,3,600,300,0,3664,3662,1,0,0,0,3665,3668,1,0,0,0,3666,3664,1,
		0,0,0,3666,3667,1,0,0,0,3667,599,1,0,0,0,3668,3666,1,0,0,0,3669,3672,3,
		488,244,0,3670,3672,3,490,245,0,3671,3669,1,0,0,0,3671,3670,1,0,0,0,3672,
		601,1,0,0,0,3673,3674,5,110,0,0,3674,3675,5,247,0,0,3675,3676,5,225,0,
		0,3676,3677,3,648,324,0,3677,603,1,0,0,0,3678,3679,5,85,0,0,3679,3680,
		5,247,0,0,3680,3681,5,225,0,0,3681,3682,5,73,0,0,3682,3683,3,648,324,0,
		3683,3684,3,454,227,0,3684,605,1,0,0,0,3685,3686,5,43,0,0,3686,3687,5,
		247,0,0,3687,3688,5,225,0,0,3688,3689,5,73,0,0,3689,3690,3,648,324,0,3690,
		3695,3,608,304,0,3691,3692,5,24,0,0,3692,3694,3,608,304,0,3693,3691,1,
		0,0,0,3694,3697,1,0,0,0,3695,3693,1,0,0,0,3695,3696,1,0,0,0,3696,607,1,
		0,0,0,3697,3695,1,0,0,0,3698,3701,3,488,244,0,3699,3701,3,490,245,0,3700,
		3698,1,0,0,0,3700,3699,1,0,0,0,3701,609,1,0,0,0,3702,3703,5,110,0,0,3703,
		3704,5,247,0,0,3704,3705,5,225,0,0,3705,3706,5,73,0,0,3706,3707,3,648,
		324,0,3707,611,1,0,0,0,3708,3709,5,85,0,0,3709,3710,5,53,0,0,3710,3711,
		5,245,0,0,3711,3712,3,648,324,0,3712,3713,5,138,0,0,3713,3718,3,614,307,
		0,3714,3715,5,24,0,0,3715,3717,3,614,307,0,3716,3714,1,0,0,0,3717,3720,
		1,0,0,0,3718,3716,1,0,0,0,3718,3719,1,0,0,0,3719,3721,1,0,0,0,3720,3718,
		1,0,0,0,3721,3722,5,320,0,0,3722,3723,5,25,0,0,3723,3724,3,616,308,0,3724,
		3725,5,26,0,0,3725,613,1,0,0,0,3726,3727,3,648,324,0,3727,3728,5,49,0,
		0,3728,3729,3,648,324,0,3729,615,1,0,0,0,3730,3735,3,618,309,0,3731,3732,
		5,24,0,0,3732,3734,3,618,309,0,3733,3731,1,0,0,0,3734,3737,1,0,0,0,3735,
		3733,1,0,0,0,3735,3736,1,0,0,0,3736,617,1,0,0,0,3737,3735,1,0,0,0,3738,
		3739,3,800,400,0,3739,3740,5,1,0,0,3740,3741,3,14,7,0,3741,619,1,0,0,0,
		3742,3743,5,43,0,0,3743,3744,5,53,0,0,3744,3745,5,245,0,0,3745,3746,3,
		648,324,0,3746,3751,3,622,311,0,3747,3748,5,24,0,0,3748,3750,3,622,311,
		0,3749,3747,1,0,0,0,3750,3753,1,0,0,0,3751,3749,1,0,0,0,3751,3752,1,0,
		0,0,3752,621,1,0,0,0,3753,3751,1,0,0,0,3754,3755,3,624,312,0,3755,623,
		1,0,0,0,3756,3757,5,270,0,0,3757,3758,5,25,0,0,3758,3759,3,616,308,0,3759,
		3760,5,26,0,0,3760,625,1,0,0,0,3761,3762,5,110,0,0,3762,3763,5,53,0,0,
		3763,3764,5,245,0,0,3764,3766,3,648,324,0,3765,3767,5,68,0,0,3766,3765,
		1,0,0,0,3766,3767,1,0,0,0,3767,627,1,0,0,0,3768,3773,3,146,73,0,3769,3770,
		5,24,0,0,3770,3772,3,146,73,0,3771,3769,1,0,0,0,3772,3775,1,0,0,0,3773,
		3771,1,0,0,0,3773,3774,1,0,0,0,3774,629,1,0,0,0,3775,3773,1,0,0,0,3776,
		3777,5,99,0,0,3777,3778,7,27,0,0,3778,3779,3,144,72,0,3779,3781,5,25,0,
		0,3780,3782,3,628,314,0,3781,3780,1,0,0,0,3781,3782,1,0,0,0,3782,3783,
		1,0,0,0,3783,3784,5,26,0,0,3784,3785,5,49,0,0,3785,3786,3,632,316,0,3786,
		3787,5,116,0,0,3787,3788,5,99,0,0,3788,631,1,0,0,0,3789,3791,5,22,0,0,
		3790,3789,1,0,0,0,3791,3794,1,0,0,0,3792,3790,1,0,0,0,3792,3793,1,0,0,
		0,3793,3813,1,0,0,0,3794,3792,1,0,0,0,3795,3804,3,12,6,0,3796,3798,5,22,
		0,0,3797,3796,1,0,0,0,3798,3799,1,0,0,0,3799,3797,1,0,0,0,3799,3800,1,
		0,0,0,3800,3801,1,0,0,0,3801,3803,3,12,6,0,3802,3797,1,0,0,0,3803,3806,
		1,0,0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,0,3805,3810,1,0,0,0,3806,3804,
		1,0,0,0,3807,3809,5,22,0,0,3808,3807,1,0,0,0,3809,3812,1,0,0,0,3810,3808,
		1,0,0,0,3810,3811,1,0,0,0,3811,3814,1,0,0,0,3812,3810,1,0,0,0,3813,3795,
		1,0,0,0,3813,3814,1,0,0,0,3814,633,1,0,0,0,3815,3817,5,121,0,0,3816,3815,
		1,0,0,0,3816,3817,1,0,0,0,3817,3818,1,0,0,0,3818,3819,5,152,0,0,3819,3820,
		3,14,7,0,3820,3823,3,222,111,0,3821,3822,5,112,0,0,3822,3824,3,222,111,
		0,3823,3821,1,0,0,0,3823,3824,1,0,0,0,3824,635,1,0,0,0,3825,3827,5,121,
		0,0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,3827,3829,1,0,0,0,3828,3830,5,
		216,0,0,3829,3828,1,0,0,0,3829,3830,1,0,0,0,3830,3831,1,0,0,0,3831,3832,
		5,138,0,0,3832,3833,3,144,72,0,3833,3834,5,157,0,0,3834,3835,3,14,7,0,
		3835,3838,3,222,111,0,3836,3837,5,112,0,0,3837,3839,3,222,111,0,3838,3836,
		1,0,0,0,3838,3839,1,0,0,0,3839,637,1,0,0,0,3840,3841,3,826,413,0,3841,
		3842,5,23,0,0,3842,3844,1,0,0,0,3843,3840,1,0,0,0,3843,3844,1,0,0,0,3844,
		3846,1,0,0,0,3845,3847,5,29,0,0,3846,3845,1,0,0,0,3846,3847,1,0,0,0,3847,
		3878,1,0,0,0,3848,3879,3,640,320,0,3849,3850,3,806,403,0,3850,3862,5,25,
		0,0,3851,3856,3,642,321,0,3852,3853,5,24,0,0,3853,3855,3,642,321,0,3854,
		3852,1,0,0,0,3855,3858,1,0,0,0,3856,3854,1,0,0,0,3856,3857,1,0,0,0,3857,
		3860,1,0,0,0,3858,3856,1,0,0,0,3859,3861,5,24,0,0,3860,3859,1,0,0,0,3860,
		3861,1,0,0,0,3861,3863,1,0,0,0,3862,3851,1,0,0,0,3862,3863,1,0,0,0,3863,
		3864,1,0,0,0,3864,3865,5,26,0,0,3865,3879,1,0,0,0,3866,3872,3,144,72,0,
		3867,3869,5,25,0,0,3868,3870,3,112,56,0,3869,3868,1,0,0,0,3869,3870,1,
		0,0,0,3870,3871,1,0,0,0,3871,3873,5,26,0,0,3872,3867,1,0,0,0,3872,3873,
		1,0,0,0,3873,3876,1,0,0,0,3874,3875,5,315,0,0,3875,3877,3,822,411,0,3876,
		3874,1,0,0,0,3876,3877,1,0,0,0,3877,3879,1,0,0,0,3878,3848,1,0,0,0,3878,
		3849,1,0,0,0,3878,3866,1,0,0,0,3879,3881,1,0,0,0,3880,3882,3,644,322,0,
		3881,3880,1,0,0,0,3881,3882,1,0,0,0,3882,639,1,0,0,0,3883,3886,3,834,417,
		0,3884,3885,5,315,0,0,3885,3887,3,822,411,0,3886,3884,1,0,0,0,3886,3887,
		1,0,0,0,3887,641,1,0,0,0,3888,3890,5,29,0,0,3889,3888,1,0,0,0,3889,3890,
		1,0,0,0,3890,3891,1,0,0,0,3891,3894,3,128,64,0,3892,3893,5,315,0,0,3893,
		3895,3,822,411,0,3894,3892,1,0,0,0,3894,3895,1,0,0,0,3895,643,1,0,0,0,
		3896,3909,5,320,0,0,3897,3910,3,646,323,0,3898,3899,5,25,0,0,3899,3904,
		3,646,323,0,3900,3901,5,24,0,0,3901,3903,3,646,323,0,3902,3900,1,0,0,0,
		3903,3906,1,0,0,0,3904,3902,1,0,0,0,3904,3905,1,0,0,0,3905,3907,1,0,0,
		0,3906,3904,1,0,0,0,3907,3908,5,26,0,0,3908,3910,1,0,0,0,3909,3897,1,0,
		0,0,3909,3898,1,0,0,0,3910,645,1,0,0,0,3911,3930,3,816,408,0,3912,3928,
		5,1,0,0,3913,3929,3,160,80,0,3914,3915,5,25,0,0,3915,3920,3,160,80,0,3916,
		3917,5,24,0,0,3917,3919,3,160,80,0,3918,3916,1,0,0,0,3919,3922,1,0,0,0,
		3920,3918,1,0,0,0,3920,3921,1,0,0,0,3921,3924,1,0,0,0,3922,3920,1,0,0,
		0,3923,3925,5,24,0,0,3924,3923,1,0,0,0,3924,3925,1,0,0,0,3925,3926,1,0,
		0,0,3926,3927,5,26,0,0,3927,3929,1,0,0,0,3928,3913,1,0,0,0,3928,3914,1,
		0,0,0,3929,3931,1,0,0,0,3930,3912,1,0,0,0,3930,3931,1,0,0,0,3931,3957,
		1,0,0,0,3932,3934,7,28,0,0,3933,3935,5,1,0,0,3934,3933,1,0,0,0,3934,3935,
		1,0,0,0,3935,3936,1,0,0,0,3936,3957,3,204,102,0,3937,3939,5,265,0,0,3938,
		3940,5,1,0,0,3939,3938,1,0,0,0,3939,3940,1,0,0,0,3940,3941,1,0,0,0,3941,
		3950,5,25,0,0,3942,3947,3,164,82,0,3943,3944,5,24,0,0,3944,3946,3,164,
		82,0,3945,3943,1,0,0,0,3946,3949,1,0,0,0,3947,3945,1,0,0,0,3947,3948,1,
		0,0,0,3948,3951,1,0,0,0,3949,3947,1,0,0,0,3950,3942,1,0,0,0,3950,3951,
		1,0,0,0,3951,3953,1,0,0,0,3952,3954,5,24,0,0,3953,3952,1,0,0,0,3953,3954,
		1,0,0,0,3954,3955,1,0,0,0,3955,3957,5,26,0,0,3956,3911,1,0,0,0,3956,3932,
		1,0,0,0,3956,3937,1,0,0,0,3957,647,1,0,0,0,3958,3959,3,826,413,0,3959,
		3960,5,23,0,0,3960,3962,1,0,0,0,3961,3958,1,0,0,0,3961,3962,1,0,0,0,3962,
		3963,1,0,0,0,3963,3964,3,832,416,0,3964,649,1,0,0,0,3965,3971,3,648,324,
		0,3966,3968,5,29,0,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,
		0,0,3969,3971,3,144,72,0,3970,3965,1,0,0,0,3970,3967,1,0,0,0,3971,651,
		1,0,0,0,3972,3974,3,650,325,0,3973,3975,3,644,322,0,3974,3973,1,0,0,0,
		3974,3975,1,0,0,0,3975,653,1,0,0,0,3976,3980,3,652,326,0,3977,3978,5,118,
		0,0,3978,3979,5,66,0,0,3979,3981,3,114,57,0,3980,3977,1,0,0,0,3980,3981,
		1,0,0,0,3981,655,1,0,0,0,3982,3983,5,100,0,0,3983,3984,5,140,0,0,3984,
		3989,3,652,326,0,3985,3986,5,318,0,0,3986,3990,3,14,7,0,3987,3988,5,206,
		0,0,3988,3990,3,366,183,0,3989,3985,1,0,0,0,3989,3987,1,0,0,0,3989,3990,
		1,0,0,0,3990,3992,1,0,0,0,3991,3993,3,362,181,0,3992,3991,1,0,0,0,3992,
		3993,1,0,0,0,3993,657,1,0,0,0,3994,3995,5,307,0,0,3995,4004,3,652,326,
		0,3996,3997,5,270,0,0,3997,4000,3,660,330,0,3998,3999,5,318,0,0,3999,4001,
		3,14,7,0,4000,3998,1,0,0,0,4000,4001,1,0,0,0,4001,4005,1,0,0,0,4002,4003,
		5,206,0,0,4003,4005,3,366,183,0,4004,3996,1,0,0,0,4004,4002,1,0,0,0,4005,
		4007,1,0,0,0,4006,4008,3,362,181,0,4007,4006,1,0,0,0,4007,4008,1,0,0,0,
		4008,659,1,0,0,0,4009,4012,3,662,331,0,4010,4012,3,668,334,0,4011,4009,
		1,0,0,0,4011,4010,1,0,0,0,4012,661,1,0,0,0,4013,4018,3,664,332,0,4014,
		4015,5,24,0,0,4015,4017,3,664,332,0,4016,4014,1,0,0,0,4017,4020,1,0,0,
		0,4018,4016,1,0,0,0,4018,4019,1,0,0,0,4019,663,1,0,0,0,4020,4018,1,0,0,
		0,4021,4022,3,666,333,0,4022,4023,5,1,0,0,4023,4024,3,14,7,0,4024,665,
		1,0,0,0,4025,4026,3,120,60,0,4026,667,1,0,0,0,4027,4028,3,670,335,0,4028,
		4029,5,1,0,0,4029,4030,5,25,0,0,4030,4031,3,376,188,0,4031,4032,5,26,0,
		0,4032,669,1,0,0,0,4033,4034,5,25,0,0,4034,4039,3,666,333,0,4035,4036,
		5,24,0,0,4036,4038,3,666,333,0,4037,4035,1,0,0,0,4038,4041,1,0,0,0,4039,
		4037,1,0,0,0,4039,4040,1,0,0,0,4040,4042,1,0,0,0,4041,4039,1,0,0,0,4042,
		4043,5,26,0,0,4043,671,1,0,0,0,4044,4045,5,85,0,0,4045,4049,5,295,0,0,
		4046,4047,5,152,0,0,4047,4048,5,198,0,0,4048,4050,5,126,0,0,4049,4046,
		1,0,0,0,4049,4050,1,0,0,0,4050,4051,1,0,0,0,4051,4053,3,718,359,0,4052,
		4054,3,674,337,0,4053,4052,1,0,0,0,4053,4054,1,0,0,0,4054,4056,1,0,0,0,
		4055,4057,3,678,339,0,4056,4055,1,0,0,0,4056,4057,1,0,0,0,4057,673,1,0,
		0,0,4058,4059,5,25,0,0,4059,4064,3,676,338,0,4060,4061,5,24,0,0,4061,4063,
		3,676,338,0,4062,4060,1,0,0,0,4063,4066,1,0,0,0,4064,4062,1,0,0,0,4064,
		4065,1,0,0,0,4065,4067,1,0,0,0,4066,4064,1,0,0,0,4067,4068,5,26,0,0,4068,
		675,1,0,0,0,4069,4070,3,686,343,0,4070,677,1,0,0,0,4071,4072,5,320,0,0,
		4072,4073,5,25,0,0,4073,4074,3,704,352,0,4074,4075,5,26,0,0,4075,679,1,
		0,0,0,4076,4077,5,43,0,0,4077,4080,5,295,0,0,4078,4079,5,152,0,0,4079,
		4081,5,126,0,0,4080,4078,1,0,0,0,4080,4081,1,0,0,0,4081,4082,1,0,0,0,4082,
		4083,3,718,359,0,4083,4088,3,682,341,0,4084,4085,5,24,0,0,4085,4087,3,
		682,341,0,4086,4084,1,0,0,0,4087,4090,1,0,0,0,4088,4086,1,0,0,0,4088,4089,
		1,0,0,0,4089,681,1,0,0,0,4090,4088,1,0,0,0,4091,4097,3,684,342,0,4092,
		4097,3,688,344,0,4093,4097,3,692,346,0,4094,4097,3,698,349,0,4095,4097,
		3,700,350,0,4096,4091,1,0,0,0,4096,4092,1,0,0,0,4096,4093,1,0,0,0,4096,
		4094,1,0,0,0,4096,4095,1,0,0,0,4097,683,1,0,0,0,4098,4099,5,40,0,0,4099,
		4100,3,686,343,0,4100,685,1,0,0,0,4101,4102,5,83,0,0,4102,4104,3,800,400,
		0,4103,4105,3,710,355,0,4104,4103,1,0,0,0,4104,4105,1,0,0,0,4105,687,1,
		0,0,0,4106,4107,5,43,0,0,4107,4108,5,83,0,0,4108,4109,3,720,360,0,4109,
		4110,3,690,345,0,4110,689,1,0,0,0,4111,4114,3,694,347,0,4112,4114,3,696,
		348,0,4113,4111,1,0,0,0,4113,4112,1,0,0,0,4114,691,1,0,0,0,4115,4116,5,
		110,0,0,4116,4117,5,83,0,0,4117,4118,3,720,360,0,4118,693,1,0,0,0,4119,
		4120,5,270,0,0,4120,4121,5,25,0,0,4121,4122,3,712,356,0,4122,4123,5,26,
		0,0,4123,695,1,0,0,0,4124,4125,5,246,0,0,4125,4126,5,25,0,0,4126,4131,
		3,800,400,0,4127,4128,5,24,0,0,4128,4130,3,800,400,0,4129,4127,1,0,0,0,
		4130,4133,1,0,0,0,4131,4129,1,0,0,0,4131,4132,1,0,0,0,4132,4134,1,0,0,
		0,4133,4131,1,0,0,0,4134,4135,5,26,0,0,4135,697,1,0,0,0,4136,4137,5,270,
		0,0,4137,4138,5,25,0,0,4138,4139,3,704,352,0,4139,4140,5,26,0,0,4140,699,
		1,0,0,0,4141,4142,5,246,0,0,4142,4143,5,25,0,0,4143,4148,3,800,400,0,4144,
		4145,5,24,0,0,4145,4147,3,818,409,0,4146,4144,1,0,0,0,4147,4150,1,0,0,
		0,4148,4146,1,0,0,0,4148,4149,1,0,0,0,4149,4151,1,0,0,0,4150,4148,1,0,
		0,0,4151,4152,5,26,0,0,4152,701,1,0,0,0,4153,4154,5,110,0,0,4154,4157,
		5,295,0,0,4155,4156,5,152,0,0,4156,4158,5,126,0,0,4157,4155,1,0,0,0,4157,
		4158,1,0,0,0,4158,4159,1,0,0,0,4159,4160,3,718,359,0,4160,703,1,0,0,0,
		4161,4166,3,706,353,0,4162,4163,5,24,0,0,4163,4165,3,706,353,0,4164,4162,
		1,0,0,0,4165,4168,1,0,0,0,4166,4164,1,0,0,0,4166,4167,1,0,0,0,4167,705,
		1,0,0,0,4168,4166,1,0,0,0,4169,4170,3,800,400,0,4170,4171,5,1,0,0,4171,
		4172,3,708,354,0,4172,707,1,0,0,0,4173,4174,3,14,7,0,4174,709,1,0,0,0,
		4175,4176,5,320,0,0,4176,4177,5,25,0,0,4177,4178,3,712,356,0,4178,4179,
		5,26,0,0,4179,711,1,0,0,0,4180,4185,3,714,357,0,4181,4182,5,24,0,0,4182,
		4184,3,714,357,0,4183,4181,1,0,0,0,4184,4187,1,0,0,0,4185,4183,1,0,0,0,
		4185,4186,1,0,0,0,4186,713,1,0,0,0,4187,4185,1,0,0,0,4188,4189,3,800,400,
		0,4189,4190,5,1,0,0,4190,4191,3,716,358,0,4191,715,1,0,0,0,4192,4193,3,
		14,7,0,4193,717,1,0,0,0,4194,4195,3,826,413,0,4195,4196,5,23,0,0,4196,
		4198,1,0,0,0,4197,4194,1,0,0,0,4197,4198,1,0,0,0,4198,4199,1,0,0,0,4199,
		4200,3,800,400,0,4200,719,1,0,0,0,4201,4202,3,818,409,0,4202,721,1,0,0,
		0,4203,4204,5,248,0,0,4204,4208,5,201,0,0,4205,4206,5,153,0,0,4206,4208,
		5,201,0,0,4207,4203,1,0,0,0,4207,4205,1,0,0,0,4208,723,1,0,0,0,4209,4210,
		5,133,0,0,4210,4211,5,25,0,0,4211,4212,5,318,0,0,4212,4213,3,14,7,0,4213,
		4214,5,26,0,0,4214,725,1,0,0,0,4215,4218,3,728,364,0,4216,4218,3,738,369,
		0,4217,4215,1,0,0,0,4217,4216,1,0,0,0,4218,727,1,0,0,0,4219,4220,3,810,
		405,0,4220,729,1,0,0,0,4221,4222,5,319,0,0,4222,4223,3,732,366,0,4223,
		731,1,0,0,0,4224,4229,3,734,367,0,4225,4226,5,24,0,0,4226,4228,3,734,367,
		0,4227,4225,1,0,0,0,4228,4231,1,0,0,0,4229,4227,1,0,0,0,4229,4230,1,0,
		0,0,4230,733,1,0,0,0,4231,4229,1,0,0,0,4232,4233,3,736,368,0,4233,4234,
		5,49,0,0,4234,4235,3,738,369,0,4235,735,1,0,0,0,4236,4237,3,728,364,0,
		4237,737,1,0,0,0,4238,4239,5,25,0,0,4239,4240,3,740,370,0,4240,4241,5,
		26,0,0,4241,739,1,0,0,0,4242,4244,3,742,371,0,4243,4242,1,0,0,0,4243,4244,
		1,0,0,0,4244,4246,1,0,0,0,4245,4247,3,744,372,0,4246,4245,1,0,0,0,4246,
		4247,1,0,0,0,4247,4249,1,0,0,0,4248,4250,3,746,373,0,4249,4248,1,0,0,0,
		4249,4250,1,0,0,0,4250,4252,1,0,0,0,4251,4253,3,748,374,0,4252,4251,1,
		0,0,0,4252,4253,1,0,0,0,4253,741,1,0,0,0,4254,4255,3,728,364,0,4255,743,
		1,0,0,0,4256,4258,5,217,0,0,4257,4259,5,78,0,0,4258,4257,1,0,0,0,4258,
		4259,1,0,0,0,4259,4260,1,0,0,0,4260,4261,5,66,0,0,4261,4262,3,130,65,0,
		4262,745,1,0,0,0,4263,4264,3,314,157,0,4264,747,1,0,0,0,4265,4266,3,750,
		375,0,4266,4268,3,752,376,0,4267,4269,3,758,379,0,4268,4267,1,0,0,0,4268,
		4269,1,0,0,0,4269,749,1,0,0,0,4270,4271,7,29,0,0,4271,751,1,0,0,0,4272,
		4275,3,756,378,0,4273,4275,3,754,377,0,4274,4272,1,0,0,0,4274,4273,1,0,
		0,0,4275,753,1,0,0,0,4276,4277,5,64,0,0,4277,4278,3,756,378,0,4278,4279,
		5,45,0,0,4279,4280,3,756,378,0,4280,755,1,0,0,0,4281,4282,5,88,0,0,4282,
		4289,5,261,0,0,4283,4286,3,14,7,0,4284,4286,5,301,0,0,4285,4283,1,0,0,
		0,4285,4284,1,0,0,0,4286,4287,1,0,0,0,4287,4289,7,30,0,0,4288,4281,1,0,
		0,0,4288,4285,1,0,0,0,4289,757,1,0,0,0,4290,4291,5,123,0,0,4291,4292,5,
		88,0,0,4292,4301,5,261,0,0,4293,4294,5,123,0,0,4294,4301,5,146,0,0,4295,
		4296,5,123,0,0,4296,4301,5,293,0,0,4297,4298,5,123,0,0,4298,4299,5,196,
		0,0,4299,4301,5,213,0,0,4300,4290,1,0,0,0,4300,4293,1,0,0,0,4300,4295,
		1,0,0,0,4300,4297,1,0,0,0,4301,759,1,0,0,0,4302,4303,5,309,0,0,4303,4304,
		3,826,413,0,4304,761,1,0,0,0,4305,4306,5,25,0,0,4306,4307,3,232,116,0,
		4307,4308,5,26,0,0,4308,4311,1,0,0,0,4309,4311,3,234,117,0,4310,4305,1,
		0,0,0,4310,4309,1,0,0,0,4311,763,1,0,0,0,4312,4313,3,148,74,0,4313,4316,
		5,1,0,0,4314,4317,3,14,7,0,4315,4317,3,762,381,0,4316,4314,1,0,0,0,4316,
		4315,1,0,0,0,4317,765,1,0,0,0,4318,4319,5,77,0,0,4319,767,1,0,0,0,4320,
		4321,5,259,0,0,4321,769,1,0,0,0,4322,4327,3,652,326,0,4323,4324,5,25,0,
		0,4324,4325,3,124,62,0,4325,4326,5,26,0,0,4326,4328,1,0,0,0,4327,4323,
		1,0,0,0,4327,4328,1,0,0,0,4328,771,1,0,0,0,4329,4334,3,770,385,0,4330,
		4331,5,24,0,0,4331,4333,3,770,385,0,4332,4330,1,0,0,0,4333,4336,1,0,0,
		0,4334,4332,1,0,0,0,4334,4335,1,0,0,0,4335,4338,1,0,0,0,4336,4334,1,0,
		0,0,4337,4339,5,24,0,0,4338,4337,1,0,0,0,4338,4339,1,0,0,0,4339,773,1,
		0,0,0,4340,4341,5,44,0,0,4341,4342,3,772,386,0,4342,775,1,0,0,0,4343,4344,
		5,43,0,0,4344,4347,5,274,0,0,4345,4346,5,152,0,0,4346,4348,5,126,0,0,4347,
		4345,1,0,0,0,4347,4348,1,0,0,0,4348,4349,1,0,0,0,4349,4351,3,648,324,0,
		4350,4352,3,778,389,0,4351,4350,1,0,0,0,4352,4353,1,0,0,0,4353,4351,1,
		0,0,0,4353,4354,1,0,0,0,4354,777,1,0,0,0,4355,4357,5,276,0,0,4356,4358,
		5,320,0,0,4357,4356,1,0,0,0,4357,4358,1,0,0,0,4358,4359,1,0,0,0,4359,4372,
		3,864,432,0,4360,4362,5,249,0,0,4361,4363,5,320,0,0,4362,4361,1,0,0,0,
		4362,4363,1,0,0,0,4363,4364,1,0,0,0,4364,4372,3,864,432,0,4365,4372,5,
		249,0,0,4366,4368,5,158,0,0,4367,4369,5,66,0,0,4368,4367,1,0,0,0,4368,
		4369,1,0,0,0,4369,4370,1,0,0,0,4370,4372,3,864,432,0,4371,4355,1,0,0,0,
		4371,4360,1,0,0,0,4371,4365,1,0,0,0,4371,4366,1,0,0,0,4372,779,1,0,0,0,
		4373,4374,7,31,0,0,4374,781,1,0,0,0,4375,4378,3,780,390,0,4376,4378,3,
		838,419,0,4377,4375,1,0,0,0,4377,4376,1,0,0,0,4378,783,1,0,0,0,4379,4387,
		3,780,390,0,4380,4387,3,856,428,0,4381,4387,3,840,420,0,4382,4387,3,844,
		422,0,4383,4387,3,848,424,0,4384,4387,3,850,425,0,4385,4387,3,852,426,
		0,4386,4379,1,0,0,0,4386,4380,1,0,0,0,4386,4381,1,0,0,0,4386,4382,1,0,
		0,0,4386,4383,1,0,0,0,4386,4384,1,0,0,0,4386,4385,1,0,0,0,4387,785,1,0,
		0,0,4388,4395,3,780,390,0,4389,4395,3,856,428,0,4390,4395,3,846,423,0,
		4391,4395,3,848,424,0,4392,4395,3,850,425,0,4393,4395,3,852,426,0,4394,
		4388,1,0,0,0,4394,4389,1,0,0,0,4394,4390,1,0,0,0,4394,4391,1,0,0,0,4394,
		4392,1,0,0,0,4394,4393,1,0,0,0,4395,787,1,0,0,0,4396,4402,3,780,390,0,
		4397,4402,3,856,428,0,4398,4402,3,846,423,0,4399,4402,3,850,425,0,4400,
		4402,3,852,426,0,4401,4396,1,0,0,0,4401,4397,1,0,0,0,4401,4398,1,0,0,0,
		4401,4399,1,0,0,0,4401,4400,1,0,0,0,4402,789,1,0,0,0,4403,4412,3,780,390,
		0,4404,4412,3,856,428,0,4405,4412,3,840,420,0,4406,4412,3,842,421,0,4407,
		4412,3,844,422,0,4408,4412,3,846,423,0,4409,4412,3,848,424,0,4410,4412,
		3,852,426,0,4411,4403,1,0,0,0,4411,4404,1,0,0,0,4411,4405,1,0,0,0,4411,
		4406,1,0,0,0,4411,4407,1,0,0,0,4411,4408,1,0,0,0,4411,4409,1,0,0,0,4411,
		4410,1,0,0,0,4412,791,1,0,0,0,4413,4421,3,780,390,0,4414,4421,3,856,428,
		0,4415,4421,3,840,420,0,4416,4421,3,844,422,0,4417,4421,3,848,424,0,4418,
		4421,3,850,425,0,4419,4421,3,852,426,0,4420,4413,1,0,0,0,4420,4414,1,0,
		0,0,4420,4415,1,0,0,0,4420,4416,1,0,0,0,4420,4417,1,0,0,0,4420,4418,1,
		0,0,0,4420,4419,1,0,0,0,4421,793,1,0,0,0,4422,4430,3,780,390,0,4423,4430,
		3,856,428,0,4424,4430,3,842,421,0,4425,4430,3,846,423,0,4426,4430,3,848,
		424,0,4427,4430,3,850,425,0,4428,4430,3,852,426,0,4429,4422,1,0,0,0,4429,
		4423,1,0,0,0,4429,4424,1,0,0,0,4429,4425,1,0,0,0,4429,4426,1,0,0,0,4429,
		4427,1,0,0,0,4429,4428,1,0,0,0,4430,795,1,0,0,0,4431,4440,3,780,390,0,
		4432,4440,3,856,428,0,4433,4440,3,840,420,0,4434,4440,3,842,421,0,4435,
		4440,3,844,422,0,4436,4440,3,846,423,0,4437,4440,3,848,424,0,4438,4440,
		3,850,425,0,4439,4431,1,0,0,0,4439,4432,1,0,0,0,4439,4433,1,0,0,0,4439,
		4434,1,0,0,0,4439,4435,1,0,0,0,4439,4436,1,0,0,0,4439,4437,1,0,0,0,4439,
		4438,1,0,0,0,4440,797,1,0,0,0,4441,4444,3,780,390,0,4442,4444,3,854,427,
		0,4443,4441,1,0,0,0,4443,4442,1,0,0,0,4444,799,1,0,0,0,4445,4448,3,782,
		391,0,4446,4448,5,324,0,0,4447,4445,1,0,0,0,4447,4446,1,0,0,0,4448,801,
		1,0,0,0,4449,4452,3,828,414,0,4450,4452,5,324,0,0,4451,4449,1,0,0,0,4451,
		4450,1,0,0,0,4452,803,1,0,0,0,4453,4456,3,784,392,0,4454,4456,5,324,0,
		0,4455,4453,1,0,0,0,4455,4454,1,0,0,0,4456,805,1,0,0,0,4457,4460,3,786,
		393,0,4458,4460,5,324,0,0,4459,4457,1,0,0,0,4459,4458,1,0,0,0,4460,807,
		1,0,0,0,4461,4464,3,788,394,0,4462,4464,5,324,0,0,4463,4461,1,0,0,0,4463,
		4462,1,0,0,0,4464,809,1,0,0,0,4465,4468,3,790,395,0,4466,4468,5,324,0,
		0,4467,4465,1,0,0,0,4467,4466,1,0,0,0,4468,811,1,0,0,0,4469,4472,3,792,
		396,0,4470,4472,5,324,0,0,4471,4469,1,0,0,0,4471,4470,1,0,0,0,4472,813,
		1,0,0,0,4473,4476,3,794,397,0,4474,4476,5,324,0,0,4475,4473,1,0,0,0,4475,
		4474,1,0,0,0,4476,815,1,0,0,0,4477,4480,3,796,398,0,4478,4480,5,324,0,
		0,4479,4477,1,0,0,0,4479,4478,1,0,0,0,4480,817,1,0,0,0,4481,4484,3,780,
		390,0,4482,4484,5,324,0,0,4483,4481,1,0,0,0,4483,4482,1,0,0,0,4484,819,
		1,0,0,0,4485,4488,3,798,399,0,4486,4488,5,324,0,0,4487,4485,1,0,0,0,4487,
		4486,1,0,0,0,4488,821,1,0,0,0,4489,4493,3,800,400,0,4490,4491,5,229,0,
		0,4491,4493,5,176,0,0,4492,4489,1,0,0,0,4492,4490,1,0,0,0,4493,823,1,0,
		0,0,4494,4495,3,800,400,0,4495,4496,5,23,0,0,4496,4498,1,0,0,0,4497,4494,
		1,0,0,0,4497,4498,1,0,0,0,4498,825,1,0,0,0,4499,4500,3,800,400,0,4500,
		4501,5,28,0,0,4501,4503,1,0,0,0,4502,4499,1,0,0,0,4502,4503,1,0,0,0,4503,
		4506,1,0,0,0,4504,4507,3,116,58,0,4505,4507,5,19,0,0,4506,4504,1,0,0,0,
		4506,4505,1,0,0,0,4507,827,1,0,0,0,4508,4511,3,782,391,0,4509,4511,3,858,
		429,0,4510,4508,1,0,0,0,4510,4509,1,0,0,0,4511,829,1,0,0,0,4512,4513,3,
		802,401,0,4513,4514,5,23,0,0,4514,4516,1,0,0,0,4515,4512,1,0,0,0,4515,
		4516,1,0,0,0,4516,831,1,0,0,0,4517,4519,5,29,0,0,4518,4517,1,0,0,0,4518,
		4519,1,0,0,0,4519,4520,1,0,0,0,4520,4521,3,802,401,0,4521,833,1,0,0,0,
		4522,4525,3,812,406,0,4523,4525,3,858,429,0,4524,4522,1,0,0,0,4524,4523,
		1,0,0,0,4525,835,1,0,0,0,4526,4528,5,29,0,0,4527,4526,1,0,0,0,4527,4528,
		1,0,0,0,4528,4529,1,0,0,0,4529,4530,3,834,417,0,4530,837,1,0,0,0,4531,
		4540,3,856,428,0,4532,4540,3,840,420,0,4533,4540,3,842,421,0,4534,4540,
		3,844,422,0,4535,4540,3,846,423,0,4536,4540,3,848,424,0,4537,4540,3,850,
		425,0,4538,4540,3,852,426,0,4539,4531,1,0,0,0,4539,4532,1,0,0,0,4539,4533,
		1,0,0,0,4539,4534,1,0,0,0,4539,4535,1,0,0,0,4539,4536,1,0,0,0,4539,4537,
		1,0,0,0,4539,4538,1,0,0,0,4540,839,1,0,0,0,4541,4542,7,32,0,0,4542,841,
		1,0,0,0,4543,4544,7,33,0,0,4544,843,1,0,0,0,4545,4546,7,34,0,0,4546,845,
		1,0,0,0,4547,4548,5,75,0,0,4548,847,1,0,0,0,4549,4550,5,78,0,0,4550,849,
		1,0,0,0,4551,4552,7,29,0,0,4552,851,1,0,0,0,4553,4554,7,28,0,0,4554,853,
		1,0,0,0,4555,4556,7,35,0,0,4556,855,1,0,0,0,4557,4558,7,36,0,0,4558,857,
		1,0,0,0,4559,4560,7,37,0,0,4560,859,1,0,0,0,4561,4562,7,38,0,0,4562,861,
		1,0,0,0,4563,4564,5,329,0,0,4564,863,1,0,0,0,4565,4566,7,39,0,0,4566,865,
		1,0,0,0,505,871,876,883,888,894,902,910,917,921,929,934,939,941,1002,1009,
		1013,1020,1028,1033,1037,1043,1049,1052,1056,1064,1068,1071,1075,1086,
		1091,1093,1102,1123,1128,1137,1139,1146,1154,1162,1169,1179,1181,1185,
		1190,1194,1200,1206,1210,1214,1217,1224,1230,1234,1239,1242,1256,1261,
		1264,1278,1285,1296,1307,1327,1333,1338,1342,1356,1358,1365,1371,1382,
		1390,1396,1403,1411,1424,1430,1434,1437,1439,1447,1455,1461,1467,1473,
		1476,1485,1494,1501,1509,1522,1529,1533,1540,1544,1549,1556,1563,1566,
		1573,1577,1587,1610,1616,1620,1627,1633,1640,1644,1648,1654,1659,1668,
		1671,1677,1682,1690,1697,1719,1723,1725,1729,1738,1742,1744,1748,1757,
		1761,1799,1803,1823,1826,1832,1852,1857,1863,1868,1871,1875,1902,1910,
		1913,1920,1933,1937,1949,1962,1967,1974,1978,1985,1994,2003,2011,2015,
		2019,2026,2028,2031,2036,2041,2045,2052,2059,2063,2067,2071,2075,2077,
		2088,2097,2102,2108,2113,2117,2121,2125,2128,2132,2136,2144,2148,2152,
		2156,2160,2163,2167,2170,2173,2178,2181,2184,2187,2201,2203,2214,2224,
		2234,2237,2244,2268,2279,2285,2289,2293,2297,2301,2305,2309,2313,2319,
		2326,2336,2347,2360,2376,2386,2406,2412,2419,2426,2434,2443,2480,2482,
		2485,2490,2494,2498,2504,2510,2514,2519,2524,2526,2530,2535,2538,2540,
		2544,2555,2566,2577,2581,2585,2589,2592,2596,2599,2605,2614,2617,2631,
		2637,2640,2645,2652,2659,2668,2673,2681,2696,2702,2710,2719,2723,2732,
		2744,2751,2759,2780,2788,2797,2807,2816,2821,2828,2838,2843,2852,2856,
		2860,2863,2866,2869,2872,2880,2885,2896,2903,2916,2924,2929,2936,2949,
		2960,2970,2976,2985,3002,3025,3045,3056,3064,3074,3079,3083,3089,3127,
		3139,3181,3189,3192,3196,3200,3210,3223,3236,3241,3253,3264,3269,3272,
		3276,3280,3284,3287,3300,3304,3316,3330,3345,3360,3363,3373,3376,3384,
		3396,3399,3409,3417,3423,3431,3439,3446,3450,3460,3467,3472,3477,3489,
		3493,3495,3507,3511,3516,3522,3529,3533,3537,3541,3544,3559,3568,3572,
		3577,3583,3592,3601,3618,3622,3626,3628,3632,3639,3643,3647,3649,3666,
		3671,3695,3700,3718,3735,3751,3766,3773,3781,3792,3799,3804,3810,3813,
		3816,3823,3826,3829,3838,3843,3846,3856,3860,3862,3869,3872,3876,3878,
		3881,3886,3889,3894,3904,3909,3920,3924,3928,3930,3934,3939,3947,3950,
		3953,3956,3961,3967,3970,3974,3980,3989,3992,4000,4004,4007,4011,4018,
		4039,4049,4053,4056,4064,4080,4088,4096,4104,4113,4131,4148,4157,4166,
		4185,4197,4207,4217,4229,4243,4246,4249,4252,4258,4268,4274,4285,4288,
		4300,4310,4316,4327,4334,4338,4347,4353,4357,4362,4368,4371,4377,4386,
		4394,4401,4411,4420,4429,4439,4443,4447,4451,4455,4459,4463,4467,4471,
		4475,4479,4483,4487,4492,4497,4502,4506,4510,4515,4518,4524,4527,4539
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace YQLAntlr4Parser
