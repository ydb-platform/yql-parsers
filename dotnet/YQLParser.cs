//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from YQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace YQLAntlr4Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, EQUALS2=2, NOT_EQUALS=3, NOT_EQUALS2=4, LESS=5, LESS_OR_EQ=6, 
		GREATER=7, GREATER_OR_EQ=8, SHIFT_LEFT=9, ROT_LEFT=10, AMPERSAND=11, PIPE=12, 
		DOUBLE_PIPE=13, STRUCT_OPEN=14, STRUCT_CLOSE=15, PLUS=16, MINUS=17, TILDA=18, 
		ASTERISK=19, SLASH=20, PERCENT=21, SEMICOLON=22, DOT=23, COMMA=24, LPAREN=25, 
		RPAREN=26, QUESTION=27, COLON=28, COMMAT=29, DOLLAR=30, LBRACE_CURLY=31, 
		RBRACE_CURLY=32, CARET=33, NAMESPACE=34, ARROW=35, RBRACE_SQUARE=36, LBRACE_SQUARE=37, 
		ABORT=38, ACTION=39, ADD=40, AFTER=41, ALL=42, ALTER=43, ANALYZE=44, AND=45, 
		ANSI=46, ANY=47, ARRAY=48, AS=49, ASC=50, ASSUME=51, ASYMMETRIC=52, ASYNC=53, 
		AT=54, ATTACH=55, ATTRIBUTES=56, AUTOINCREMENT=57, AUTOMAP=58, BACKUP=59, 
		BATCH=60, COLLECTION=61, BEFORE=62, BEGIN=63, BERNOULLI=64, BETWEEN=65, 
		BITCAST=66, BY=67, CALLABLE=68, CASCADE=69, CASE=70, CAST=71, CHANGEFEED=72, 
		CHECK=73, CLASSIFIER=74, COLLATE=75, COLUMN=76, COLUMNS=77, COMMIT=78, 
		COMPACT=79, CONDITIONAL=80, CONFLICT=81, CONNECT=82, CONSTRAINT=83, CONSUMER=84, 
		COVER=85, CREATE=86, CROSS=87, CUBE=88, CURRENT=89, CURRENT_DATE=90, CURRENT_TIME=91, 
		CURRENT_TIMESTAMP=92, DATA=93, DATABASE=94, DECIMAL=95, DECLARE=96, DEFAULT=97, 
		DEFERRABLE=98, DEFERRED=99, DEFINE=100, DELETE=101, DESC=102, DESCRIBE=103, 
		DETACH=104, DICT=105, DIRECTORY=106, DISABLE=107, DISCARD=108, DISTINCT=109, 
		DO=110, DROP=111, EACH=112, ELSE=113, EMPTY=114, EMPTY_ACTION=115, ENCRYPTED=116, 
		END=117, ENUM=118, ERASE=119, ERROR=120, ESCAPE=121, EVALUATE=122, EXCEPT=123, 
		EXCLUDE=124, EXCLUSION=125, EXCLUSIVE=126, EXISTS=127, EXPLAIN=128, EXPORT=129, 
		EXTERNAL=130, FAIL=131, FALSE=132, FAMILY=133, FILTER=134, FIRST=135, 
		FLATTEN=136, FLOW=137, FOLLOWING=138, FOR=139, FOREIGN=140, FROM=141, 
		FULL=142, FUNCTION=143, GLOB=144, GLOBAL=145, GRANT=146, GROUP=147, GROUPING=148, 
		GROUPS=149, HASH=150, HAVING=151, HOP=152, IF=153, IGNORE=154, ILIKE=155, 
		IMMEDIATE=156, IMPORT=157, IN=158, INCREMENT=159, INCREMENTAL=160, INDEX=161, 
		INDEXED=162, INHERITS=163, INITIAL=164, INITIALLY=165, INNER=166, INSERT=167, 
		INSTEAD=168, INTERSECT=169, INTO=170, IS=171, ISNULL=172, JOIN=173, JSON_EXISTS=174, 
		JSON_QUERY=175, JSON_VALUE=176, KEY=177, LAST=178, LEFT=179, LEGACY=180, 
		LIKE=181, LIMIT=182, LIST=183, LOCAL=184, LOGIN=185, MANAGE=186, MATCH=187, 
		MATCHES=188, MATCH_RECOGNIZE=189, MEASURES=190, MICROSECONDS=191, MILLISECONDS=192, 
		MODIFY=193, NANOSECONDS=194, NATURAL=195, NEXT=196, NO=197, NOLOGIN=198, 
		NOT=199, NOTNULL=200, NULL=201, NULLS=202, OBJECT=203, OF=204, OFFSET=205, 
		OMIT=206, ON=207, ONE=208, ONLY=209, OPTION=210, OPTIONAL=211, OR=212, 
		ORDER=213, OTHERS=214, OUTER=215, OVER=216, OWNER=217, PARALLEL=218, PARTITION=219, 
		PASSING=220, PASSWORD=221, PAST=222, PATTERN=223, PER=224, PERMUTE=225, 
		PLAN=226, POOL=227, PRAGMA=228, PRECEDING=229, PRESORT=230, PRIMARY=231, 
		PRIVILEGES=232, PROCESS=233, QUERY=234, QUEUE=235, RAISE=236, RANGE=237, 
		REDUCE=238, REFERENCES=239, REGEXP=240, REINDEX=241, RELEASE=242, REMOVE=243, 
		RENAME=244, REPEATABLE=245, REPLACE=246, REPLICATION=247, RESET=248, RESOURCE=249, 
		RESPECT=250, RESTART=251, RESTORE=252, RESTRICT=253, RESULT=254, RETURN=255, 
		RETURNING=256, REVERT=257, REVOKE=258, RIGHT=259, RLIKE=260, ROLLBACK=261, 
		ROLLUP=262, ROW=263, ROWS=264, SAMPLE=265, SAVEPOINT=266, SCHEMA=267, 
		SECONDS=268, SEEK=269, SELECT=270, SEMI=271, SET=272, SETS=273, SHOW=274, 
		TSKIP=275, SEQUENCE=276, SOURCE=277, START=278, STREAM=279, STRUCT=280, 
		SUBQUERY=281, SUBSET=282, SYMBOLS=283, SYMMETRIC=284, SYNC=285, SYSTEM=286, 
		TABLE=287, TABLES=288, TABLESAMPLE=289, TABLESTORE=290, TAGGED=291, TEMP=292, 
		TEMPORARY=293, THEN=294, TIES=295, TO=296, TOPIC=297, TRANSACTION=298, 
		TRANSFER=299, TRIGGER=300, TRUE=301, TUPLE=302, TYPE=303, UNBOUNDED=304, 
		UNCONDITIONAL=305, UNION=306, UNIQUE=307, UNKNOWN=308, UNMATCHED=309, 
		UPDATE=310, UPSERT=311, USE=312, USER=313, USING=314, VACUUM=315, VALUES=316, 
		VARIANT=317, VIEW=318, VIRTUAL=319, WHEN=320, WHERE=321, WINDOW=322, WITH=323, 
		WITHOUT=324, WRAPPER=325, XOR=326, STRING_VALUE=327, ID_PLAIN=328, ID_QUOTED=329, 
		DIGITS=330, INTEGER_VALUE=331, REAL=332, BLOB=333, WS=334, COMMENT=335;
	public const int
		RULE_sql_query = 0, RULE_sql_stmt_list = 1, RULE_ansi_sql_stmt_list = 2, 
		RULE_lambda_body = 3, RULE_lambda_stmt = 4, RULE_sql_stmt = 5, RULE_sql_stmt_core = 6, 
		RULE_expr = 7, RULE_or_subexpr = 8, RULE_and_subexpr = 9, RULE_xor_subexpr = 10, 
		RULE_distinct_from_op = 11, RULE_cond_expr = 12, RULE_match_op = 13, RULE_eq_subexpr = 14, 
		RULE_shift_right = 15, RULE_rot_right = 16, RULE_double_question = 17, 
		RULE_neq_subexpr = 18, RULE_bit_subexpr = 19, RULE_add_subexpr = 20, RULE_mul_subexpr = 21, 
		RULE_con_subexpr = 22, RULE_unary_op = 23, RULE_unary_subexpr_suffix = 24, 
		RULE_unary_casual_subexpr = 25, RULE_in_unary_casual_subexpr = 26, RULE_unary_subexpr = 27, 
		RULE_in_unary_subexpr = 28, RULE_list_literal = 29, RULE_expr_dict_list = 30, 
		RULE_dict_literal = 31, RULE_expr_struct_list = 32, RULE_struct_literal = 33, 
		RULE_atom_expr = 34, RULE_in_atom_expr = 35, RULE_cast_expr = 36, RULE_bitcast_expr = 37, 
		RULE_exists_expr = 38, RULE_case_expr = 39, RULE_lambda = 40, RULE_in_expr = 41, 
		RULE_json_api_expr = 42, RULE_jsonpath_spec = 43, RULE_json_variable_name = 44, 
		RULE_json_variable = 45, RULE_json_variables = 46, RULE_json_common_args = 47, 
		RULE_json_case_handler = 48, RULE_json_value = 49, RULE_json_exists_handler = 50, 
		RULE_json_exists = 51, RULE_json_query_wrapper = 52, RULE_json_query_handler = 53, 
		RULE_json_query = 54, RULE_smart_parenthesis = 55, RULE_expr_list = 56, 
		RULE_pure_column_list = 57, RULE_pure_column_or_named = 58, RULE_pure_column_or_named_list = 59, 
		RULE_column_name = 60, RULE_without_column_name = 61, RULE_column_list = 62, 
		RULE_without_column_list = 63, RULE_named_expr = 64, RULE_named_expr_list = 65, 
		RULE_invoke_expr = 66, RULE_invoke_expr_tail = 67, RULE_using_call_expr = 68, 
		RULE_key_expr = 69, RULE_when_expr = 70, RULE_literal_value = 71, RULE_bind_parameter = 72, 
		RULE_opt_bind_parameter = 73, RULE_bind_parameter_list = 74, RULE_named_bind_parameter = 75, 
		RULE_named_bind_parameter_list = 76, RULE_signed_number = 77, RULE_type_name_simple = 78, 
		RULE_integer_or_bind = 79, RULE_type_name_tag = 80, RULE_struct_arg = 81, 
		RULE_struct_arg_positional = 82, RULE_variant_arg = 83, RULE_callable_arg = 84, 
		RULE_callable_arg_list = 85, RULE_type_name_decimal = 86, RULE_type_name_optional = 87, 
		RULE_type_name_tuple = 88, RULE_type_name_struct = 89, RULE_type_name_variant = 90, 
		RULE_type_name_list = 91, RULE_type_name_stream = 92, RULE_type_name_flow = 93, 
		RULE_type_name_dict = 94, RULE_type_name_set = 95, RULE_type_name_enum = 96, 
		RULE_type_name_resource = 97, RULE_type_name_tagged = 98, RULE_type_name_callable = 99, 
		RULE_type_name_composite = 100, RULE_type_name = 101, RULE_type_name_or_bind = 102, 
		RULE_value_constructor_literal = 103, RULE_value_constructor = 104, RULE_declare_stmt = 105, 
		RULE_module_path = 106, RULE_import_stmt = 107, RULE_export_stmt = 108, 
		RULE_call_action = 109, RULE_inline_action = 110, RULE_do_stmt = 111, 
		RULE_pragma_stmt = 112, RULE_pragma_value = 113, RULE_sort_specification = 114, 
		RULE_sort_specification_list = 115, RULE_select_stmt = 116, RULE_select_unparenthesized_stmt = 117, 
		RULE_select_kind_parenthesis = 118, RULE_select_op = 119, RULE_select_kind_partial = 120, 
		RULE_select_kind = 121, RULE_process_core = 122, RULE_external_call_param = 123, 
		RULE_external_call_settings = 124, RULE_reduce_core = 125, RULE_opt_set_quantifier = 126, 
		RULE_select_core = 127, RULE_row_pattern_recognition_clause = 128, RULE_row_pattern_rows_per_match = 129, 
		RULE_row_pattern_empty_match_handling = 130, RULE_row_pattern_measures = 131, 
		RULE_row_pattern_measure_list = 132, RULE_row_pattern_measure_definition = 133, 
		RULE_row_pattern_common_syntax = 134, RULE_row_pattern_skip_to = 135, 
		RULE_row_pattern_skip_to_variable_name = 136, RULE_row_pattern_initial_or_seek = 137, 
		RULE_row_pattern = 138, RULE_row_pattern_term = 139, RULE_row_pattern_factor = 140, 
		RULE_row_pattern_quantifier = 141, RULE_row_pattern_primary = 142, RULE_row_pattern_primary_variable_name = 143, 
		RULE_row_pattern_permute = 144, RULE_row_pattern_subset_clause = 145, 
		RULE_row_pattern_subset_list = 146, RULE_row_pattern_subset_item = 147, 
		RULE_row_pattern_subset_item_variable_name = 148, RULE_row_pattern_subset_rhs = 149, 
		RULE_row_pattern_subset_rhs_variable_name = 150, RULE_row_pattern_definition_list = 151, 
		RULE_row_pattern_definition = 152, RULE_row_pattern_definition_variable_name = 153, 
		RULE_row_pattern_definition_search_condition = 154, RULE_search_condition = 155, 
		RULE_row_pattern_variable_name = 156, RULE_order_by_clause = 157, RULE_ext_order_by_clause = 158, 
		RULE_group_by_clause = 159, RULE_grouping_element_list = 160, RULE_grouping_element = 161, 
		RULE_ordinary_grouping_set = 162, RULE_ordinary_grouping_set_list = 163, 
		RULE_rollup_list = 164, RULE_cube_list = 165, RULE_grouping_sets_specification = 166, 
		RULE_hopping_window_specification = 167, RULE_result_column = 168, RULE_join_source = 169, 
		RULE_named_column = 170, RULE_flatten_by_arg = 171, RULE_flatten_source = 172, 
		RULE_named_single_source = 173, RULE_single_source = 174, RULE_sample_clause = 175, 
		RULE_tablesample_clause = 176, RULE_sampling_mode = 177, RULE_repeatable_clause = 178, 
		RULE_join_op = 179, RULE_join_constraint = 180, RULE_returning_columns_list = 181, 
		RULE_into_table_stmt = 182, RULE_into_values_source = 183, RULE_values_stmt = 184, 
		RULE_values_source = 185, RULE_values_source_row_list = 186, RULE_values_source_row = 187, 
		RULE_simple_values_source = 188, RULE_create_external_data_source_stmt = 189, 
		RULE_alter_external_data_source_stmt = 190, RULE_alter_external_data_source_action = 191, 
		RULE_drop_external_data_source_stmt = 192, RULE_create_view_stmt = 193, 
		RULE_drop_view_stmt = 194, RULE_upsert_object_stmt = 195, RULE_create_object_stmt = 196, 
		RULE_create_object_features = 197, RULE_alter_object_stmt = 198, RULE_alter_object_features = 199, 
		RULE_drop_object_stmt = 200, RULE_drop_object_features = 201, RULE_object_feature_value = 202, 
		RULE_object_feature_kv = 203, RULE_object_feature_flag = 204, RULE_object_feature = 205, 
		RULE_object_features = 206, RULE_object_type_ref = 207, RULE_create_table_stmt = 208, 
		RULE_create_table_entry = 209, RULE_create_backup_collection_stmt = 210, 
		RULE_alter_backup_collection_stmt = 211, RULE_drop_backup_collection_stmt = 212, 
		RULE_create_backup_collection_entries = 213, RULE_create_backup_collection_entries_many = 214, 
		RULE_table_list = 215, RULE_alter_backup_collection_actions = 216, RULE_alter_backup_collection_action = 217, 
		RULE_alter_backup_collection_entries = 218, RULE_alter_backup_collection_entry = 219, 
		RULE_backup_collection = 220, RULE_backup_collection_settings = 221, RULE_backup_collection_settings_entry = 222, 
		RULE_backup_stmt = 223, RULE_restore_stmt = 224, RULE_alter_database_stmt = 225, 
		RULE_table_inherits = 226, RULE_table_partition_by = 227, RULE_with_table_settings = 228, 
		RULE_table_tablestore = 229, RULE_table_settings_entry = 230, RULE_table_as_source = 231, 
		RULE_alter_table_stmt = 232, RULE_alter_table_action = 233, RULE_alter_external_table_stmt = 234, 
		RULE_alter_external_table_action = 235, RULE_alter_table_store_stmt = 236, 
		RULE_alter_table_store_action = 237, RULE_alter_table_add_column = 238, 
		RULE_alter_table_drop_column = 239, RULE_alter_table_alter_column = 240, 
		RULE_alter_table_alter_column_drop_not_null = 241, RULE_alter_table_add_column_family = 242, 
		RULE_alter_table_alter_column_family = 243, RULE_alter_table_set_table_setting_uncompat = 244, 
		RULE_alter_table_set_table_setting_compat = 245, RULE_alter_table_reset_table_setting = 246, 
		RULE_alter_table_add_index = 247, RULE_alter_table_drop_index = 248, RULE_alter_table_rename_to = 249, 
		RULE_alter_table_rename_index_to = 250, RULE_alter_table_add_changefeed = 251, 
		RULE_alter_table_alter_changefeed = 252, RULE_alter_table_drop_changefeed = 253, 
		RULE_alter_table_alter_index = 254, RULE_column_schema = 255, RULE_family_relation = 256, 
		RULE_opt_column_constraints = 257, RULE_column_order_by_specification = 258, 
		RULE_table_constraint = 259, RULE_table_index = 260, RULE_table_index_type = 261, 
		RULE_global_index = 262, RULE_local_index = 263, RULE_index_subtype = 264, 
		RULE_with_index_settings = 265, RULE_index_setting_entry = 266, RULE_index_setting_value = 267, 
		RULE_changefeed = 268, RULE_changefeed_settings = 269, RULE_changefeed_settings_entry = 270, 
		RULE_changefeed_setting_value = 271, RULE_changefeed_alter_settings = 272, 
		RULE_alter_table_setting_entry = 273, RULE_table_setting_value = 274, 
		RULE_ttl_tier_list = 275, RULE_ttl_tier_action = 276, RULE_family_entry = 277, 
		RULE_family_settings = 278, RULE_family_settings_entry = 279, RULE_family_setting_value = 280, 
		RULE_split_boundaries = 281, RULE_literal_value_list = 282, RULE_alter_table_alter_index_action = 283, 
		RULE_drop_table_stmt = 284, RULE_create_user_stmt = 285, RULE_alter_user_stmt = 286, 
		RULE_create_group_stmt = 287, RULE_alter_group_stmt = 288, RULE_drop_role_stmt = 289, 
		RULE_role_name = 290, RULE_user_option = 291, RULE_authentication_option = 292, 
		RULE_password_option = 293, RULE_password_value = 294, RULE_hash_option = 295, 
		RULE_login_option = 296, RULE_grant_permissions_stmt = 297, RULE_revoke_permissions_stmt = 298, 
		RULE_permission_id = 299, RULE_permission_name = 300, RULE_permission_name_target = 301, 
		RULE_create_resource_pool_stmt = 302, RULE_alter_resource_pool_stmt = 303, 
		RULE_alter_resource_pool_action = 304, RULE_drop_resource_pool_stmt = 305, 
		RULE_create_resource_pool_classifier_stmt = 306, RULE_alter_resource_pool_classifier_stmt = 307, 
		RULE_alter_resource_pool_classifier_action = 308, RULE_drop_resource_pool_classifier_stmt = 309, 
		RULE_create_replication_stmt = 310, RULE_replication_target = 311, RULE_replication_settings = 312, 
		RULE_replication_settings_entry = 313, RULE_alter_replication_stmt = 314, 
		RULE_alter_replication_action = 315, RULE_alter_replication_set_setting = 316, 
		RULE_drop_replication_stmt = 317, RULE_lambda_or_parameter = 318, RULE_create_transfer_stmt = 319, 
		RULE_transfer_settings = 320, RULE_transfer_settings_entry = 321, RULE_alter_transfer_stmt = 322, 
		RULE_alter_transfer_action = 323, RULE_alter_transfer_set_setting = 324, 
		RULE_alter_transfer_set_using = 325, RULE_drop_transfer_stmt = 326, RULE_action_or_subquery_args = 327, 
		RULE_define_action_or_subquery_stmt = 328, RULE_define_action_or_subquery_body = 329, 
		RULE_if_stmt = 330, RULE_for_stmt = 331, RULE_table_ref = 332, RULE_table_key = 333, 
		RULE_table_arg = 334, RULE_table_hints = 335, RULE_table_hint = 336, RULE_object_ref = 337, 
		RULE_simple_table_ref_core = 338, RULE_simple_table_ref = 339, RULE_into_simple_table_ref = 340, 
		RULE_delete_stmt = 341, RULE_update_stmt = 342, RULE_set_clause_choice = 343, 
		RULE_set_clause_list = 344, RULE_set_clause = 345, RULE_set_target = 346, 
		RULE_multiple_column_assignment = 347, RULE_set_target_list = 348, RULE_create_topic_stmt = 349, 
		RULE_create_topic_entries = 350, RULE_create_topic_entry = 351, RULE_with_topic_settings = 352, 
		RULE_alter_topic_stmt = 353, RULE_alter_topic_action = 354, RULE_alter_topic_add_consumer = 355, 
		RULE_topic_create_consumer_entry = 356, RULE_alter_topic_alter_consumer = 357, 
		RULE_alter_topic_alter_consumer_entry = 358, RULE_alter_topic_drop_consumer = 359, 
		RULE_topic_alter_consumer_set = 360, RULE_topic_alter_consumer_reset = 361, 
		RULE_alter_topic_set_settings = 362, RULE_alter_topic_reset_settings = 363, 
		RULE_drop_topic_stmt = 364, RULE_topic_settings = 365, RULE_topic_settings_entry = 366, 
		RULE_topic_setting_value = 367, RULE_topic_consumer_with_settings = 368, 
		RULE_topic_consumer_settings = 369, RULE_topic_consumer_settings_entry = 370, 
		RULE_topic_consumer_setting_value = 371, RULE_topic_ref = 372, RULE_topic_consumer_ref = 373, 
		RULE_null_treatment = 374, RULE_filter_clause = 375, RULE_window_name_or_specification = 376, 
		RULE_window_name = 377, RULE_window_clause = 378, RULE_window_definition_list = 379, 
		RULE_window_definition = 380, RULE_new_window_name = 381, RULE_window_specification = 382, 
		RULE_window_specification_details = 383, RULE_existing_window_name = 384, 
		RULE_window_partition_clause = 385, RULE_window_order_clause = 386, RULE_window_frame_clause = 387, 
		RULE_window_frame_units = 388, RULE_window_frame_extent = 389, RULE_window_frame_between = 390, 
		RULE_window_frame_bound = 391, RULE_window_frame_exclusion = 392, RULE_use_stmt = 393, 
		RULE_subselect_stmt = 394, RULE_named_nodes_stmt = 395, RULE_commit_stmt = 396, 
		RULE_rollback_stmt = 397, RULE_analyze_table = 398, RULE_analyze_table_list = 399, 
		RULE_analyze_stmt = 400, RULE_alter_sequence_stmt = 401, RULE_alter_sequence_action = 402, 
		RULE_show_create_table_stmt = 403, RULE_identifier = 404, RULE_id = 405, 
		RULE_id_schema = 406, RULE_id_expr = 407, RULE_id_expr_in = 408, RULE_id_window = 409, 
		RULE_id_table = 410, RULE_id_without = 411, RULE_id_hint = 412, RULE_id_as_compat = 413, 
		RULE_an_id = 414, RULE_an_id_or_type = 415, RULE_an_id_schema = 416, RULE_an_id_expr = 417, 
		RULE_an_id_expr_in = 418, RULE_an_id_window = 419, RULE_an_id_table = 420, 
		RULE_an_id_without = 421, RULE_an_id_hint = 422, RULE_an_id_pure = 423, 
		RULE_an_id_as_compat = 424, RULE_view_name = 425, RULE_opt_id_prefix = 426, 
		RULE_cluster_expr = 427, RULE_id_or_type = 428, RULE_opt_id_prefix_or_type = 429, 
		RULE_id_or_at = 430, RULE_id_table_or_type = 431, RULE_id_table_or_at = 432, 
		RULE_keyword = 433, RULE_keyword_expr_uncompat = 434, RULE_keyword_table_uncompat = 435, 
		RULE_keyword_select_uncompat = 436, RULE_keyword_alter_uncompat = 437, 
		RULE_keyword_in_uncompat = 438, RULE_keyword_window_uncompat = 439, RULE_keyword_hint_uncompat = 440, 
		RULE_keyword_as_compat = 441, RULE_keyword_compat = 442, RULE_type_id = 443, 
		RULE_bool_value = 444, RULE_real = 445, RULE_integer = 446;
	public static readonly string[] ruleNames = {
		"sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", "lambda_stmt", 
		"sql_stmt", "sql_stmt_core", "expr", "or_subexpr", "and_subexpr", "xor_subexpr", 
		"distinct_from_op", "cond_expr", "match_op", "eq_subexpr", "shift_right", 
		"rot_right", "double_question", "neq_subexpr", "bit_subexpr", "add_subexpr", 
		"mul_subexpr", "con_subexpr", "unary_op", "unary_subexpr_suffix", "unary_casual_subexpr", 
		"in_unary_casual_subexpr", "unary_subexpr", "in_unary_subexpr", "list_literal", 
		"expr_dict_list", "dict_literal", "expr_struct_list", "struct_literal", 
		"atom_expr", "in_atom_expr", "cast_expr", "bitcast_expr", "exists_expr", 
		"case_expr", "lambda", "in_expr", "json_api_expr", "jsonpath_spec", "json_variable_name", 
		"json_variable", "json_variables", "json_common_args", "json_case_handler", 
		"json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
		"json_query_handler", "json_query", "smart_parenthesis", "expr_list", 
		"pure_column_list", "pure_column_or_named", "pure_column_or_named_list", 
		"column_name", "without_column_name", "column_list", "without_column_list", 
		"named_expr", "named_expr_list", "invoke_expr", "invoke_expr_tail", "using_call_expr", 
		"key_expr", "when_expr", "literal_value", "bind_parameter", "opt_bind_parameter", 
		"bind_parameter_list", "named_bind_parameter", "named_bind_parameter_list", 
		"signed_number", "type_name_simple", "integer_or_bind", "type_name_tag", 
		"struct_arg", "struct_arg_positional", "variant_arg", "callable_arg", 
		"callable_arg_list", "type_name_decimal", "type_name_optional", "type_name_tuple", 
		"type_name_struct", "type_name_variant", "type_name_list", "type_name_stream", 
		"type_name_flow", "type_name_dict", "type_name_set", "type_name_enum", 
		"type_name_resource", "type_name_tagged", "type_name_callable", "type_name_composite", 
		"type_name", "type_name_or_bind", "value_constructor_literal", "value_constructor", 
		"declare_stmt", "module_path", "import_stmt", "export_stmt", "call_action", 
		"inline_action", "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
		"sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
		"select_kind_parenthesis", "select_op", "select_kind_partial", "select_kind", 
		"process_core", "external_call_param", "external_call_settings", "reduce_core", 
		"opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
		"row_pattern_rows_per_match", "row_pattern_empty_match_handling", "row_pattern_measures", 
		"row_pattern_measure_list", "row_pattern_measure_definition", "row_pattern_common_syntax", 
		"row_pattern_skip_to", "row_pattern_skip_to_variable_name", "row_pattern_initial_or_seek", 
		"row_pattern", "row_pattern_term", "row_pattern_factor", "row_pattern_quantifier", 
		"row_pattern_primary", "row_pattern_primary_variable_name", "row_pattern_permute", 
		"row_pattern_subset_clause", "row_pattern_subset_list", "row_pattern_subset_item", 
		"row_pattern_subset_item_variable_name", "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
		"row_pattern_definition_list", "row_pattern_definition", "row_pattern_definition_variable_name", 
		"row_pattern_definition_search_condition", "search_condition", "row_pattern_variable_name", 
		"order_by_clause", "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
		"grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
		"rollup_list", "cube_list", "grouping_sets_specification", "hopping_window_specification", 
		"result_column", "join_source", "named_column", "flatten_by_arg", "flatten_source", 
		"named_single_source", "single_source", "sample_clause", "tablesample_clause", 
		"sampling_mode", "repeatable_clause", "join_op", "join_constraint", "returning_columns_list", 
		"into_table_stmt", "into_values_source", "values_stmt", "values_source", 
		"values_source_row_list", "values_source_row", "simple_values_source", 
		"create_external_data_source_stmt", "alter_external_data_source_stmt", 
		"alter_external_data_source_action", "drop_external_data_source_stmt", 
		"create_view_stmt", "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
		"create_object_features", "alter_object_stmt", "alter_object_features", 
		"drop_object_stmt", "drop_object_features", "object_feature_value", "object_feature_kv", 
		"object_feature_flag", "object_feature", "object_features", "object_type_ref", 
		"create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
		"alter_backup_collection_stmt", "drop_backup_collection_stmt", "create_backup_collection_entries", 
		"create_backup_collection_entries_many", "table_list", "alter_backup_collection_actions", 
		"alter_backup_collection_action", "alter_backup_collection_entries", "alter_backup_collection_entry", 
		"backup_collection", "backup_collection_settings", "backup_collection_settings_entry", 
		"backup_stmt", "restore_stmt", "alter_database_stmt", "table_inherits", 
		"table_partition_by", "with_table_settings", "table_tablestore", "table_settings_entry", 
		"table_as_source", "alter_table_stmt", "alter_table_action", "alter_external_table_stmt", 
		"alter_external_table_action", "alter_table_store_stmt", "alter_table_store_action", 
		"alter_table_add_column", "alter_table_drop_column", "alter_table_alter_column", 
		"alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
		"alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
		"alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
		"alter_table_add_index", "alter_table_drop_index", "alter_table_rename_to", 
		"alter_table_rename_index_to", "alter_table_add_changefeed", "alter_table_alter_changefeed", 
		"alter_table_drop_changefeed", "alter_table_alter_index", "column_schema", 
		"family_relation", "opt_column_constraints", "column_order_by_specification", 
		"table_constraint", "table_index", "table_index_type", "global_index", 
		"local_index", "index_subtype", "with_index_settings", "index_setting_entry", 
		"index_setting_value", "changefeed", "changefeed_settings", "changefeed_settings_entry", 
		"changefeed_setting_value", "changefeed_alter_settings", "alter_table_setting_entry", 
		"table_setting_value", "ttl_tier_list", "ttl_tier_action", "family_entry", 
		"family_settings", "family_settings_entry", "family_setting_value", "split_boundaries", 
		"literal_value_list", "alter_table_alter_index_action", "drop_table_stmt", 
		"create_user_stmt", "alter_user_stmt", "create_group_stmt", "alter_group_stmt", 
		"drop_role_stmt", "role_name", "user_option", "authentication_option", 
		"password_option", "password_value", "hash_option", "login_option", "grant_permissions_stmt", 
		"revoke_permissions_stmt", "permission_id", "permission_name", "permission_name_target", 
		"create_resource_pool_stmt", "alter_resource_pool_stmt", "alter_resource_pool_action", 
		"drop_resource_pool_stmt", "create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
		"alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
		"create_replication_stmt", "replication_target", "replication_settings", 
		"replication_settings_entry", "alter_replication_stmt", "alter_replication_action", 
		"alter_replication_set_setting", "drop_replication_stmt", "lambda_or_parameter", 
		"create_transfer_stmt", "transfer_settings", "transfer_settings_entry", 
		"alter_transfer_stmt", "alter_transfer_action", "alter_transfer_set_setting", 
		"alter_transfer_set_using", "drop_transfer_stmt", "action_or_subquery_args", 
		"define_action_or_subquery_stmt", "define_action_or_subquery_body", "if_stmt", 
		"for_stmt", "table_ref", "table_key", "table_arg", "table_hints", "table_hint", 
		"object_ref", "simple_table_ref_core", "simple_table_ref", "into_simple_table_ref", 
		"delete_stmt", "update_stmt", "set_clause_choice", "set_clause_list", 
		"set_clause", "set_target", "multiple_column_assignment", "set_target_list", 
		"create_topic_stmt", "create_topic_entries", "create_topic_entry", "with_topic_settings", 
		"alter_topic_stmt", "alter_topic_action", "alter_topic_add_consumer", 
		"topic_create_consumer_entry", "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
		"alter_topic_drop_consumer", "topic_alter_consumer_set", "topic_alter_consumer_reset", 
		"alter_topic_set_settings", "alter_topic_reset_settings", "drop_topic_stmt", 
		"topic_settings", "topic_settings_entry", "topic_setting_value", "topic_consumer_with_settings", 
		"topic_consumer_settings", "topic_consumer_settings_entry", "topic_consumer_setting_value", 
		"topic_ref", "topic_consumer_ref", "null_treatment", "filter_clause", 
		"window_name_or_specification", "window_name", "window_clause", "window_definition_list", 
		"window_definition", "new_window_name", "window_specification", "window_specification_details", 
		"existing_window_name", "window_partition_clause", "window_order_clause", 
		"window_frame_clause", "window_frame_units", "window_frame_extent", "window_frame_between", 
		"window_frame_bound", "window_frame_exclusion", "use_stmt", "subselect_stmt", 
		"named_nodes_stmt", "commit_stmt", "rollback_stmt", "analyze_table", "analyze_table_list", 
		"analyze_stmt", "alter_sequence_stmt", "alter_sequence_action", "show_create_table_stmt", 
		"identifier", "id", "id_schema", "id_expr", "id_expr_in", "id_window", 
		"id_table", "id_without", "id_hint", "id_as_compat", "an_id", "an_id_or_type", 
		"an_id_schema", "an_id_expr", "an_id_expr_in", "an_id_window", "an_id_table", 
		"an_id_without", "an_id_hint", "an_id_pure", "an_id_as_compat", "view_name", 
		"opt_id_prefix", "cluster_expr", "id_or_type", "opt_id_prefix_or_type", 
		"id_or_at", "id_table_or_type", "id_table_or_at", "keyword", "keyword_expr_uncompat", 
		"keyword_table_uncompat", "keyword_select_uncompat", "keyword_alter_uncompat", 
		"keyword_in_uncompat", "keyword_window_uncompat", "keyword_hint_uncompat", 
		"keyword_as_compat", "keyword_compat", "type_id", "bool_value", "real", 
		"integer"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'=='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", 
		"'|<<'", "'&'", "'|'", "'||'", "'<|'", "'|>'", "'+'", "'-'", "'~'", "'*'", 
		"'/'", "'%'", "';'", "'.'", "','", "'('", "')'", "'?'", "':'", "'@'", 
		"'$'", "'{'", "'}'", "'^'", "'::'", "'->'", "']'", "'['"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", "LESS", "LESS_OR_EQ", 
		"GREATER", "GREATER_OR_EQ", "SHIFT_LEFT", "ROT_LEFT", "AMPERSAND", "PIPE", 
		"DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", "PLUS", "MINUS", "TILDA", 
		"ASTERISK", "SLASH", "PERCENT", "SEMICOLON", "DOT", "COMMA", "LPAREN", 
		"RPAREN", "QUESTION", "COLON", "COMMAT", "DOLLAR", "LBRACE_CURLY", "RBRACE_CURLY", 
		"CARET", "NAMESPACE", "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", "ABORT", 
		"ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANSI", "ANY", 
		"ARRAY", "AS", "ASC", "ASSUME", "ASYMMETRIC", "ASYNC", "AT", "ATTACH", 
		"ATTRIBUTES", "AUTOINCREMENT", "AUTOMAP", "BACKUP", "BATCH", "COLLECTION", 
		"BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", "BY", "CALLABLE", 
		"CASCADE", "CASE", "CAST", "CHANGEFEED", "CHECK", "CLASSIFIER", "COLLATE", 
		"COLUMN", "COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", "CONFLICT", "CONNECT", 
		"CONSTRAINT", "CONSUMER", "COVER", "CREATE", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATA", "DATABASE", 
		"DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DEFINE", "DELETE", 
		"DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", "DISABLE", "DISCARD", 
		"DISTINCT", "DO", "DROP", "EACH", "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", 
		"END", "ENUM", "ERASE", "ERROR", "ESCAPE", "EVALUATE", "EXCEPT", "EXCLUDE", 
		"EXCLUSION", "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", "FAIL", 
		"FALSE", "FAMILY", "FILTER", "FIRST", "FLATTEN", "FLOW", "FOLLOWING", 
		"FOR", "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", "GLOBAL", "GRANT", 
		"GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HOP", "IF", "IGNORE", 
		"ILIKE", "IMMEDIATE", "IMPORT", "IN", "INCREMENT", "INCREMENTAL", "INDEX", 
		"INDEXED", "INHERITS", "INITIAL", "INITIALLY", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "JSON_EXISTS", "JSON_QUERY", 
		"JSON_VALUE", "KEY", "LAST", "LEFT", "LEGACY", "LIKE", "LIMIT", "LIST", 
		"LOCAL", "LOGIN", "MANAGE", "MATCH", "MATCHES", "MATCH_RECOGNIZE", "MEASURES", 
		"MICROSECONDS", "MILLISECONDS", "MODIFY", "NANOSECONDS", "NATURAL", "NEXT", 
		"NO", "NOLOGIN", "NOT", "NOTNULL", "NULL", "NULLS", "OBJECT", "OF", "OFFSET", 
		"OMIT", "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", "OR", "ORDER", "OTHERS", 
		"OUTER", "OVER", "OWNER", "PARALLEL", "PARTITION", "PASSING", "PASSWORD", 
		"PAST", "PATTERN", "PER", "PERMUTE", "PLAN", "POOL", "PRAGMA", "PRECEDING", 
		"PRESORT", "PRIMARY", "PRIVILEGES", "PROCESS", "QUERY", "QUEUE", "RAISE", 
		"RANGE", "REDUCE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "REMOVE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICATION", "RESET", "RESOURCE", 
		"RESPECT", "RESTART", "RESTORE", "RESTRICT", "RESULT", "RETURN", "RETURNING", 
		"REVERT", "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", 
		"SAMPLE", "SAVEPOINT", "SCHEMA", "SECONDS", "SEEK", "SELECT", "SEMI", 
		"SET", "SETS", "SHOW", "TSKIP", "SEQUENCE", "SOURCE", "START", "STREAM", 
		"STRUCT", "SUBQUERY", "SUBSET", "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", 
		"TABLE", "TABLES", "TABLESAMPLE", "TABLESTORE", "TAGGED", "TEMP", "TEMPORARY", 
		"THEN", "TIES", "TO", "TOPIC", "TRANSACTION", "TRANSFER", "TRIGGER", "TRUE", 
		"TUPLE", "TYPE", "UNBOUNDED", "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", 
		"UNMATCHED", "UPDATE", "UPSERT", "USE", "USER", "USING", "VACUUM", "VALUES", 
		"VARIANT", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", 
		"WRAPPER", "XOR", "STRING_VALUE", "ID_PLAIN", "ID_QUOTED", "DIGITS", "INTEGER_VALUE", 
		"REAL", "BLOB", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Sql_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext sql_stmt_list() {
			return GetRuleContext<Sql_stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(YQLParser.DIGITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ansi_sql_stmt_listContext ansi_sql_stmt_list() {
			return GetRuleContext<Ansi_sql_stmt_listContext>(0);
		}
		public Sql_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_query(this);
		}
	}

	[RuleVersion(0)]
	public Sql_queryContext sql_query() {
		Sql_queryContext _localctx = new Sql_queryContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql_query);
		try {
			State = 899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894;
				sql_stmt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895;
				Match(PRAGMA);
				State = 896;
				Match(ANSI);
				State = 897;
				Match(DIGITS);
				State = 898;
				ansi_sql_stmt_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 901;
				Match(SEMICOLON);
				}
				}
				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 907;
			sql_stmt();
			State = 916;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 909;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 908;
						Match(SEMICOLON);
						}
						}
						State = 911;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SEMICOLON );
					State = 913;
					sql_stmt();
					}
					} 
				}
				State = 918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 919;
				Match(SEMICOLON);
				}
				}
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 925;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ansi_sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		public Ansi_sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnsi_sql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnsi_sql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Ansi_sql_stmt_listContext ansi_sql_stmt_list() {
		Ansi_sql_stmt_listContext _localctx = new Ansi_sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_ansi_sql_stmt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 927;
				Match(SEMICOLON);
				}
				}
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 933;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_stmtContext[] lambda_stmt() {
			return GetRuleContexts<Lambda_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_stmtContext lambda_stmt(int i) {
			return GetRuleContext<Lambda_stmtContext>(i);
		}
		public Lambda_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda_body(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_bodyContext lambda_body() {
		Lambda_bodyContext _localctx = new Lambda_bodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_lambda_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 935;
				Match(SEMICOLON);
				}
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOLLAR || _la==IMPORT) {
				{
				{
				State = 941;
				lambda_stmt();
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 942;
					Match(SEMICOLON);
					}
					}
					State = 945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMICOLON );
				}
				}
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 952;
			Match(RETURN);
			State = 953;
			expr();
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 954;
				Match(SEMICOLON);
				}
				}
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_nodes_stmtContext named_nodes_stmt() {
			return GetRuleContext<Named_nodes_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		public Lambda_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_stmtContext lambda_stmt() {
		Lambda_stmtContext _localctx = new Lambda_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_lambda_stmt);
		try {
			State = 962;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				named_nodes_stmt();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				import_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext sql_stmt_core() {
			return GetRuleContext<Sql_stmt_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN) {
				{
				State = 964;
				Match(EXPLAIN);
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY) {
					{
					State = 965;
					Match(QUERY);
					State = 966;
					Match(PLAN);
					}
				}

				}
			}

			State = 971;
			sql_stmt_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_nodes_stmtContext named_nodes_stmt() {
			return GetRuleContext<Named_nodes_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext use_stmt() {
			return GetRuleContext<Use_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_table_stmtContext into_table_stmt() {
			return GetRuleContext<Into_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_stmtContext declare_stmt() {
			return GetRuleContext<Declare_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_stmtContext export_stmt() {
			return GetRuleContext<Export_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_stmtContext alter_external_table_stmt() {
			return GetRuleContext<Alter_external_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt() {
			return GetRuleContext<Do_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_stmtContext define_action_or_subquery_stmt() {
			return GetRuleContext<Define_action_or_subquery_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_stmtContext create_user_stmt() {
			return GetRuleContext<Create_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_user_stmtContext alter_user_stmt() {
			return GetRuleContext<Alter_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_group_stmtContext create_group_stmt() {
			return GetRuleContext<Create_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_group_stmtContext alter_group_stmt() {
			return GetRuleContext<Alter_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_role_stmtContext drop_role_stmt() {
			return GetRuleContext<Drop_role_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_stmtContext create_object_stmt() {
			return GetRuleContext<Create_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_object_stmtContext alter_object_stmt() {
			return GetRuleContext<Alter_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_object_stmtContext drop_object_stmt() {
			return GetRuleContext<Drop_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_data_source_stmtContext create_external_data_source_stmt() {
			return GetRuleContext<Create_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_stmtContext alter_external_data_source_stmt() {
			return GetRuleContext<Alter_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_data_source_stmtContext drop_external_data_source_stmt() {
			return GetRuleContext<Drop_external_data_source_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_replication_stmtContext create_replication_stmt() {
			return GetRuleContext<Create_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_replication_stmtContext drop_replication_stmt() {
			return GetRuleContext<Drop_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_stmtContext create_topic_stmt() {
			return GetRuleContext<Create_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_stmtContext alter_topic_stmt() {
			return GetRuleContext<Alter_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_topic_stmtContext drop_topic_stmt() {
			return GetRuleContext<Drop_topic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_permissions_stmtContext grant_permissions_stmt() {
			return GetRuleContext<Grant_permissions_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Revoke_permissions_stmtContext revoke_permissions_stmt() {
			return GetRuleContext<Revoke_permissions_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_stmtContext alter_table_store_stmt() {
			return GetRuleContext<Alter_table_store_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upsert_object_stmtContext upsert_object_stmt() {
			return GetRuleContext<Upsert_object_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_stmtContext alter_replication_stmt() {
			return GetRuleContext<Alter_replication_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_resource_pool_stmtContext create_resource_pool_stmt() {
			return GetRuleContext<Create_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_stmtContext alter_resource_pool_stmt() {
			return GetRuleContext<Alter_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_resource_pool_stmtContext drop_resource_pool_stmt() {
			return GetRuleContext<Drop_resource_pool_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_stmtContext create_backup_collection_stmt() {
			return GetRuleContext<Create_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_stmtContext alter_backup_collection_stmt() {
			return GetRuleContext<Alter_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_backup_collection_stmtContext drop_backup_collection_stmt() {
			return GetRuleContext<Drop_backup_collection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_resource_pool_classifier_stmtContext create_resource_pool_classifier_stmt() {
			return GetRuleContext<Create_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_stmtContext alter_resource_pool_classifier_stmt() {
			return GetRuleContext<Alter_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_resource_pool_classifier_stmtContext drop_resource_pool_classifier_stmt() {
			return GetRuleContext<Drop_resource_pool_classifier_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_stmtContext backup_stmt() {
			return GetRuleContext<Backup_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Restore_stmtContext restore_stmt() {
			return GetRuleContext<Restore_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_stmtContext alter_sequence_stmt() {
			return GetRuleContext<Alter_sequence_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_transfer_stmtContext create_transfer_stmt() {
			return GetRuleContext<Create_transfer_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_transfer_stmtContext alter_transfer_stmt() {
			return GetRuleContext<Alter_transfer_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_transfer_stmtContext drop_transfer_stmt() {
			return GetRuleContext<Drop_transfer_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_database_stmtContext alter_database_stmt() {
			return GetRuleContext<Alter_database_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Show_create_table_stmtContext show_create_table_stmt() {
			return GetRuleContext<Show_create_table_stmtContext>(0);
		}
		public Sql_stmt_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt_core(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_coreContext sql_stmt_core() {
		Sql_stmt_coreContext _localctx = new Sql_stmt_coreContext(Context, State);
		EnterRule(_localctx, 12, RULE_sql_stmt_core);
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 973;
				pragma_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 974;
				select_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 975;
				named_nodes_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 976;
				create_table_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 977;
				drop_table_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 978;
				use_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 979;
				into_table_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 980;
				commit_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 981;
				update_stmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 982;
				delete_stmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 983;
				rollback_stmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 984;
				declare_stmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 985;
				import_stmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 986;
				export_stmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 987;
				alter_table_stmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 988;
				alter_external_table_stmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 989;
				do_stmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 990;
				define_action_or_subquery_stmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 991;
				if_stmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 992;
				for_stmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 993;
				values_stmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 994;
				create_user_stmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 995;
				alter_user_stmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 996;
				create_group_stmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 997;
				alter_group_stmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 998;
				drop_role_stmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 999;
				create_object_stmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1000;
				alter_object_stmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1001;
				drop_object_stmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1002;
				create_external_data_source_stmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1003;
				alter_external_data_source_stmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1004;
				drop_external_data_source_stmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1005;
				create_replication_stmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1006;
				drop_replication_stmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1007;
				create_topic_stmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1008;
				alter_topic_stmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1009;
				drop_topic_stmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1010;
				grant_permissions_stmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1011;
				revoke_permissions_stmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1012;
				alter_table_store_stmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1013;
				upsert_object_stmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1014;
				create_view_stmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1015;
				drop_view_stmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1016;
				alter_replication_stmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1017;
				create_resource_pool_stmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1018;
				alter_resource_pool_stmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1019;
				drop_resource_pool_stmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1020;
				create_backup_collection_stmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1021;
				alter_backup_collection_stmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1022;
				drop_backup_collection_stmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1023;
				analyze_stmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1024;
				create_resource_pool_classifier_stmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1025;
				alter_resource_pool_classifier_stmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1026;
				drop_resource_pool_classifier_stmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1027;
				backup_stmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1028;
				restore_stmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1029;
				alter_sequence_stmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1030;
				create_transfer_stmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1031;
				alter_transfer_stmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1032;
				drop_transfer_stmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1033;
				alter_database_stmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1034;
				show_create_table_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_subexprContext[] or_subexpr() {
			return GetRuleContexts<Or_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_subexprContext or_subexpr(int i) {
			return GetRuleContext<Or_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(YQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(YQLParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_compositeContext type_name_composite() {
			return GetRuleContext<Type_name_compositeContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_expr);
		try {
			int _alt;
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				or_subexpr();
				State = 1042;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1038;
						Match(OR);
						State = 1039;
						or_subexpr();
						}
						} 
					}
					State = 1044;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045;
				type_name_composite();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_subexprContext[] and_subexpr() {
			return GetRuleContexts<And_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_subexprContext and_subexpr(int i) {
			return GetRuleContext<And_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(YQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(YQLParser.AND, i);
		}
		public Or_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOr_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOr_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Or_subexprContext or_subexpr() {
		Or_subexprContext _localctx = new Or_subexprContext(Context, State);
		EnterRule(_localctx, 16, RULE_or_subexpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			and_subexpr();
			State = 1053;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1049;
					Match(AND);
					State = 1050;
					and_subexpr();
					}
					} 
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_subexprContext[] xor_subexpr() {
			return GetRuleContexts<Xor_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_subexprContext xor_subexpr(int i) {
			return GetRuleContext<Xor_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(YQLParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(YQLParser.XOR, i);
		}
		public And_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnd_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnd_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public And_subexprContext and_subexpr() {
		And_subexprContext _localctx = new And_subexprContext(Context, State);
		EnterRule(_localctx, 18, RULE_and_subexpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			xor_subexpr();
			State = 1061;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1057;
					Match(XOR);
					State = 1058;
					xor_subexpr();
					}
					} 
				}
				State = 1063;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext eq_subexpr() {
			return GetRuleContext<Eq_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Xor_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterXor_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitXor_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Xor_subexprContext xor_subexpr() {
		Xor_subexprContext _localctx = new Xor_subexprContext(Context, State);
		EnterRule(_localctx, 20, RULE_xor_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			eq_subexpr();
			State = 1066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 1065;
				cond_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_from_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Distinct_from_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_from_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDistinct_from_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDistinct_from_op(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_from_opContext distinct_from_op() {
		Distinct_from_opContext _localctx = new Distinct_from_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_distinct_from_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			Match(IS);
			State = 1070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1069;
				Match(NOT);
				}
			}

			State = 1072;
			Match(DISTINCT);
			State = 1073;
			Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Match_opContext match_op() {
			return GetRuleContext<Match_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext[] eq_subexpr() {
			return GetRuleContexts<Eq_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Eq_subexprContext eq_subexpr(int i) {
			return GetRuleContext<Eq_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(YQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(YQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(YQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(YQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(YQLParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(YQLParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS2() { return GetTokens(YQLParser.EQUALS2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS2(int i) {
			return GetToken(YQLParser.EQUALS2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUALS() { return GetTokens(YQLParser.NOT_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS(int i) {
			return GetToken(YQLParser.NOT_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUALS2() { return GetTokens(YQLParser.NOT_EQUALS2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2(int i) {
			return GetToken(YQLParser.NOT_EQUALS2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_from_opContext[] distinct_from_op() {
			return GetRuleContexts<Distinct_from_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_from_opContext distinct_from_op(int i) {
			return GetRuleContext<Distinct_from_opContext>(i);
		}
		public Cond_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCond_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCond_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cond_exprContext cond_expr() {
		Cond_exprContext _localctx = new Cond_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_cond_expr);
		int _la;
		try {
			int _alt;
			State = 1126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1075;
					Match(NOT);
					}
				}

				State = 1078;
				match_op();
				State = 1079;
				eq_subexpr();
				State = 1082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 1080;
					Match(ESCAPE);
					State = 1081;
					eq_subexpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1084;
					Match(NOT);
					}
				}

				State = 1087;
				Match(IN);
				State = 1089;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 1088;
					Match(COMPACT);
					}
					break;
				}
				State = 1091;
				in_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 1092;
					Match(ISNULL);
					}
					break;
				case 2:
					{
					State = 1093;
					Match(NOTNULL);
					}
					break;
				case 3:
					{
					State = 1094;
					Match(IS);
					State = 1095;
					Match(NULL);
					}
					break;
				case 4:
					{
					State = 1097;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IS) {
						{
						State = 1096;
						Match(IS);
						}
					}

					State = 1099;
					Match(NOT);
					State = 1100;
					Match(NULL);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1103;
					Match(NOT);
					}
				}

				State = 1106;
				Match(BETWEEN);
				State = 1108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1107;
					_la = TokenStream.LA(1);
					if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1110;
				eq_subexpr();
				State = 1111;
				Match(AND);
				State = 1112;
				eq_subexpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1122;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1119;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQUALS:
							{
							State = 1114;
							Match(EQUALS);
							}
							break;
						case EQUALS2:
							{
							State = 1115;
							Match(EQUALS2);
							}
							break;
						case NOT_EQUALS:
							{
							State = 1116;
							Match(NOT_EQUALS);
							}
							break;
						case NOT_EQUALS2:
							{
							State = 1117;
							Match(NOT_EQUALS2);
							}
							break;
						case IS:
							{
							State = 1118;
							distinct_from_op();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1121;
						eq_subexpr();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1124;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		public Match_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMatch_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMatch_op(this);
		}
	}

	[RuleVersion(0)]
	public Match_opContext match_op() {
		Match_opContext _localctx = new Match_opContext(Context, State);
		EnterRule(_localctx, 26, RULE_match_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 8933531977729L) != 0) || _la==REGEXP || _la==RLIKE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eq_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext[] neq_subexpr() {
			return GetRuleContexts<Neq_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext neq_subexpr(int i) {
			return GetRuleContext<Neq_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(YQLParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(YQLParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_OR_EQ() { return GetTokens(YQLParser.LESS_OR_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ(int i) {
			return GetToken(YQLParser.LESS_OR_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_OR_EQ() { return GetTokens(YQLParser.GREATER_OR_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ(int i) {
			return GetToken(YQLParser.GREATER_OR_EQ, i);
		}
		public Eq_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eq_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterEq_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitEq_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Eq_subexprContext eq_subexpr() {
		Eq_subexprContext _localctx = new Eq_subexprContext(Context, State);
		EnterRule(_localctx, 28, RULE_eq_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			neq_subexpr();
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) {
				{
				{
				State = 1131;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1132;
				neq_subexpr();
				}
				}
				State = 1137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		public Shift_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterShift_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitShift_right(this);
		}
	}

	[RuleVersion(0)]
	public Shift_rightContext shift_right() {
		Shift_rightContext _localctx = new Shift_rightContext(Context, State);
		EnterRule(_localctx, 30, RULE_shift_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			Match(GREATER);
			State = 1139;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rot_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(YQLParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(YQLParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(YQLParser.PIPE, 0); }
		public Rot_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rot_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRot_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRot_right(this);
		}
	}

	[RuleVersion(0)]
	public Rot_rightContext rot_right() {
		Rot_rightContext _localctx = new Rot_rightContext(Context, State);
		EnterRule(_localctx, 32, RULE_rot_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141;
			Match(GREATER);
			State = 1142;
			Match(GREATER);
			State = 1143;
			Match(PIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_questionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Double_questionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_question; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDouble_question(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDouble_question(this);
		}
	}

	[RuleVersion(0)]
	public Double_questionContext double_question() {
		Double_questionContext _localctx = new Double_questionContext(Context, State);
		EnterRule(_localctx, 34, RULE_double_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(QUESTION);
			State = 1146;
			Match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Neq_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_subexprContext[] bit_subexpr() {
			return GetRuleContexts<Bit_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_subexprContext bit_subexpr(int i) {
			return GetRuleContext<Bit_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_questionContext double_question() {
			return GetRuleContext<Double_questionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Neq_subexprContext neq_subexpr() {
			return GetRuleContext<Neq_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHIFT_LEFT() { return GetTokens(YQLParser.SHIFT_LEFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT(int i) {
			return GetToken(YQLParser.SHIFT_LEFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_rightContext[] shift_right() {
			return GetRuleContexts<Shift_rightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_rightContext shift_right(int i) {
			return GetRuleContext<Shift_rightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROT_LEFT() { return GetTokens(YQLParser.ROT_LEFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROT_LEFT(int i) {
			return GetToken(YQLParser.ROT_LEFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rot_rightContext[] rot_right() {
			return GetRuleContexts<Rot_rightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rot_rightContext rot_right(int i) {
			return GetRuleContext<Rot_rightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPERSAND() { return GetTokens(YQLParser.AMPERSAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND(int i) {
			return GetToken(YQLParser.AMPERSAND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(YQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(YQLParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(YQLParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(YQLParser.CARET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Neq_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNeq_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNeq_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Neq_subexprContext neq_subexpr() {
		Neq_subexprContext _localctx = new Neq_subexprContext(Context, State);
		EnterRule(_localctx, 36, RULE_neq_subexpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			bit_subexpr();
			State = 1161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						State = 1149;
						Match(SHIFT_LEFT);
						}
						break;
					case 2:
						{
						State = 1150;
						shift_right();
						}
						break;
					case 3:
						{
						State = 1151;
						Match(ROT_LEFT);
						}
						break;
					case 4:
						{
						State = 1152;
						rot_right();
						}
						break;
					case 5:
						{
						State = 1153;
						Match(AMPERSAND);
						}
						break;
					case 6:
						{
						State = 1154;
						Match(PIPE);
						}
						break;
					case 7:
						{
						State = 1155;
						Match(CARET);
						}
						break;
					}
					State = 1158;
					bit_subexpr();
					}
					} 
				}
				State = 1163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 1172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1164;
				double_question();
				State = 1165;
				neq_subexpr();
				}
				break;
			case 2:
				{
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1167;
					Match(QUESTION);
					}
					}
					State = 1170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==QUESTION );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_subexprContext[] add_subexpr() {
			return GetRuleContexts<Add_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_subexprContext add_subexpr(int i) {
			return GetRuleContext<Add_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(YQLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(YQLParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(YQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(YQLParser.MINUS, i);
		}
		public Bit_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBit_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBit_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Bit_subexprContext bit_subexpr() {
		Bit_subexprContext _localctx = new Bit_subexprContext(Context, State);
		EnterRule(_localctx, 38, RULE_bit_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			add_subexpr();
			State = 1179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 1175;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1176;
				add_subexpr();
				}
				}
				State = 1181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mul_subexprContext[] mul_subexpr() {
			return GetRuleContexts<Mul_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mul_subexprContext mul_subexpr(int i) {
			return GetRuleContext<Mul_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASTERISK() { return GetTokens(YQLParser.ASTERISK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK(int i) {
			return GetToken(YQLParser.ASTERISK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(YQLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(YQLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(YQLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(YQLParser.PERCENT, i);
		}
		public Add_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAdd_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAdd_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Add_subexprContext add_subexpr() {
		Add_subexprContext _localctx = new Add_subexprContext(Context, State);
		EnterRule(_localctx, 40, RULE_add_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182;
			mul_subexpr();
			State = 1187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) {
				{
				{
				State = 1183;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1184;
				mul_subexpr();
				}
				}
				State = 1189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mul_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Con_subexprContext[] con_subexpr() {
			return GetRuleContexts<Con_subexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Con_subexprContext con_subexpr(int i) {
			return GetRuleContext<Con_subexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_PIPE() { return GetTokens(YQLParser.DOUBLE_PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_PIPE(int i) {
			return GetToken(YQLParser.DOUBLE_PIPE, i);
		}
		public Mul_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMul_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMul_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Mul_subexprContext mul_subexpr() {
		Mul_subexprContext _localctx = new Mul_subexprContext(Context, State);
		EnterRule(_localctx, 42, RULE_mul_subexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			con_subexpr();
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOUBLE_PIPE) {
				{
				{
				State = 1191;
				Match(DOUBLE_PIPE);
				State = 1192;
				con_subexpr();
				}
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Con_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexprContext unary_subexpr() {
			return GetRuleContext<Unary_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_opContext unary_op() {
			return GetRuleContext<Unary_opContext>(0);
		}
		public Con_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_con_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCon_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCon_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Con_subexprContext con_subexpr() {
		Con_subexprContext _localctx = new Con_subexprContext(Context, State);
		EnterRule(_localctx, 44, RULE_con_subexpr);
		try {
			State = 1202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198;
				unary_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1199;
				unary_op();
				State = 1200;
				unary_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDA() { return GetToken(YQLParser.TILDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Unary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_op(this);
		}
	}

	[RuleVersion(0)]
	public Unary_opContext unary_op() {
		Unary_opContext _localctx = new Unary_opContext(Context, State);
		EnterRule(_localctx, 46, RULE_unary_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_subexpr_suffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(YQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_exprContext[] key_expr() {
			return GetRuleContexts<Key_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_exprContext key_expr(int i) {
			return GetRuleContext<Key_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext[] invoke_expr() {
			return GetRuleContexts<Invoke_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext invoke_expr(int i) {
			return GetRuleContext<Invoke_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(YQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(YQLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGITS() { return GetTokens(YQLParser.DIGITS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS(int i) {
			return GetToken(YQLParser.DIGITS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext[] an_id_or_type() {
			return GetRuleContexts<An_id_or_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type(int i) {
			return GetRuleContext<An_id_or_typeContext>(i);
		}
		public Unary_subexpr_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_subexpr_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_subexpr_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_subexpr_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Unary_subexpr_suffixContext unary_subexpr_suffix() {
		Unary_subexpr_suffixContext _localctx = new Unary_subexpr_suffixContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary_subexpr_suffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137480896512L) != 0)) {
				{
				{
				State = 1214;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE_SQUARE:
					{
					State = 1206;
					key_expr();
					}
					break;
				case LPAREN:
					{
					State = 1207;
					invoke_expr();
					}
					break;
				case DOT:
					{
					State = 1208;
					Match(DOT);
					State = 1212;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
						{
						State = 1209;
						bind_parameter();
						}
						break;
					case DIGITS:
						{
						State = 1210;
						Match(DIGITS);
						}
						break;
					case ABORT:
					case ACTION:
					case ADD:
					case AFTER:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANSI:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSUME:
					case ASYMMETRIC:
					case ASYNC:
					case AT:
					case ATTACH:
					case ATTRIBUTES:
					case AUTOINCREMENT:
					case BACKUP:
					case BATCH:
					case COLLECTION:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BITCAST:
					case BY:
					case CALLABLE:
					case CASCADE:
					case CASE:
					case CAST:
					case CHANGEFEED:
					case CHECK:
					case CLASSIFIER:
					case COLLATE:
					case COLUMN:
					case COLUMNS:
					case COMMIT:
					case COMPACT:
					case CONDITIONAL:
					case CONFLICT:
					case CONNECT:
					case CONSTRAINT:
					case CONSUMER:
					case COVER:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case DATA:
					case DATABASE:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFERRABLE:
					case DEFERRED:
					case DEFINE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DETACH:
					case DICT:
					case DIRECTORY:
					case DISABLE:
					case DISCARD:
					case DISTINCT:
					case DO:
					case DROP:
					case EACH:
					case ELSE:
					case EMPTY:
					case EMPTY_ACTION:
					case ENCRYPTED:
					case END:
					case ENUM:
					case ERASE:
					case ERROR:
					case ESCAPE:
					case EVALUATE:
					case EXCEPT:
					case EXCLUDE:
					case EXCLUSION:
					case EXCLUSIVE:
					case EXISTS:
					case EXPLAIN:
					case EXPORT:
					case EXTERNAL:
					case FAIL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FLATTEN:
					case FLOW:
					case FOLLOWING:
					case FOR:
					case FOREIGN:
					case FROM:
					case FULL:
					case FUNCTION:
					case GLOB:
					case GLOBAL:
					case GRANT:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case HOP:
					case IF:
					case IGNORE:
					case ILIKE:
					case IMMEDIATE:
					case IMPORT:
					case IN:
					case INCREMENT:
					case INCREMENTAL:
					case INDEX:
					case INDEXED:
					case INHERITS:
					case INITIAL:
					case INITIALLY:
					case INNER:
					case INSERT:
					case INSTEAD:
					case INTERSECT:
					case INTO:
					case IS:
					case ISNULL:
					case JOIN:
					case JSON_EXISTS:
					case JSON_QUERY:
					case JSON_VALUE:
					case KEY:
					case LAST:
					case LEFT:
					case LEGACY:
					case LIKE:
					case LIMIT:
					case LIST:
					case LOCAL:
					case LOGIN:
					case MANAGE:
					case MATCH:
					case MATCHES:
					case MATCH_RECOGNIZE:
					case MEASURES:
					case MICROSECONDS:
					case MILLISECONDS:
					case MODIFY:
					case NANOSECONDS:
					case NATURAL:
					case NEXT:
					case NO:
					case NOLOGIN:
					case NOT:
					case NOTNULL:
					case NULL:
					case NULLS:
					case OBJECT:
					case OF:
					case OFFSET:
					case OMIT:
					case ON:
					case ONE:
					case ONLY:
					case OPTION:
					case OPTIONAL:
					case OR:
					case ORDER:
					case OTHERS:
					case OUTER:
					case OVER:
					case OWNER:
					case PARALLEL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PAST:
					case PATTERN:
					case PER:
					case PERMUTE:
					case PLAN:
					case POOL:
					case PRAGMA:
					case PRECEDING:
					case PRESORT:
					case PRIMARY:
					case PRIVILEGES:
					case PROCESS:
					case QUERY:
					case QUEUE:
					case RAISE:
					case RANGE:
					case REDUCE:
					case REFERENCES:
					case REGEXP:
					case REINDEX:
					case RELEASE:
					case REMOVE:
					case RENAME:
					case REPLACE:
					case REPLICATION:
					case RESET:
					case RESOURCE:
					case RESPECT:
					case RESTART:
					case RESTORE:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNING:
					case REVERT:
					case REVOKE:
					case RIGHT:
					case RLIKE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SAMPLE:
					case SAVEPOINT:
					case SCHEMA:
					case SECONDS:
					case SEEK:
					case SELECT:
					case SEMI:
					case SET:
					case SETS:
					case SHOW:
					case TSKIP:
					case SEQUENCE:
					case SOURCE:
					case START:
					case STREAM:
					case STRUCT:
					case SUBQUERY:
					case SUBSET:
					case SYMBOLS:
					case SYMMETRIC:
					case SYNC:
					case SYSTEM:
					case TABLE:
					case TABLES:
					case TABLESAMPLE:
					case TABLESTORE:
					case TAGGED:
					case TEMP:
					case TEMPORARY:
					case THEN:
					case TIES:
					case TO:
					case TOPIC:
					case TRANSACTION:
					case TRANSFER:
					case TRIGGER:
					case TUPLE:
					case TYPE:
					case UNBOUNDED:
					case UNCONDITIONAL:
					case UNION:
					case UNIQUE:
					case UNKNOWN:
					case UNMATCHED:
					case UPDATE:
					case UPSERT:
					case USE:
					case USER:
					case USING:
					case VACUUM:
					case VALUES:
					case VARIANT:
					case VIEW:
					case VIRTUAL:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHOUT:
					case WRAPPER:
					case XOR:
					case STRING_VALUE:
					case ID_PLAIN:
					case ID_QUOTED:
						{
						State = 1211;
						an_id_or_type();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1221;
				Match(COLLATE);
				State = 1222;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_casual_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexpr_suffixContext unary_subexpr_suffix() {
			return GetRuleContext<Unary_subexpr_suffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		public Unary_casual_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_casual_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_casual_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_casual_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_casual_subexprContext unary_casual_subexpr() {
		Unary_casual_subexprContext _localctx = new Unary_casual_subexprContext(Context, State);
		EnterRule(_localctx, 50, RULE_unary_casual_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 1225;
				id_expr();
				}
				break;
			case 2:
				{
				State = 1226;
				atom_expr();
				}
				break;
			}
			State = 1229;
			unary_subexpr_suffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_unary_casual_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_subexpr_suffixContext unary_subexpr_suffix() {
			return GetRuleContext<Unary_subexpr_suffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_expr_inContext id_expr_in() {
			return GetRuleContext<Id_expr_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_atom_exprContext in_atom_expr() {
			return GetRuleContext<In_atom_exprContext>(0);
		}
		public In_unary_casual_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_unary_casual_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_unary_casual_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_unary_casual_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public In_unary_casual_subexprContext in_unary_casual_subexpr() {
		In_unary_casual_subexprContext _localctx = new In_unary_casual_subexprContext(Context, State);
		EnterRule(_localctx, 52, RULE_in_unary_casual_subexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 1231;
				id_expr_in();
				}
				break;
			case 2:
				{
				State = 1232;
				in_atom_expr();
				}
				break;
			}
			State = 1235;
			unary_subexpr_suffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_casual_subexprContext unary_casual_subexpr() {
			return GetRuleContext<Unary_casual_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_api_exprContext json_api_expr() {
			return GetRuleContext<Json_api_exprContext>(0);
		}
		public Unary_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUnary_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUnary_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_subexprContext unary_subexpr() {
		Unary_subexprContext _localctx = new Unary_subexprContext(Context, State);
		EnterRule(_localctx, 54, RULE_unary_subexpr);
		try {
			State = 1239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1237;
				unary_casual_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1238;
				json_api_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_unary_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public In_unary_casual_subexprContext in_unary_casual_subexpr() {
			return GetRuleContext<In_unary_casual_subexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_api_exprContext json_api_expr() {
			return GetRuleContext<Json_api_exprContext>(0);
		}
		public In_unary_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_unary_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_unary_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_unary_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public In_unary_subexprContext in_unary_subexpr() {
		In_unary_subexprContext _localctx = new In_unary_subexprContext(Context, State);
		EnterRule(_localctx, 56, RULE_in_unary_subexpr);
		try {
			State = 1243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241;
				in_unary_casual_subexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1242;
				json_api_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 58, RULE_list_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			Match(LBRACE_SQUARE);
			State = 1247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
				{
				State = 1246;
				expr_list();
				}
			}

			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1249;
				Match(COMMA);
				}
			}

			State = 1252;
			Match(RBRACE_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_dict_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(YQLParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(YQLParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_dict_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_dict_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_dict_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_dict_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_dict_listContext expr_dict_list() {
		Expr_dict_listContext _localctx = new Expr_dict_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_expr_dict_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254;
			expr();
			State = 1257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1255;
				Match(COLON);
				State = 1256;
				expr();
				}
			}

			State = 1267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1259;
					Match(COMMA);
					State = 1260;
					expr();
					State = 1263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLON) {
						{
						State = 1261;
						Match(COLON);
						State = 1262;
						expr();
						}
					}

					}
					} 
				}
				State = 1269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dict_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_dict_listContext expr_dict_list() {
			return GetRuleContext<Expr_dict_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Dict_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDict_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDict_literal(this);
		}
	}

	[RuleVersion(0)]
	public Dict_literalContext dict_literal() {
		Dict_literalContext _localctx = new Dict_literalContext(Context, State);
		EnterRule(_localctx, 62, RULE_dict_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270;
			Match(LBRACE_CURLY);
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
				{
				State = 1271;
				expr_dict_list();
				}
			}

			State = 1275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1274;
				Match(COMMA);
				}
			}

			State = 1277;
			Match(RBRACE_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_struct_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(YQLParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(YQLParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_struct_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_struct_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_struct_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_struct_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_struct_listContext expr_struct_list() {
		Expr_struct_listContext _localctx = new Expr_struct_listContext(Context, State);
		EnterRule(_localctx, 64, RULE_expr_struct_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			expr();
			State = 1280;
			Match(COLON);
			State = 1281;
			expr();
			State = 1289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1282;
					Match(COMMA);
					State = 1283;
					expr();
					State = 1284;
					Match(COLON);
					State = 1285;
					expr();
					}
					} 
				}
				State = 1291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT_OPEN() { return GetToken(YQLParser.STRUCT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT_CLOSE() { return GetToken(YQLParser.STRUCT_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_struct_listContext expr_struct_list() {
			return GetRuleContext<Expr_struct_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 66, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292;
			Match(STRUCT_OPEN);
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
				{
				State = 1293;
				expr_struct_list();
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1296;
				Match(COMMA);
				}
			}

			State = 1299;
			Match(STRUCT_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exists_exprContext exists_expr() {
			return GetRuleContext<Exists_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_constructorContext value_constructor() {
			return GetRuleContext<Value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitcast_exprContext bitcast_expr() {
			return GetRuleContext<Bitcast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 68, RULE_atom_expr);
		try {
			State = 1318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1301;
				literal_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1302;
				bind_parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1303;
				lambda();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1304;
				cast_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1305;
				exists_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1306;
				case_expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1307;
				an_id_or_type();
				State = 1308;
				Match(NAMESPACE);
				State = 1311;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSUME:
				case ASYMMETRIC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case BATCH:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BITCAST:
				case BY:
				case CALLABLE:
				case CASCADE:
				case CASE:
				case CAST:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case COMMIT:
				case COMPACT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DEFINE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DICT:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISTINCT:
				case DO:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case EMPTY_ACTION:
				case ENCRYPTED:
				case END:
				case ENUM:
				case ERASE:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCEPT:
				case EXCLUDE:
				case EXCLUSION:
				case EXCLUSIVE:
				case EXISTS:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FLOW:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FROM:
				case FULL:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HAVING:
				case HOP:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INNER:
				case INSERT:
				case INSTEAD:
				case INTERSECT:
				case INTO:
				case IS:
				case ISNULL:
				case JOIN:
				case JSON_EXISTS:
				case JSON_QUERY:
				case JSON_VALUE:
				case KEY:
				case LAST:
				case LEFT:
				case LEGACY:
				case LIKE:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NATURAL:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NOT:
				case NOTNULL:
				case NULL:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ON:
				case ONE:
				case ONLY:
				case OPTION:
				case OPTIONAL:
				case OR:
				case ORDER:
				case OTHERS:
				case OUTER:
				case OVER:
				case OWNER:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRESORT:
				case PRIMARY:
				case PRIVILEGES:
				case PROCESS:
				case QUERY:
				case QUEUE:
				case RAISE:
				case RANGE:
				case REDUCE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESOURCE:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNING:
				case REVERT:
				case REVOKE:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case SAMPLE:
				case SAVEPOINT:
				case SCHEMA:
				case SECONDS:
				case SEEK:
				case SELECT:
				case SEMI:
				case SET:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case STREAM:
				case STRUCT:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYMMETRIC:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TAGGED:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRANSFER:
				case TRIGGER:
				case TUPLE:
				case TYPE:
				case UNBOUNDED:
				case UNCONDITIONAL:
				case UNION:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case USING:
				case VACUUM:
				case VALUES:
				case VARIANT:
				case VIEW:
				case VIRTUAL:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case WITHOUT:
				case WRAPPER:
				case XOR:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1309;
					id_or_type();
					}
					break;
				case STRING_VALUE:
					{
					State = 1310;
					Match(STRING_VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1313;
				value_constructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1314;
				bitcast_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1315;
				list_literal();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1316;
				dict_literal();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1317;
				struct_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_exprContext cast_expr() {
			return GetRuleContext<Cast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_constructorContext value_constructor() {
			return GetRuleContext<Value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitcast_exprContext bitcast_expr() {
			return GetRuleContext<Bitcast_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dict_literalContext dict_literal() {
			return GetRuleContext<Dict_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		public In_atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_atom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_atom_expr(this);
		}
	}

	[RuleVersion(0)]
	public In_atom_exprContext in_atom_expr() {
		In_atom_exprContext _localctx = new In_atom_exprContext(Context, State);
		EnterRule(_localctx, 70, RULE_in_atom_expr);
		try {
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1320;
				literal_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321;
				bind_parameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1322;
				lambda();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1323;
				cast_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1324;
				case_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1325;
				an_id_or_type();
				State = 1326;
				Match(NAMESPACE);
				State = 1329;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSUME:
				case ASYMMETRIC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case BATCH:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BITCAST:
				case BY:
				case CALLABLE:
				case CASCADE:
				case CASE:
				case CAST:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case COMMIT:
				case COMPACT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DEFINE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DICT:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISTINCT:
				case DO:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case EMPTY_ACTION:
				case ENCRYPTED:
				case END:
				case ENUM:
				case ERASE:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCEPT:
				case EXCLUDE:
				case EXCLUSION:
				case EXCLUSIVE:
				case EXISTS:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FLOW:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FROM:
				case FULL:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HAVING:
				case HOP:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INNER:
				case INSERT:
				case INSTEAD:
				case INTERSECT:
				case INTO:
				case IS:
				case ISNULL:
				case JOIN:
				case JSON_EXISTS:
				case JSON_QUERY:
				case JSON_VALUE:
				case KEY:
				case LAST:
				case LEFT:
				case LEGACY:
				case LIKE:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NATURAL:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NOT:
				case NOTNULL:
				case NULL:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ON:
				case ONE:
				case ONLY:
				case OPTION:
				case OPTIONAL:
				case OR:
				case ORDER:
				case OTHERS:
				case OUTER:
				case OVER:
				case OWNER:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRESORT:
				case PRIMARY:
				case PRIVILEGES:
				case PROCESS:
				case QUERY:
				case QUEUE:
				case RAISE:
				case RANGE:
				case REDUCE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESOURCE:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNING:
				case REVERT:
				case REVOKE:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case SAMPLE:
				case SAVEPOINT:
				case SCHEMA:
				case SECONDS:
				case SEEK:
				case SELECT:
				case SEMI:
				case SET:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case STREAM:
				case STRUCT:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYMMETRIC:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TAGGED:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRANSFER:
				case TRIGGER:
				case TUPLE:
				case TYPE:
				case UNBOUNDED:
				case UNCONDITIONAL:
				case UNION:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case USING:
				case VACUUM:
				case VALUES:
				case VARIANT:
				case VIEW:
				case VIRTUAL:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case WITHOUT:
				case WRAPPER:
				case XOR:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1327;
					id_or_type();
					}
					break;
				case STRING_VALUE:
					{
					State = 1328;
					Match(STRING_VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1331;
				Match(LPAREN);
				State = 1332;
				select_stmt();
				State = 1333;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1335;
				value_constructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1336;
				bitcast_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1337;
				list_literal();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1338;
				dict_literal();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1339;
				struct_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(YQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Cast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCast_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCast_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cast_exprContext cast_expr() {
		Cast_exprContext _localctx = new Cast_exprContext(Context, State);
		EnterRule(_localctx, 72, RULE_cast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			Match(CAST);
			State = 1343;
			Match(LPAREN);
			State = 1344;
			expr();
			State = 1345;
			Match(AS);
			State = 1346;
			type_name_or_bind();
			State = 1347;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitcast_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITCAST() { return GetToken(YQLParser.BITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Bitcast_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitcast_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBitcast_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBitcast_expr(this);
		}
	}

	[RuleVersion(0)]
	public Bitcast_exprContext bitcast_expr() {
		Bitcast_exprContext _localctx = new Bitcast_exprContext(Context, State);
		EnterRule(_localctx, 74, RULE_bitcast_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			Match(BITCAST);
			State = 1350;
			Match(LPAREN);
			State = 1351;
			expr();
			State = 1352;
			Match(AS);
			State = 1353;
			type_name_simple();
			State = 1354;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exists_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		public Exists_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exists_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExists_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExists_expr(this);
		}
	}

	[RuleVersion(0)]
	public Exists_exprContext exists_expr() {
		Exists_exprContext _localctx = new Exists_exprContext(Context, State);
		EnterRule(_localctx, 76, RULE_exists_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			Match(EXISTS);
			State = 1357;
			Match(LPAREN);
			State = 1360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				{
				State = 1358;
				select_stmt();
				}
				break;
			case VALUES:
				{
				State = 1359;
				values_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1362;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(YQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_exprContext[] when_expr() {
			return GetRuleContexts<When_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_exprContext when_expr(int i) {
			return GetRuleContext<When_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 78, RULE_case_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			Match(CASE);
			State = 1366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1365;
				expr();
				}
				break;
			}
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1368;
				when_expr();
				}
				}
				State = 1371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 1375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1373;
				Match(ELSE);
				State = 1374;
				expr();
				}
			}

			State = 1377;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Smart_parenthesisContext smart_parenthesis() {
			return GetRuleContext<Smart_parenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(YQLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_bodyContext lambda_body() {
			return GetRuleContext<Lambda_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 80, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			smart_parenthesis();
			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 1380;
				Match(ARROW);
				State = 1389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 1381;
					Match(LPAREN);
					State = 1382;
					expr();
					State = 1383;
					Match(RPAREN);
					}
					break;
				case LBRACE_CURLY:
					{
					State = 1385;
					Match(LBRACE_CURLY);
					State = 1386;
					lambda_body();
					State = 1387;
					Match(RBRACE_CURLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public In_unary_subexprContext in_unary_subexpr() {
			return GetRuleContext<In_unary_subexprContext>(0);
		}
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIn_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIn_expr(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 82, RULE_in_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393;
			in_unary_subexpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_api_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_valueContext json_value() {
			return GetRuleContext<Json_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_existsContext json_exists() {
			return GetRuleContext<Json_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_queryContext json_query() {
			return GetRuleContext<Json_queryContext>(0);
		}
		public Json_api_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_api_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_api_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_api_expr(this);
		}
	}

	[RuleVersion(0)]
	public Json_api_exprContext json_api_expr() {
		Json_api_exprContext _localctx = new Json_api_exprContext(Context, State);
		EnterRule(_localctx, 84, RULE_json_api_expr);
		try {
			State = 1398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1395;
				json_value();
				}
				break;
			case JSON_EXISTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1396;
				json_exists();
				}
				break;
			case JSON_QUERY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1397;
				json_query();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Jsonpath_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJsonpath_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJsonpath_spec(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_specContext jsonpath_spec() {
		Jsonpath_specContext _localctx = new Jsonpath_specContext(Context, State);
		EnterRule(_localctx, 86, RULE_jsonpath_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400;
			Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Json_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Json_variable_nameContext json_variable_name() {
		Json_variable_nameContext _localctx = new Json_variable_nameContext(Context, State);
		EnterRule(_localctx, 88, RULE_json_variable_name);
		try {
			State = 1404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1402;
				id_expr();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1403;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_variable_nameContext json_variable_name() {
			return GetRuleContext<Json_variable_nameContext>(0);
		}
		public Json_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variable(this);
		}
	}

	[RuleVersion(0)]
	public Json_variableContext json_variable() {
		Json_variableContext _localctx = new Json_variableContext(Context, State);
		EnterRule(_localctx, 90, RULE_json_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1406;
			expr();
			State = 1407;
			Match(AS);
			State = 1408;
			json_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_variablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Json_variableContext[] json_variable() {
			return GetRuleContexts<Json_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_variableContext json_variable(int i) {
			return GetRuleContext<Json_variableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Json_variablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_variables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_variables(this);
		}
	}

	[RuleVersion(0)]
	public Json_variablesContext json_variables() {
		Json_variablesContext _localctx = new Json_variablesContext(Context, State);
		EnterRule(_localctx, 92, RULE_json_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			json_variable();
			State = 1415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1411;
				Match(COMMA);
				State = 1412;
				json_variable();
				}
				}
				State = 1417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_common_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Jsonpath_specContext jsonpath_spec() {
			return GetRuleContext<Jsonpath_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_variablesContext json_variables() {
			return GetRuleContext<Json_variablesContext>(0);
		}
		public Json_common_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_common_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_common_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_common_args(this);
		}
	}

	[RuleVersion(0)]
	public Json_common_argsContext json_common_args() {
		Json_common_argsContext _localctx = new Json_common_argsContext(Context, State);
		EnterRule(_localctx, 94, RULE_json_common_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			expr();
			State = 1419;
			Match(COMMA);
			State = 1420;
			jsonpath_spec();
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PASSING) {
				{
				State = 1421;
				Match(PASSING);
				State = 1422;
				json_variables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_case_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Json_case_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_case_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_case_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_case_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_case_handlerContext json_case_handler() {
		Json_case_handlerContext _localctx = new Json_case_handlerContext(Context, State);
		EnterRule(_localctx, 96, RULE_json_case_handler);
		try {
			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1425;
				Match(ERROR);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1426;
				Match(NULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1427;
				Match(DEFAULT);
				State = 1428;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(YQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_case_handlerContext[] json_case_handler() {
			return GetRuleContexts<Json_case_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_case_handlerContext json_case_handler(int i) {
			return GetRuleContext<Json_case_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(YQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(YQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(YQLParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(YQLParser.EMPTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(YQLParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(YQLParser.ERROR, i);
		}
		public Json_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_value(this);
		}
	}

	[RuleVersion(0)]
	public Json_valueContext json_value() {
		Json_valueContext _localctx = new Json_valueContext(Context, State);
		EnterRule(_localctx, 98, RULE_json_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431;
			Match(JSON_VALUE);
			State = 1432;
			Match(LPAREN);
			State = 1433;
			json_common_args();
			State = 1436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 1434;
				Match(RETURNING);
				State = 1435;
				type_name_simple();
				}
			}

			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==ERROR || _la==NULL) {
				{
				{
				State = 1438;
				json_case_handler();
				State = 1439;
				Match(ON);
				State = 1440;
				_la = TokenStream.LA(1);
				if ( !(_la==EMPTY || _la==ERROR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1447;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_exists_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(YQLParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(YQLParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		public Json_exists_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_exists_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_exists_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_exists_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_exists_handlerContext json_exists_handler() {
		Json_exists_handlerContext _localctx = new Json_exists_handlerContext(Context, State);
		EnterRule(_localctx, 100, RULE_json_exists_handler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			_la = TokenStream.LA(1);
			if ( !(_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1450;
			Match(ON);
			State = 1451;
			Match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(YQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_exists_handlerContext json_exists_handler() {
			return GetRuleContext<Json_exists_handlerContext>(0);
		}
		public Json_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_exists(this);
		}
	}

	[RuleVersion(0)]
	public Json_existsContext json_exists() {
		Json_existsContext _localctx = new Json_existsContext(Context, State);
		EnterRule(_localctx, 102, RULE_json_exists);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			Match(JSON_EXISTS);
			State = 1454;
			Match(LPAREN);
			State = 1455;
			json_common_args();
			State = 1457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) {
				{
				State = 1456;
				json_exists_handler();
				}
			}

			State = 1459;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_query_wrapperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		public Json_query_wrapperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query_wrapper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query_wrapper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query_wrapper(this);
		}
	}

	[RuleVersion(0)]
	public Json_query_wrapperContext json_query_wrapper() {
		Json_query_wrapperContext _localctx = new Json_query_wrapperContext(Context, State);
		EnterRule(_localctx, 104, RULE_json_query_wrapper);
		int _la;
		try {
			State = 1472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHOUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1461;
				Match(WITHOUT);
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 1462;
					Match(ARRAY);
					}
				}

				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1465;
				Match(WITH);
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONDITIONAL || _la==UNCONDITIONAL) {
					{
					State = 1466;
					_la = TokenStream.LA(1);
					if ( !(_la==CONDITIONAL || _la==UNCONDITIONAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 1469;
					Match(ARRAY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_query_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		public Json_query_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query_handler(this);
		}
	}

	[RuleVersion(0)]
	public Json_query_handlerContext json_query_handler() {
		Json_query_handlerContext _localctx = new Json_query_handlerContext(Context, State);
		EnterRule(_localctx, 106, RULE_json_query_handler);
		try {
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1474;
				Match(ERROR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1475;
				Match(NULL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1476;
				Match(EMPTY);
				State = 1477;
				Match(ARRAY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1478;
				Match(EMPTY);
				State = 1479;
				Match(OBJECT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(YQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_common_argsContext json_common_args() {
			return GetRuleContext<Json_common_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_wrapperContext json_query_wrapper() {
			return GetRuleContext<Json_query_wrapperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_handlerContext[] json_query_handler() {
			return GetRuleContexts<Json_query_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_query_handlerContext json_query_handler(int i) {
			return GetRuleContext<Json_query_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(YQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(YQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		public Json_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJson_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJson_query(this);
		}
	}

	[RuleVersion(0)]
	public Json_queryContext json_query() {
		Json_queryContext _localctx = new Json_queryContext(Context, State);
		EnterRule(_localctx, 108, RULE_json_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482;
			Match(JSON_QUERY);
			State = 1483;
			Match(LPAREN);
			State = 1484;
			json_common_args();
			State = 1488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				State = 1485;
				json_query_wrapper();
				State = 1486;
				Match(WRAPPER);
				}
			}

			State = 1494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1490;
				json_query_handler();
				State = 1491;
				Match(ON);
				State = 1492;
				Match(EMPTY);
				}
				break;
			}
			State = 1500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EMPTY || _la==ERROR || _la==NULL) {
				{
				State = 1496;
				json_query_handler();
				State = 1497;
				Match(ON);
				State = 1498;
				Match(ERROR);
				}
			}

			State = 1502;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Smart_parenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Smart_parenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smart_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSmart_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSmart_parenthesis(this);
		}
	}

	[RuleVersion(0)]
	public Smart_parenthesisContext smart_parenthesis() {
		Smart_parenthesisContext _localctx = new Smart_parenthesisContext(Context, State);
		EnterRule(_localctx, 110, RULE_smart_parenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504;
			Match(LPAREN);
			State = 1506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
				{
				State = 1505;
				named_expr_list();
				}
			}

			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1508;
				Match(COMMA);
				}
			}

			State = 1511;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 112, RULE_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			expr();
			State = 1518;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1514;
					Match(COMMA);
					State = 1515;
					expr();
					}
					} 
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pure_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_listContext pure_column_list() {
		Pure_column_listContext _localctx = new Pure_column_listContext(Context, State);
		EnterRule(_localctx, 114, RULE_pure_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			Match(LPAREN);
			State = 1522;
			an_id();
			State = 1527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1523;
				Match(COMMA);
				State = 1524;
				an_id();
				}
				}
				State = 1529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1530;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_or_namedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Pure_column_or_namedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_or_named; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_or_named(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_or_named(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_or_namedContext pure_column_or_named() {
		Pure_column_or_namedContext _localctx = new Pure_column_or_namedContext(Context, State);
		EnterRule(_localctx, 116, RULE_pure_column_or_named);
		try {
			State = 1534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1532;
				bind_parameter();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1533;
				an_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pure_column_or_named_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext[] pure_column_or_named() {
			return GetRuleContexts<Pure_column_or_namedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named(int i) {
			return GetRuleContext<Pure_column_or_namedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pure_column_or_named_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pure_column_or_named_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPure_column_or_named_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPure_column_or_named_list(this);
		}
	}

	[RuleVersion(0)]
	public Pure_column_or_named_listContext pure_column_or_named_list() {
		Pure_column_or_named_listContext _localctx = new Pure_column_or_named_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_pure_column_or_named_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			Match(LPAREN);
			State = 1537;
			pure_column_or_named();
			State = 1542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1538;
				Match(COMMA);
				State = 1539;
				pure_column_or_named();
				}
				}
				State = 1544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1545;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefixContext opt_id_prefix() {
			return GetRuleContext<Opt_id_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 120, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547;
			opt_id_prefix();
			State = 1548;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Without_column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_withoutContext an_id_without() {
			return GetRuleContext<An_id_withoutContext>(0);
		}
		public Without_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_without_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWithout_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWithout_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Without_column_nameContext without_column_name() {
		Without_column_nameContext _localctx = new Without_column_nameContext(Context, State);
		EnterRule(_localctx, 122, RULE_without_column_name);
		try {
			State = 1555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1550;
				an_id();
				State = 1551;
				Match(DOT);
				State = 1552;
				an_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554;
				an_id_without();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557;
			column_name();
			State = 1562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1558;
					Match(COMMA);
					State = 1559;
					column_name();
					}
					} 
				}
				State = 1564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 1566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1565;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Without_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_nameContext[] without_column_name() {
			return GetRuleContexts<Without_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_nameContext without_column_name(int i) {
			return GetRuleContext<Without_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Without_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_without_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWithout_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWithout_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Without_column_listContext without_column_list() {
		Without_column_listContext _localctx = new Without_column_listContext(Context, State);
		EnterRule(_localctx, 126, RULE_without_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568;
			without_column_name();
			State = 1573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1569;
					Match(COMMA);
					State = 1570;
					without_column_name();
					}
					} 
				}
				State = 1575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1576;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Named_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_expr(this);
		}
	}

	[RuleVersion(0)]
	public Named_exprContext named_expr() {
		Named_exprContext _localctx = new Named_exprContext(Context, State);
		EnterRule(_localctx, 128, RULE_named_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			expr();
			State = 1582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1580;
				Match(AS);
				State = 1581;
				an_id_or_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext[] named_expr() {
			return GetRuleContexts<Named_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr(int i) {
			return GetRuleContext<Named_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Named_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_expr_listContext named_expr_list() {
		Named_expr_listContext _localctx = new Named_expr_listContext(Context, State);
		EnterRule(_localctx, 130, RULE_named_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			named_expr();
			State = 1589;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1585;
					Match(COMMA);
					State = 1586;
					named_expr();
					}
					} 
				}
				State = 1591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoke_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_expr_tailContext invoke_expr_tail() {
			return GetRuleContext<Invoke_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Invoke_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInvoke_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInvoke_expr(this);
		}
	}

	[RuleVersion(0)]
	public Invoke_exprContext invoke_expr() {
		Invoke_exprContext _localctx = new Invoke_exprContext(Context, State);
		EnterRule(_localctx, 132, RULE_invoke_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			Match(LPAREN);
			State = 1599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT_OPEN:
			case PLUS:
			case MINUS:
			case TILDA:
			case LPAREN:
			case DOLLAR:
			case LBRACE_CURLY:
			case LBRACE_SQUARE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FALSE:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TRUE:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
			case DIGITS:
			case INTEGER_VALUE:
			case REAL:
			case BLOB:
				{
				State = 1593;
				opt_set_quantifier();
				State = 1594;
				named_expr_list();
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1595;
					Match(COMMA);
					}
				}

				}
				break;
			case ASTERISK:
				{
				State = 1598;
				Match(ASTERISK);
				}
				break;
			case RPAREN:
				break;
			default:
				break;
			}
			State = 1601;
			Match(RPAREN);
			State = 1602;
			invoke_expr_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoke_expr_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_treatmentContext null_treatment() {
			return GetRuleContext<Null_treatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(YQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_name_or_specificationContext window_name_or_specification() {
			return GetRuleContext<Window_name_or_specificationContext>(0);
		}
		public Invoke_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInvoke_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInvoke_expr_tail(this);
		}
	}

	[RuleVersion(0)]
	public Invoke_expr_tailContext invoke_expr_tail() {
		Invoke_expr_tailContext _localctx = new Invoke_expr_tailContext(Context, State);
		EnterRule(_localctx, 134, RULE_invoke_expr_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1604;
				null_treatment();
				}
				break;
			case 2:
				{
				State = 1605;
				filter_clause();
				}
				break;
			}
			State = 1610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVER) {
				{
				State = 1608;
				Match(OVER);
				State = 1609;
				window_name_or_specification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_call_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Invoke_exprContext invoke_expr() {
			return GetRuleContext<Invoke_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext[] an_id_or_type() {
			return GetRuleContexts<An_id_or_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type(int i) {
			return GetRuleContext<An_id_or_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(YQLParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_exprContext an_id_expr() {
			return GetRuleContext<An_id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		public Using_call_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_call_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUsing_call_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUsing_call_expr(this);
		}
	}

	[RuleVersion(0)]
	public Using_call_exprContext using_call_expr() {
		Using_call_exprContext _localctx = new Using_call_exprContext(Context, State);
		EnterRule(_localctx, 136, RULE_using_call_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1612;
				an_id_or_type();
				State = 1613;
				Match(NAMESPACE);
				State = 1614;
				an_id_or_type();
				}
				break;
			case 2:
				{
				State = 1616;
				an_id_expr();
				}
				break;
			case 3:
				{
				State = 1617;
				bind_parameter();
				}
				break;
			case 4:
				{
				State = 1618;
				Match(EXTERNAL);
				State = 1619;
				Match(FUNCTION);
				}
				break;
			}
			State = 1622;
			invoke_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		public Key_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKey_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKey_expr(this);
		}
	}

	[RuleVersion(0)]
	public Key_exprContext key_expr() {
		Key_exprContext _localctx = new Key_exprContext(Context, State);
		EnterRule(_localctx, 138, RULE_key_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			Match(LBRACE_SQUARE);
			State = 1625;
			expr();
			State = 1626;
			Match(RBRACE_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(YQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		public When_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWhen_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWhen_expr(this);
		}
	}

	[RuleVersion(0)]
	public When_exprContext when_expr() {
		When_exprContext _localctx = new When_exprContext(Context, State);
		EnterRule(_localctx, 140, RULE_when_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628;
			Match(WHEN);
			State = 1629;
			expr();
			State = 1630;
			Match(THEN);
			State = 1631;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealContext real() {
			return GetRuleContext<RealContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(YQLParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(YQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(YQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(YQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 142, RULE_literal_value);
		try {
			State = 1643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1633;
				integer();
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1634;
				real();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1635;
				Match(STRING_VALUE);
				}
				break;
			case BLOB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1636;
				Match(BLOB);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1637;
				Match(NULL);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1638;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1639;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1640;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1641;
				bool_value();
				}
				break;
			case EMPTY_ACTION:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1642;
				Match(EMPTY_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(YQLParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		public Bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameterContext bind_parameter() {
		Bind_parameterContext _localctx = new Bind_parameterContext(Context, State);
		EnterRule(_localctx, 144, RULE_bind_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645;
			Match(DOLLAR);
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 1646;
				an_id_or_type();
				}
				break;
			case TRUE:
				{
				State = 1647;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 1648;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(YQLParser.QUESTION, 0); }
		public Opt_bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_bind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_bind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Opt_bind_parameterContext opt_bind_parameter() {
		Opt_bind_parameterContext _localctx = new Opt_bind_parameterContext(Context, State);
		EnterRule(_localctx, 146, RULE_opt_bind_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			bind_parameter();
			State = 1653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 1652;
				Match(QUESTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Bind_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBind_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBind_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Bind_parameter_listContext bind_parameter_list() {
		Bind_parameter_listContext _localctx = new Bind_parameter_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_bind_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			bind_parameter();
			State = 1660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1656;
				Match(COMMA);
				State = 1657;
				bind_parameter();
				}
				}
				State = 1662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_bind_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext[] bind_parameter() {
			return GetRuleContexts<Bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter(int i) {
			return GetRuleContext<Bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Named_bind_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_bind_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_bind_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_bind_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Named_bind_parameterContext named_bind_parameter() {
		Named_bind_parameterContext _localctx = new Named_bind_parameterContext(Context, State);
		EnterRule(_localctx, 150, RULE_named_bind_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			bind_parameter();
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1664;
				Match(AS);
				State = 1665;
				bind_parameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_bind_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameterContext[] named_bind_parameter() {
			return GetRuleContexts<Named_bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameterContext named_bind_parameter(int i) {
			return GetRuleContext<Named_bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Named_bind_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_bind_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_bind_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_bind_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_bind_parameter_listContext named_bind_parameter_list() {
		Named_bind_parameter_listContext _localctx = new Named_bind_parameter_listContext(Context, State);
		EnterRule(_localctx, 152, RULE_named_bind_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			named_bind_parameter();
			State = 1673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1669;
				Match(COMMA);
				State = 1670;
				named_bind_parameter();
				}
				}
				State = 1675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealContext real() {
			return GetRuleContext<RealContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YQLParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 154, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1676;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				{
				State = 1679;
				integer();
				}
				break;
			case REAL:
				{
				State = 1680;
				real();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure() {
			return GetRuleContext<An_id_pureContext>(0);
		}
		public Type_name_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_simple(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_simpleContext type_name_simple() {
		Type_name_simpleContext _localctx = new Type_name_simpleContext(Context, State);
		EnterRule(_localctx, 156, RULE_type_name_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683;
			an_id_pure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_or_bindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Integer_or_bindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_or_bind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInteger_or_bind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInteger_or_bind(this);
		}
	}

	[RuleVersion(0)]
	public Integer_or_bindContext integer_or_bind() {
		Integer_or_bindContext _localctx = new Integer_or_bindContext(Context, State);
		EnterRule(_localctx, 158, RULE_integer_or_bind);
		try {
			State = 1687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685;
				integer();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1686;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Type_name_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tag(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_tagContext type_name_tag() {
		Type_name_tagContext _localctx = new Type_name_tagContext(Context, State);
		EnterRule(_localctx, 160, RULE_type_name_tag);
		try {
			State = 1692;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1689;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1690;
				Match(STRING_VALUE);
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1691;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		public Struct_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_arg(this);
		}
	}

	[RuleVersion(0)]
	public Struct_argContext struct_arg() {
		Struct_argContext _localctx = new Struct_argContext(Context, State);
		EnterRule(_localctx, 162, RULE_struct_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694;
			type_name_tag();
			State = 1695;
			Match(COLON);
			State = 1696;
			type_name_or_bind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_arg_positionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Struct_arg_positionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_arg_positional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterStruct_arg_positional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitStruct_arg_positional(this);
		}
	}

	[RuleVersion(0)]
	public Struct_arg_positionalContext struct_arg_positional() {
		Struct_arg_positionalContext _localctx = new Struct_arg_positionalContext(Context, State);
		EnterRule(_localctx, 164, RULE_struct_arg_positional);
		int _la;
		try {
			State = 1710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1698;
				type_name_tag();
				State = 1699;
				type_name_or_bind();
				State = 1704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT || _la==NULL) {
					{
					State = 1701;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 1700;
						Match(NOT);
						}
					}

					State = 1703;
					Match(NULL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706;
				type_name_or_bind();
				State = 1707;
				Match(AS);
				State = 1708;
				type_name_tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		public Variant_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterVariant_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitVariant_arg(this);
		}
	}

	[RuleVersion(0)]
	public Variant_argContext variant_arg() {
		Variant_argContext _localctx = new Variant_argContext(Context, State);
		EnterRule(_localctx, 166, RULE_variant_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1712;
				type_name_tag();
				State = 1713;
				Match(COLON);
				}
				break;
			}
			State = 1717;
			type_name_or_bind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext variant_arg() {
			return GetRuleContext<Variant_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOMAP() { return GetToken(YQLParser.AUTOMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		public Callable_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCallable_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCallable_arg(this);
		}
	}

	[RuleVersion(0)]
	public Callable_argContext callable_arg() {
		Callable_argContext _localctx = new Callable_argContext(Context, State);
		EnterRule(_localctx, 168, RULE_callable_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			variant_arg();
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE_CURLY) {
				{
				State = 1720;
				Match(LBRACE_CURLY);
				State = 1721;
				Match(AUTOMAP);
				State = 1722;
				Match(RBRACE_CURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callable_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Callable_argContext[] callable_arg() {
			return GetRuleContexts<Callable_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callable_argContext callable_arg(int i) {
			return GetRuleContext<Callable_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Callable_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callable_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCallable_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCallable_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Callable_arg_listContext callable_arg_list() {
		Callable_arg_listContext _localctx = new Callable_arg_listContext(Context, State);
		EnterRule(_localctx, 170, RULE_callable_arg_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			callable_arg();
			State = 1730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1726;
					Match(COMMA);
					State = 1727;
					callable_arg();
					}
					} 
				}
				State = 1732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_decimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_or_bindContext[] integer_or_bind() {
			return GetRuleContexts<Integer_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_or_bindContext integer_or_bind(int i) {
			return GetRuleContext<Integer_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Type_name_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_decimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_decimal(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_decimalContext type_name_decimal() {
		Type_name_decimalContext _localctx = new Type_name_decimalContext(Context, State);
		EnterRule(_localctx, 172, RULE_type_name_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			Match(DECIMAL);
			State = 1734;
			Match(LPAREN);
			State = 1735;
			integer_or_bind();
			State = 1736;
			Match(COMMA);
			State = 1737;
			integer_or_bind();
			State = 1738;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_optionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_optionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_optional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_optional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_optional(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_optionalContext type_name_optional() {
		Type_name_optionalContext _localctx = new Type_name_optionalContext(Context, State);
		EnterRule(_localctx, 174, RULE_type_name_optional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			Match(OPTIONAL);
			State = 1741;
			Match(LESS);
			State = 1742;
			type_name_or_bind();
			State = 1743;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_tupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE() { return GetToken(YQLParser.TUPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2() { return GetToken(YQLParser.NOT_EQUALS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext[] type_name_or_bind() {
			return GetRuleContexts<Type_name_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind(int i) {
			return GetRuleContext<Type_name_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tuple(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_tupleContext type_name_tuple() {
		Type_name_tupleContext _localctx = new Type_name_tupleContext(Context, State);
		EnterRule(_localctx, 176, RULE_type_name_tuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			Match(TUPLE);
			State = 1762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS:
				{
				State = 1746;
				Match(LESS);
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLLAR || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 1126037480013825L) != 0) || _la==FLOW || _la==LIST || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & 2305843284091600897L) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & 1970599723274243L) != 0)) {
					{
					State = 1747;
					type_name_or_bind();
					State = 1752;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1748;
							Match(COMMA);
							State = 1749;
							type_name_or_bind();
							}
							} 
						}
						State = 1754;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
					}
					State = 1756;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1755;
						Match(COMMA);
						}
					}

					}
				}

				State = 1760;
				Match(GREATER);
				}
				break;
			case NOT_EQUALS2:
				{
				State = 1761;
				Match(NOT_EQUALS2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_structContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(YQLParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS2() { return GetToken(YQLParser.NOT_EQUALS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_argContext[] struct_arg() {
			return GetRuleContexts<Struct_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_argContext struct_arg(int i) {
			return GetRuleContext<Struct_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_structContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_struct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_struct(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_structContext type_name_struct() {
		Type_name_structContext _localctx = new Type_name_structContext(Context, State);
		EnterRule(_localctx, 178, RULE_type_name_struct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764;
			Match(STRUCT);
			State = 1781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS:
				{
				State = 1765;
				Match(LESS);
				State = 1777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -275146342655L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -9070987708417L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -9007199288295425L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -289356276201160705L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 17590038462431L) != 0)) {
					{
					State = 1766;
					struct_arg();
					State = 1771;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1767;
							Match(COMMA);
							State = 1768;
							struct_arg();
							}
							} 
						}
						State = 1773;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
					}
					State = 1775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1774;
						Match(COMMA);
						}
					}

					}
				}

				State = 1779;
				Match(GREATER);
				}
				break;
			case NOT_EQUALS2:
				{
				State = 1780;
				Match(NOT_EQUALS2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_variantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext[] variant_arg() {
			return GetRuleContexts<Variant_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_argContext variant_arg(int i) {
			return GetRuleContext<Variant_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_variantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_variant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_variant(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_variantContext type_name_variant() {
		Type_name_variantContext _localctx = new Type_name_variantContext(Context, State);
		EnterRule(_localctx, 180, RULE_type_name_variant);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783;
			Match(VARIANT);
			State = 1784;
			Match(LESS);
			State = 1785;
			variant_arg();
			State = 1790;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1786;
					Match(COMMA);
					State = 1787;
					variant_arg();
					}
					} 
				}
				State = 1792;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			State = 1794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1793;
				Match(COMMA);
				}
			}

			State = 1796;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 182, RULE_type_name_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798;
			Match(LIST);
			State = 1799;
			Match(LESS);
			State = 1800;
			type_name_or_bind();
			State = 1801;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_streamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_streamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_stream; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_stream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_stream(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_streamContext type_name_stream() {
		Type_name_streamContext _localctx = new Type_name_streamContext(Context, State);
		EnterRule(_localctx, 184, RULE_type_name_stream);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803;
			Match(STREAM);
			State = 1804;
			Match(LESS);
			State = 1805;
			type_name_or_bind();
			State = 1806;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_flowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(YQLParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_flowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_flow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_flow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_flow(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_flowContext type_name_flow() {
		Type_name_flowContext _localctx = new Type_name_flowContext(Context, State);
		EnterRule(_localctx, 186, RULE_type_name_flow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1808;
			Match(FLOW);
			State = 1809;
			Match(LESS);
			State = 1810;
			type_name_or_bind();
			State = 1811;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_dictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext[] type_name_or_bind() {
			return GetRuleContexts<Type_name_or_bindContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind(int i) {
			return GetRuleContext<Type_name_or_bindContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_dictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_dict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_dict(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_dictContext type_name_dict() {
		Type_name_dictContext _localctx = new Type_name_dictContext(Context, State);
		EnterRule(_localctx, 188, RULE_type_name_dict);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			Match(DICT);
			State = 1814;
			Match(LESS);
			State = 1815;
			type_name_or_bind();
			State = 1816;
			Match(COMMA);
			State = 1817;
			type_name_or_bind();
			State = 1818;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_set(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_setContext type_name_set() {
		Type_name_setContext _localctx = new Type_name_setContext(Context, State);
		EnterRule(_localctx, 190, RULE_type_name_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820;
			Match(SET);
			State = 1821;
			Match(LESS);
			State = 1822;
			type_name_or_bind();
			State = 1823;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext[] type_name_tag() {
			return GetRuleContexts<Type_name_tagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag(int i) {
			return GetRuleContext<Type_name_tagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Type_name_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_enum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_enum(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_enumContext type_name_enum() {
		Type_name_enumContext _localctx = new Type_name_enumContext(Context, State);
		EnterRule(_localctx, 192, RULE_type_name_enum);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825;
			Match(ENUM);
			State = 1826;
			Match(LESS);
			State = 1827;
			type_name_tag();
			State = 1832;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1828;
					Match(COMMA);
					State = 1829;
					type_name_tag();
					}
					} 
				}
				State = 1834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1835;
				Match(COMMA);
				}
			}

			State = 1838;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_resourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_resourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_resource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_resource(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_resourceContext type_name_resource() {
		Type_name_resourceContext _localctx = new Type_name_resourceContext(Context, State);
		EnterRule(_localctx, 194, RULE_type_name_resource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			Match(RESOURCE);
			State = 1841;
			Match(LESS);
			State = 1842;
			type_name_tag();
			State = 1843;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_taggedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGGED() { return GetToken(YQLParser.TAGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag() {
			return GetRuleContext<Type_name_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		public Type_name_taggedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_tagged; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_tagged(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_tagged(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_taggedContext type_name_tagged() {
		Type_name_taggedContext _localctx = new Type_name_taggedContext(Context, State);
		EnterRule(_localctx, 196, RULE_type_name_tagged);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			Match(TAGGED);
			State = 1846;
			Match(LESS);
			State = 1847;
			type_name_or_bind();
			State = 1848;
			Match(COMMA);
			State = 1849;
			type_name_tag();
			State = 1850;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_callableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(YQLParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(YQLParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(YQLParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Callable_arg_listContext[] callable_arg_list() {
			return GetRuleContexts<Callable_arg_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callable_arg_listContext callable_arg_list(int i) {
			return GetRuleContext<Callable_arg_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_SQUARE() { return GetToken(YQLParser.LBRACE_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_SQUARE() { return GetToken(YQLParser.RBRACE_SQUARE, 0); }
		public Type_name_callableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_callable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_callable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_callable(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_callableContext type_name_callable() {
		Type_name_callableContext _localctx = new Type_name_callableContext(Context, State);
		EnterRule(_localctx, 198, RULE_type_name_callable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			Match(CALLABLE);
			State = 1853;
			Match(LESS);
			State = 1854;
			Match(LPAREN);
			State = 1856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -268435711L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -274877906945L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -1L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -8388609L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 17592186011647L) != 0)) {
				{
				State = 1855;
				callable_arg_list();
				}
			}

			State = 1859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1858;
				Match(COMMA);
				}
			}

			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE_SQUARE) {
				{
				State = 1861;
				Match(LBRACE_SQUARE);
				State = 1862;
				callable_arg_list();
				State = 1863;
				Match(RBRACE_SQUARE);
				}
			}

			State = 1867;
			Match(RPAREN);
			State = 1868;
			Match(ARROW);
			State = 1869;
			type_name_or_bind();
			State = 1870;
			Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_compositeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_optionalContext type_name_optional() {
			return GetRuleContext<Type_name_optionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tupleContext type_name_tuple() {
			return GetRuleContext<Type_name_tupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_structContext type_name_struct() {
			return GetRuleContext<Type_name_structContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_variantContext type_name_variant() {
			return GetRuleContext<Type_name_variantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_streamContext type_name_stream() {
			return GetRuleContext<Type_name_streamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_flowContext type_name_flow() {
			return GetRuleContext<Type_name_flowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_dictContext type_name_dict() {
			return GetRuleContext<Type_name_dictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_setContext type_name_set() {
			return GetRuleContext<Type_name_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_enumContext type_name_enum() {
			return GetRuleContext<Type_name_enumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_resourceContext type_name_resource() {
			return GetRuleContext<Type_name_resourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_taggedContext type_name_tagged() {
			return GetRuleContext<Type_name_taggedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_callableContext type_name_callable() {
			return GetRuleContext<Type_name_callableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Type_name_compositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_composite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_composite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_composite(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_compositeContext type_name_composite() {
		Type_name_compositeContext _localctx = new Type_name_compositeContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_name_composite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONAL:
				{
				State = 1872;
				type_name_optional();
				}
				break;
			case TUPLE:
				{
				State = 1873;
				type_name_tuple();
				}
				break;
			case STRUCT:
				{
				State = 1874;
				type_name_struct();
				}
				break;
			case VARIANT:
				{
				State = 1875;
				type_name_variant();
				}
				break;
			case LIST:
				{
				State = 1876;
				type_name_list();
				}
				break;
			case STREAM:
				{
				State = 1877;
				type_name_stream();
				}
				break;
			case FLOW:
				{
				State = 1878;
				type_name_flow();
				}
				break;
			case DICT:
				{
				State = 1879;
				type_name_dict();
				}
				break;
			case SET:
				{
				State = 1880;
				type_name_set();
				}
				break;
			case ENUM:
				{
				State = 1881;
				type_name_enum();
				}
				break;
			case RESOURCE:
				{
				State = 1882;
				type_name_resource();
				}
				break;
			case TAGGED:
				{
				State = 1883;
				type_name_tagged();
				}
				break;
			case CALLABLE:
				{
				State = 1884;
				type_name_callable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QUESTION) {
				{
				{
				State = 1887;
				Match(QUESTION);
				}
				}
				State = 1892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_compositeContext type_name_composite() {
			return GetRuleContext<Type_name_compositeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_decimalContext type_name_decimal() {
			return GetRuleContext<Type_name_decimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_simpleContext type_name_simple() {
			return GetRuleContext<Type_name_simpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 202, RULE_type_name);
		int _la;
		try {
			State = 1904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STREAM:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1893;
				type_name_composite();
				}
				break;
			case DECIMAL:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 1894;
					type_name_decimal();
					}
					break;
				case STRING_VALUE:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 1895;
					type_name_simple();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==QUESTION) {
					{
					{
					State = 1898;
					Match(QUESTION);
					}
					}
					State = 1903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_or_bindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Type_name_or_bindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_or_bind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_name_or_bind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_name_or_bind(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_or_bindContext type_name_or_bind() {
		Type_name_or_bindContext _localctx = new Type_name_or_bindContext(Context, State);
		EnterRule(_localctx, 204, RULE_type_name_or_bind);
		try {
			State = 1908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALLABLE:
			case DECIMAL:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STREAM:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906;
				type_name();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1907;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_constructor_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Value_constructor_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_constructor_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValue_constructor_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValue_constructor_literal(this);
		}
	}

	[RuleVersion(0)]
	public Value_constructor_literalContext value_constructor_literal() {
		Value_constructor_literalContext _localctx = new Value_constructor_literalContext(Context, State);
		EnterRule(_localctx, 206, RULE_value_constructor_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1910;
			Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		public Value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValue_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValue_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Value_constructorContext value_constructor() {
		Value_constructorContext _localctx = new Value_constructorContext(Context, State);
		EnterRule(_localctx, 208, RULE_value_constructor);
		try {
			State = 1935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1912;
				Match(VARIANT);
				State = 1913;
				Match(LPAREN);
				State = 1914;
				expr();
				State = 1915;
				Match(COMMA);
				State = 1916;
				expr();
				State = 1917;
				Match(COMMA);
				State = 1918;
				expr();
				State = 1919;
				Match(RPAREN);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1921;
				Match(ENUM);
				State = 1922;
				Match(LPAREN);
				State = 1923;
				expr();
				State = 1924;
				Match(COMMA);
				State = 1925;
				expr();
				State = 1926;
				Match(RPAREN);
				}
				break;
			case CALLABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1928;
				Match(CALLABLE);
				State = 1929;
				Match(LPAREN);
				State = 1930;
				expr();
				State = 1931;
				Match(COMMA);
				State = 1932;
				expr();
				State = 1933;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDeclare_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDeclare_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Declare_stmtContext declare_stmt() {
		Declare_stmtContext _localctx = new Declare_stmtContext(Context, State);
		EnterRule(_localctx, 210, RULE_declare_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1937;
			Match(DECLARE);
			State = 1938;
			bind_parameter();
			State = 1939;
			Match(AS);
			State = 1940;
			type_name();
			State = 1943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 1941;
				Match(EQUALS);
				State = 1942;
				literal_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(YQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(YQLParser.DOT, i);
		}
		public Module_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterModule_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitModule_path(this);
		}
	}

	[RuleVersion(0)]
	public Module_pathContext module_path() {
		Module_pathContext _localctx = new Module_pathContext(Context, State);
		EnterRule(_localctx, 212, RULE_module_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 1945;
				Match(DOT);
				}
			}

			State = 1948;
			an_id();
			State = 1953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1949;
				Match(DOT);
				State = 1950;
				an_id();
				}
				}
				State = 1955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_pathContext module_path() {
			return GetRuleContext<Module_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_bind_parameter_listContext named_bind_parameter_list() {
			return GetRuleContext<Named_bind_parameter_listContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 214, RULE_import_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956;
			Match(IMPORT);
			State = 1957;
			module_path();
			State = 1958;
			Match(SYMBOLS);
			State = 1959;
			named_bind_parameter_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameter_listContext bind_parameter_list() {
			return GetRuleContext<Bind_parameter_listContext>(0);
		}
		public Export_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Export_stmtContext export_stmt() {
		Export_stmtContext _localctx = new Export_stmtContext(Context, State);
		EnterRule(_localctx, 216, RULE_export_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961;
			Match(EXPORT);
			State = 1962;
			bind_parameter_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Call_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCall_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCall_action(this);
		}
	}

	[RuleVersion(0)]
	public Call_actionContext call_action() {
		Call_actionContext _localctx = new Call_actionContext(Context, State);
		EnterRule(_localctx, 218, RULE_call_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				{
				State = 1964;
				bind_parameter();
				}
				break;
			case EMPTY_ACTION:
				{
				State = 1965;
				Match(EMPTY_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1968;
			Match(LPAREN);
			State = 1970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
				{
				State = 1969;
				expr_list();
				}
			}

			State = 1972;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
			return GetRuleContext<Define_action_or_subquery_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		public Inline_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInline_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInline_action(this);
		}
	}

	[RuleVersion(0)]
	public Inline_actionContext inline_action() {
		Inline_actionContext _localctx = new Inline_actionContext(Context, State);
		EnterRule(_localctx, 220, RULE_inline_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(BEGIN);
			State = 1975;
			define_action_or_subquery_body();
			State = 1976;
			Match(END);
			State = 1977;
			Match(DO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_actionContext call_action() {
			return GetRuleContext<Call_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_actionContext inline_action() {
			return GetRuleContext<Inline_actionContext>(0);
		}
		public Do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDo_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDo_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Do_stmtContext do_stmt() {
		Do_stmtContext _localctx = new Do_stmtContext(Context, State);
		EnterRule(_localctx, 222, RULE_do_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			Match(DO);
			State = 1982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
			case EMPTY_ACTION:
				{
				State = 1980;
				call_action();
				}
				break;
			case BEGIN:
				{
				State = 1981;
				inline_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefix_or_typeContext opt_id_prefix_or_type() {
			return GetRuleContext<Opt_id_prefix_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext[] pragma_value() {
			return GetRuleContexts<Pragma_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext pragma_value(int i) {
			return GetRuleContext<Pragma_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 224, RULE_pragma_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984;
			Match(PRAGMA);
			State = 1985;
			opt_id_prefix_or_type();
			State = 1986;
			an_id();
			State = 2000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS:
				{
				State = 1987;
				Match(EQUALS);
				State = 1988;
				pragma_value();
				}
				break;
			case LPAREN:
				{
				State = 1989;
				Match(LPAREN);
				State = 1990;
				pragma_value();
				State = 1995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1991;
					Match(COMMA);
					State = 1992;
					pragma_value();
					}
					}
					State = 1997;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1998;
				Match(RPAREN);
				}
				break;
			case Eof:
			case SEMICOLON:
			case END:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 226, RULE_pragma_value);
		try {
			State = 2007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case DIGITS:
			case INTEGER_VALUE:
			case REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2002;
				signed_number();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2003;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2004;
				Match(STRING_VALUE);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2005;
				bool_value();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2006;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		public Sort_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSort_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSort_specification(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specificationContext sort_specification() {
		Sort_specificationContext _localctx = new Sort_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_sort_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009;
			expr();
			State = 2011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2010;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specification_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specificationContext[] sort_specification() {
			return GetRuleContexts<Sort_specificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specificationContext sort_specification(int i) {
			return GetRuleContext<Sort_specificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Sort_specification_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specification_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSort_specification_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSort_specification_list(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specification_listContext sort_specification_list() {
		Sort_specification_listContext _localctx = new Sort_specification_listContext(Context, State);
		EnterRule(_localctx, 230, RULE_sort_specification_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2013;
			sort_specification();
			State = 2018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2014;
				Match(COMMA);
				State = 2015;
				sort_specification();
				}
				}
				State = 2020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext[] select_kind_parenthesis() {
			return GetRuleContexts<Select_kind_parenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext select_kind_parenthesis(int i) {
			return GetRuleContext<Select_kind_parenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext[] select_op() {
			return GetRuleContexts<Select_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext select_op(int i) {
			return GetRuleContext<Select_opContext>(i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 232, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			select_kind_parenthesis();
			State = 2027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				State = 2022;
				select_op();
				State = 2023;
				select_kind_parenthesis();
				}
				}
				State = 2029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_unparenthesized_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_partialContext select_kind_partial() {
			return GetRuleContext<Select_kind_partialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext[] select_op() {
			return GetRuleContexts<Select_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_opContext select_op(int i) {
			return GetRuleContext<Select_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext[] select_kind_parenthesis() {
			return GetRuleContexts<Select_kind_parenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_parenthesisContext select_kind_parenthesis(int i) {
			return GetRuleContext<Select_kind_parenthesisContext>(i);
		}
		public Select_unparenthesized_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_unparenthesized_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_unparenthesized_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_unparenthesized_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_unparenthesized_stmtContext select_unparenthesized_stmt() {
		Select_unparenthesized_stmtContext _localctx = new Select_unparenthesized_stmtContext(Context, State);
		EnterRule(_localctx, 234, RULE_select_unparenthesized_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030;
			select_kind_partial();
			State = 2036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				{
				State = 2031;
				select_op();
				State = 2032;
				select_kind_parenthesis();
				}
				}
				State = 2038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kind_parenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kind_partialContext select_kind_partial() {
			return GetRuleContext<Select_kind_partialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Select_kind_parenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind_parenthesis(this);
		}
	}

	[RuleVersion(0)]
	public Select_kind_parenthesisContext select_kind_parenthesis() {
		Select_kind_parenthesisContext _localctx = new Select_kind_parenthesisContext(Context, State);
		EnterRule(_localctx, 236, RULE_select_kind_parenthesis);
		try {
			State = 2044;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2039;
				select_kind_partial();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2040;
				Match(LPAREN);
				State = 2041;
				select_kind_partial();
				State = 2042;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(YQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(YQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(YQLParser.EXCEPT, 0); }
		public Select_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_op(this);
		}
	}

	[RuleVersion(0)]
	public Select_opContext select_op() {
		Select_opContext _localctx = new Select_opContext(Context, State);
		EnterRule(_localctx, 238, RULE_select_op);
		int _la;
		try {
			State = 2052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2046;
				Match(UNION);
				State = 2048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 2047;
					Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2050;
				Match(INTERSECT);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2051;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kind_partialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_kindContext select_kind() {
			return GetRuleContext<Select_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(YQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Select_kind_partialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind_partial; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind_partial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind_partial(this);
		}
	}

	[RuleVersion(0)]
	public Select_kind_partialContext select_kind_partial() {
		Select_kind_partialContext _localctx = new Select_kind_partialContext(Context, State);
		EnterRule(_localctx, 240, RULE_select_kind_partial);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054;
			select_kind();
			State = 2061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 2055;
				Match(LIMIT);
				State = 2056;
				expr();
				State = 2059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==OFFSET) {
					{
					State = 2057;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2058;
					expr();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_coreContext process_core() {
			return GetRuleContext<Process_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reduce_coreContext reduce_core() {
			return GetRuleContext<Reduce_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(YQLParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named() {
			return GetRuleContext<Pure_column_or_namedContext>(0);
		}
		public Select_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_kind(this);
		}
	}

	[RuleVersion(0)]
	public Select_kindContext select_kind() {
		Select_kindContext _localctx = new Select_kindContext(Context, State);
		EnterRule(_localctx, 242, RULE_select_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISCARD) {
				{
				State = 2063;
				Match(DISCARD);
				}
			}

			State = 2069;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCESS:
				{
				State = 2066;
				process_core();
				}
				break;
			case REDUCE:
				{
				State = 2067;
				reduce_core();
				}
				break;
			case FROM:
			case SELECT:
				{
				State = 2068;
				select_core();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2071;
				Match(INTO);
				State = 2072;
				Match(RESULT);
				State = 2073;
				pure_column_or_named();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(YQLParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext[] named_single_source() {
			return GetRuleContexts<Named_single_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source(int i) {
			return GetRuleContext<Named_single_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Using_call_exprContext using_call_expr() {
			return GetRuleContext<Using_call_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_call_settingsContext external_call_settings() {
			return GetRuleContext<External_call_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Process_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterProcess_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitProcess_core(this);
		}
	}

	[RuleVersion(0)]
	public Process_coreContext process_core() {
		Process_coreContext _localctx = new Process_coreContext(Context, State);
		EnterRule(_localctx, 244, RULE_process_core);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076;
			Match(PROCESS);
			State = 2078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2077;
				Match(STREAM);
				}
				break;
			}
			State = 2080;
			named_single_source();
			State = 2085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2081;
				Match(COMMA);
				State = 2082;
				named_single_source();
				}
				}
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 2088;
				Match(USING);
				State = 2089;
				using_call_expr();
				State = 2092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2090;
					Match(AS);
					State = 2091;
					an_id();
					}
				}

				State = 2096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2094;
					Match(WITH);
					State = 2095;
					external_call_settings();
					}
				}

				State = 2100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2098;
					Match(WHERE);
					State = 2099;
					expr();
					}
				}

				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 2102;
					Match(HAVING);
					State = 2103;
					expr();
					}
				}

				State = 2108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSUME) {
					{
					State = 2106;
					Match(ASSUME);
					State = 2107;
					order_by_clause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_call_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public External_call_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_call_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExternal_call_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExternal_call_param(this);
		}
	}

	[RuleVersion(0)]
	public External_call_paramContext external_call_param() {
		External_call_paramContext _localctx = new External_call_paramContext(Context, State);
		EnterRule(_localctx, 246, RULE_external_call_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2112;
			an_id();
			State = 2113;
			Match(EQUALS);
			State = 2114;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_call_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_call_paramContext[] external_call_param() {
			return GetRuleContexts<External_call_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_call_paramContext external_call_param(int i) {
			return GetRuleContext<External_call_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public External_call_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_call_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExternal_call_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExternal_call_settings(this);
		}
	}

	[RuleVersion(0)]
	public External_call_settingsContext external_call_settings() {
		External_call_settingsContext _localctx = new External_call_settingsContext(Context, State);
		EnterRule(_localctx, 248, RULE_external_call_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116;
			external_call_param();
			State = 2121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2117;
				Match(COMMA);
				State = 2118;
				external_call_param();
				}
				}
				State = 2123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reduce_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(YQLParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext[] named_single_source() {
			return GetRuleContexts<Named_single_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source(int i) {
			return GetRuleContext<Named_single_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Using_call_exprContext using_call_expr() {
			return GetRuleContext<Using_call_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESORT() { return GetToken(YQLParser.PRESORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specification_listContext sort_specification_list() {
			return GetRuleContext<Sort_specification_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Reduce_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reduce_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReduce_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReduce_core(this);
		}
	}

	[RuleVersion(0)]
	public Reduce_coreContext reduce_core() {
		Reduce_coreContext _localctx = new Reduce_coreContext(Context, State);
		EnterRule(_localctx, 250, RULE_reduce_core);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2124;
			Match(REDUCE);
			State = 2125;
			named_single_source();
			State = 2130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2126;
				Match(COMMA);
				State = 2127;
				named_single_source();
				}
				}
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRESORT) {
				{
				State = 2133;
				Match(PRESORT);
				State = 2134;
				sort_specification_list();
				}
			}

			State = 2137;
			Match(ON);
			State = 2138;
			column_list();
			State = 2139;
			Match(USING);
			State = 2141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2140;
				Match(ALL);
				}
				break;
			}
			State = 2143;
			using_call_expr();
			State = 2146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2144;
				Match(AS);
				State = 2145;
				an_id();
				}
			}

			State = 2150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2148;
				Match(WHERE);
				State = 2149;
				expr();
				}
			}

			State = 2154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 2152;
				Match(HAVING);
				State = 2153;
				expr();
				}
			}

			State = 2158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME) {
				{
				State = 2156;
				Match(ASSUME);
				State = 2157;
				order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_set_quantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		public Opt_set_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_set_quantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_set_quantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_set_quantifier(this);
		}
	}

	[RuleVersion(0)]
	public Opt_set_quantifierContext opt_set_quantifier() {
		Opt_set_quantifierContext _localctx = new Opt_set_quantifierContext(Context, State);
		EnterRule(_localctx, 252, RULE_opt_set_quantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				{
				State = 2160;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(YQLParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(YQLParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_sourceContext[] join_source() {
			return GetRuleContexts<Join_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_sourceContext join_source(int i) {
			return GetRuleContext<Join_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Without_column_listContext without_column_list() {
			return GetRuleContext<Without_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ext_order_by_clauseContext ext_order_by_clause() {
			return GetRuleContext<Ext_order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 254, RULE_select_core);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2163;
				Match(FROM);
				State = 2164;
				join_source();
				}
			}

			State = 2167;
			Match(SELECT);
			State = 2169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 2168;
				Match(STREAM);
				}
				break;
			}
			State = 2171;
			opt_set_quantifier();
			State = 2172;
			result_column();
			State = 2177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2173;
					Match(COMMA);
					State = 2174;
					result_column();
					}
					} 
				}
				State = 2179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			State = 2181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2180;
				Match(COMMA);
				}
			}

			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITHOUT) {
				{
				State = 2183;
				Match(WITHOUT);
				State = 2186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 2184;
					Match(IF);
					State = 2185;
					Match(EXISTS);
					}
					break;
				}
				State = 2188;
				without_column_list();
				}
			}

			State = 2193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 2191;
				Match(FROM);
				State = 2192;
				join_source();
				}
			}

			State = 2197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2195;
				Match(WHERE);
				State = 2196;
				expr();
				}
			}

			State = 2200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 2199;
				group_by_clause();
				}
			}

			State = 2204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 2202;
				Match(HAVING);
				State = 2203;
				expr();
				}
			}

			State = 2207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 2206;
				window_clause();
				}
			}

			State = 2210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME || _la==ORDER) {
				{
				State = 2209;
				ext_order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_recognition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_common_syntaxContext row_pattern_common_syntax() {
			return GetRuleContext<Row_pattern_common_syntaxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_partition_clauseContext window_partition_clause() {
			return GetRuleContext<Window_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measuresContext row_pattern_measures() {
			return GetRuleContext<Row_pattern_measuresContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_rows_per_matchContext row_pattern_rows_per_match() {
			return GetRuleContext<Row_pattern_rows_per_matchContext>(0);
		}
		public Row_pattern_recognition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_recognition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_recognition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_recognition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_recognition_clauseContext row_pattern_recognition_clause() {
		Row_pattern_recognition_clauseContext _localctx = new Row_pattern_recognition_clauseContext(Context, State);
		EnterRule(_localctx, 256, RULE_row_pattern_recognition_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2212;
			Match(MATCH_RECOGNIZE);
			State = 2213;
			Match(LPAREN);
			State = 2215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2214;
				window_partition_clause();
				}
			}

			State = 2218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2217;
				order_by_clause();
				}
			}

			State = 2221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MEASURES) {
				{
				State = 2220;
				row_pattern_measures();
				}
			}

			State = 2224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==ONE) {
				{
				State = 2223;
				row_pattern_rows_per_match();
				}
			}

			State = 2226;
			row_pattern_common_syntax();
			State = 2227;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_rows_per_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_empty_match_handlingContext row_pattern_empty_match_handling() {
			return GetRuleContext<Row_pattern_empty_match_handlingContext>(0);
		}
		public Row_pattern_rows_per_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_rows_per_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_rows_per_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_rows_per_match(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_rows_per_matchContext row_pattern_rows_per_match() {
		Row_pattern_rows_per_matchContext _localctx = new Row_pattern_rows_per_matchContext(Context, State);
		EnterRule(_localctx, 258, RULE_row_pattern_rows_per_match);
		int _la;
		try {
			State = 2240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2229;
				Match(ONE);
				State = 2230;
				Match(ROW);
				State = 2231;
				Match(PER);
				State = 2232;
				Match(MATCH);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2233;
				Match(ALL);
				State = 2234;
				Match(ROWS);
				State = 2235;
				Match(PER);
				State = 2236;
				Match(MATCH);
				State = 2238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OMIT || _la==SHOW || _la==WITH) {
					{
					State = 2237;
					row_pattern_empty_match_handling();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_empty_match_handlingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		public Row_pattern_empty_match_handlingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_empty_match_handling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_empty_match_handling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_empty_match_handling(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_empty_match_handlingContext row_pattern_empty_match_handling() {
		Row_pattern_empty_match_handlingContext _localctx = new Row_pattern_empty_match_handlingContext(Context, State);
		EnterRule(_localctx, 260, RULE_row_pattern_empty_match_handling);
		try {
			State = 2251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2242;
				Match(SHOW);
				State = 2243;
				Match(EMPTY);
				State = 2244;
				Match(MATCHES);
				}
				break;
			case OMIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2245;
				Match(OMIT);
				State = 2246;
				Match(EMPTY);
				State = 2247;
				Match(MATCHES);
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2248;
				Match(WITH);
				State = 2249;
				Match(UNMATCHED);
				State = 2250;
				Match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_listContext row_pattern_measure_list() {
			return GetRuleContext<Row_pattern_measure_listContext>(0);
		}
		public Row_pattern_measuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measures(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measuresContext row_pattern_measures() {
		Row_pattern_measuresContext _localctx = new Row_pattern_measuresContext(Context, State);
		EnterRule(_localctx, 262, RULE_row_pattern_measures);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253;
			Match(MEASURES);
			State = 2254;
			row_pattern_measure_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measure_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_definitionContext[] row_pattern_measure_definition() {
			return GetRuleContexts<Row_pattern_measure_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_measure_definitionContext row_pattern_measure_definition(int i) {
			return GetRuleContext<Row_pattern_measure_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_measure_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measure_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measure_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measure_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measure_listContext row_pattern_measure_list() {
		Row_pattern_measure_listContext _localctx = new Row_pattern_measure_listContext(Context, State);
		EnterRule(_localctx, 264, RULE_row_pattern_measure_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256;
			row_pattern_measure_definition();
			State = 2261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2257;
				Match(COMMA);
				State = 2258;
				row_pattern_measure_definition();
				}
				}
				State = 2263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_measure_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Row_pattern_measure_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_measure_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_measure_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_measure_definition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_measure_definitionContext row_pattern_measure_definition() {
		Row_pattern_measure_definitionContext _localctx = new Row_pattern_measure_definitionContext(Context, State);
		EnterRule(_localctx, 266, RULE_row_pattern_measure_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264;
			expr();
			State = 2265;
			Match(AS);
			State = 2266;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_common_syntaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern() {
			return GetRuleContext<Row_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(YQLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_listContext row_pattern_definition_list() {
			return GetRuleContext<Row_pattern_definition_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_skip_toContext row_pattern_skip_to() {
			return GetRuleContext<Row_pattern_skip_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_initial_or_seekContext row_pattern_initial_or_seek() {
			return GetRuleContext<Row_pattern_initial_or_seekContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_clauseContext row_pattern_subset_clause() {
			return GetRuleContext<Row_pattern_subset_clauseContext>(0);
		}
		public Row_pattern_common_syntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_common_syntax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_common_syntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_common_syntax(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_common_syntaxContext row_pattern_common_syntax() {
		Row_pattern_common_syntaxContext _localctx = new Row_pattern_common_syntaxContext(Context, State);
		EnterRule(_localctx, 268, RULE_row_pattern_common_syntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 2268;
				Match(AFTER);
				State = 2269;
				Match(MATCH);
				State = 2270;
				row_pattern_skip_to();
				}
			}

			State = 2274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL || _la==SEEK) {
				{
				State = 2273;
				row_pattern_initial_or_seek();
				}
			}

			State = 2276;
			Match(PATTERN);
			State = 2277;
			Match(LPAREN);
			State = 2278;
			row_pattern();
			State = 2279;
			Match(RPAREN);
			State = 2281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBSET) {
				{
				State = 2280;
				row_pattern_subset_clause();
				}
			}

			State = 2283;
			Match(DEFINE);
			State = 2284;
			row_pattern_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_skip_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_skip_to_variable_nameContext row_pattern_skip_to_variable_name() {
			return GetRuleContext<Row_pattern_skip_to_variable_nameContext>(0);
		}
		public Row_pattern_skip_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_skip_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_skip_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_skip_to(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_skip_toContext row_pattern_skip_to() {
		Row_pattern_skip_toContext _localctx = new Row_pattern_skip_toContext(Context, State);
		EnterRule(_localctx, 270, RULE_row_pattern_skip_to);
		try {
			State = 2305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2286;
				Match(TSKIP);
				State = 2287;
				Match(TO);
				State = 2288;
				Match(NEXT);
				State = 2289;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2290;
				Match(TSKIP);
				State = 2291;
				Match(PAST);
				State = 2292;
				Match(LAST);
				State = 2293;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2294;
				Match(TSKIP);
				State = 2295;
				Match(TO);
				State = 2296;
				Match(FIRST);
				State = 2297;
				row_pattern_skip_to_variable_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2298;
				Match(TSKIP);
				State = 2299;
				Match(TO);
				State = 2300;
				Match(LAST);
				State = 2301;
				row_pattern_skip_to_variable_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2302;
				Match(TSKIP);
				State = 2303;
				Match(TO);
				State = 2304;
				row_pattern_skip_to_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_skip_to_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_skip_to_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_skip_to_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_skip_to_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_skip_to_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_skip_to_variable_nameContext row_pattern_skip_to_variable_name() {
		Row_pattern_skip_to_variable_nameContext _localctx = new Row_pattern_skip_to_variable_nameContext(Context, State);
		EnterRule(_localctx, 272, RULE_row_pattern_skip_to_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_initial_or_seekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		public Row_pattern_initial_or_seekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_initial_or_seek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_initial_or_seek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_initial_or_seek(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_initial_or_seekContext row_pattern_initial_or_seek() {
		Row_pattern_initial_or_seekContext _localctx = new Row_pattern_initial_or_seekContext(Context, State);
		EnterRule(_localctx, 274, RULE_row_pattern_initial_or_seek);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309;
			_la = TokenStream.LA(1);
			if ( !(_la==INITIAL || _la==SEEK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_termContext[] row_pattern_term() {
			return GetRuleContexts<Row_pattern_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_termContext row_pattern_term(int i) {
			return GetRuleContext<Row_pattern_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(YQLParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(YQLParser.PIPE, i);
		}
		public Row_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Row_patternContext row_pattern() {
		Row_patternContext _localctx = new Row_patternContext(Context, State);
		EnterRule(_localctx, 276, RULE_row_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311;
			row_pattern_term();
			State = 2316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 2312;
				Match(PIPE);
				State = 2313;
				row_pattern_term();
				}
				}
				State = 2318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_factorContext[] row_pattern_factor() {
			return GetRuleContexts<Row_pattern_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_factorContext row_pattern_factor(int i) {
			return GetRuleContext<Row_pattern_factorContext>(i);
		}
		public Row_pattern_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_term(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_termContext row_pattern_term() {
		Row_pattern_termContext _localctx = new Row_pattern_termContext(Context, State);
		EnterRule(_localctx, 278, RULE_row_pattern_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2319;
				row_pattern_factor();
				}
				}
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11844714496L) != 0) || _la==PERMUTE || _la==ID_PLAIN || _la==ID_QUOTED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_primaryContext row_pattern_primary() {
			return GetRuleContext<Row_pattern_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_quantifierContext row_pattern_quantifier() {
			return GetRuleContext<Row_pattern_quantifierContext>(0);
		}
		public Row_pattern_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_factor(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_factorContext row_pattern_factor() {
		Row_pattern_factorContext _localctx = new Row_pattern_factorContext(Context, State);
		EnterRule(_localctx, 280, RULE_row_pattern_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2324;
			row_pattern_primary();
			State = 2326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 2325;
				row_pattern_quantifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_quantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(YQLParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(YQLParser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public Row_pattern_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_quantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_quantifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_quantifier(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_quantifierContext row_pattern_quantifier() {
		Row_pattern_quantifierContext _localctx = new Row_pattern_quantifierContext(Context, State);
		EnterRule(_localctx, 282, RULE_row_pattern_quantifier);
		int _la;
		try {
			State = 2356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2328;
				Match(ASTERISK);
				State = 2330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2329;
					Match(QUESTION);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2332;
				Match(PLUS);
				State = 2334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2333;
					Match(QUESTION);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2336;
				Match(QUESTION);
				State = 2338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2337;
					Match(QUESTION);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2340;
				Match(LBRACE_CURLY);
				State = 2342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITS || _la==INTEGER_VALUE) {
					{
					State = 2341;
					integer();
					}
				}

				State = 2344;
				Match(COMMA);
				State = 2346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITS || _la==INTEGER_VALUE) {
					{
					State = 2345;
					integer();
					}
				}

				State = 2348;
				Match(RBRACE_CURLY);
				State = 2350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2349;
					Match(QUESTION);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2352;
				Match(LBRACE_CURLY);
				State = 2353;
				integer();
				State = 2354;
				Match(RBRACE_CURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_primary_variable_nameContext row_pattern_primary_variable_name() {
			return GetRuleContext<Row_pattern_primary_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(YQLParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(YQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern() {
			return GetRuleContext<Row_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE_CURLY() { return GetToken(YQLParser.LBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(YQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(YQLParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE_CURLY() { return GetToken(YQLParser.RBRACE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_permuteContext row_pattern_permute() {
			return GetRuleContext<Row_pattern_permuteContext>(0);
		}
		public Row_pattern_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_primary(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_primaryContext row_pattern_primary() {
		Row_pattern_primaryContext _localctx = new Row_pattern_primaryContext(Context, State);
		EnterRule(_localctx, 284, RULE_row_pattern_primary);
		int _la;
		try {
			State = 2373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2358;
				row_pattern_primary_variable_name();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2359;
				Match(DOLLAR);
				}
				break;
			case CARET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2360;
				Match(CARET);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2361;
				Match(LPAREN);
				State = 2363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11844714496L) != 0) || _la==PERMUTE || _la==ID_PLAIN || _la==ID_QUOTED) {
					{
					State = 2362;
					row_pattern();
					}
				}

				State = 2365;
				Match(RPAREN);
				}
				break;
			case LBRACE_CURLY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2366;
				Match(LBRACE_CURLY);
				State = 2367;
				Match(MINUS);
				State = 2368;
				row_pattern();
				State = 2369;
				Match(MINUS);
				State = 2370;
				Match(RBRACE_CURLY);
				}
				break;
			case PERMUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2372;
				row_pattern_permute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_primary_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_primary_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_primary_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_primary_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_primary_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_primary_variable_nameContext row_pattern_primary_variable_name() {
		Row_pattern_primary_variable_nameContext _localctx = new Row_pattern_primary_variable_nameContext(Context, State);
		EnterRule(_localctx, 286, RULE_row_pattern_primary_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2375;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_permuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext[] row_pattern() {
			return GetRuleContexts<Row_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_patternContext row_pattern(int i) {
			return GetRuleContext<Row_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_permuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_permute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_permute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_permute(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_permuteContext row_pattern_permute() {
		Row_pattern_permuteContext _localctx = new Row_pattern_permuteContext(Context, State);
		EnterRule(_localctx, 288, RULE_row_pattern_permute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			Match(PERMUTE);
			State = 2378;
			Match(LPAREN);
			State = 2379;
			row_pattern();
			State = 2384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2380;
				Match(COMMA);
				State = 2381;
				row_pattern();
				}
				}
				State = 2386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2387;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_listContext row_pattern_subset_list() {
			return GetRuleContext<Row_pattern_subset_listContext>(0);
		}
		public Row_pattern_subset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_clauseContext row_pattern_subset_clause() {
		Row_pattern_subset_clauseContext _localctx = new Row_pattern_subset_clauseContext(Context, State);
		EnterRule(_localctx, 290, RULE_row_pattern_subset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			Match(SUBSET);
			State = 2390;
			row_pattern_subset_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_itemContext[] row_pattern_subset_item() {
			return GetRuleContexts<Row_pattern_subset_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_itemContext row_pattern_subset_item(int i) {
			return GetRuleContext<Row_pattern_subset_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_subset_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_listContext row_pattern_subset_list() {
		Row_pattern_subset_listContext _localctx = new Row_pattern_subset_listContext(Context, State);
		EnterRule(_localctx, 292, RULE_row_pattern_subset_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392;
			row_pattern_subset_item();
			State = 2397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2393;
				Match(COMMA);
				State = 2394;
				row_pattern_subset_item();
				}
				}
				State = 2399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_item_variable_nameContext row_pattern_subset_item_variable_name() {
			return GetRuleContext<Row_pattern_subset_item_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhsContext row_pattern_subset_rhs() {
			return GetRuleContext<Row_pattern_subset_rhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Row_pattern_subset_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_item(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_itemContext row_pattern_subset_item() {
		Row_pattern_subset_itemContext _localctx = new Row_pattern_subset_itemContext(Context, State);
		EnterRule(_localctx, 294, RULE_row_pattern_subset_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2400;
			row_pattern_subset_item_variable_name();
			State = 2401;
			Match(EQUALS);
			State = 2402;
			Match(LPAREN);
			State = 2403;
			row_pattern_subset_rhs();
			State = 2404;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_item_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_subset_item_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_item_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_item_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_item_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_item_variable_nameContext row_pattern_subset_item_variable_name() {
		Row_pattern_subset_item_variable_nameContext _localctx = new Row_pattern_subset_item_variable_nameContext(Context, State);
		EnterRule(_localctx, 296, RULE_row_pattern_subset_item_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_rhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhs_variable_nameContext[] row_pattern_subset_rhs_variable_name() {
			return GetRuleContexts<Row_pattern_subset_rhs_variable_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_subset_rhs_variable_nameContext row_pattern_subset_rhs_variable_name(int i) {
			return GetRuleContext<Row_pattern_subset_rhs_variable_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_subset_rhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_rhs(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_rhsContext row_pattern_subset_rhs() {
		Row_pattern_subset_rhsContext _localctx = new Row_pattern_subset_rhsContext(Context, State);
		EnterRule(_localctx, 298, RULE_row_pattern_subset_rhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2408;
			row_pattern_subset_rhs_variable_name();
			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2409;
				Match(COMMA);
				State = 2410;
				row_pattern_subset_rhs_variable_name();
				}
				}
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_subset_rhs_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_subset_rhs_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_subset_rhs_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_subset_rhs_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_subset_rhs_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_subset_rhs_variable_nameContext row_pattern_subset_rhs_variable_name() {
		Row_pattern_subset_rhs_variable_nameContext _localctx = new Row_pattern_subset_rhs_variable_nameContext(Context, State);
		EnterRule(_localctx, 300, RULE_row_pattern_subset_rhs_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2416;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definitionContext[] row_pattern_definition() {
			return GetRuleContexts<Row_pattern_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definitionContext row_pattern_definition(int i) {
			return GetRuleContext<Row_pattern_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Row_pattern_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_listContext row_pattern_definition_list() {
		Row_pattern_definition_listContext _localctx = new Row_pattern_definition_listContext(Context, State);
		EnterRule(_localctx, 302, RULE_row_pattern_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418;
			row_pattern_definition();
			State = 2423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2419;
				Match(COMMA);
				State = 2420;
				row_pattern_definition();
				}
				}
				State = 2425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_variable_nameContext row_pattern_definition_variable_name() {
			return GetRuleContext<Row_pattern_definition_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_definition_search_conditionContext row_pattern_definition_search_condition() {
			return GetRuleContext<Row_pattern_definition_search_conditionContext>(0);
		}
		public Row_pattern_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definitionContext row_pattern_definition() {
		Row_pattern_definitionContext _localctx = new Row_pattern_definitionContext(Context, State);
		EnterRule(_localctx, 304, RULE_row_pattern_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426;
			row_pattern_definition_variable_name();
			State = 2427;
			Match(AS);
			State = 2428;
			row_pattern_definition_search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_variable_nameContext row_pattern_variable_name() {
			return GetRuleContext<Row_pattern_variable_nameContext>(0);
		}
		public Row_pattern_definition_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_variable_nameContext row_pattern_definition_variable_name() {
		Row_pattern_definition_variable_nameContext _localctx = new Row_pattern_definition_variable_nameContext(Context, State);
		EnterRule(_localctx, 306, RULE_row_pattern_definition_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430;
			row_pattern_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_definition_search_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Row_pattern_definition_search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_definition_search_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_definition_search_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_definition_search_condition(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_definition_search_conditionContext row_pattern_definition_search_condition() {
		Row_pattern_definition_search_conditionContext _localctx = new Row_pattern_definition_search_conditionContext(Context, State);
		EnterRule(_localctx, 308, RULE_row_pattern_definition_search_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432;
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 310, RULE_search_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2434;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_pattern_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Row_pattern_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_pattern_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRow_pattern_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRow_pattern_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Row_pattern_variable_nameContext row_pattern_variable_name() {
		Row_pattern_variable_nameContext _localctx = new Row_pattern_variable_nameContext(Context, State);
		EnterRule(_localctx, 312, RULE_row_pattern_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_specification_listContext sort_specification_list() {
			return GetRuleContext<Sort_specification_listContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 314, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438;
			Match(ORDER);
			State = 2439;
			Match(BY);
			State = 2440;
			sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ext_order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		public Ext_order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ext_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExt_order_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExt_order_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Ext_order_by_clauseContext ext_order_by_clause() {
		Ext_order_by_clauseContext _localctx = new Ext_order_by_clauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_ext_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSUME) {
				{
				State = 2442;
				Match(ASSUME);
				}
			}

			State = 2445;
			order_by_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_quantifierContext opt_set_quantifier() {
			return GetRuleContext<Opt_set_quantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_element_listContext grouping_element_list() {
			return GetRuleContext<Grouping_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_group_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447;
			Match(GROUP);
			State = 2449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPACT) {
				{
				State = 2448;
				Match(COMPACT);
				}
			}

			State = 2451;
			Match(BY);
			State = 2452;
			opt_set_quantifier();
			State = 2453;
			grouping_element_list();
			State = 2456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2454;
				Match(WITH);
				State = 2455;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_elementContext[] grouping_element() {
			return GetRuleContexts<Grouping_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_elementContext grouping_element(int i) {
			return GetRuleContext<Grouping_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_element_listContext grouping_element_list() {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(Context, State);
		EnterRule(_localctx, 320, RULE_grouping_element_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2458;
			grouping_element();
			State = 2463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2459;
				Match(COMMA);
				State = 2460;
				grouping_element();
				}
				}
				State = 2465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext ordinary_grouping_set() {
			return GetRuleContext<Ordinary_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_listContext rollup_list() {
			return GetRuleContext<Rollup_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_listContext cube_list() {
			return GetRuleContext<Cube_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hopping_window_specificationContext hopping_window_specification() {
			return GetRuleContext<Hopping_window_specificationContext>(0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_element(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_elementContext grouping_element() {
		Grouping_elementContext _localctx = new Grouping_elementContext(Context, State);
		EnterRule(_localctx, 322, RULE_grouping_element);
		try {
			State = 2471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2466;
				ordinary_grouping_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2467;
				rollup_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2468;
				cube_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2469;
				grouping_sets_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2470;
				hopping_window_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr() {
			return GetRuleContext<Named_exprContext>(0);
		}
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_setContext ordinary_grouping_set() {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(Context, State);
		EnterRule(_localctx, 324, RULE_ordinary_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473;
			named_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext[] ordinary_grouping_set() {
			return GetRuleContexts<Ordinary_grouping_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return GetRuleContext<Ordinary_grouping_setContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(Context, State);
		EnterRule(_localctx, 326, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			ordinary_grouping_set();
			State = 2480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2476;
				Match(COMMA);
				State = 2477;
				ordinary_grouping_set();
				}
				}
				State = 2482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(YQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Rollup_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRollup_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRollup_list(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_listContext rollup_list() {
		Rollup_listContext _localctx = new Rollup_listContext(Context, State);
		EnterRule(_localctx, 328, RULE_rollup_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2483;
			Match(ROLLUP);
			State = 2484;
			Match(LPAREN);
			State = 2485;
			ordinary_grouping_set_list();
			State = 2486;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(YQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Cube_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCube_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCube_list(this);
		}
	}

	[RuleVersion(0)]
	public Cube_listContext cube_list() {
		Cube_listContext _localctx = new Cube_listContext(Context, State);
		EnterRule(_localctx, 330, RULE_cube_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2488;
			Match(CUBE);
			State = 2489;
			Match(LPAREN);
			State = 2490;
			ordinary_grouping_set_list();
			State = 2491;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_element_listContext grouping_element_list() {
			return GetRuleContext<Grouping_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 332, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493;
			Match(GROUPING);
			State = 2494;
			Match(SETS);
			State = 2495;
			Match(LPAREN);
			State = 2496;
			grouping_element_list();
			State = 2497;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hopping_window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOP() { return GetToken(YQLParser.HOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Hopping_window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hopping_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterHopping_window_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitHopping_window_specification(this);
		}
	}

	[RuleVersion(0)]
	public Hopping_window_specificationContext hopping_window_specification() {
		Hopping_window_specificationContext _localctx = new Hopping_window_specificationContext(Context, State);
		EnterRule(_localctx, 334, RULE_hopping_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			Match(HOP);
			State = 2500;
			Match(LPAREN);
			State = 2501;
			expr();
			State = 2502;
			Match(COMMA);
			State = 2503;
			expr();
			State = 2504;
			Match(COMMA);
			State = 2505;
			expr();
			State = 2506;
			Match(COMMA);
			State = 2507;
			expr();
			State = 2508;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_id_prefixContext opt_id_prefix() {
			return GetRuleContext<Opt_id_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_as_compatContext an_id_as_compat() {
			return GetRuleContext<An_id_as_compatContext>(0);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 336, RULE_result_column);
		try {
			State = 2519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2510;
				opt_id_prefix();
				State = 2511;
				Match(ASTERISK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2513;
				expr();
				State = 2517;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 2514;
					Match(AS);
					State = 2515;
					an_id_or_type();
					}
					break;
				case 2:
					{
					State = 2516;
					an_id_as_compat();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_sourceContext[] flatten_source() {
			return GetRuleContexts<Flatten_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_sourceContext flatten_source(int i) {
			return GetRuleContext<Flatten_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(YQLParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(YQLParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_opContext[] join_op() {
			return GetRuleContexts<Join_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_opContext join_op(int i) {
			return GetRuleContext<Join_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_source(this);
		}
	}

	[RuleVersion(0)]
	public Join_sourceContext join_source() {
		Join_sourceContext _localctx = new Join_sourceContext(Context, State);
		EnterRule(_localctx, 338, RULE_join_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				{
				State = 2521;
				Match(ANY);
				}
				break;
			}
			State = 2524;
			flatten_source();
			State = 2535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 36029071896870913L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 562950490300545L) != 0) || _la==RIGHT) {
				{
				{
				State = 2525;
				join_op();
				State = 2527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
				case 1:
					{
					State = 2526;
					Match(ANY);
					}
					break;
				}
				State = 2529;
				flatten_source();
				State = 2531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON || _la==USING) {
					{
					State = 2530;
					join_constraint();
					}
				}

				}
				}
				State = 2537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Named_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_column(this);
		}
	}

	[RuleVersion(0)]
	public Named_columnContext named_column() {
		Named_columnContext _localctx = new Named_columnContext(Context, State);
		EnterRule(_localctx, 340, RULE_named_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538;
			column_name();
			State = 2541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2539;
				Match(AS);
				State = 2540;
				an_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flatten_by_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_columnContext named_column() {
			return GetRuleContext<Named_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		public Flatten_by_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flatten_by_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFlatten_by_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFlatten_by_arg(this);
		}
	}

	[RuleVersion(0)]
	public Flatten_by_argContext flatten_by_arg() {
		Flatten_by_argContext _localctx = new Flatten_by_argContext(Context, State);
		EnterRule(_localctx, 342, RULE_flatten_by_arg);
		int _la;
		try {
			State = 2551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2543;
				named_column();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2544;
				Match(LPAREN);
				State = 2545;
				named_expr_list();
				State = 2547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2546;
					Match(COMMA);
					}
				}

				State = 2549;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flatten_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_single_sourceContext named_single_source() {
			return GetRuleContext<Named_single_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Flatten_by_argContext flatten_by_arg() {
			return GetRuleContext<Flatten_by_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		public Flatten_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flatten_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFlatten_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFlatten_source(this);
		}
	}

	[RuleVersion(0)]
	public Flatten_sourceContext flatten_source() {
		Flatten_sourceContext _localctx = new Flatten_sourceContext(Context, State);
		EnterRule(_localctx, 344, RULE_flatten_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2553;
			named_single_source();
			State = 2563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FLATTEN) {
				{
				State = 2554;
				Match(FLATTEN);
				State = 2561;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
				case DICT:
				case LIST:
				case OPTIONAL:
					{
					State = 2556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DICT || _la==LIST || _la==OPTIONAL) {
						{
						State = 2555;
						_la = TokenStream.LA(1);
						if ( !(_la==DICT || _la==LIST || _la==OPTIONAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2558;
					Match(BY);
					State = 2559;
					flatten_by_arg();
					}
					break;
				case COLUMNS:
					{
					State = 2560;
					Match(COLUMNS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_single_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_sourceContext single_source() {
			return GetRuleContext<Single_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_pattern_recognition_clauseContext row_pattern_recognition_clause() {
			return GetRuleContext<Row_pattern_recognition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sample_clauseContext sample_clause() {
			return GetRuleContext<Sample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_as_compatContext an_id_as_compat() {
			return GetRuleContext<An_id_as_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Named_single_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_single_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_single_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_single_source(this);
		}
	}

	[RuleVersion(0)]
	public Named_single_sourceContext named_single_source() {
		Named_single_sourceContext _localctx = new Named_single_sourceContext(Context, State);
		EnterRule(_localctx, 346, RULE_named_single_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565;
			single_source();
			State = 2567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				{
				State = 2566;
				row_pattern_recognition_clause();
				}
				break;
			}
			State = 2577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2572;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 2569;
					Match(AS);
					State = 2570;
					an_id();
					}
					break;
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALTER:
				case ANALYZE:
				case AND:
				case ANSI:
				case ARRAY:
				case ASC:
				case ASYNC:
				case AT:
				case ATTACH:
				case ATTRIBUTES:
				case AUTOINCREMENT:
				case BACKUP:
				case BATCH:
				case COLLECTION:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BY:
				case CASCADE:
				case CHANGEFEED:
				case CHECK:
				case CLASSIFIER:
				case COMMIT:
				case CONDITIONAL:
				case CONFLICT:
				case CONNECT:
				case CONSTRAINT:
				case CONSUMER:
				case COVER:
				case CREATE:
				case CURRENT:
				case DATA:
				case DATABASE:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETACH:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DROP:
				case EACH:
				case ELSE:
				case EMPTY:
				case ENCRYPTED:
				case END:
				case ERROR:
				case ESCAPE:
				case EVALUATE:
				case EXCLUDE:
				case EXCLUSIVE:
				case EXPLAIN:
				case EXPORT:
				case EXTERNAL:
				case FAIL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FLATTEN:
				case FOLLOWING:
				case FOR:
				case FOREIGN:
				case FUNCTION:
				case GLOB:
				case GLOBAL:
				case GRANT:
				case GROUP:
				case GROUPING:
				case HASH:
				case IF:
				case IGNORE:
				case ILIKE:
				case IMMEDIATE:
				case IMPORT:
				case IN:
				case INCREMENT:
				case INCREMENTAL:
				case INDEX:
				case INDEXED:
				case INHERITS:
				case INITIAL:
				case INITIALLY:
				case INSERT:
				case INSTEAD:
				case INTO:
				case IS:
				case LAST:
				case LEGACY:
				case LIKE:
				case LOCAL:
				case LOGIN:
				case MANAGE:
				case MATCH:
				case MATCHES:
				case MATCH_RECOGNIZE:
				case MEASURES:
				case MICROSECONDS:
				case MILLISECONDS:
				case MODIFY:
				case NANOSECONDS:
				case NEXT:
				case NO:
				case NOLOGIN:
				case NULLS:
				case OBJECT:
				case OF:
				case OFFSET:
				case OMIT:
				case ONE:
				case ONLY:
				case OPTION:
				case OR:
				case ORDER:
				case OTHERS:
				case OWNER:
				case PARALLEL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PAST:
				case PATTERN:
				case PER:
				case PERMUTE:
				case PLAN:
				case POOL:
				case PRAGMA:
				case PRECEDING:
				case PRIMARY:
				case PRIVILEGES:
				case QUERY:
				case QUEUE:
				case RAISE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case REMOVE:
				case RENAME:
				case REPLACE:
				case REPLICATION:
				case RESET:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESTRICT:
				case REVERT:
				case REVOKE:
				case RLIKE:
				case ROLLBACK:
				case ROW:
				case SAVEPOINT:
				case SECONDS:
				case SEEK:
				case SETS:
				case SHOW:
				case TSKIP:
				case SEQUENCE:
				case SOURCE:
				case START:
				case SUBQUERY:
				case SUBSET:
				case SYMBOLS:
				case SYNC:
				case SYSTEM:
				case TABLE:
				case TABLES:
				case TABLESAMPLE:
				case TABLESTORE:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TIES:
				case TO:
				case TOPIC:
				case TRANSACTION:
				case TRANSFER:
				case TRIGGER:
				case TYPE:
				case UNCONDITIONAL:
				case UNIQUE:
				case UNKNOWN:
				case UNMATCHED:
				case UPDATE:
				case UPSERT:
				case USE:
				case USER:
				case VACUUM:
				case VALUES:
				case VIRTUAL:
				case WRAPPER:
				case XOR:
				case STRING_VALUE:
				case ID_PLAIN:
				case ID_QUOTED:
					{
					State = 2571;
					an_id_as_compat();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2574;
					pure_column_list();
					}
				}

				}
				break;
			}
			State = 2581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAMPLE:
				{
				State = 2579;
				sample_clause();
				}
				break;
			case TABLESAMPLE:
				{
				State = 2580;
				tablesample_clause();
				}
				break;
			case Eof:
			case SEMICOLON:
			case COMMA:
			case RPAREN:
			case ASSUME:
			case CROSS:
			case END:
			case EXCEPT:
			case EXCLUSION:
			case FLATTEN:
			case FULL:
			case GROUP:
			case HAVING:
			case INNER:
			case INTERSECT:
			case INTO:
			case JOIN:
			case LEFT:
			case LIMIT:
			case NATURAL:
			case ON:
			case ORDER:
			case OUTER:
			case PRESORT:
			case RETURNING:
			case RIGHT:
			case SELECT:
			case UNION:
			case USING:
			case WHERE:
			case WINDOW:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		public Single_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSingle_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSingle_source(this);
		}
	}

	[RuleVersion(0)]
	public Single_sourceContext single_source() {
		Single_sourceContext _localctx = new Single_sourceContext(Context, State);
		EnterRule(_localctx, 348, RULE_single_source);
		try {
			State = 2592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2583;
				table_ref();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2584;
				Match(LPAREN);
				State = 2585;
				select_stmt();
				State = 2586;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2588;
				Match(LPAREN);
				State = 2589;
				values_stmt();
				State = 2590;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(YQLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sample_clauseContext sample_clause() {
		Sample_clauseContext _localctx = new Sample_clauseContext(Context, State);
		EnterRule(_localctx, 350, RULE_sample_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2594;
			Match(SAMPLE);
			State = 2595;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sampling_modeContext sampling_mode() {
			return GetRuleContext<Sampling_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Repeatable_clauseContext repeatable_clause() {
			return GetRuleContext<Repeatable_clauseContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 352, RULE_tablesample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2597;
			Match(TABLESAMPLE);
			State = 2598;
			sampling_mode();
			State = 2599;
			Match(LPAREN);
			State = 2600;
			expr();
			State = 2601;
			Match(RPAREN);
			State = 2603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPEATABLE) {
				{
				State = 2602;
				repeatable_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sampling_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		public Sampling_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampling_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSampling_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSampling_mode(this);
		}
	}

	[RuleVersion(0)]
	public Sampling_modeContext sampling_mode() {
		Sampling_modeContext _localctx = new Sampling_modeContext(Context, State);
		EnterRule(_localctx, 354, RULE_sampling_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2605;
			_la = TokenStream.LA(1);
			if ( !(_la==BERNOULLI || _la==SYSTEM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeatable_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(YQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Repeatable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatable_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRepeatable_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRepeatable_clause(this);
		}
	}

	[RuleVersion(0)]
	public Repeatable_clauseContext repeatable_clause() {
		Repeatable_clauseContext _localctx = new Repeatable_clauseContext(Context, State);
		EnterRule(_localctx, 356, RULE_repeatable_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2607;
			Match(REPEATABLE);
			State = 2608;
			Match(LPAREN);
			State = 2609;
			expr();
			State = 2610;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(YQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(YQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(YQLParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(YQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(YQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(YQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(YQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSION() { return GetToken(YQLParser.EXCLUSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(YQLParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(YQLParser.SEMI, 0); }
		public Join_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_op(this);
		}
	}

	[RuleVersion(0)]
	public Join_opContext join_op() {
		Join_opContext _localctx = new Join_opContext(Context, State);
		EnterRule(_localctx, 358, RULE_join_op);
		int _la;
		try {
			State = 2636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2612;
				Match(COMMA);
				}
				break;
			case CROSS:
			case EXCLUSION:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
			case OUTER:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL) {
					{
					State = 2613;
					Match(NATURAL);
					}
				}

				State = 2633;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXCLUSION:
				case FULL:
				case JOIN:
				case LEFT:
				case OUTER:
				case RIGHT:
					{
					State = 2626;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT:
						{
						State = 2616;
						Match(LEFT);
						State = 2618;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ONLY || _la==SEMI) {
							{
							State = 2617;
							_la = TokenStream.LA(1);
							if ( !(_la==ONLY || _la==SEMI) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					case RIGHT:
						{
						State = 2620;
						Match(RIGHT);
						State = 2622;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ONLY || _la==SEMI) {
							{
							State = 2621;
							_la = TokenStream.LA(1);
							if ( !(_la==ONLY || _la==SEMI) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					case EXCLUSION:
						{
						State = 2624;
						Match(EXCLUSION);
						}
						break;
					case FULL:
						{
						State = 2625;
						Match(FULL);
						}
						break;
					case JOIN:
					case OUTER:
						break;
					default:
						break;
					}
					State = 2629;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 2628;
						Match(OUTER);
						}
					}

					}
					break;
				case INNER:
					{
					State = 2631;
					Match(INNER);
					}
					break;
				case CROSS:
					{
					State = 2632;
					Match(CROSS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2635;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_named_listContext pure_column_or_named_list() {
			return GetRuleContext<Pure_column_or_named_listContext>(0);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 360, RULE_join_constraint);
		try {
			State = 2642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2638;
				Match(ON);
				State = 2639;
				expr();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2640;
				Match(USING);
				State = 2641;
				pure_column_or_named_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_columns_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Returning_columns_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_columns_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReturning_columns_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReturning_columns_list(this);
		}
	}

	[RuleVersion(0)]
	public Returning_columns_listContext returning_columns_list() {
		Returning_columns_listContext _localctx = new Returning_columns_listContext(Context, State);
		EnterRule(_localctx, 362, RULE_returning_columns_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644;
			Match(RETURNING);
			State = 2654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 2645;
				Match(ASTERISK);
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 2646;
				an_id();
				State = 2651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2647;
					Match(COMMA);
					State = 2648;
					an_id();
					}
					}
					State = 2653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_simple_table_refContext into_simple_table_ref() {
			return GetRuleContext<Into_simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		public Into_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Into_table_stmtContext into_table_stmt() {
		Into_table_stmtContext _localctx = new Into_table_stmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_into_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 2656;
				Match(INSERT);
				}
				break;
			case 2:
				{
				State = 2657;
				Match(INSERT);
				State = 2658;
				Match(OR);
				State = 2659;
				Match(ABORT);
				}
				break;
			case 3:
				{
				State = 2660;
				Match(INSERT);
				State = 2661;
				Match(OR);
				State = 2662;
				Match(REVERT);
				}
				break;
			case 4:
				{
				State = 2663;
				Match(INSERT);
				State = 2664;
				Match(OR);
				State = 2665;
				Match(IGNORE);
				}
				break;
			case 5:
				{
				State = 2666;
				Match(UPSERT);
				}
				break;
			case 6:
				{
				State = 2667;
				Match(REPLACE);
				}
				break;
			}
			State = 2670;
			Match(INTO);
			State = 2671;
			into_simple_table_ref();
			State = 2672;
			into_values_source();
			State = 2674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 2673;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_sourceContext values_source() {
			return GetRuleContext<Values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		public Into_values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_values_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_values_source(this);
		}
	}

	[RuleVersion(0)]
	public Into_values_sourceContext into_values_source() {
		Into_values_sourceContext _localctx = new Into_values_sourceContext(Context, State);
		EnterRule(_localctx, 366, RULE_into_values_source);
		try {
			State = 2682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2677;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
				case 1:
					{
					State = 2676;
					pure_column_list();
					}
					break;
				}
				State = 2679;
				values_source();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2680;
				Match(DEFAULT);
				State = 2681;
				Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_row_listContext values_source_row_list() {
			return GetRuleContext<Values_source_row_listContext>(0);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Values_stmtContext values_stmt() {
		Values_stmtContext _localctx = new Values_stmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_values_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2684;
			Match(VALUES);
			State = 2685;
			values_source_row_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt() {
			return GetRuleContext<Values_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source(this);
		}
	}

	[RuleVersion(0)]
	public Values_sourceContext values_source() {
		Values_sourceContext _localctx = new Values_sourceContext(Context, State);
		EnterRule(_localctx, 370, RULE_values_source);
		try {
			State = 2689;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2687;
				values_stmt();
				}
				break;
			case LPAREN:
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2688;
				select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_source_row_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_rowContext[] values_source_row() {
			return GetRuleContexts<Values_source_rowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_source_rowContext values_source_row(int i) {
			return GetRuleContext<Values_source_rowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Values_source_row_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source_row_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source_row_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source_row_list(this);
		}
	}

	[RuleVersion(0)]
	public Values_source_row_listContext values_source_row_list() {
		Values_source_row_listContext _localctx = new Values_source_row_listContext(Context, State);
		EnterRule(_localctx, 372, RULE_values_source_row_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2691;
			values_source_row();
			State = 2696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2692;
				Match(COMMA);
				State = 2693;
				values_source_row();
				}
				}
				State = 2698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_source_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Values_source_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_source_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterValues_source_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitValues_source_row(this);
		}
	}

	[RuleVersion(0)]
	public Values_source_rowContext values_source_row() {
		Values_source_rowContext _localctx = new Values_source_rowContext(Context, State);
		EnterRule(_localctx, 374, RULE_values_source_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2699;
			Match(LPAREN);
			State = 2700;
			expr_list();
			State = 2701;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_values_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Simple_values_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_values_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_values_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_values_source(this);
		}
	}

	[RuleVersion(0)]
	public Simple_values_sourceContext simple_values_source() {
		Simple_values_sourceContext _localctx = new Simple_values_sourceContext(Context, State);
		EnterRule(_localctx, 376, RULE_simple_values_source);
		try {
			State = 2705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2703;
				expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2704;
				select_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Create_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_data_source_stmtContext create_external_data_source_stmt() {
		Create_external_data_source_stmtContext _localctx = new Create_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_create_external_data_source_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2707;
			Match(CREATE);
			State = 2710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2708;
				Match(OR);
				State = 2709;
				Match(REPLACE);
				}
			}

			State = 2712;
			Match(EXTERNAL);
			State = 2713;
			Match(DATA);
			State = 2714;
			Match(SOURCE);
			State = 2718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 2715;
				Match(IF);
				State = 2716;
				Match(NOT);
				State = 2717;
				Match(EXISTS);
				}
				break;
			}
			State = 2720;
			object_ref();
			State = 2721;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_actionContext[] alter_external_data_source_action() {
			return GetRuleContexts<Alter_external_data_source_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_data_source_actionContext alter_external_data_source_action(int i) {
			return GetRuleContext<Alter_external_data_source_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_source_stmtContext alter_external_data_source_stmt() {
		Alter_external_data_source_stmtContext _localctx = new Alter_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alter_external_data_source_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2723;
			Match(ALTER);
			State = 2724;
			Match(EXTERNAL);
			State = 2725;
			Match(DATA);
			State = 2726;
			Match(SOURCE);
			State = 2727;
			object_ref();
			State = 2728;
			alter_external_data_source_action();
			State = 2733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2729;
				Match(COMMA);
				State = 2730;
				alter_external_data_source_action();
				}
				}
				State = 2735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_data_source_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_external_data_source_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_data_source_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_data_source_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_data_source_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_data_source_actionContext alter_external_data_source_action() {
		Alter_external_data_source_actionContext _localctx = new Alter_external_data_source_actionContext(Context, State);
		EnterRule(_localctx, 382, RULE_alter_external_data_source_action);
		try {
			State = 2739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2736;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2737;
				alter_table_set_table_setting_compat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2738;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_data_source_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_external_data_source_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_data_source_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_external_data_source_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_external_data_source_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_data_source_stmtContext drop_external_data_source_stmt() {
		Drop_external_data_source_stmtContext _localctx = new Drop_external_data_source_stmtContext(Context, State);
		EnterRule(_localctx, 384, RULE_drop_external_data_source_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2741;
			Match(DROP);
			State = 2742;
			Match(EXTERNAL);
			State = 2743;
			Match(DATA);
			State = 2744;
			Match(SOURCE);
			State = 2747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 2745;
				Match(IF);
				State = 2746;
				Match(EXISTS);
				}
				break;
			}
			State = 2749;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 386, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2751;
			Match(CREATE);
			State = 2752;
			Match(VIEW);
			State = 2756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2753;
				Match(IF);
				State = 2754;
				Match(NOT);
				State = 2755;
				Match(EXISTS);
				}
				break;
			}
			State = 2758;
			object_ref();
			State = 2760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2759;
				create_object_features();
				}
			}

			State = 2762;
			Match(AS);
			State = 2763;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(Context, State);
		EnterRule(_localctx, 388, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2765;
			Match(DROP);
			State = 2766;
			Match(VIEW);
			State = 2769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 2767;
				Match(IF);
				State = 2768;
				Match(EXISTS);
				}
				break;
			}
			State = 2771;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Upsert_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUpsert_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUpsert_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_object_stmtContext upsert_object_stmt() {
		Upsert_object_stmtContext _localctx = new Upsert_object_stmtContext(Context, State);
		EnterRule(_localctx, 390, RULE_upsert_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2773;
			Match(UPSERT);
			State = 2774;
			Match(OBJECT);
			State = 2775;
			object_ref();
			State = 2776;
			Match(LPAREN);
			State = 2777;
			Match(TYPE);
			State = 2778;
			object_type_ref();
			State = 2779;
			Match(RPAREN);
			State = 2781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2780;
				create_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_object_featuresContext create_object_features() {
			return GetRuleContext<Create_object_featuresContext>(0);
		}
		public Create_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_object_stmtContext create_object_stmt() {
		Create_object_stmtContext _localctx = new Create_object_stmtContext(Context, State);
		EnterRule(_localctx, 392, RULE_create_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2783;
			Match(CREATE);
			State = 2784;
			Match(OBJECT);
			State = 2788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2785;
				Match(IF);
				State = 2786;
				Match(NOT);
				State = 2787;
				Match(EXISTS);
				}
				break;
			}
			State = 2790;
			object_ref();
			State = 2791;
			Match(LPAREN);
			State = 2792;
			Match(TYPE);
			State = 2793;
			object_type_ref();
			State = 2794;
			Match(RPAREN);
			State = 2796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2795;
				create_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Create_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Create_object_featuresContext create_object_features() {
		Create_object_featuresContext _localctx = new Create_object_featuresContext(Context, State);
		EnterRule(_localctx, 394, RULE_create_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798;
			Match(WITH);
			State = 2799;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_object_featuresContext alter_object_features() {
			return GetRuleContext<Alter_object_featuresContext>(0);
		}
		public Alter_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_object_stmtContext alter_object_stmt() {
		Alter_object_stmtContext _localctx = new Alter_object_stmtContext(Context, State);
		EnterRule(_localctx, 396, RULE_alter_object_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801;
			Match(ALTER);
			State = 2802;
			Match(OBJECT);
			State = 2803;
			object_ref();
			State = 2804;
			Match(LPAREN);
			State = 2805;
			Match(TYPE);
			State = 2806;
			object_type_ref();
			State = 2807;
			Match(RPAREN);
			State = 2808;
			alter_object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Alter_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Alter_object_featuresContext alter_object_features() {
		Alter_object_featuresContext _localctx = new Alter_object_featuresContext(Context, State);
		EnterRule(_localctx, 398, RULE_alter_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			Match(SET);
			State = 2811;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_object_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_refContext object_type_ref() {
			return GetRuleContext<Object_type_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_object_featuresContext drop_object_features() {
			return GetRuleContext<Drop_object_featuresContext>(0);
		}
		public Drop_object_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_object_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_object_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_object_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_object_stmtContext drop_object_stmt() {
		Drop_object_stmtContext _localctx = new Drop_object_stmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_drop_object_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2813;
			Match(DROP);
			State = 2814;
			Match(OBJECT);
			State = 2817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 2815;
				Match(IF);
				State = 2816;
				Match(EXISTS);
				}
				break;
			}
			State = 2819;
			object_ref();
			State = 2820;
			Match(LPAREN);
			State = 2821;
			Match(TYPE);
			State = 2822;
			object_type_ref();
			State = 2823;
			Match(RPAREN);
			State = 2825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2824;
				drop_object_features();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_featuresContext object_features() {
			return GetRuleContext<Object_featuresContext>(0);
		}
		public Drop_object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_object_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_object_features(this);
		}
	}

	[RuleVersion(0)]
	public Drop_object_featuresContext drop_object_features() {
		Drop_object_featuresContext _localctx = new Drop_object_featuresContext(Context, State);
		EnterRule(_localctx, 402, RULE_drop_object_features);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2827;
			Match(WITH);
			State = 2828;
			object_features();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Object_feature_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_value(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_valueContext object_feature_value() {
		Object_feature_valueContext _localctx = new Object_feature_valueContext(Context, State);
		EnterRule(_localctx, 404, RULE_object_feature_value);
		try {
			State = 2834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2830;
				id_or_type();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2831;
				bind_parameter();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2832;
				Match(STRING_VALUE);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2833;
				bool_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_kvContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_valueContext object_feature_value() {
			return GetRuleContext<Object_feature_valueContext>(0);
		}
		public Object_feature_kvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_kv; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_kv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_kv(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_kvContext object_feature_kv() {
		Object_feature_kvContext _localctx = new Object_feature_kvContext(Context, State);
		EnterRule(_localctx, 406, RULE_object_feature_kv);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2836;
			an_id_or_type();
			State = 2837;
			Match(EQUALS);
			State = 2838;
			object_feature_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_feature_flagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Object_feature_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature_flag(this);
		}
	}

	[RuleVersion(0)]
	public Object_feature_flagContext object_feature_flag() {
		Object_feature_flagContext _localctx = new Object_feature_flagContext(Context, State);
		EnterRule(_localctx, 408, RULE_object_feature_flag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2840;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_featureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_kvContext object_feature_kv() {
			return GetRuleContext<Object_feature_kvContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_feature_flagContext object_feature_flag() {
			return GetRuleContext<Object_feature_flagContext>(0);
		}
		public Object_featureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_feature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_feature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_feature(this);
		}
	}

	[RuleVersion(0)]
	public Object_featureContext object_feature() {
		Object_featureContext _localctx = new Object_featureContext(Context, State);
		EnterRule(_localctx, 410, RULE_object_feature);
		try {
			State = 2844;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2842;
				object_feature_kv();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2843;
				object_feature_flag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_featuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_featureContext[] object_feature() {
			return GetRuleContexts<Object_featureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_featureContext object_feature(int i) {
			return GetRuleContext<Object_featureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Object_featuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_features; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_features(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_features(this);
		}
	}

	[RuleVersion(0)]
	public Object_featuresContext object_features() {
		Object_featuresContext _localctx = new Object_featuresContext(Context, State);
		EnterRule(_localctx, 412, RULE_object_features);
		int _la;
		try {
			State = 2858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2846;
				object_feature();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2847;
				Match(LPAREN);
				State = 2848;
				object_feature();
				State = 2853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2849;
					Match(COMMA);
					State = 2850;
					object_feature();
					}
					}
					State = 2855;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2856;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		public Object_type_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_type_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_type_ref(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_refContext object_type_ref() {
		Object_type_refContext _localctx = new Object_type_refContext(Context, State);
		EnterRule(_localctx, 414, RULE_object_type_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2860;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_entryContext[] create_table_entry() {
			return GetRuleContexts<Create_table_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_entryContext create_table_entry(int i) {
			return GetRuleContext<Create_table_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_inheritsContext table_inherits() {
			return GetRuleContext<Table_inheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_partition_byContext table_partition_by() {
			return GetRuleContext<Table_partition_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_tablestoreContext table_tablestore() {
			return GetRuleContext<Table_tablestoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_as_sourceContext table_as_source() {
			return GetRuleContext<Table_as_sourceContext>(0);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 416, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2862;
			Match(CREATE);
			State = 2865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2863;
				Match(OR);
				State = 2864;
				Match(REPLACE);
				}
			}

			State = 2875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 2867;
				Match(TABLE);
				}
				break;
			case TABLESTORE:
				{
				State = 2868;
				Match(TABLESTORE);
				}
				break;
			case EXTERNAL:
				{
				State = 2869;
				Match(EXTERNAL);
				State = 2870;
				Match(TABLE);
				}
				break;
			case TEMP:
				{
				State = 2871;
				Match(TEMP);
				State = 2872;
				Match(TABLE);
				}
				break;
			case TEMPORARY:
				{
				State = 2873;
				Match(TEMPORARY);
				State = 2874;
				Match(TABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 2877;
				Match(IF);
				State = 2878;
				Match(NOT);
				State = 2879;
				Match(EXISTS);
				}
				break;
			}
			State = 2882;
			simple_table_ref();
			State = 2883;
			Match(LPAREN);
			State = 2884;
			create_table_entry();
			State = 2889;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2885;
					Match(COMMA);
					State = 2886;
					create_table_entry();
					}
					} 
				}
				State = 2891;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			}
			State = 2893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2892;
				Match(COMMA);
				}
			}

			State = 2895;
			Match(RPAREN);
			State = 2897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 2896;
				table_inherits();
				}
			}

			State = 2900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2899;
				table_partition_by();
				}
			}

			State = 2903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2902;
				with_table_settings();
				}
			}

			State = 2906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESTORE) {
				{
				State = 2905;
				table_tablestore();
				}
			}

			State = 2909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2908;
				table_as_source();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_schemaContext column_schema() {
			return GetRuleContext<Column_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_indexContext table_index() {
			return GetRuleContext<Table_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_entryContext family_entry() {
			return GetRuleContext<Family_entryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangefeedContext changefeed() {
			return GetRuleContext<ChangefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema() {
			return GetRuleContext<An_id_schemaContext>(0);
		}
		public Create_table_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_table_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_table_entry(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_entryContext create_table_entry() {
		Create_table_entryContext _localctx = new Create_table_entryContext(Context, State);
		EnterRule(_localctx, 418, RULE_create_table_entry);
		try {
			State = 2917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2911;
				column_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2912;
				table_constraint();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2913;
				table_index();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2914;
				family_entry();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2915;
				changefeed();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2916;
				an_id_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settingsContext backup_collection_settings() {
			return GetRuleContext<Backup_collection_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_entriesContext create_backup_collection_entries() {
			return GetRuleContext<Create_backup_collection_entriesContext>(0);
		}
		public Create_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_stmtContext create_backup_collection_stmt() {
		Create_backup_collection_stmtContext _localctx = new Create_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 420, RULE_create_backup_collection_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2919;
			Match(CREATE);
			State = 2920;
			backup_collection();
			State = 2922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN || _la==DATABASE) {
				{
				State = 2921;
				create_backup_collection_entries();
				}
			}

			State = 2924;
			Match(WITH);
			State = 2925;
			Match(LPAREN);
			State = 2926;
			backup_collection_settings();
			State = 2927;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionsContext alter_backup_collection_actions() {
			return GetRuleContext<Alter_backup_collection_actionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entriesContext alter_backup_collection_entries() {
			return GetRuleContext<Alter_backup_collection_entriesContext>(0);
		}
		public Alter_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_stmtContext alter_backup_collection_stmt() {
		Alter_backup_collection_stmtContext _localctx = new Alter_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 422, RULE_alter_backup_collection_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2929;
			Match(ALTER);
			State = 2930;
			backup_collection();
			State = 2933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESET:
			case SET:
				{
				State = 2931;
				alter_backup_collection_actions();
				}
				break;
			case ADD:
			case DROP:
				{
				State = 2932;
				alter_backup_collection_entries();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_backup_collection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collectionContext backup_collection() {
			return GetRuleContext<Backup_collectionContext>(0);
		}
		public Drop_backup_collection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_backup_collection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_backup_collection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_backup_collection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_backup_collection_stmtContext drop_backup_collection_stmt() {
		Drop_backup_collection_stmtContext _localctx = new Drop_backup_collection_stmtContext(Context, State);
		EnterRule(_localctx, 424, RULE_drop_backup_collection_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2935;
			Match(DROP);
			State = 2936;
			backup_collection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_backup_collection_entries_manyContext create_backup_collection_entries_many() {
			return GetRuleContext<Create_backup_collection_entries_manyContext>(0);
		}
		public Create_backup_collection_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_entries(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_entriesContext create_backup_collection_entries() {
		Create_backup_collection_entriesContext _localctx = new Create_backup_collection_entriesContext(Context, State);
		EnterRule(_localctx, 426, RULE_create_backup_collection_entries);
		try {
			State = 2940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2938;
				Match(DATABASE);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2939;
				create_backup_collection_entries_many();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_backup_collection_entries_manyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_listContext table_list() {
			return GetRuleContext<Table_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Create_backup_collection_entries_manyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_backup_collection_entries_many; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_backup_collection_entries_many(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_backup_collection_entries_many(this);
		}
	}

	[RuleVersion(0)]
	public Create_backup_collection_entries_manyContext create_backup_collection_entries_many() {
		Create_backup_collection_entries_manyContext _localctx = new Create_backup_collection_entries_manyContext(Context, State);
		EnterRule(_localctx, 428, RULE_create_backup_collection_entries_many);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2942;
			Match(LPAREN);
			State = 2943;
			table_list();
			State = 2944;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(YQLParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(YQLParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext[] an_id_table() {
			return GetRuleContexts<An_id_tableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table(int i) {
			return GetRuleContext<An_id_tableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_listContext table_list() {
		Table_listContext _localctx = new Table_listContext(Context, State);
		EnterRule(_localctx, 430, RULE_table_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			Match(TABLE);
			State = 2947;
			an_id_table();
			State = 2953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2948;
				Match(COMMA);
				State = 2949;
				Match(TABLE);
				State = 2950;
				an_id_table();
				}
				}
				State = 2955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionContext[] alter_backup_collection_action() {
			return GetRuleContexts<Alter_backup_collection_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_actionContext alter_backup_collection_action(int i) {
			return GetRuleContext<Alter_backup_collection_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_backup_collection_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_actions(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_actionsContext alter_backup_collection_actions() {
		Alter_backup_collection_actionsContext _localctx = new Alter_backup_collection_actionsContext(Context, State);
		EnterRule(_localctx, 432, RULE_alter_backup_collection_actions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2956;
			alter_backup_collection_action();
			State = 2961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2957;
				Match(COMMA);
				State = 2958;
				alter_backup_collection_action();
				}
				}
				State = 2963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_backup_collection_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_actionContext alter_backup_collection_action() {
		Alter_backup_collection_actionContext _localctx = new Alter_backup_collection_actionContext(Context, State);
		EnterRule(_localctx, 434, RULE_alter_backup_collection_action);
		try {
			State = 2966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2964;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2965;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entryContext[] alter_backup_collection_entry() {
			return GetRuleContexts<Alter_backup_collection_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_backup_collection_entryContext alter_backup_collection_entry(int i) {
			return GetRuleContext<Alter_backup_collection_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_backup_collection_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_entries(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_entriesContext alter_backup_collection_entries() {
		Alter_backup_collection_entriesContext _localctx = new Alter_backup_collection_entriesContext(Context, State);
		EnterRule(_localctx, 436, RULE_alter_backup_collection_entries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2968;
			alter_backup_collection_entry();
			State = 2973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2969;
				Match(COMMA);
				State = 2970;
				alter_backup_collection_entry();
				}
				}
				State = 2975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_backup_collection_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		public Alter_backup_collection_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_backup_collection_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_backup_collection_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_backup_collection_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_backup_collection_entryContext alter_backup_collection_entry() {
		Alter_backup_collection_entryContext _localctx = new Alter_backup_collection_entryContext(Context, State);
		EnterRule(_localctx, 438, RULE_alter_backup_collection_entry);
		try {
			State = 2986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2976;
				Match(ADD);
				State = 2977;
				Match(DATABASE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2978;
				Match(DROP);
				State = 2979;
				Match(DATABASE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2980;
				Match(ADD);
				State = 2981;
				Match(TABLE);
				State = 2982;
				an_id_table();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2983;
				Match(DROP);
				State = 2984;
				Match(TABLE);
				State = 2985;
				an_id_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Backup_collectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collectionContext backup_collection() {
		Backup_collectionContext _localctx = new Backup_collectionContext(Context, State);
		EnterRule(_localctx, 440, RULE_backup_collection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2988;
			Match(BACKUP);
			State = 2989;
			Match(COLLECTION);
			State = 2990;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collection_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settings_entryContext[] backup_collection_settings_entry() {
			return GetRuleContexts<Backup_collection_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backup_collection_settings_entryContext backup_collection_settings_entry(int i) {
			return GetRuleContext<Backup_collection_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Backup_collection_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection_settings(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collection_settingsContext backup_collection_settings() {
		Backup_collection_settingsContext _localctx = new Backup_collection_settingsContext(Context, State);
		EnterRule(_localctx, 442, RULE_backup_collection_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2992;
			backup_collection_settings_entry();
			State = 2997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2993;
				Match(COMMA);
				State = 2994;
				backup_collection_settings_entry();
				}
				}
				State = 2999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_collection_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Backup_collection_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_collection_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_collection_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_collection_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Backup_collection_settings_entryContext backup_collection_settings_entry() {
		Backup_collection_settings_entryContext _localctx = new Backup_collection_settings_entryContext(Context, State);
		EnterRule(_localctx, 444, RULE_backup_collection_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3000;
			an_id();
			State = 3001;
			Match(EQUALS);
			State = 3002;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backup_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		public Backup_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backup_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBackup_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBackup_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Backup_stmtContext backup_stmt() {
		Backup_stmtContext _localctx = new Backup_stmtContext(Context, State);
		EnterRule(_localctx, 446, RULE_backup_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3004;
			Match(BACKUP);
			State = 3005;
			object_ref();
			State = 3007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCREMENTAL) {
				{
				State = 3006;
				Match(INCREMENTAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Restore_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Restore_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restore_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRestore_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRestore_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Restore_stmtContext restore_stmt() {
		Restore_stmtContext _localctx = new Restore_stmtContext(Context, State);
		EnterRule(_localctx, 448, RULE_restore_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			Match(RESTORE);
			State = 3010;
			object_ref();
			State = 3013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 3011;
				Match(AT);
				State = 3012;
				Match(STRING_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_database_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema() {
			return GetRuleContext<An_id_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(YQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name() {
			return GetRuleContext<Role_nameContext>(0);
		}
		public Alter_database_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_database_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_database_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_database_stmtContext alter_database_stmt() {
		Alter_database_stmtContext _localctx = new Alter_database_stmtContext(Context, State);
		EnterRule(_localctx, 450, RULE_alter_database_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3015;
			Match(ALTER);
			State = 3016;
			Match(DATABASE);
			State = 3017;
			an_id_schema();
			State = 3018;
			Match(OWNER);
			State = 3019;
			Match(TO);
			State = 3020;
			role_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_inheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext[] simple_table_ref_core() {
			return GetRuleContexts<Simple_table_ref_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core(int i) {
			return GetRuleContext<Simple_table_ref_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_inheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_inherits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_inherits(this);
		}
	}

	[RuleVersion(0)]
	public Table_inheritsContext table_inherits() {
		Table_inheritsContext _localctx = new Table_inheritsContext(Context, State);
		EnterRule(_localctx, 452, RULE_table_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3022;
			Match(INHERITS);
			State = 3023;
			Match(LPAREN);
			State = 3024;
			simple_table_ref_core();
			State = 3029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3025;
				Match(COMMA);
				State = 3026;
				simple_table_ref_core();
				}
				}
				State = 3031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3032;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_partition_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Table_partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_partition_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_partition_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_partition_by(this);
		}
	}

	[RuleVersion(0)]
	public Table_partition_byContext table_partition_by() {
		Table_partition_byContext _localctx = new Table_partition_byContext(Context, State);
		EnterRule(_localctx, 454, RULE_table_partition_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3034;
			Match(PARTITION);
			State = 3035;
			Match(BY);
			State = 3036;
			Match(HASH);
			State = 3037;
			pure_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_settings_entryContext[] table_settings_entry() {
			return GetRuleContexts<Table_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_settings_entryContext table_settings_entry(int i) {
			return GetRuleContext<Table_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public With_table_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_table_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_table_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_table_settingsContext with_table_settings() {
		With_table_settingsContext _localctx = new With_table_settingsContext(Context, State);
		EnterRule(_localctx, 456, RULE_with_table_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039;
			Match(WITH);
			State = 3040;
			Match(LPAREN);
			State = 3041;
			table_settings_entry();
			State = 3046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3042;
				Match(COMMA);
				State = 3043;
				table_settings_entry();
				}
				}
				State = 3048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3049;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_tablestoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core() {
			return GetRuleContext<Simple_table_ref_coreContext>(0);
		}
		public Table_tablestoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_tablestore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_tablestore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_tablestore(this);
		}
	}

	[RuleVersion(0)]
	public Table_tablestoreContext table_tablestore() {
		Table_tablestoreContext _localctx = new Table_tablestoreContext(Context, State);
		EnterRule(_localctx, 458, RULE_table_tablestore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3051;
			Match(TABLESTORE);
			State = 3052;
			simple_table_ref_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Table_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Table_settings_entryContext table_settings_entry() {
		Table_settings_entryContext _localctx = new Table_settings_entryContext(Context, State);
		EnterRule(_localctx, 460, RULE_table_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3054;
			an_id();
			State = 3055;
			Match(EQUALS);
			State = 3056;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_as_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_sourceContext values_source() {
			return GetRuleContext<Values_sourceContext>(0);
		}
		public Table_as_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_as_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_as_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_as_source(this);
		}
	}

	[RuleVersion(0)]
	public Table_as_sourceContext table_as_source() {
		Table_as_sourceContext _localctx = new Table_as_sourceContext(Context, State);
		EnterRule(_localctx, 462, RULE_table_as_source);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3058;
			Match(AS);
			State = 3059;
			values_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_actionContext[] alter_table_action() {
			return GetRuleContexts<Alter_table_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_actionContext alter_table_action(int i) {
			return GetRuleContext<Alter_table_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 464, RULE_alter_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3061;
			Match(ALTER);
			State = 3062;
			Match(TABLE);
			State = 3063;
			simple_table_ref();
			State = 3064;
			alter_table_action();
			State = 3069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3065;
				Match(COMMA);
				State = 3066;
				alter_table_action();
				}
				}
				State = 3071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_columnContext alter_table_alter_column() {
			return GetRuleContext<Alter_table_alter_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_column_familyContext alter_table_add_column_family() {
			return GetRuleContext<Alter_table_add_column_familyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_column_familyContext alter_table_alter_column_family() {
			return GetRuleContext<Alter_table_alter_column_familyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_indexContext alter_table_add_index() {
			return GetRuleContext<Alter_table_add_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_indexContext alter_table_drop_index() {
			return GetRuleContext<Alter_table_drop_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_toContext alter_table_rename_to() {
			return GetRuleContext<Alter_table_rename_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_changefeedContext alter_table_add_changefeed() {
			return GetRuleContext<Alter_table_add_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_changefeedContext alter_table_alter_changefeed() {
			return GetRuleContext<Alter_table_alter_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_changefeedContext alter_table_drop_changefeed() {
			return GetRuleContext<Alter_table_drop_changefeedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_index_toContext alter_table_rename_index_to() {
			return GetRuleContext<Alter_table_rename_index_toContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_indexContext alter_table_alter_index() {
			return GetRuleContext<Alter_table_alter_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_column_drop_not_nullContext alter_table_alter_column_drop_not_null() {
			return GetRuleContext<Alter_table_alter_column_drop_not_nullContext>(0);
		}
		public Alter_table_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_actionContext alter_table_action() {
		Alter_table_actionContext _localctx = new Alter_table_actionContext(Context, State);
		EnterRule(_localctx, 466, RULE_alter_table_action);
		try {
			State = 3089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3072;
				alter_table_add_column();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3073;
				alter_table_drop_column();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3074;
				alter_table_alter_column();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3075;
				alter_table_add_column_family();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3076;
				alter_table_alter_column_family();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3077;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3078;
				alter_table_set_table_setting_compat();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3079;
				alter_table_reset_table_setting();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3080;
				alter_table_add_index();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3081;
				alter_table_drop_index();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3082;
				alter_table_rename_to();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3083;
				alter_table_add_changefeed();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3084;
				alter_table_alter_changefeed();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3085;
				alter_table_drop_changefeed();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3086;
				alter_table_rename_index_to();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3087;
				alter_table_alter_index();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3088;
				alter_table_alter_column_drop_not_null();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_actionContext[] alter_external_table_action() {
			return GetRuleContexts<Alter_external_table_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_external_table_actionContext alter_external_table_action(int i) {
			return GetRuleContext<Alter_external_table_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_external_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_table_stmtContext alter_external_table_stmt() {
		Alter_external_table_stmtContext _localctx = new Alter_external_table_stmtContext(Context, State);
		EnterRule(_localctx, 468, RULE_alter_external_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3091;
			Match(ALTER);
			State = 3092;
			Match(EXTERNAL);
			State = 3093;
			Match(TABLE);
			State = 3094;
			simple_table_ref();
			State = 3095;
			alter_external_table_action();
			State = 3100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3096;
				Match(COMMA);
				State = 3097;
				alter_external_table_action();
				}
				}
				State = 3102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_external_table_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_external_table_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_external_table_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_external_table_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_external_table_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_external_table_actionContext alter_external_table_action() {
		Alter_external_table_actionContext _localctx = new Alter_external_table_actionContext(Context, State);
		EnterRule(_localctx, 470, RULE_alter_external_table_action);
		try {
			State = 3108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3103;
				alter_table_add_column();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3104;
				alter_table_drop_column();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3105;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3106;
				alter_table_set_table_setting_compat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3107;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_store_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_actionContext[] alter_table_store_action() {
			return GetRuleContexts<Alter_table_store_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_store_actionContext alter_table_store_action(int i) {
			return GetRuleContext<Alter_table_store_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_store_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_store_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_store_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_store_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_store_stmtContext alter_table_store_stmt() {
		Alter_table_store_stmtContext _localctx = new Alter_table_store_stmtContext(Context, State);
		EnterRule(_localctx, 472, RULE_alter_table_store_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3110;
			Match(ALTER);
			State = 3111;
			Match(TABLESTORE);
			State = 3112;
			object_ref();
			State = 3113;
			alter_table_store_action();
			State = 3118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3114;
				Match(COMMA);
				State = 3115;
				alter_table_store_action();
				}
				}
				State = 3120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_store_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		public Alter_table_store_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_store_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_store_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_store_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_store_actionContext alter_table_store_action() {
		Alter_table_store_actionContext _localctx = new Alter_table_store_actionContext(Context, State);
		EnterRule(_localctx, 474, RULE_alter_table_store_action);
		try {
			State = 3123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3121;
				alter_table_add_column();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3122;
				alter_table_drop_column();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_schemaContext column_schema() {
			return GetRuleContext<Column_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 476, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125;
			Match(ADD);
			State = 3127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMN) {
				{
				State = 3126;
				Match(COLUMN);
				}
			}

			State = 3129;
			column_schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 478, RULE_alter_table_drop_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3131;
			Match(DROP);
			State = 3133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				{
				State = 3132;
				Match(COLUMN);
				}
				break;
			}
			State = 3135;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_relationContext family_relation() {
			return GetRuleContext<Family_relationContext>(0);
		}
		public Alter_table_alter_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_columnContext alter_table_alter_column() {
		Alter_table_alter_columnContext _localctx = new Alter_table_alter_columnContext(Context, State);
		EnterRule(_localctx, 480, RULE_alter_table_alter_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3137;
			Match(ALTER);
			State = 3138;
			Match(COLUMN);
			State = 3139;
			an_id();
			State = 3140;
			Match(SET);
			State = 3141;
			family_relation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_column_drop_not_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		public Alter_table_alter_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column_drop_not_null(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_column_drop_not_nullContext alter_table_alter_column_drop_not_null() {
		Alter_table_alter_column_drop_not_nullContext _localctx = new Alter_table_alter_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 482, RULE_alter_table_alter_column_drop_not_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3143;
			Match(ALTER);
			State = 3144;
			Match(COLUMN);
			State = 3145;
			an_id();
			State = 3146;
			Match(DROP);
			State = 3147;
			Match(NOT);
			State = 3148;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_column_familyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_entryContext family_entry() {
			return GetRuleContext<Family_entryContext>(0);
		}
		public Alter_table_add_column_familyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column_family; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column_family(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column_family(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_column_familyContext alter_table_add_column_family() {
		Alter_table_add_column_familyContext _localctx = new Alter_table_add_column_familyContext(Context, State);
		EnterRule(_localctx, 484, RULE_alter_table_add_column_family);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3150;
			Match(ADD);
			State = 3151;
			family_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_column_familyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_setting_valueContext family_setting_value() {
			return GetRuleContext<Family_setting_valueContext>(0);
		}
		public Alter_table_alter_column_familyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_column_family; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_column_family(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_column_family(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_column_familyContext alter_table_alter_column_family() {
		Alter_table_alter_column_familyContext _localctx = new Alter_table_alter_column_familyContext(Context, State);
		EnterRule(_localctx, 486, RULE_alter_table_alter_column_family);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3153;
			Match(ALTER);
			State = 3154;
			Match(FAMILY);
			State = 3155;
			an_id();
			State = 3156;
			Match(SET);
			State = 3157;
			an_id();
			State = 3158;
			family_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_table_setting_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Alter_table_set_table_setting_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_table_setting_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_table_setting_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_table_setting_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
		Alter_table_set_table_setting_uncompatContext _localctx = new Alter_table_set_table_setting_uncompatContext(Context, State);
		EnterRule(_localctx, 488, RULE_alter_table_set_table_setting_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3160;
			Match(SET);
			State = 3161;
			an_id();
			State = 3162;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_table_setting_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_setting_entryContext[] alter_table_setting_entry() {
			return GetRuleContexts<Alter_table_setting_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_setting_entryContext alter_table_setting_entry(int i) {
			return GetRuleContext<Alter_table_setting_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_set_table_setting_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_table_setting_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_table_setting_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_table_setting_compat(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
		Alter_table_set_table_setting_compatContext _localctx = new Alter_table_set_table_setting_compatContext(Context, State);
		EnterRule(_localctx, 490, RULE_alter_table_set_table_setting_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3164;
			Match(SET);
			State = 3165;
			Match(LPAREN);
			State = 3166;
			alter_table_setting_entry();
			State = 3171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3167;
				Match(COMMA);
				State = 3168;
				alter_table_setting_entry();
				}
				}
				State = 3173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3174;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_reset_table_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_table_reset_table_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_reset_table_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_reset_table_setting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_reset_table_setting(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
		Alter_table_reset_table_settingContext _localctx = new Alter_table_reset_table_settingContext(Context, State);
		EnterRule(_localctx, 492, RULE_alter_table_reset_table_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3176;
			Match(RESET);
			State = 3177;
			Match(LPAREN);
			State = 3178;
			an_id();
			State = 3183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3179;
				Match(COMMA);
				State = 3180;
				an_id();
				}
				}
				State = 3185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3186;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_indexContext table_index() {
			return GetRuleContext<Table_indexContext>(0);
		}
		public Alter_table_add_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_indexContext alter_table_add_index() {
		Alter_table_add_indexContext _localctx = new Alter_table_add_indexContext(Context, State);
		EnterRule(_localctx, 494, RULE_alter_table_add_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3188;
			Match(ADD);
			State = 3189;
			table_index();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Alter_table_drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_indexContext alter_table_drop_index() {
		Alter_table_drop_indexContext _localctx = new Alter_table_drop_indexContext(Context, State);
		EnterRule(_localctx, 496, RULE_alter_table_drop_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3191;
			Match(DROP);
			State = 3192;
			Match(INDEX);
			State = 3193;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		public Alter_table_rename_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_to(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_toContext alter_table_rename_to() {
		Alter_table_rename_toContext _localctx = new Alter_table_rename_toContext(Context, State);
		EnterRule(_localctx, 498, RULE_alter_table_rename_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3195;
			Match(RENAME);
			State = 3196;
			Match(TO);
			State = 3197;
			an_id_table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_index_toContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		public Alter_table_rename_index_toContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_index_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_index_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_index_to(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_index_toContext alter_table_rename_index_to() {
		Alter_table_rename_index_toContext _localctx = new Alter_table_rename_index_toContext(Context, State);
		EnterRule(_localctx, 500, RULE_alter_table_rename_index_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199;
			Match(RENAME);
			State = 3200;
			Match(INDEX);
			State = 3201;
			an_id();
			State = 3202;
			Match(TO);
			State = 3203;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangefeedContext changefeed() {
			return GetRuleContext<ChangefeedContext>(0);
		}
		public Alter_table_add_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_changefeedContext alter_table_add_changefeed() {
		Alter_table_add_changefeedContext _localctx = new Alter_table_add_changefeedContext(Context, State);
		EnterRule(_localctx, 502, RULE_alter_table_add_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3205;
			Match(ADD);
			State = 3206;
			changefeed();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_alter_settingsContext changefeed_alter_settings() {
			return GetRuleContext<Changefeed_alter_settingsContext>(0);
		}
		public Alter_table_alter_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_changefeedContext alter_table_alter_changefeed() {
		Alter_table_alter_changefeedContext _localctx = new Alter_table_alter_changefeedContext(Context, State);
		EnterRule(_localctx, 504, RULE_alter_table_alter_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208;
			Match(ALTER);
			State = 3209;
			Match(CHANGEFEED);
			State = 3210;
			an_id();
			State = 3211;
			changefeed_alter_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_changefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Alter_table_drop_changefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_changefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_changefeed(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_changefeedContext alter_table_drop_changefeed() {
		Alter_table_drop_changefeedContext _localctx = new Alter_table_drop_changefeedContext(Context, State);
		EnterRule(_localctx, 506, RULE_alter_table_drop_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3213;
			Match(DROP);
			State = 3214;
			Match(CHANGEFEED);
			State = 3215;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_alter_index_actionContext alter_table_alter_index_action() {
			return GetRuleContext<Alter_table_alter_index_actionContext>(0);
		}
		public Alter_table_alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_index(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_indexContext alter_table_alter_index() {
		Alter_table_alter_indexContext _localctx = new Alter_table_alter_indexContext(Context, State);
		EnterRule(_localctx, 508, RULE_alter_table_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3217;
			Match(ALTER);
			State = 3218;
			Match(INDEX);
			State = 3219;
			an_id();
			State = 3220;
			alter_table_alter_index_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema() {
			return GetRuleContext<An_id_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_constraintsContext opt_column_constraints() {
			return GetRuleContext<Opt_column_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_relationContext family_relation() {
			return GetRuleContext<Family_relationContext>(0);
		}
		public Column_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_schema(this);
		}
	}

	[RuleVersion(0)]
	public Column_schemaContext column_schema() {
		Column_schemaContext _localctx = new Column_schemaContext(Context, State);
		EnterRule(_localctx, 510, RULE_column_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			an_id_schema();
			State = 3223;
			type_name_or_bind();
			State = 3225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FAMILY) {
				{
				State = 3224;
				family_relation();
				}
			}

			State = 3227;
			opt_column_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Family_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_relation(this);
		}
	}

	[RuleVersion(0)]
	public Family_relationContext family_relation() {
		Family_relationContext _localctx = new Family_relationContext(Context, State);
		EnterRule(_localctx, 512, RULE_family_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3229;
			Match(FAMILY);
			State = 3230;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_column_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		public Opt_column_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_column_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_column_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Opt_column_constraintsContext opt_column_constraints() {
		Opt_column_constraintsContext _localctx = new Opt_column_constraintsContext(Context, State);
		EnterRule(_localctx, 514, RULE_opt_column_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 3233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 3232;
					Match(NOT);
					}
				}

				State = 3235;
				Match(NULL);
				}
			}

			State = 3240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 3238;
				Match(DEFAULT);
				State = 3239;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_order_by_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		public Column_order_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_order_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterColumn_order_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitColumn_order_by_specification(this);
		}
	}

	[RuleVersion(0)]
	public Column_order_by_specificationContext column_order_by_specification() {
		Column_order_by_specificationContext _localctx = new Column_order_by_specificationContext(Context, State);
		EnterRule(_localctx, 516, RULE_column_order_by_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242;
			an_id();
			State = 3244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3243;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_order_by_specificationContext[] column_order_by_specification() {
			return GetRuleContexts<Column_order_by_specificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_order_by_specificationContext column_order_by_specification(int i) {
			return GetRuleContext<Column_order_by_specificationContext>(i);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 518, RULE_table_constraint);
		int _la;
		try {
			State = 3285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3246;
				Match(PRIMARY);
				State = 3247;
				Match(KEY);
				State = 3248;
				Match(LPAREN);
				State = 3249;
				an_id();
				State = 3254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3250;
					Match(COMMA);
					State = 3251;
					an_id();
					}
					}
					State = 3256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3257;
				Match(RPAREN);
				}
				break;
			case PARTITION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3259;
				Match(PARTITION);
				State = 3260;
				Match(BY);
				State = 3261;
				Match(LPAREN);
				State = 3262;
				an_id();
				State = 3267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3263;
					Match(COMMA);
					State = 3264;
					an_id();
					}
					}
					State = 3269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3270;
				Match(RPAREN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3272;
				Match(ORDER);
				State = 3273;
				Match(BY);
				State = 3274;
				Match(LPAREN);
				State = 3275;
				column_order_by_specification();
				State = 3280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3276;
					Match(COMMA);
					State = 3277;
					column_order_by_specification();
					}
					}
					State = 3282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3283;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_index_typeContext table_index_type() {
			return GetRuleContext<Table_index_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(YQLParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(YQLParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(YQLParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(YQLParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_index_settingsContext with_index_settings() {
			return GetRuleContext<With_index_settingsContext>(0);
		}
		public Table_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_index(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexContext table_index() {
		Table_indexContext _localctx = new Table_indexContext(Context, State);
		EnterRule(_localctx, 520, RULE_table_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3287;
			Match(INDEX);
			State = 3288;
			an_id();
			State = 3289;
			table_index_type();
			State = 3290;
			Match(ON);
			State = 3291;
			Match(LPAREN);
			State = 3292;
			an_id_schema();
			State = 3297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3293;
				Match(COMMA);
				State = 3294;
				an_id_schema();
				}
				}
				State = 3299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3300;
			Match(RPAREN);
			State = 3313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COVER) {
				{
				State = 3301;
				Match(COVER);
				State = 3302;
				Match(LPAREN);
				State = 3303;
				an_id_schema();
				State = 3308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3304;
					Match(COMMA);
					State = 3305;
					an_id_schema();
					}
					}
					State = 3310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3311;
				Match(RPAREN);
				}
			}

			State = 3316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3315;
				with_index_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_index_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_indexContext global_index() {
			return GetRuleContext<Global_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_indexContext local_index() {
			return GetRuleContext<Local_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtypeContext index_subtype() {
			return GetRuleContext<Index_subtypeContext>(0);
		}
		public Table_index_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_index_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_index_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_index_type(this);
		}
	}

	[RuleVersion(0)]
	public Table_index_typeContext table_index_type() {
		Table_index_typeContext _localctx = new Table_index_typeContext(Context, State);
		EnterRule(_localctx, 522, RULE_table_index_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL:
				{
				State = 3318;
				global_index();
				}
				break;
			case LOCAL:
				{
				State = 3319;
				local_index();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3322;
				Match(USING);
				State = 3323;
				index_subtype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		public Global_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGlobal_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGlobal_index(this);
		}
	}

	[RuleVersion(0)]
	public Global_indexContext global_index() {
		Global_indexContext _localctx = new Global_indexContext(Context, State);
		EnterRule(_localctx, 524, RULE_global_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326;
			Match(GLOBAL);
			State = 3328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 3327;
				Match(UNIQUE);
				}
			}

			State = 3331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC || _la==SYNC) {
				{
				State = 3330;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==SYNC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		public Local_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLocal_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLocal_index(this);
		}
	}

	[RuleVersion(0)]
	public Local_indexContext local_index() {
		Local_indexContext _localctx = new Local_indexContext(Context, State);
		EnterRule(_localctx, 526, RULE_local_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333;
			Match(LOCAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		public Index_subtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_subtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_subtype(this);
		}
	}

	[RuleVersion(0)]
	public Index_subtypeContext index_subtype() {
		Index_subtypeContext _localctx = new Index_subtypeContext(Context, State);
		EnterRule(_localctx, 528, RULE_index_subtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3335;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_index_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_entryContext[] index_setting_entry() {
			return GetRuleContexts<Index_setting_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_entryContext index_setting_entry(int i) {
			return GetRuleContext<Index_setting_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public With_index_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_index_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_index_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_index_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_index_settingsContext with_index_settings() {
		With_index_settingsContext _localctx = new With_index_settingsContext(Context, State);
		EnterRule(_localctx, 530, RULE_with_index_settings);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3337;
			Match(WITH);
			State = 3338;
			Match(LPAREN);
			State = 3339;
			index_setting_entry();
			State = 3344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,328,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3340;
					Match(COMMA);
					State = 3341;
					index_setting_entry();
					}
					} 
				}
				State = 3346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,328,Context);
			}
			State = 3348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3347;
				Match(COMMA);
				}
			}

			State = 3350;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_setting_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_setting_valueContext index_setting_value() {
			return GetRuleContext<Index_setting_valueContext>(0);
		}
		public Index_setting_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_setting_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_setting_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_setting_entry(this);
		}
	}

	[RuleVersion(0)]
	public Index_setting_entryContext index_setting_entry() {
		Index_setting_entryContext _localctx = new Index_setting_entryContext(Context, State);
		EnterRule(_localctx, 532, RULE_index_setting_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352;
			an_id();
			State = 3353;
			Match(EQUALS);
			State = 3354;
			index_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Index_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIndex_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIndex_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Index_setting_valueContext index_setting_value() {
		Index_setting_valueContext _localctx = new Index_setting_valueContext(Context, State);
		EnterRule(_localctx, 534, RULE_index_setting_value);
		try {
			State = 3360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3356;
				id_or_type();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3357;
				Match(STRING_VALUE);
				}
				break;
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3358;
				integer();
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3359;
				bool_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangefeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settingsContext changefeed_settings() {
			return GetRuleContext<Changefeed_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public ChangefeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed(this);
		}
	}

	[RuleVersion(0)]
	public ChangefeedContext changefeed() {
		ChangefeedContext _localctx = new ChangefeedContext(Context, State);
		EnterRule(_localctx, 536, RULE_changefeed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3362;
			Match(CHANGEFEED);
			State = 3363;
			an_id();
			State = 3364;
			Match(WITH);
			State = 3365;
			Match(LPAREN);
			State = 3366;
			changefeed_settings();
			State = 3367;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settings_entryContext[] changefeed_settings_entry() {
			return GetRuleContexts<Changefeed_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settings_entryContext changefeed_settings_entry(int i) {
			return GetRuleContext<Changefeed_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Changefeed_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_settings(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_settingsContext changefeed_settings() {
		Changefeed_settingsContext _localctx = new Changefeed_settingsContext(Context, State);
		EnterRule(_localctx, 538, RULE_changefeed_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3369;
			changefeed_settings_entry();
			State = 3374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3370;
				Match(COMMA);
				State = 3371;
				changefeed_settings_entry();
				}
				}
				State = 3376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_setting_valueContext changefeed_setting_value() {
			return GetRuleContext<Changefeed_setting_valueContext>(0);
		}
		public Changefeed_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_settings_entryContext changefeed_settings_entry() {
		Changefeed_settings_entryContext _localctx = new Changefeed_settings_entryContext(Context, State);
		EnterRule(_localctx, 540, RULE_changefeed_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377;
			an_id();
			State = 3378;
			Match(EQUALS);
			State = 3379;
			changefeed_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Changefeed_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_setting_valueContext changefeed_setting_value() {
		Changefeed_setting_valueContext _localctx = new Changefeed_setting_valueContext(Context, State);
		EnterRule(_localctx, 542, RULE_changefeed_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Changefeed_alter_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Changefeed_settingsContext changefeed_settings() {
			return GetRuleContext<Changefeed_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Changefeed_alter_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changefeed_alter_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterChangefeed_alter_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitChangefeed_alter_settings(this);
		}
	}

	[RuleVersion(0)]
	public Changefeed_alter_settingsContext changefeed_alter_settings() {
		Changefeed_alter_settingsContext _localctx = new Changefeed_alter_settingsContext(Context, State);
		EnterRule(_localctx, 544, RULE_changefeed_alter_settings);
		try {
			State = 3389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3383;
				Match(DISABLE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3384;
				Match(SET);
				State = 3385;
				Match(LPAREN);
				State = 3386;
				changefeed_settings();
				State = 3387;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_setting_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_setting_valueContext table_setting_value() {
			return GetRuleContext<Table_setting_valueContext>(0);
		}
		public Alter_table_setting_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_setting_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_setting_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_setting_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_setting_entryContext alter_table_setting_entry() {
		Alter_table_setting_entryContext _localctx = new Alter_table_setting_entryContext(Context, State);
		EnterRule(_localctx, 546, RULE_alter_table_setting_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391;
			an_id();
			State = 3392;
			Match(EQUALS);
			State = 3393;
			table_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Split_boundariesContext split_boundaries() {
			return GetRuleContext<Split_boundariesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_listContext ttl_tier_list() {
			return GetRuleContext<Ttl_tier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Table_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Table_setting_valueContext table_setting_value() {
		Table_setting_valueContext _localctx = new Table_setting_valueContext(Context, State);
		EnterRule(_localctx, 548, RULE_table_setting_value);
		int _la;
		try {
			State = 3407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3395;
				id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3396;
				Match(STRING_VALUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3397;
				integer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3398;
				split_boundaries();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3399;
				ttl_tier_list();
				State = 3400;
				Match(ON);
				State = 3401;
				an_id();
				State = 3404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3402;
					Match(AS);
					State = 3403;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & 11L) != 0) || _la==SECONDS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3406;
				bool_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ttl_tier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_actionContext[] ttl_tier_action() {
			return GetRuleContexts<Ttl_tier_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ttl_tier_actionContext ttl_tier_action(int i) {
			return GetRuleContext<Ttl_tier_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Ttl_tier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ttl_tier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTtl_tier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTtl_tier_list(this);
		}
	}

	[RuleVersion(0)]
	public Ttl_tier_listContext ttl_tier_list() {
		Ttl_tier_listContext _localctx = new Ttl_tier_listContext(Context, State);
		EnterRule(_localctx, 550, RULE_ttl_tier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3409;
			expr();
			State = 3420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELETE || _la==TO) {
				{
				State = 3410;
				ttl_tier_action();
				State = 3417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3411;
					Match(COMMA);
					State = 3412;
					expr();
					State = 3413;
					ttl_tier_action();
					}
					}
					State = 3419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ttl_tier_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		public Ttl_tier_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ttl_tier_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTtl_tier_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTtl_tier_action(this);
		}
	}

	[RuleVersion(0)]
	public Ttl_tier_actionContext ttl_tier_action() {
		Ttl_tier_actionContext _localctx = new Ttl_tier_actionContext(Context, State);
		EnterRule(_localctx, 552, RULE_ttl_tier_action);
		try {
			State = 3428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3422;
				Match(TO);
				State = 3423;
				Match(EXTERNAL);
				State = 3424;
				Match(DATA);
				State = 3425;
				Match(SOURCE);
				State = 3426;
				an_id();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3427;
				Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_settingsContext family_settings() {
			return GetRuleContext<Family_settingsContext>(0);
		}
		public Family_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_entry(this);
		}
	}

	[RuleVersion(0)]
	public Family_entryContext family_entry() {
		Family_entryContext _localctx = new Family_entryContext(Context, State);
		EnterRule(_localctx, 554, RULE_family_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3430;
			Match(FAMILY);
			State = 3431;
			an_id();
			State = 3432;
			family_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_settings_entryContext[] family_settings_entry() {
			return GetRuleContexts<Family_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Family_settings_entryContext family_settings_entry(int i) {
			return GetRuleContext<Family_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Family_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_settings(this);
		}
	}

	[RuleVersion(0)]
	public Family_settingsContext family_settings() {
		Family_settingsContext _localctx = new Family_settingsContext(Context, State);
		EnterRule(_localctx, 556, RULE_family_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3434;
			Match(LPAREN);
			State = 3443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -1074790401L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & -35433545737L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & -35184372219905L) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & -2306973307167604737L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 68711087743L) != 0)) {
				{
				State = 3435;
				family_settings_entry();
				State = 3440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3436;
					Match(COMMA);
					State = 3437;
					family_settings_entry();
					}
					}
					State = 3442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3445;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Family_setting_valueContext family_setting_value() {
			return GetRuleContext<Family_setting_valueContext>(0);
		}
		public Family_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Family_settings_entryContext family_settings_entry() {
		Family_settings_entryContext _localctx = new Family_settings_entryContext(Context, State);
		EnterRule(_localctx, 558, RULE_family_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3447;
			an_id();
			State = 3448;
			Match(EQUALS);
			State = 3449;
			family_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Family_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Family_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFamily_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFamily_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Family_setting_valueContext family_setting_value() {
		Family_setting_valueContext _localctx = new Family_setting_valueContext(Context, State);
		EnterRule(_localctx, 560, RULE_family_setting_value);
		try {
			State = 3453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3451;
				Match(STRING_VALUE);
				}
				break;
			case DIGITS:
			case INTEGER_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3452;
				integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Split_boundariesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_value_listContext[] literal_value_list() {
			return GetRuleContexts<Literal_value_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_value_listContext literal_value_list(int i) {
			return GetRuleContext<Literal_value_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Split_boundariesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_split_boundaries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSplit_boundaries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSplit_boundaries(this);
		}
	}

	[RuleVersion(0)]
	public Split_boundariesContext split_boundaries() {
		Split_boundariesContext _localctx = new Split_boundariesContext(Context, State);
		EnterRule(_localctx, 562, RULE_split_boundaries);
		int _la;
		try {
			State = 3467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3455;
				Match(LPAREN);
				State = 3456;
				literal_value_list();
				State = 3461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3457;
					Match(COMMA);
					State = 3458;
					literal_value_list();
					}
					}
					State = 3463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3464;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3466;
				literal_value_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext[] literal_value() {
			return GetRuleContexts<Literal_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value(int i) {
			return GetRuleContext<Literal_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Literal_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Literal_value_listContext literal_value_list() {
		Literal_value_listContext _localctx = new Literal_value_listContext(Context, State);
		EnterRule(_localctx, 564, RULE_literal_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3469;
			Match(LPAREN);
			State = 3470;
			literal_value();
			State = 3475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3471;
				Match(COMMA);
				State = 3472;
				literal_value();
				}
				}
				State = 3477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3478;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_alter_index_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_uncompatContext alter_table_set_table_setting_uncompat() {
			return GetRuleContext<Alter_table_set_table_setting_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_table_alter_index_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_alter_index_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_alter_index_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_alter_index_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_alter_index_actionContext alter_table_alter_index_action() {
		Alter_table_alter_index_actionContext _localctx = new Alter_table_alter_index_actionContext(Context, State);
		EnterRule(_localctx, 566, RULE_alter_table_alter_index_action);
		try {
			State = 3483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3480;
				alter_table_set_table_setting_uncompat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3481;
				alter_table_set_table_setting_compat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3482;
				alter_table_reset_table_setting();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(Context, State);
		EnterRule(_localctx, 568, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3485;
			Match(DROP);
			State = 3490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 3486;
				Match(TABLE);
				}
				break;
			case TABLESTORE:
				{
				State = 3487;
				Match(TABLESTORE);
				}
				break;
			case EXTERNAL:
				{
				State = 3488;
				Match(EXTERNAL);
				State = 3489;
				Match(TABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 3492;
				Match(IF);
				State = 3493;
				Match(EXISTS);
				}
				break;
			}
			State = 3496;
			simple_table_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name() {
			return GetRuleContext<Role_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_optionContext[] user_option() {
			return GetRuleContexts<User_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_optionContext user_option(int i) {
			return GetRuleContext<User_optionContext>(i);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_stmtContext create_user_stmt() {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_create_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3498;
			Match(CREATE);
			State = 3499;
			Match(USER);
			State = 3500;
			role_name();
			State = 3504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENCRYPTED || _la==HASH || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & 68719484929L) != 0)) {
				{
				{
				State = 3501;
				user_option();
				}
				}
				State = 3506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_optionContext[] user_option() {
			return GetRuleContexts<User_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_optionContext user_option(int i) {
			return GetRuleContext<User_optionContext>(i);
		}
		public Alter_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_stmtContext alter_user_stmt() {
		Alter_user_stmtContext _localctx = new Alter_user_stmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_alter_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507;
			Match(ALTER);
			State = 3508;
			Match(USER);
			State = 3509;
			role_name();
			State = 3521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTED:
			case HASH:
			case LOGIN:
			case NOLOGIN:
			case PASSWORD:
			case WITH:
				{
				State = 3511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 3510;
					Match(WITH);
					}
				}

				State = 3514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3513;
					user_option();
					}
					}
					State = 3516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCRYPTED || _la==HASH || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & 68719484929L) != 0) );
				}
				break;
			case RENAME:
				{
				State = 3518;
				Match(RENAME);
				State = 3519;
				Match(TO);
				State = 3520;
				role_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_group_stmtContext create_group_stmt() {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(Context, State);
		EnterRule(_localctx, 574, RULE_create_group_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3523;
			Match(CREATE);
			State = 3524;
			Match(GROUP);
			State = 3525;
			role_name();
			State = 3539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3526;
				Match(WITH);
				State = 3527;
				Match(USER);
				State = 3528;
				role_name();
				State = 3533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,351,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3529;
						Match(COMMA);
						State = 3530;
						role_name();
						}
						} 
					}
					State = 3535;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,351,Context);
				}
				State = 3537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3536;
					Match(COMMA);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_group_stmtContext alter_group_stmt() {
		Alter_group_stmtContext _localctx = new Alter_group_stmtContext(Context, State);
		EnterRule(_localctx, 576, RULE_alter_group_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3541;
			Match(ALTER);
			State = 3542;
			Match(GROUP);
			State = 3543;
			role_name();
			State = 3560;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case DROP:
				{
				State = 3544;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3545;
				Match(USER);
				State = 3546;
				role_name();
				State = 3551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3547;
						Match(COMMA);
						State = 3548;
						role_name();
						}
						} 
					}
					State = 3553;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
				}
				State = 3555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3554;
					Match(COMMA);
					}
				}

				}
				break;
			case RENAME:
				{
				State = 3557;
				Match(RENAME);
				State = 3558;
				Match(TO);
				State = 3559;
				role_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_role_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_role_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_role_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_role_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_role_stmtContext drop_role_stmt() {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(Context, State);
		EnterRule(_localctx, 578, RULE_drop_role_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3562;
			Match(DROP);
			State = 3563;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUP || _la==USER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				{
				State = 3564;
				Match(IF);
				State = 3565;
				Match(EXISTS);
				}
				break;
			}
			State = 3568;
			role_name();
			State = 3573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,358,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3569;
					Match(COMMA);
					State = 3570;
					role_name();
					}
					} 
				}
				State = 3575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,358,Context);
			}
			State = 3577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3576;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRole_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRole_name(this);
		}
	}

	[RuleVersion(0)]
	public Role_nameContext role_name() {
		Role_nameContext _localctx = new Role_nameContext(Context, State);
		EnterRule(_localctx, 580, RULE_role_name);
		try {
			State = 3581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3579;
				an_id_or_type();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3580;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Authentication_optionContext authentication_option() {
			return GetRuleContext<Authentication_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Login_optionContext login_option() {
			return GetRuleContext<Login_optionContext>(0);
		}
		public User_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUser_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUser_option(this);
		}
	}

	[RuleVersion(0)]
	public User_optionContext user_option() {
		User_optionContext _localctx = new User_optionContext(Context, State);
		EnterRule(_localctx, 582, RULE_user_option);
		try {
			State = 3585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTED:
			case HASH:
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3583;
				authentication_option();
				}
				break;
			case LOGIN:
			case NOLOGIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3584;
				login_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authentication_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Password_optionContext password_option() {
			return GetRuleContext<Password_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_optionContext hash_option() {
			return GetRuleContext<Hash_optionContext>(0);
		}
		public Authentication_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authentication_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAuthentication_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAuthentication_option(this);
		}
	}

	[RuleVersion(0)]
	public Authentication_optionContext authentication_option() {
		Authentication_optionContext _localctx = new Authentication_optionContext(Context, State);
		EnterRule(_localctx, 584, RULE_authentication_option);
		try {
			State = 3589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTED:
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3587;
				password_option();
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3588;
				hash_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Password_valueContext password_value() {
			return GetRuleContext<Password_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		public Password_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPassword_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPassword_option(this);
		}
	}

	[RuleVersion(0)]
	public Password_optionContext password_option() {
		Password_optionContext _localctx = new Password_optionContext(Context, State);
		EnterRule(_localctx, 586, RULE_password_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPTED) {
				{
				State = 3591;
				Match(ENCRYPTED);
				}
			}

			State = 3594;
			Match(PASSWORD);
			State = 3595;
			password_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		public Password_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPassword_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPassword_value(this);
		}
	}

	[RuleVersion(0)]
	public Password_valueContext password_value() {
		Password_valueContext _localctx = new Password_valueContext(Context, State);
		EnterRule(_localctx, 588, RULE_password_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3597;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL || _la==STRING_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Hash_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterHash_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitHash_option(this);
		}
	}

	[RuleVersion(0)]
	public Hash_optionContext hash_option() {
		Hash_optionContext _localctx = new Hash_optionContext(Context, State);
		EnterRule(_localctx, 590, RULE_hash_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3599;
			Match(HASH);
			State = 3600;
			Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Login_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		public Login_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_login_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLogin_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLogin_option(this);
		}
	}

	[RuleVersion(0)]
	public Login_optionContext login_option() {
		Login_optionContext _localctx = new Login_optionContext(Context, State);
		EnterRule(_localctx, 592, RULE_login_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3602;
			_la = TokenStream.LA(1);
			if ( !(_la==LOGIN || _la==NOLOGIN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissions_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(YQLParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(YQLParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Permission_name_targetContext permission_name_target() {
			return GetRuleContext<Permission_name_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		public Grant_permissions_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permissions_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterGrant_permissions_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitGrant_permissions_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissions_stmtContext grant_permissions_stmt() {
		Grant_permissions_stmtContext _localctx = new Grant_permissions_stmtContext(Context, State);
		EnterRule(_localctx, 594, RULE_grant_permissions_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3604;
			Match(GRANT);
			State = 3605;
			permission_name_target();
			State = 3606;
			Match(ON);
			State = 3607;
			an_id_schema();
			State = 3612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3608;
				Match(COMMA);
				State = 3609;
				an_id_schema();
				}
				}
				State = 3614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3615;
			Match(TO);
			State = 3616;
			role_name();
			State = 3621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3617;
					Match(COMMA);
					State = 3618;
					role_name();
					}
					} 
				}
				State = 3623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,365,Context);
			}
			State = 3625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3624;
				Match(COMMA);
				}
			}

			State = 3630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3627;
				Match(WITH);
				State = 3628;
				Match(GRANT);
				State = 3629;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_permissions_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Permission_name_targetContext permission_name_target() {
			return GetRuleContext<Permission_name_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext[] an_id_schema() {
			return GetRuleContexts<An_id_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_schemaContext an_id_schema(int i) {
			return GetRuleContext<An_id_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Revoke_permissions_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_permissions_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRevoke_permissions_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRevoke_permissions_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_permissions_stmtContext revoke_permissions_stmt() {
		Revoke_permissions_stmtContext _localctx = new Revoke_permissions_stmtContext(Context, State);
		EnterRule(_localctx, 596, RULE_revoke_permissions_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3632;
			Match(REVOKE);
			State = 3636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 3633;
				Match(GRANT);
				State = 3634;
				Match(OPTION);
				State = 3635;
				Match(FOR);
				}
				break;
			}
			State = 3638;
			permission_name_target();
			State = 3639;
			Match(ON);
			State = 3640;
			an_id_schema();
			State = 3645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3641;
				Match(COMMA);
				State = 3642;
				an_id_schema();
				}
				}
				State = 3647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3648;
			Match(FROM);
			State = 3649;
			role_name();
			State = 3654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3650;
				Match(COMMA);
				State = 3651;
				role_name();
				}
				}
				State = 3656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		public Permission_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_id(this);
		}
	}

	[RuleVersion(0)]
	public Permission_idContext permission_id() {
		Permission_idContext _localctx = new Permission_idContext(Context, State);
		EnterRule(_localctx, 598, RULE_permission_id);
		int _la;
		try {
			State = 3681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3657;
				Match(CONNECT);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3658;
				Match(LIST);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3659;
				Match(INSERT);
				}
				break;
			case MANAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3660;
				Match(MANAGE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3661;
				Match(DROP);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3662;
				Match(GRANT);
				}
				break;
			case MODIFY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3663;
				Match(MODIFY);
				State = 3664;
				_la = TokenStream.LA(1);
				if ( !(_la==ATTRIBUTES || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ERASE:
			case UPDATE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3665;
				_la = TokenStream.LA(1);
				if ( !(_la==ERASE || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3666;
				Match(ROW);
				}
				break;
			case ALTER:
			case DESCRIBE:
			case REMOVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3667;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DESCRIBE || _la==REMOVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3668;
				Match(SCHEMA);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3669;
				Match(SELECT);
				State = 3671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ATTRIBUTES || _la==ROW || _la==TABLES) {
					{
					State = 3670;
					_la = TokenStream.LA(1);
					if ( !(_la==ATTRIBUTES || _la==ROW || _la==TABLES) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case FULL:
			case USE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3673;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==USE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEGACY) {
					{
					State = 3674;
					Match(LEGACY);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3677;
				Match(CREATE);
				State = 3679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIRECTORY || _la==QUEUE || _la==TABLE) {
					{
					State = 3678;
					_la = TokenStream.LA(1);
					if ( !(_la==DIRECTORY || _la==QUEUE || _la==TABLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Permission_idContext permission_id() {
			return GetRuleContext<Permission_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public Permission_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_name(this);
		}
	}

	[RuleVersion(0)]
	public Permission_nameContext permission_name() {
		Permission_nameContext _localctx = new Permission_nameContext(Context, State);
		EnterRule(_localctx, 600, RULE_permission_name);
		try {
			State = 3685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case CONNECT:
			case CREATE:
			case DESCRIBE:
			case DROP:
			case ERASE:
			case FULL:
			case GRANT:
			case INSERT:
			case LIST:
			case MANAGE:
			case MODIFY:
			case REMOVE:
			case SELECT:
			case UPDATE:
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3683;
				permission_id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3684;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permission_name_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Permission_nameContext[] permission_name() {
			return GetRuleContexts<Permission_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Permission_nameContext permission_name(int i) {
			return GetRuleContext<Permission_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		public Permission_name_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permission_name_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterPermission_name_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitPermission_name_target(this);
		}
	}

	[RuleVersion(0)]
	public Permission_name_targetContext permission_name_target() {
		Permission_name_targetContext _localctx = new Permission_name_targetContext(Context, State);
		EnterRule(_localctx, 602, RULE_permission_name_target);
		int _la;
		try {
			int _alt;
			State = 3702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case CONNECT:
			case CREATE:
			case DESCRIBE:
			case DROP:
			case ERASE:
			case FULL:
			case GRANT:
			case INSERT:
			case LIST:
			case MANAGE:
			case MODIFY:
			case REMOVE:
			case SELECT:
			case UPDATE:
			case USE:
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3687;
				permission_name();
				State = 3692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,376,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3688;
						Match(COMMA);
						State = 3689;
						permission_name();
						}
						} 
					}
					State = 3694;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,376,Context);
				}
				State = 3696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3695;
					Match(COMMA);
					}
				}

				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3698;
				Match(ALL);
				State = 3700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 3699;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		public Create_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_pool_stmtContext create_resource_pool_stmt() {
		Create_resource_pool_stmtContext _localctx = new Create_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 604, RULE_create_resource_pool_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704;
			Match(CREATE);
			State = 3705;
			Match(RESOURCE);
			State = 3706;
			Match(POOL);
			State = 3707;
			object_ref();
			State = 3708;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_actionContext[] alter_resource_pool_action() {
			return GetRuleContexts<Alter_resource_pool_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_actionContext alter_resource_pool_action(int i) {
			return GetRuleContext<Alter_resource_pool_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_stmtContext alter_resource_pool_stmt() {
		Alter_resource_pool_stmtContext _localctx = new Alter_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 606, RULE_alter_resource_pool_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3710;
			Match(ALTER);
			State = 3711;
			Match(RESOURCE);
			State = 3712;
			Match(POOL);
			State = 3713;
			object_ref();
			State = 3714;
			alter_resource_pool_action();
			State = 3719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3715;
				Match(COMMA);
				State = 3716;
				alter_resource_pool_action();
				}
				}
				State = 3721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_resource_pool_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_actionContext alter_resource_pool_action() {
		Alter_resource_pool_actionContext _localctx = new Alter_resource_pool_actionContext(Context, State);
		EnterRule(_localctx, 608, RULE_alter_resource_pool_action);
		try {
			State = 3724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3722;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3723;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_pool_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Drop_resource_pool_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_pool_stmtContext drop_resource_pool_stmt() {
		Drop_resource_pool_stmtContext _localctx = new Drop_resource_pool_stmtContext(Context, State);
		EnterRule(_localctx, 610, RULE_drop_resource_pool_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3726;
			Match(DROP);
			State = 3727;
			Match(RESOURCE);
			State = 3728;
			Match(POOL);
			State = 3729;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_settingsContext with_table_settings() {
			return GetRuleContext<With_table_settingsContext>(0);
		}
		public Create_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_resource_pool_classifier_stmtContext create_resource_pool_classifier_stmt() {
		Create_resource_pool_classifier_stmtContext _localctx = new Create_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 612, RULE_create_resource_pool_classifier_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3731;
			Match(CREATE);
			State = 3732;
			Match(RESOURCE);
			State = 3733;
			Match(POOL);
			State = 3734;
			Match(CLASSIFIER);
			State = 3735;
			object_ref();
			State = 3736;
			with_table_settings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_actionContext[] alter_resource_pool_classifier_action() {
			return GetRuleContexts<Alter_resource_pool_classifier_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_resource_pool_classifier_actionContext alter_resource_pool_classifier_action(int i) {
			return GetRuleContext<Alter_resource_pool_classifier_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_classifier_stmtContext alter_resource_pool_classifier_stmt() {
		Alter_resource_pool_classifier_stmtContext _localctx = new Alter_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 614, RULE_alter_resource_pool_classifier_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3738;
			Match(ALTER);
			State = 3739;
			Match(RESOURCE);
			State = 3740;
			Match(POOL);
			State = 3741;
			Match(CLASSIFIER);
			State = 3742;
			object_ref();
			State = 3743;
			alter_resource_pool_classifier_action();
			State = 3748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3744;
				Match(COMMA);
				State = 3745;
				alter_resource_pool_classifier_action();
				}
				}
				State = 3750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_resource_pool_classifier_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_table_setting_compatContext alter_table_set_table_setting_compat() {
			return GetRuleContext<Alter_table_set_table_setting_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_reset_table_settingContext alter_table_reset_table_setting() {
			return GetRuleContext<Alter_table_reset_table_settingContext>(0);
		}
		public Alter_resource_pool_classifier_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_resource_pool_classifier_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_resource_pool_classifier_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_resource_pool_classifier_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_resource_pool_classifier_actionContext alter_resource_pool_classifier_action() {
		Alter_resource_pool_classifier_actionContext _localctx = new Alter_resource_pool_classifier_actionContext(Context, State);
		EnterRule(_localctx, 616, RULE_alter_resource_pool_classifier_action);
		try {
			State = 3753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3751;
				alter_table_set_table_setting_compat();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3752;
				alter_table_reset_table_setting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_resource_pool_classifier_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		public Drop_resource_pool_classifier_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_resource_pool_classifier_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_resource_pool_classifier_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_resource_pool_classifier_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_resource_pool_classifier_stmtContext drop_resource_pool_classifier_stmt() {
		Drop_resource_pool_classifier_stmtContext _localctx = new Drop_resource_pool_classifier_stmtContext(Context, State);
		EnterRule(_localctx, 618, RULE_drop_resource_pool_classifier_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3755;
			Match(DROP);
			State = 3756;
			Match(RESOURCE);
			State = 3757;
			Match(POOL);
			State = 3758;
			Match(CLASSIFIER);
			State = 3759;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_targetContext[] replication_target() {
			return GetRuleContexts<Replication_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Replication_targetContext replication_target(int i) {
			return GetRuleContext<Replication_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settingsContext replication_settings() {
			return GetRuleContext<Replication_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_replication_stmtContext create_replication_stmt() {
		Create_replication_stmtContext _localctx = new Create_replication_stmtContext(Context, State);
		EnterRule(_localctx, 620, RULE_create_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3761;
			Match(CREATE);
			State = 3762;
			Match(ASYNC);
			State = 3763;
			Match(REPLICATION);
			State = 3764;
			object_ref();
			State = 3765;
			Match(FOR);
			State = 3766;
			replication_target();
			State = 3771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3767;
				Match(COMMA);
				State = 3768;
				replication_target();
				}
				}
				State = 3773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3774;
			Match(WITH);
			State = 3775;
			Match(LPAREN);
			State = 3776;
			replication_settings();
			State = 3777;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext[] object_ref() {
			return GetRuleContexts<Object_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref(int i) {
			return GetRuleContext<Object_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		public Replication_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_target(this);
		}
	}

	[RuleVersion(0)]
	public Replication_targetContext replication_target() {
		Replication_targetContext _localctx = new Replication_targetContext(Context, State);
		EnterRule(_localctx, 622, RULE_replication_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3779;
			object_ref();
			State = 3780;
			Match(AS);
			State = 3781;
			object_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settings_entryContext[] replication_settings_entry() {
			return GetRuleContexts<Replication_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settings_entryContext replication_settings_entry(int i) {
			return GetRuleContext<Replication_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Replication_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_settings(this);
		}
	}

	[RuleVersion(0)]
	public Replication_settingsContext replication_settings() {
		Replication_settingsContext _localctx = new Replication_settingsContext(Context, State);
		EnterRule(_localctx, 624, RULE_replication_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3783;
			replication_settings_entry();
			State = 3788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3784;
				Match(COMMA);
				State = 3785;
				replication_settings_entry();
				}
				}
				State = 3790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replication_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Replication_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replication_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReplication_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReplication_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Replication_settings_entryContext replication_settings_entry() {
		Replication_settings_entryContext _localctx = new Replication_settings_entryContext(Context, State);
		EnterRule(_localctx, 626, RULE_replication_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3791;
			an_id();
			State = 3792;
			Match(EQUALS);
			State = 3793;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_actionContext[] alter_replication_action() {
			return GetRuleContexts<Alter_replication_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_actionContext alter_replication_action(int i) {
			return GetRuleContext<Alter_replication_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_stmtContext alter_replication_stmt() {
		Alter_replication_stmtContext _localctx = new Alter_replication_stmtContext(Context, State);
		EnterRule(_localctx, 628, RULE_alter_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3795;
			Match(ALTER);
			State = 3796;
			Match(ASYNC);
			State = 3797;
			Match(REPLICATION);
			State = 3798;
			object_ref();
			State = 3799;
			alter_replication_action();
			State = 3804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3800;
				Match(COMMA);
				State = 3801;
				alter_replication_action();
				}
				}
				State = 3806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_replication_set_settingContext alter_replication_set_setting() {
			return GetRuleContext<Alter_replication_set_settingContext>(0);
		}
		public Alter_replication_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_actionContext alter_replication_action() {
		Alter_replication_actionContext _localctx = new Alter_replication_actionContext(Context, State);
		EnterRule(_localctx, 630, RULE_alter_replication_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3807;
			alter_replication_set_setting();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_replication_set_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replication_settingsContext replication_settings() {
			return GetRuleContext<Replication_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Alter_replication_set_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_replication_set_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_replication_set_setting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_replication_set_setting(this);
		}
	}

	[RuleVersion(0)]
	public Alter_replication_set_settingContext alter_replication_set_setting() {
		Alter_replication_set_settingContext _localctx = new Alter_replication_set_settingContext(Context, State);
		EnterRule(_localctx, 632, RULE_alter_replication_set_setting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3809;
			Match(SET);
			State = 3810;
			Match(LPAREN);
			State = 3811;
			replication_settings();
			State = 3812;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_replication_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		public Drop_replication_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_replication_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_replication_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_replication_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_replication_stmtContext drop_replication_stmt() {
		Drop_replication_stmtContext _localctx = new Drop_replication_stmtContext(Context, State);
		EnterRule(_localctx, 634, RULE_drop_replication_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3814;
			Match(DROP);
			State = 3815;
			Match(ASYNC);
			State = 3816;
			Match(REPLICATION);
			State = 3817;
			object_ref();
			State = 3819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE) {
				{
				State = 3818;
				Match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_or_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		public Lambda_or_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_or_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterLambda_or_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitLambda_or_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_or_parameterContext lambda_or_parameter() {
		Lambda_or_parameterContext _localctx = new Lambda_or_parameterContext(Context, State);
		EnterRule(_localctx, 636, RULE_lambda_or_parameter);
		try {
			State = 3823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3821;
				lambda();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3822;
				bind_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_transfer_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(YQLParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext[] object_ref() {
			return GetRuleContexts<Object_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref(int i) {
			return GetRuleContext<Object_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transfer_settingsContext transfer_settings() {
			return GetRuleContext<Transfer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_or_parameterContext lambda_or_parameter() {
			return GetRuleContext<Lambda_or_parameterContext>(0);
		}
		public Create_transfer_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_transfer_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_transfer_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_transfer_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_transfer_stmtContext create_transfer_stmt() {
		Create_transfer_stmtContext _localctx = new Create_transfer_stmtContext(Context, State);
		EnterRule(_localctx, 638, RULE_create_transfer_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3825;
			Match(CREATE);
			State = 3826;
			Match(TRANSFER);
			State = 3827;
			object_ref();
			State = 3828;
			Match(FROM);
			State = 3829;
			object_ref();
			State = 3830;
			Match(TO);
			State = 3831;
			object_ref();
			State = 3834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3832;
				Match(USING);
				State = 3833;
				lambda_or_parameter();
				}
			}

			State = 3836;
			Match(WITH);
			State = 3837;
			Match(LPAREN);
			State = 3838;
			transfer_settings();
			State = 3839;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transfer_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transfer_settings_entryContext[] transfer_settings_entry() {
			return GetRuleContexts<Transfer_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transfer_settings_entryContext transfer_settings_entry(int i) {
			return GetRuleContext<Transfer_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Transfer_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transfer_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTransfer_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTransfer_settings(this);
		}
	}

	[RuleVersion(0)]
	public Transfer_settingsContext transfer_settings() {
		Transfer_settingsContext _localctx = new Transfer_settingsContext(Context, State);
		EnterRule(_localctx, 640, RULE_transfer_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3841;
			transfer_settings_entry();
			State = 3846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3842;
				Match(COMMA);
				State = 3843;
				transfer_settings_entry();
				}
				}
				State = 3848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transfer_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Transfer_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transfer_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTransfer_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTransfer_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Transfer_settings_entryContext transfer_settings_entry() {
		Transfer_settings_entryContext _localctx = new Transfer_settings_entryContext(Context, State);
		EnterRule(_localctx, 642, RULE_transfer_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3849;
			an_id();
			State = 3850;
			Match(EQUALS);
			State = 3851;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_transfer_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(YQLParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_transfer_actionContext[] alter_transfer_action() {
			return GetRuleContexts<Alter_transfer_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_transfer_actionContext alter_transfer_action(int i) {
			return GetRuleContext<Alter_transfer_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_transfer_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_transfer_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_transfer_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_transfer_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_transfer_stmtContext alter_transfer_stmt() {
		Alter_transfer_stmtContext _localctx = new Alter_transfer_stmtContext(Context, State);
		EnterRule(_localctx, 644, RULE_alter_transfer_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3853;
			Match(ALTER);
			State = 3854;
			Match(TRANSFER);
			State = 3855;
			object_ref();
			State = 3856;
			alter_transfer_action();
			State = 3861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3857;
				Match(COMMA);
				State = 3858;
				alter_transfer_action();
				}
				}
				State = 3863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_transfer_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_transfer_set_settingContext alter_transfer_set_setting() {
			return GetRuleContext<Alter_transfer_set_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_transfer_set_usingContext alter_transfer_set_using() {
			return GetRuleContext<Alter_transfer_set_usingContext>(0);
		}
		public Alter_transfer_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_transfer_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_transfer_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_transfer_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_transfer_actionContext alter_transfer_action() {
		Alter_transfer_actionContext _localctx = new Alter_transfer_actionContext(Context, State);
		EnterRule(_localctx, 646, RULE_alter_transfer_action);
		try {
			State = 3866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3864;
				alter_transfer_set_setting();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3865;
				alter_transfer_set_using();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_transfer_set_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transfer_settingsContext transfer_settings() {
			return GetRuleContext<Transfer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Alter_transfer_set_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_transfer_set_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_transfer_set_setting(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_transfer_set_setting(this);
		}
	}

	[RuleVersion(0)]
	public Alter_transfer_set_settingContext alter_transfer_set_setting() {
		Alter_transfer_set_settingContext _localctx = new Alter_transfer_set_settingContext(Context, State);
		EnterRule(_localctx, 648, RULE_alter_transfer_set_setting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3868;
			Match(SET);
			State = 3869;
			Match(LPAREN);
			State = 3870;
			transfer_settings();
			State = 3871;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_transfer_set_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_or_parameterContext lambda_or_parameter() {
			return GetRuleContext<Lambda_or_parameterContext>(0);
		}
		public Alter_transfer_set_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_transfer_set_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_transfer_set_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_transfer_set_using(this);
		}
	}

	[RuleVersion(0)]
	public Alter_transfer_set_usingContext alter_transfer_set_using() {
		Alter_transfer_set_usingContext _localctx = new Alter_transfer_set_usingContext(Context, State);
		EnterRule(_localctx, 650, RULE_alter_transfer_set_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3873;
			Match(SET);
			State = 3874;
			Match(USING);
			State = 3875;
			lambda_or_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_transfer_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(YQLParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		public Drop_transfer_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_transfer_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_transfer_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_transfer_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_transfer_stmtContext drop_transfer_stmt() {
		Drop_transfer_stmtContext _localctx = new Drop_transfer_stmtContext(Context, State);
		EnterRule(_localctx, 652, RULE_drop_transfer_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3877;
			Match(DROP);
			State = 3878;
			Match(TRANSFER);
			State = 3879;
			object_ref();
			State = 3881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE) {
				{
				State = 3880;
				Match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_or_subquery_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_bind_parameterContext[] opt_bind_parameter() {
			return GetRuleContexts<Opt_bind_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_bind_parameterContext opt_bind_parameter(int i) {
			return GetRuleContext<Opt_bind_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Action_or_subquery_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_or_subquery_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAction_or_subquery_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAction_or_subquery_args(this);
		}
	}

	[RuleVersion(0)]
	public Action_or_subquery_argsContext action_or_subquery_args() {
		Action_or_subquery_argsContext _localctx = new Action_or_subquery_argsContext(Context, State);
		EnterRule(_localctx, 654, RULE_action_or_subquery_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3883;
			opt_bind_parameter();
			State = 3888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3884;
				Match(COMMA);
				State = 3885;
				opt_bind_parameter();
				}
				}
				State = 3890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_action_or_subquery_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFINE() { return GetTokens(YQLParser.DEFINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE(int i) {
			return GetToken(YQLParser.DEFINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
			return GetRuleContext<Define_action_or_subquery_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Action_or_subquery_argsContext action_or_subquery_args() {
			return GetRuleContext<Action_or_subquery_argsContext>(0);
		}
		public Define_action_or_subquery_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_action_or_subquery_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDefine_action_or_subquery_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDefine_action_or_subquery_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Define_action_or_subquery_stmtContext define_action_or_subquery_stmt() {
		Define_action_or_subquery_stmtContext _localctx = new Define_action_or_subquery_stmtContext(Context, State);
		EnterRule(_localctx, 656, RULE_define_action_or_subquery_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3891;
			Match(DEFINE);
			State = 3892;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTION || _la==SUBQUERY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3893;
			bind_parameter();
			State = 3894;
			Match(LPAREN);
			State = 3896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR) {
				{
				State = 3895;
				action_or_subquery_args();
				}
			}

			State = 3898;
			Match(RPAREN);
			State = 3899;
			Match(AS);
			State = 3900;
			define_action_or_subquery_body();
			State = 3901;
			Match(END);
			State = 3902;
			Match(DEFINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_action_or_subquery_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(YQLParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(YQLParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext[] sql_stmt_core() {
			return GetRuleContexts<Sql_stmt_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_coreContext sql_stmt_core(int i) {
			return GetRuleContext<Sql_stmt_coreContext>(i);
		}
		public Define_action_or_subquery_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_action_or_subquery_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDefine_action_or_subquery_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDefine_action_or_subquery_body(this);
		}
	}

	[RuleVersion(0)]
	public Define_action_or_subquery_bodyContext define_action_or_subquery_body() {
		Define_action_or_subquery_bodyContext _localctx = new Define_action_or_subquery_bodyContext(Context, State);
		EnterRule(_localctx, 658, RULE_define_action_or_subquery_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 3904;
				Match(SEMICOLON);
				}
				}
				State = 3909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1729408646296633344L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -6915259621669863167L) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & 2099329L) != 0) || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & 76571106719335425L) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & 71L) != 0)) {
				{
				State = 3910;
				sql_stmt_core();
				State = 3919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3912;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 3911;
							Match(SEMICOLON);
							}
							}
							State = 3914;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==SEMICOLON );
						State = 3916;
						sql_stmt_core();
						}
						} 
					}
					State = 3921;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,398,Context);
				}
				State = 3925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					State = 3922;
					Match(SEMICOLON);
					}
					}
					State = 3927;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext[] do_stmt() {
			return GetRuleContexts<Do_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt(int i) {
			return GetRuleContext<Do_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 660, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVALUATE) {
				{
				State = 3930;
				Match(EVALUATE);
				}
			}

			State = 3933;
			Match(IF);
			State = 3934;
			expr();
			State = 3935;
			do_stmt();
			State = 3938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3936;
				Match(ELSE);
				State = 3937;
				do_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext[] do_stmt() {
			return GetRuleContexts<Do_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt(int i) {
			return GetRuleContext<Do_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 662, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVALUATE) {
				{
				State = 3940;
				Match(EVALUATE);
				}
			}

			State = 3944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARALLEL) {
				{
				State = 3943;
				Match(PARALLEL);
				}
			}

			State = 3946;
			Match(FOR);
			State = 3947;
			bind_parameter();
			State = 3948;
			Match(IN);
			State = 3949;
			expr();
			State = 3950;
			do_stmt();
			State = 3953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3951;
				Match(ELSE);
				State = 3952;
				do_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_keyContext table_key() {
			return GetRuleContext<Table_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_exprContext an_id_expr() {
			return GetRuleContext<An_id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintsContext table_hints() {
			return GetRuleContext<Table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_argContext[] table_arg() {
			return GetRuleContexts<Table_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_argContext table_arg(int i) {
			return GetRuleContext<Table_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_ref(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 664, RULE_table_ref);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				{
				State = 3955;
				cluster_expr();
				State = 3956;
				Match(DOT);
				}
				break;
			}
			State = 3961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 3960;
				Match(COMMAT);
				}
			}

			State = 3993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				{
				State = 3963;
				table_key();
				}
				break;
			case 2:
				{
				State = 3964;
				an_id_expr();
				State = 3965;
				Match(LPAREN);
				State = 3977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194201571L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
					{
					State = 3966;
					table_arg();
					State = 3971;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3967;
							Match(COMMA);
							State = 3968;
							table_arg();
							}
							} 
						}
						State = 3973;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
					}
					State = 3975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3974;
						Match(COMMA);
						}
					}

					}
				}

				State = 3979;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				State = 3981;
				bind_parameter();
				State = 3987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3982;
					Match(LPAREN);
					State = 3984;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & -17592194234339L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & -1L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & -1L) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & -549755813889L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & -1L) != 0)) {
						{
						State = 3983;
						expr_list();
						}
					}

					State = 3986;
					Match(RPAREN);
					}
				}

				State = 3991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIEW) {
					{
					State = 3989;
					Match(VIEW);
					State = 3990;
					view_name();
					}
				}

				}
				break;
			}
			State = 3996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3995;
				table_hints();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_table_or_typeContext id_table_or_type() {
			return GetRuleContext<Id_table_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public Table_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_key(this);
		}
	}

	[RuleVersion(0)]
	public Table_keyContext table_key() {
		Table_keyContext _localctx = new Table_keyContext(Context, State);
		EnterRule(_localctx, 666, RULE_table_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3998;
			id_table_or_type();
			State = 4001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VIEW) {
				{
				State = 3999;
				Match(VIEW);
				State = 4000;
				view_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_exprContext named_expr() {
			return GetRuleContext<Named_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public Table_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_arg(this);
		}
	}

	[RuleVersion(0)]
	public Table_argContext table_arg() {
		Table_argContext _localctx = new Table_argContext(Context, State);
		EnterRule(_localctx, 668, RULE_table_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 4003;
				Match(COMMAT);
				}
			}

			State = 4006;
			named_expr();
			State = 4009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VIEW) {
				{
				State = 4007;
				Match(VIEW);
				State = 4008;
				view_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_hints(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintsContext table_hints() {
		Table_hintsContext _localctx = new Table_hintsContext(Context, State);
		EnterRule(_localctx, 670, RULE_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4011;
			Match(WITH);
			State = 4024;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 4012;
				table_hint();
				}
				break;
			case LPAREN:
				{
				State = 4013;
				Match(LPAREN);
				State = 4014;
				table_hint();
				State = 4019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4015;
					Match(COMMA);
					State = 4016;
					table_hint();
					}
					}
					State = 4021;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4022;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_hintContext an_id_hint() {
			return GetRuleContext<An_id_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext[] type_name_tag() {
			return GetRuleContexts<Type_name_tagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_tagContext type_name_tag(int i) {
			return GetRuleContext<Type_name_tagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_or_bindContext type_name_or_bind() {
			return GetRuleContext<Type_name_or_bindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_arg_positionalContext[] struct_arg_positional() {
			return GetRuleContexts<Struct_arg_positionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_arg_positionalContext struct_arg_positional(int i) {
			return GetRuleContext<Struct_arg_positionalContext>(i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 672, RULE_table_hint);
		int _la;
		try {
			int _alt;
			State = 4071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4026;
				an_id_hint();
				State = 4045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 4027;
					Match(EQUALS);
					State = 4043;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
					case ABORT:
					case ACTION:
					case ADD:
					case AFTER:
					case ALL:
					case ALTER:
					case ANALYZE:
					case AND:
					case ANSI:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSUME:
					case ASYMMETRIC:
					case ASYNC:
					case AT:
					case ATTACH:
					case ATTRIBUTES:
					case AUTOINCREMENT:
					case BACKUP:
					case BATCH:
					case COLLECTION:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BITCAST:
					case BY:
					case CASCADE:
					case CASE:
					case CAST:
					case CHANGEFEED:
					case CHECK:
					case CLASSIFIER:
					case COLLATE:
					case COLUMN:
					case COLUMNS:
					case COMMIT:
					case COMPACT:
					case CONDITIONAL:
					case CONFLICT:
					case CONNECT:
					case CONSTRAINT:
					case CONSUMER:
					case COVER:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case DATA:
					case DATABASE:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFERRABLE:
					case DEFERRED:
					case DEFINE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DETACH:
					case DIRECTORY:
					case DISABLE:
					case DISCARD:
					case DISTINCT:
					case DO:
					case DROP:
					case EACH:
					case ELSE:
					case EMPTY:
					case EMPTY_ACTION:
					case ENCRYPTED:
					case END:
					case ERASE:
					case ERROR:
					case ESCAPE:
					case EVALUATE:
					case EXCEPT:
					case EXCLUDE:
					case EXCLUSION:
					case EXCLUSIVE:
					case EXISTS:
					case EXPLAIN:
					case EXPORT:
					case EXTERNAL:
					case FAIL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FLATTEN:
					case FOLLOWING:
					case FOR:
					case FOREIGN:
					case FROM:
					case FULL:
					case FUNCTION:
					case GLOB:
					case GLOBAL:
					case GRANT:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case HOP:
					case IF:
					case IGNORE:
					case ILIKE:
					case IMMEDIATE:
					case IMPORT:
					case IN:
					case INCREMENT:
					case INCREMENTAL:
					case INDEX:
					case INDEXED:
					case INHERITS:
					case INITIAL:
					case INITIALLY:
					case INNER:
					case INSERT:
					case INSTEAD:
					case INTERSECT:
					case INTO:
					case IS:
					case ISNULL:
					case JOIN:
					case JSON_EXISTS:
					case JSON_QUERY:
					case JSON_VALUE:
					case KEY:
					case LAST:
					case LEFT:
					case LEGACY:
					case LIKE:
					case LIMIT:
					case LOCAL:
					case LOGIN:
					case MANAGE:
					case MATCH:
					case MATCHES:
					case MATCH_RECOGNIZE:
					case MEASURES:
					case MICROSECONDS:
					case MILLISECONDS:
					case MODIFY:
					case NANOSECONDS:
					case NATURAL:
					case NEXT:
					case NO:
					case NOLOGIN:
					case NOT:
					case NOTNULL:
					case NULL:
					case NULLS:
					case OBJECT:
					case OF:
					case OFFSET:
					case OMIT:
					case ON:
					case ONE:
					case ONLY:
					case OPTION:
					case OR:
					case ORDER:
					case OTHERS:
					case OUTER:
					case OVER:
					case OWNER:
					case PARALLEL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PAST:
					case PATTERN:
					case PER:
					case PERMUTE:
					case PLAN:
					case POOL:
					case PRAGMA:
					case PRECEDING:
					case PRESORT:
					case PRIMARY:
					case PRIVILEGES:
					case PROCESS:
					case QUERY:
					case QUEUE:
					case RAISE:
					case RANGE:
					case REDUCE:
					case REFERENCES:
					case REGEXP:
					case REINDEX:
					case RELEASE:
					case REMOVE:
					case RENAME:
					case REPLACE:
					case REPLICATION:
					case RESET:
					case RESPECT:
					case RESTART:
					case RESTORE:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNING:
					case REVERT:
					case REVOKE:
					case RIGHT:
					case RLIKE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case SAMPLE:
					case SAVEPOINT:
					case SCHEMA:
					case SECONDS:
					case SEEK:
					case SELECT:
					case SEMI:
					case SETS:
					case SHOW:
					case TSKIP:
					case SEQUENCE:
					case SOURCE:
					case START:
					case STREAM:
					case SUBQUERY:
					case SUBSET:
					case SYMBOLS:
					case SYMMETRIC:
					case SYNC:
					case SYSTEM:
					case TABLE:
					case TABLES:
					case TABLESAMPLE:
					case TABLESTORE:
					case TEMP:
					case TEMPORARY:
					case THEN:
					case TIES:
					case TO:
					case TOPIC:
					case TRANSACTION:
					case TRANSFER:
					case TRIGGER:
					case TYPE:
					case UNBOUNDED:
					case UNCONDITIONAL:
					case UNION:
					case UNIQUE:
					case UNKNOWN:
					case UNMATCHED:
					case UPDATE:
					case UPSERT:
					case USE:
					case USER:
					case USING:
					case VACUUM:
					case VALUES:
					case VIEW:
					case VIRTUAL:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHOUT:
					case WRAPPER:
					case XOR:
					case STRING_VALUE:
					case ID_PLAIN:
					case ID_QUOTED:
						{
						State = 4028;
						type_name_tag();
						}
						break;
					case LPAREN:
						{
						State = 4029;
						Match(LPAREN);
						State = 4030;
						type_name_tag();
						State = 4035;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,421,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 4031;
								Match(COMMA);
								State = 4032;
								type_name_tag();
								}
								} 
							}
							State = 4037;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,421,Context);
						}
						State = 4039;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4038;
							Match(COMMA);
							}
						}

						State = 4041;
						Match(RPAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4047;
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 4048;
					Match(EQUALS);
					}
				}

				State = 4051;
				type_name_or_bind();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4052;
				Match(SCHEMA);
				State = 4054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 4053;
					Match(EQUALS);
					}
				}

				State = 4056;
				Match(LPAREN);
				State = 4065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & -268435711L) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & -274877906945L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & -1L) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & -8388609L) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & 17592186011647L) != 0)) {
					{
					State = 4057;
					struct_arg_positional();
					State = 4062;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,427,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 4058;
							Match(COMMA);
							State = 4059;
							struct_arg_positional();
							}
							} 
						}
						State = 4064;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,427,Context);
					}
					}
				}

				State = 4068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4067;
					Match(COMMA);
					}
				}

				State = 4070;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_atContext id_or_at() {
			return GetRuleContext<Id_or_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Object_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterObject_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitObject_ref(this);
		}
	}

	[RuleVersion(0)]
	public Object_refContext object_ref() {
		Object_refContext _localctx = new Object_refContext(Context, State);
		EnterRule(_localctx, 674, RULE_object_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				{
				State = 4073;
				cluster_expr();
				State = 4074;
				Match(DOT);
				}
				break;
			}
			State = 4078;
			id_or_at();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_table_ref_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameterContext bind_parameter() {
			return GetRuleContext<Bind_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Simple_table_ref_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_table_ref_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_table_ref_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_table_ref_core(this);
		}
	}

	[RuleVersion(0)]
	public Simple_table_ref_coreContext simple_table_ref_core() {
		Simple_table_ref_coreContext _localctx = new Simple_table_ref_coreContext(Context, State);
		EnterRule(_localctx, 676, RULE_simple_table_ref_core);
		int _la;
		try {
			State = 4085;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4080;
				object_ref();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAT) {
					{
					State = 4081;
					Match(COMMAT);
					}
				}

				State = 4084;
				bind_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_ref_coreContext simple_table_ref_core() {
			return GetRuleContext<Simple_table_ref_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintsContext table_hints() {
			return GetRuleContext<Table_hintsContext>(0);
		}
		public Simple_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSimple_table_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSimple_table_ref(this);
		}
	}

	[RuleVersion(0)]
	public Simple_table_refContext simple_table_ref() {
		Simple_table_refContext _localctx = new Simple_table_refContext(Context, State);
		EnterRule(_localctx, 678, RULE_simple_table_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4087;
			simple_table_ref_core();
			State = 4089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4088;
				table_hints();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_simple_table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_listContext pure_column_list() {
			return GetRuleContext<Pure_column_listContext>(0);
		}
		public Into_simple_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_simple_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInto_simple_table_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInto_simple_table_ref(this);
		}
	}

	[RuleVersion(0)]
	public Into_simple_table_refContext into_simple_table_ref() {
		Into_simple_table_refContext _localctx = new Into_simple_table_refContext(Context, State);
		EnterRule(_localctx, 680, RULE_into_simple_table_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4091;
			simple_table_ref();
			State = 4095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERASE) {
				{
				State = 4092;
				Match(ERASE);
				State = 4093;
				Match(BY);
				State = 4094;
				pure_column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BATCH() { return GetToken(YQLParser.BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 682, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4098;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BATCH) {
				{
				State = 4097;
				Match(BATCH);
				}
			}

			State = 4100;
			Match(DELETE);
			State = 4101;
			Match(FROM);
			State = 4102;
			simple_table_ref();
			State = 4107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				{
				State = 4103;
				Match(WHERE);
				State = 4104;
				expr();
				}
				break;
			case ON:
				{
				State = 4105;
				Match(ON);
				State = 4106;
				into_values_source();
				}
				break;
			case Eof:
			case SEMICOLON:
			case END:
			case RETURNING:
				break;
			default:
				break;
			}
			State = 4110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 4109;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_choiceContext set_clause_choice() {
			return GetRuleContext<Set_clause_choiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_values_sourceContext into_values_source() {
			return GetRuleContext<Into_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BATCH() { return GetToken(YQLParser.BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Returning_columns_listContext returning_columns_list() {
			return GetRuleContext<Returning_columns_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 684, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BATCH) {
				{
				State = 4112;
				Match(BATCH);
				}
			}

			State = 4115;
			Match(UPDATE);
			State = 4116;
			simple_table_ref();
			State = 4125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				{
				State = 4117;
				Match(SET);
				State = 4118;
				set_clause_choice();
				State = 4121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4119;
					Match(WHERE);
					State = 4120;
					expr();
					}
				}

				}
				break;
			case ON:
				{
				State = 4123;
				Match(ON);
				State = 4124;
				into_values_source();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 4127;
				returning_columns_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_choiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_column_assignmentContext multiple_column_assignment() {
			return GetRuleContext<Multiple_column_assignmentContext>(0);
		}
		public Set_clause_choiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause_choice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause_choice(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_choiceContext set_clause_choice() {
		Set_clause_choiceContext _localctx = new Set_clause_choiceContext(Context, State);
		EnterRule(_localctx, 686, RULE_set_clause_choice);
		try {
			State = 4132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4130;
				set_clause_list();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4131;
				multiple_column_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext[] set_clause() {
			return GetRuleContexts<Set_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause(int i) {
			return GetRuleContext<Set_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, State);
		EnterRule(_localctx, 688, RULE_set_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4134;
			set_clause();
			State = 4139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4135;
				Match(COMMA);
				State = 4136;
				set_clause();
				}
				}
				State = 4141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 690, RULE_set_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4142;
			set_target();
			State = 4143;
			Match(EQUALS);
			State = 4144;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 692, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4146;
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_column_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_values_sourceContext simple_values_source() {
			return GetRuleContext<Simple_values_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Multiple_column_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_column_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterMultiple_column_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitMultiple_column_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_column_assignmentContext multiple_column_assignment() {
		Multiple_column_assignmentContext _localctx = new Multiple_column_assignmentContext(Context, State);
		EnterRule(_localctx, 694, RULE_multiple_column_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4148;
			set_target_list();
			State = 4149;
			Match(EQUALS);
			State = 4150;
			Match(LPAREN);
			State = 4151;
			simple_values_source();
			State = 4152;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext[] set_target() {
			return GetRuleContexts<Set_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target(int i) {
			return GetRuleContext<Set_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		Set_target_listContext _localctx = new Set_target_listContext(Context, State);
		EnterRule(_localctx, 696, RULE_set_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4154;
			Match(LPAREN);
			State = 4155;
			set_target();
			State = 4160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4156;
				Match(COMMA);
				State = 4157;
				set_target();
				}
				}
				State = 4162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4163;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entriesContext create_topic_entries() {
			return GetRuleContext<Create_topic_entriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_topic_settingsContext with_topic_settings() {
			return GetRuleContext<With_topic_settingsContext>(0);
		}
		public Create_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_stmtContext create_topic_stmt() {
		Create_topic_stmtContext _localctx = new Create_topic_stmtContext(Context, State);
		EnterRule(_localctx, 698, RULE_create_topic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4165;
			Match(CREATE);
			State = 4166;
			Match(TOPIC);
			State = 4170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				{
				State = 4167;
				Match(IF);
				State = 4168;
				Match(NOT);
				State = 4169;
				Match(EXISTS);
				}
				break;
			}
			State = 4172;
			topic_ref();
			State = 4174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 4173;
				create_topic_entries();
				}
			}

			State = 4177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4176;
				with_topic_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_entriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entryContext[] create_topic_entry() {
			return GetRuleContexts<Create_topic_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_topic_entryContext create_topic_entry(int i) {
			return GetRuleContext<Create_topic_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Create_topic_entriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_entries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_entries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_entries(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_entriesContext create_topic_entries() {
		Create_topic_entriesContext _localctx = new Create_topic_entriesContext(Context, State);
		EnterRule(_localctx, 700, RULE_create_topic_entries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4179;
			Match(LPAREN);
			State = 4180;
			create_topic_entry();
			State = 4185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4181;
				Match(COMMA);
				State = 4182;
				create_topic_entry();
				}
				}
				State = 4187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4188;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_topic_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_create_consumer_entryContext topic_create_consumer_entry() {
			return GetRuleContext<Topic_create_consumer_entryContext>(0);
		}
		public Create_topic_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_topic_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCreate_topic_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCreate_topic_entry(this);
		}
	}

	[RuleVersion(0)]
	public Create_topic_entryContext create_topic_entry() {
		Create_topic_entryContext _localctx = new Create_topic_entryContext(Context, State);
		EnterRule(_localctx, 702, RULE_create_topic_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4190;
			topic_create_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_topic_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settingsContext topic_settings() {
			return GetRuleContext<Topic_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public With_topic_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_topic_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWith_topic_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWith_topic_settings(this);
		}
	}

	[RuleVersion(0)]
	public With_topic_settingsContext with_topic_settings() {
		With_topic_settingsContext _localctx = new With_topic_settingsContext(Context, State);
		EnterRule(_localctx, 704, RULE_with_topic_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4192;
			Match(WITH);
			State = 4193;
			Match(LPAREN);
			State = 4194;
			topic_settings();
			State = 4195;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_actionContext[] alter_topic_action() {
			return GetRuleContexts<Alter_topic_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_actionContext alter_topic_action(int i) {
			return GetRuleContext<Alter_topic_actionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Alter_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_stmtContext alter_topic_stmt() {
		Alter_topic_stmtContext _localctx = new Alter_topic_stmtContext(Context, State);
		EnterRule(_localctx, 706, RULE_alter_topic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4197;
			Match(ALTER);
			State = 4198;
			Match(TOPIC);
			State = 4201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 4199;
				Match(IF);
				State = 4200;
				Match(EXISTS);
				}
				break;
			}
			State = 4203;
			topic_ref();
			State = 4204;
			alter_topic_action();
			State = 4209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4205;
				Match(COMMA);
				State = 4206;
				alter_topic_action();
				}
				}
				State = 4211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_add_consumerContext alter_topic_add_consumer() {
			return GetRuleContext<Alter_topic_add_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_alter_consumerContext alter_topic_alter_consumer() {
			return GetRuleContext<Alter_topic_alter_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_drop_consumerContext alter_topic_drop_consumer() {
			return GetRuleContext<Alter_topic_drop_consumerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_set_settingsContext alter_topic_set_settings() {
			return GetRuleContext<Alter_topic_set_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_reset_settingsContext alter_topic_reset_settings() {
			return GetRuleContext<Alter_topic_reset_settingsContext>(0);
		}
		public Alter_topic_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_actionContext alter_topic_action() {
		Alter_topic_actionContext _localctx = new Alter_topic_actionContext(Context, State);
		EnterRule(_localctx, 708, RULE_alter_topic_action);
		try {
			State = 4217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4212;
				alter_topic_add_consumer();
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4213;
				alter_topic_alter_consumer();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4214;
				alter_topic_drop_consumer();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4215;
				alter_topic_set_settings();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4216;
				alter_topic_reset_settings();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_add_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_create_consumer_entryContext topic_create_consumer_entry() {
			return GetRuleContext<Topic_create_consumer_entryContext>(0);
		}
		public Alter_topic_add_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_add_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_add_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_add_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_add_consumerContext alter_topic_add_consumer() {
		Alter_topic_add_consumerContext _localctx = new Alter_topic_add_consumerContext(Context, State);
		EnterRule(_localctx, 710, RULE_alter_topic_add_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4219;
			Match(ADD);
			State = 4220;
			topic_create_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_create_consumer_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_with_settingsContext topic_consumer_with_settings() {
			return GetRuleContext<Topic_consumer_with_settingsContext>(0);
		}
		public Topic_create_consumer_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_create_consumer_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_create_consumer_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_create_consumer_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_create_consumer_entryContext topic_create_consumer_entry() {
		Topic_create_consumer_entryContext _localctx = new Topic_create_consumer_entryContext(Context, State);
		EnterRule(_localctx, 712, RULE_topic_create_consumer_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4222;
			Match(CONSUMER);
			State = 4223;
			an_id();
			State = 4225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4224;
				topic_consumer_with_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_alter_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_refContext topic_consumer_ref() {
			return GetRuleContext<Topic_consumer_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_topic_alter_consumer_entryContext alter_topic_alter_consumer_entry() {
			return GetRuleContext<Alter_topic_alter_consumer_entryContext>(0);
		}
		public Alter_topic_alter_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_alter_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_alter_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_alter_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_alter_consumerContext alter_topic_alter_consumer() {
		Alter_topic_alter_consumerContext _localctx = new Alter_topic_alter_consumerContext(Context, State);
		EnterRule(_localctx, 714, RULE_alter_topic_alter_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4227;
			Match(ALTER);
			State = 4228;
			Match(CONSUMER);
			State = 4229;
			topic_consumer_ref();
			State = 4230;
			alter_topic_alter_consumer_entry();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_alter_consumer_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_alter_consumer_setContext topic_alter_consumer_set() {
			return GetRuleContext<Topic_alter_consumer_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_alter_consumer_resetContext topic_alter_consumer_reset() {
			return GetRuleContext<Topic_alter_consumer_resetContext>(0);
		}
		public Alter_topic_alter_consumer_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_alter_consumer_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_alter_consumer_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_alter_consumer_entry(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_alter_consumer_entryContext alter_topic_alter_consumer_entry() {
		Alter_topic_alter_consumer_entryContext _localctx = new Alter_topic_alter_consumer_entryContext(Context, State);
		EnterRule(_localctx, 716, RULE_alter_topic_alter_consumer_entry);
		try {
			State = 4234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4232;
				topic_alter_consumer_set();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4233;
				topic_alter_consumer_reset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_drop_consumerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_refContext topic_consumer_ref() {
			return GetRuleContext<Topic_consumer_refContext>(0);
		}
		public Alter_topic_drop_consumerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_drop_consumer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_drop_consumer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_drop_consumer(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_drop_consumerContext alter_topic_drop_consumer() {
		Alter_topic_drop_consumerContext _localctx = new Alter_topic_drop_consumerContext(Context, State);
		EnterRule(_localctx, 718, RULE_alter_topic_drop_consumer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4236;
			Match(DROP);
			State = 4237;
			Match(CONSUMER);
			State = 4238;
			topic_consumer_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_alter_consumer_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settingsContext topic_consumer_settings() {
			return GetRuleContext<Topic_consumer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Topic_alter_consumer_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_alter_consumer_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_alter_consumer_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_alter_consumer_set(this);
		}
	}

	[RuleVersion(0)]
	public Topic_alter_consumer_setContext topic_alter_consumer_set() {
		Topic_alter_consumer_setContext _localctx = new Topic_alter_consumer_setContext(Context, State);
		EnterRule(_localctx, 720, RULE_topic_alter_consumer_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4240;
			Match(SET);
			State = 4241;
			Match(LPAREN);
			State = 4242;
			topic_consumer_settings();
			State = 4243;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_alter_consumer_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext[] an_id() {
			return GetRuleContexts<An_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id(int i) {
			return GetRuleContext<An_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_alter_consumer_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_alter_consumer_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_alter_consumer_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_alter_consumer_reset(this);
		}
	}

	[RuleVersion(0)]
	public Topic_alter_consumer_resetContext topic_alter_consumer_reset() {
		Topic_alter_consumer_resetContext _localctx = new Topic_alter_consumer_resetContext(Context, State);
		EnterRule(_localctx, 722, RULE_topic_alter_consumer_reset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4245;
			Match(RESET);
			State = 4246;
			Match(LPAREN);
			State = 4247;
			an_id();
			State = 4252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4248;
				Match(COMMA);
				State = 4249;
				an_id();
				}
				}
				State = 4254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4255;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_set_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settingsContext topic_settings() {
			return GetRuleContext<Topic_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Alter_topic_set_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_set_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_set_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_set_settings(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_set_settingsContext alter_topic_set_settings() {
		Alter_topic_set_settingsContext _localctx = new Alter_topic_set_settingsContext(Context, State);
		EnterRule(_localctx, 724, RULE_alter_topic_set_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4257;
			Match(SET);
			State = 4258;
			Match(LPAREN);
			State = 4259;
			topic_settings();
			State = 4260;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_topic_reset_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext[] an_id_pure() {
			return GetRuleContexts<An_id_pureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure(int i) {
			return GetRuleContext<An_id_pureContext>(i);
		}
		public Alter_topic_reset_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_topic_reset_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_topic_reset_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_topic_reset_settings(this);
		}
	}

	[RuleVersion(0)]
	public Alter_topic_reset_settingsContext alter_topic_reset_settings() {
		Alter_topic_reset_settingsContext _localctx = new Alter_topic_reset_settingsContext(Context, State);
		EnterRule(_localctx, 726, RULE_alter_topic_reset_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4262;
			Match(RESET);
			State = 4263;
			Match(LPAREN);
			State = 4264;
			an_id();
			State = 4269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4265;
				Match(COMMA);
				State = 4266;
				an_id_pure();
				}
				}
				State = 4271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4272;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_topic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_refContext topic_ref() {
			return GetRuleContext<Topic_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		public Drop_topic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_topic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterDrop_topic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitDrop_topic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_topic_stmtContext drop_topic_stmt() {
		Drop_topic_stmtContext _localctx = new Drop_topic_stmtContext(Context, State);
		EnterRule(_localctx, 728, RULE_drop_topic_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4274;
			Match(DROP);
			State = 4275;
			Match(TOPIC);
			State = 4278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				{
				State = 4276;
				Match(IF);
				State = 4277;
				Match(EXISTS);
				}
				break;
			}
			State = 4280;
			topic_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settings_entryContext[] topic_settings_entry() {
			return GetRuleContexts<Topic_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_settings_entryContext topic_settings_entry(int i) {
			return GetRuleContext<Topic_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_settingsContext topic_settings() {
		Topic_settingsContext _localctx = new Topic_settingsContext(Context, State);
		EnterRule(_localctx, 730, RULE_topic_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4282;
			topic_settings_entry();
			State = 4287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4283;
				Match(COMMA);
				State = 4284;
				topic_settings_entry();
				}
				}
				State = 4289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_setting_valueContext topic_setting_value() {
			return GetRuleContext<Topic_setting_valueContext>(0);
		}
		public Topic_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_settings_entryContext topic_settings_entry() {
		Topic_settings_entryContext _localctx = new Topic_settings_entryContext(Context, State);
		EnterRule(_localctx, 732, RULE_topic_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4290;
			an_id();
			State = 4291;
			Match(EQUALS);
			State = 4292;
			topic_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Topic_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Topic_setting_valueContext topic_setting_value() {
		Topic_setting_valueContext _localctx = new Topic_setting_valueContext(Context, State);
		EnterRule(_localctx, 734, RULE_topic_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4294;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_with_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settingsContext topic_consumer_settings() {
			return GetRuleContext<Topic_consumer_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Topic_consumer_with_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_with_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_with_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_with_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_with_settingsContext topic_consumer_with_settings() {
		Topic_consumer_with_settingsContext _localctx = new Topic_consumer_with_settingsContext(Context, State);
		EnterRule(_localctx, 736, RULE_topic_consumer_with_settings);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4296;
			Match(WITH);
			State = 4297;
			Match(LPAREN);
			State = 4298;
			topic_consumer_settings();
			State = 4299;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settings_entryContext[] topic_consumer_settings_entry() {
			return GetRuleContexts<Topic_consumer_settings_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_settings_entryContext topic_consumer_settings_entry(int i) {
			return GetRuleContext<Topic_consumer_settings_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Topic_consumer_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_settings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_settings(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_settingsContext topic_consumer_settings() {
		Topic_consumer_settingsContext _localctx = new Topic_consumer_settingsContext(Context, State);
		EnterRule(_localctx, 738, RULE_topic_consumer_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4301;
			topic_consumer_settings_entry();
			State = 4306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4302;
				Match(COMMA);
				State = 4303;
				topic_consumer_settings_entry();
				}
				}
				State = 4308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_settings_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Topic_consumer_setting_valueContext topic_consumer_setting_value() {
			return GetRuleContext<Topic_consumer_setting_valueContext>(0);
		}
		public Topic_consumer_settings_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_settings_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_settings_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_settings_entry(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_settings_entryContext topic_consumer_settings_entry() {
		Topic_consumer_settings_entryContext _localctx = new Topic_consumer_settings_entryContext(Context, State);
		EnterRule(_localctx, 740, RULE_topic_consumer_settings_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4309;
			an_id();
			State = 4310;
			Match(EQUALS);
			State = 4311;
			topic_consumer_setting_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_setting_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Topic_consumer_setting_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_setting_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_setting_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_setting_value(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_setting_valueContext topic_consumer_setting_value() {
		Topic_consumer_setting_valueContext _localctx = new Topic_consumer_setting_valueContext(Context, State);
		EnterRule(_localctx, 742, RULE_topic_consumer_setting_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4313;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Topic_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_ref(this);
		}
	}

	[RuleVersion(0)]
	public Topic_refContext topic_ref() {
		Topic_refContext _localctx = new Topic_refContext(Context, State);
		EnterRule(_localctx, 744, RULE_topic_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				{
				State = 4315;
				cluster_expr();
				State = 4316;
				Match(DOT);
				}
				break;
			}
			State = 4320;
			an_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Topic_consumer_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_pureContext an_id_pure() {
			return GetRuleContext<An_id_pureContext>(0);
		}
		public Topic_consumer_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topic_consumer_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterTopic_consumer_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitTopic_consumer_ref(this);
		}
	}

	[RuleVersion(0)]
	public Topic_consumer_refContext topic_consumer_ref() {
		Topic_consumer_refContext _localctx = new Topic_consumer_refContext(Context, State);
		EnterRule(_localctx, 746, RULE_topic_consumer_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4322;
			an_id_pure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_treatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		public Null_treatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_treatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNull_treatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNull_treatment(this);
		}
	}

	[RuleVersion(0)]
	public Null_treatmentContext null_treatment() {
		Null_treatmentContext _localctx = new Null_treatmentContext(Context, State);
		EnterRule(_localctx, 748, RULE_null_treatment);
		try {
			State = 4328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESPECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4324;
				Match(RESPECT);
				State = 4325;
				Match(NULLS);
				}
				break;
			case IGNORE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4326;
				Match(IGNORE);
				State = 4327;
				Match(NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 750, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4330;
			Match(FILTER);
			State = 4331;
			Match(LPAREN);
			State = 4332;
			Match(WHERE);
			State = 4333;
			expr();
			State = 4334;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_name_or_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_name_or_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name_or_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_name_or_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_name_or_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_name_or_specificationContext window_name_or_specification() {
		Window_name_or_specificationContext _localctx = new Window_name_or_specificationContext(Context, State);
		EnterRule(_localctx, 752, RULE_window_name_or_specification);
		try {
			State = 4338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4336;
				window_name();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4337;
				window_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_windowContext an_id_window() {
			return GetRuleContext<An_id_windowContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_name(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 754, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4340;
			an_id_window();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(YQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 756, RULE_window_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4342;
			Match(WINDOW);
			State = 4343;
			window_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext[] window_definition() {
			return GetRuleContexts<Window_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition(int i) {
			return GetRuleContext<Window_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, State);
		EnterRule(_localctx, 758, RULE_window_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4345;
			window_definition();
			State = 4350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4346;
				Match(COMMA);
				State = 4347;
				window_definition();
				}
				}
				State = 4352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public New_window_nameContext new_window_name() {
			return GetRuleContext<New_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 760, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4353;
			new_window_name();
			State = 4354;
			Match(AS);
			State = 4355;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public New_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNew_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNew_window_name(this);
		}
	}

	[RuleVersion(0)]
	public New_window_nameContext new_window_name() {
		New_window_nameContext _localctx = new New_window_nameContext(Context, State);
		EnterRule(_localctx, 762, RULE_new_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4357;
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specification_detailsContext window_specification_details() {
			return GetRuleContext<Window_specification_detailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 764, RULE_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4359;
			Match(LPAREN);
			State = 4360;
			window_specification_details();
			State = 4361;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specification_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Existing_window_nameContext existing_window_name() {
			return GetRuleContext<Existing_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_partition_clauseContext window_partition_clause() {
			return GetRuleContext<Window_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_order_clauseContext window_order_clause() {
			return GetRuleContext<Window_order_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		public Window_specification_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_specification_details(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_specification_details(this);
		}
	}

	[RuleVersion(0)]
	public Window_specification_detailsContext window_specification_details() {
		Window_specification_detailsContext _localctx = new Window_specification_detailsContext(Context, State);
		EnterRule(_localctx, 766, RULE_window_specification_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
			case 1:
				{
				State = 4363;
				existing_window_name();
				}
				break;
			}
			State = 4367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4366;
				window_partition_clause();
				}
			}

			State = 4370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 4369;
				window_order_clause();
				}
			}

			State = 4373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUPS || _la==RANGE || _la==ROWS) {
				{
				State = 4372;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Existing_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		public Existing_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existing_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterExisting_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitExisting_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Existing_window_nameContext existing_window_name() {
		Existing_window_nameContext _localctx = new Existing_window_nameContext(Context, State);
		EnterRule(_localctx, 768, RULE_existing_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4375;
			window_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_partition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expr_listContext named_expr_list() {
			return GetRuleContext<Named_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		public Window_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_partition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_partition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_partition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_partition_clauseContext window_partition_clause() {
		Window_partition_clauseContext _localctx = new Window_partition_clauseContext(Context, State);
		EnterRule(_localctx, 770, RULE_window_partition_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4377;
			Match(PARTITION);
			State = 4379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPACT) {
				{
				State = 4378;
				Match(COMPACT);
				}
			}

			State = 4381;
			Match(BY);
			State = 4382;
			named_expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_order_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Window_order_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_order_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_order_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_order_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_order_clauseContext window_order_clause() {
		Window_order_clauseContext _localctx = new Window_order_clauseContext(Context, State);
		EnterRule(_localctx, 772, RULE_window_order_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4384;
			order_by_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_unitsContext window_frame_units() {
			return GetRuleContext<Window_frame_unitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_exclusionContext window_frame_exclusion() {
			return GetRuleContext<Window_frame_exclusionContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 774, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4386;
			window_frame_units();
			State = 4387;
			window_frame_extent();
			State = 4389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE) {
				{
				State = 4388;
				window_frame_exclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_unitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(YQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(YQLParser.GROUPS, 0); }
		public Window_frame_unitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_units; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_units(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_units(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_unitsContext window_frame_units() {
		Window_frame_unitsContext _localctx = new Window_frame_unitsContext(Context, State);
		EnterRule(_localctx, 776, RULE_window_frame_units);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4391;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound() {
			return GetRuleContext<Window_frame_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_betweenContext window_frame_between() {
			return GetRuleContext<Window_frame_betweenContext>(0);
		}
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 778, RULE_window_frame_extent);
		try {
			State = 4395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4393;
				window_frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4394;
				window_frame_between();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		public Window_frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_between(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_betweenContext window_frame_between() {
		Window_frame_betweenContext _localctx = new Window_frame_betweenContext(Context, State);
		EnterRule(_localctx, 780, RULE_window_frame_between);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4397;
			Match(BETWEEN);
			State = 4398;
			window_frame_bound();
			State = 4399;
			Match(AND);
			State = 4400;
			window_frame_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(YQLParser.UNBOUNDED, 0); }
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 782, RULE_window_frame_bound);
		int _la;
		try {
			State = 4409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4402;
				Match(CURRENT);
				State = 4403;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4406;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
				case 1:
					{
					State = 4404;
					expr();
					}
					break;
				case 2:
					{
					State = 4405;
					Match(UNBOUNDED);
					}
					break;
				}
				State = 4408;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_exclusionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		public Window_frame_exclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_exclusion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterWindow_frame_exclusion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitWindow_frame_exclusion(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_exclusionContext window_frame_exclusion() {
		Window_frame_exclusionContext _localctx = new Window_frame_exclusionContext(Context, State);
		EnterRule(_localctx, 784, RULE_window_frame_exclusion);
		try {
			State = 4421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4411;
				Match(EXCLUDE);
				State = 4412;
				Match(CURRENT);
				State = 4413;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4414;
				Match(EXCLUDE);
				State = 4415;
				Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4416;
				Match(EXCLUDE);
				State = 4417;
				Match(TIES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4418;
				Match(EXCLUDE);
				State = 4419;
				Match(NO);
				State = 4420;
				Match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_exprContext cluster_expr() {
			return GetRuleContext<Cluster_exprContext>(0);
		}
		public Use_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterUse_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitUse_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Use_stmtContext use_stmt() {
		Use_stmtContext _localctx = new Use_stmtContext(Context, State);
		EnterRule(_localctx, 786, RULE_use_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4423;
			Match(USE);
			State = 4424;
			cluster_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subselect_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_unparenthesized_stmtContext select_unparenthesized_stmt() {
			return GetRuleContext<Select_unparenthesized_stmtContext>(0);
		}
		public Subselect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subselect_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterSubselect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitSubselect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Subselect_stmtContext subselect_stmt() {
		Subselect_stmtContext _localctx = new Subselect_stmtContext(Context, State);
		EnterRule(_localctx, 788, RULE_subselect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 4426;
				Match(LPAREN);
				State = 4427;
				select_stmt();
				State = 4428;
				Match(RPAREN);
				}
				break;
			case DISCARD:
			case FROM:
			case PROCESS:
			case REDUCE:
			case SELECT:
				{
				State = 4430;
				select_unparenthesized_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_nodes_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_parameter_listContext bind_parameter_list() {
			return GetRuleContext<Bind_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YQLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subselect_stmtContext subselect_stmt() {
			return GetRuleContext<Subselect_stmtContext>(0);
		}
		public Named_nodes_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_nodes_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterNamed_nodes_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitNamed_nodes_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Named_nodes_stmtContext named_nodes_stmt() {
		Named_nodes_stmtContext _localctx = new Named_nodes_stmtContext(Context, State);
		EnterRule(_localctx, 790, RULE_named_nodes_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4433;
			bind_parameter_list();
			State = 4434;
			Match(EQUALS);
			State = 4437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
			case 1:
				{
				State = 4435;
				expr();
				}
				break;
			case 2:
				{
				State = 4436;
				subselect_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 792, RULE_commit_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4439;
			Match(COMMIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 794, RULE_rollback_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4441;
			Match(ROLLBACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YQLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YQLParser.RPAREN, 0); }
		public Analyze_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_table(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_tableContext analyze_table() {
		Analyze_tableContext _localctx = new Analyze_tableContext(Context, State);
		EnterRule(_localctx, 796, RULE_analyze_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4443;
			simple_table_ref();
			State = 4448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 4444;
				Match(LPAREN);
				State = 4445;
				column_list();
				State = 4446;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_table_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_tableContext[] analyze_table() {
			return GetRuleContexts<Analyze_tableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_tableContext analyze_table(int i) {
			return GetRuleContext<Analyze_tableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YQLParser.COMMA, i);
		}
		public Analyze_table_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_table_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_table_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_table_list(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_table_listContext analyze_table_list() {
		Analyze_table_listContext _localctx = new Analyze_table_listContext(Context, State);
		EnterRule(_localctx, 798, RULE_analyze_table_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4450;
			analyze_table();
			State = 4455;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,477,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4451;
					Match(COMMA);
					State = 4452;
					analyze_table();
					}
					} 
				}
				State = 4457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,477,Context);
			}
			State = 4459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4458;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_table_listContext analyze_table_list() {
			return GetRuleContext<Analyze_table_listContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 800, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4461;
			Match(ANALYZE);
			State = 4462;
			analyze_table_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequence_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_refContext object_ref() {
			return GetRuleContext<Object_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_actionContext[] alter_sequence_action() {
			return GetRuleContexts<Alter_sequence_actionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_sequence_actionContext alter_sequence_action(int i) {
			return GetRuleContext<Alter_sequence_actionContext>(i);
		}
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_sequence_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_sequence_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequence_stmtContext alter_sequence_stmt() {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(Context, State);
		EnterRule(_localctx, 802, RULE_alter_sequence_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4464;
			Match(ALTER);
			State = 4465;
			Match(SEQUENCE);
			State = 4468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 4466;
				Match(IF);
				State = 4467;
				Match(EXISTS);
				}
				break;
			}
			State = 4470;
			object_ref();
			State = 4472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4471;
				alter_sequence_action();
				}
				}
				State = 4474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INCREMENT || _la==RESTART || _la==START );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequence_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		public Alter_sequence_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAlter_sequence_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAlter_sequence_action(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequence_actionContext alter_sequence_action() {
		Alter_sequence_actionContext _localctx = new Alter_sequence_actionContext(Context, State);
		EnterRule(_localctx, 804, RULE_alter_sequence_action);
		int _la;
		try {
			State = 4492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4476;
				Match(START);
				State = 4478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4477;
					Match(WITH);
					}
				}

				State = 4480;
				integer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4481;
				Match(RESTART);
				State = 4483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4482;
					Match(WITH);
					}
				}

				State = 4485;
				integer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4486;
				Match(RESTART);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4487;
				Match(INCREMENT);
				State = 4489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 4488;
					Match(BY);
					}
				}

				State = 4491;
				integer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Show_create_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_table_refContext simple_table_ref() {
			return GetRuleContext<Simple_table_refContext>(0);
		}
		public Show_create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterShow_create_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitShow_create_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Show_create_table_stmtContext show_create_table_stmt() {
		Show_create_table_stmtContext _localctx = new Show_create_table_stmtContext(Context, State);
		EnterRule(_localctx, 806, RULE_show_create_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4494;
			Match(SHOW);
			State = 4495;
			Match(CREATE);
			State = 4496;
			Match(TABLE);
			State = 4497;
			simple_table_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID_PLAIN() { return GetToken(YQLParser.ID_PLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID_QUOTED() { return GetToken(YQLParser.ID_QUOTED, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 808, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4499;
			_la = TokenStream.LA(1);
			if ( !(_la==ID_PLAIN || _la==ID_QUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 810, RULE_id);
		try {
			State = 4503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4501;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4502;
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_schema(this);
		}
	}

	[RuleVersion(0)]
	public Id_schemaContext id_schema() {
		Id_schemaContext _localctx = new Id_schemaContext(Context, State);
		EnterRule(_localctx, 812, RULE_id_schema);
		try {
			State = 4512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4505;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4506;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4507;
				keyword_expr_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4508;
				keyword_select_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4509;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4510;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4511;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_expr(this);
		}
	}

	[RuleVersion(0)]
	public Id_exprContext id_expr() {
		Id_exprContext _localctx = new Id_exprContext(Context, State);
		EnterRule(_localctx, 814, RULE_id_expr);
		try {
			State = 4520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4514;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4515;
				keyword_compat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4516;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4517;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4518;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4519;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public Id_expr_inContext id_expr_in() {
		Id_expr_inContext _localctx = new Id_expr_inContext(Context, State);
		EnterRule(_localctx, 816, RULE_id_expr_in);
		try {
			State = 4527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4522;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4523;
				keyword_compat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4524;
				keyword_alter_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4525;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4526;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_windowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_windowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_window(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_window(this);
		}
	}

	[RuleVersion(0)]
	public Id_windowContext id_window() {
		Id_windowContext _localctx = new Id_windowContext(Context, State);
		EnterRule(_localctx, 818, RULE_id_window);
		try {
			State = 4537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4529;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4530;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4531;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4532;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4533;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4534;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4535;
				keyword_in_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4536;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table(this);
		}
	}

	[RuleVersion(0)]
	public Id_tableContext id_table() {
		Id_tableContext _localctx = new Id_tableContext(Context, State);
		EnterRule(_localctx, 820, RULE_id_table);
		try {
			State = 4546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4539;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4540;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4541;
				keyword_expr_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4542;
				keyword_select_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4543;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4544;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4545;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_withoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public Id_withoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_without; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_without(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_without(this);
		}
	}

	[RuleVersion(0)]
	public Id_withoutContext id_without() {
		Id_withoutContext _localctx = new Id_withoutContext(Context, State);
		EnterRule(_localctx, 822, RULE_id_without);
		try {
			State = 4555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4548;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4549;
				keyword_compat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4550;
				keyword_table_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4551;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4552;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4553;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4554;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		public Id_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_hint(this);
		}
	}

	[RuleVersion(0)]
	public Id_hintContext id_hint() {
		Id_hintContext _localctx = new Id_hintContext(Context, State);
		EnterRule(_localctx, 824, RULE_id_hint);
		try {
			State = 4565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4557;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4558;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4559;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4560;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4561;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4562;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4563;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4564;
				keyword_window_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_as_compatContext keyword_as_compat() {
			return GetRuleContext<Keyword_as_compatContext>(0);
		}
		public Id_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public Id_as_compatContext id_as_compat() {
		Id_as_compatContext _localctx = new Id_as_compatContext(Context, State);
		EnterRule(_localctx, 826, RULE_id_as_compat);
		try {
			State = 4569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4567;
				identifier();
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case LAST:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case REVERT:
			case REVOKE:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case VACUUM:
			case VALUES:
			case VIRTUAL:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4568;
				keyword_as_compat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id(this);
		}
	}

	[RuleVersion(0)]
	public An_idContext an_id() {
		An_idContext _localctx = new An_idContext(Context, State);
		EnterRule(_localctx, 828, RULE_an_id);
		try {
			State = 4573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4571;
				id();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4572;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_or_typeContext id_or_type() {
			return GetRuleContext<Id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_or_type(this);
		}
	}

	[RuleVersion(0)]
	public An_id_or_typeContext an_id_or_type() {
		An_id_or_typeContext _localctx = new An_id_or_typeContext(Context, State);
		EnterRule(_localctx, 830, RULE_an_id_or_type);
		try {
			State = 4577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CALLABLE:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DICT:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ENUM:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FLOW:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OPTIONAL:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SET:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case STRUCT:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TAGGED:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TUPLE:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VARIANT:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4575;
				id_or_type();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4576;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_schemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_schemaContext id_schema() {
			return GetRuleContext<Id_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_schema(this);
		}
	}

	[RuleVersion(0)]
	public An_id_schemaContext an_id_schema() {
		An_id_schemaContext _localctx = new An_id_schemaContext(Context, State);
		EnterRule(_localctx, 832, RULE_an_id_schema);
		try {
			State = 4581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4579;
				id_schema();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4580;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_exprContext id_expr() {
			return GetRuleContext<Id_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_expr(this);
		}
	}

	[RuleVersion(0)]
	public An_id_exprContext an_id_expr() {
		An_id_exprContext _localctx = new An_id_exprContext(Context, State);
		EnterRule(_localctx, 834, RULE_an_id_expr);
		try {
			State = 4585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4583;
				id_expr();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4584;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_expr_inContext id_expr_in() {
			return GetRuleContext<Id_expr_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public An_id_expr_inContext an_id_expr_in() {
		An_id_expr_inContext _localctx = new An_id_expr_inContext(Context, State);
		EnterRule(_localctx, 836, RULE_an_id_expr_in);
		try {
			State = 4589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4587;
				id_expr_in();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4588;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_windowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_windowContext id_window() {
			return GetRuleContext<Id_windowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_windowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_window(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_window(this);
		}
	}

	[RuleVersion(0)]
	public An_id_windowContext an_id_window() {
		An_id_windowContext _localctx = new An_id_windowContext(Context, State);
		EnterRule(_localctx, 838, RULE_an_id_window);
		try {
			State = 4593;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4591;
				id_window();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4592;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_tableContext id_table() {
			return GetRuleContext<Id_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_table(this);
		}
	}

	[RuleVersion(0)]
	public An_id_tableContext an_id_table() {
		An_id_tableContext _localctx = new An_id_tableContext(Context, State);
		EnterRule(_localctx, 840, RULE_an_id_table);
		try {
			State = 4597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4595;
				id_table();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4596;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_withoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_withoutContext id_without() {
			return GetRuleContext<Id_withoutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_withoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_without; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_without(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_without(this);
		}
	}

	[RuleVersion(0)]
	public An_id_withoutContext an_id_without() {
		An_id_withoutContext _localctx = new An_id_withoutContext(Context, State);
		EnterRule(_localctx, 842, RULE_an_id_without);
		try {
			State = 4601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4599;
				id_without();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4600;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_hintContext id_hint() {
			return GetRuleContext<Id_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_hint(this);
		}
	}

	[RuleVersion(0)]
	public An_id_hintContext an_id_hint() {
		An_id_hintContext _localctx = new An_id_hintContext(Context, State);
		EnterRule(_localctx, 844, RULE_an_id_hint);
		try {
			State = 4605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4603;
				id_hint();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4604;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_pureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_pureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_pure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_pure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_pure(this);
		}
	}

	[RuleVersion(0)]
	public An_id_pureContext an_id_pure() {
		An_id_pureContext _localctx = new An_id_pureContext(Context, State);
		EnterRule(_localctx, 846, RULE_an_id_pure);
		try {
			State = 4609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4607;
				identifier();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4608;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class An_id_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_as_compatContext id_as_compat() {
			return GetRuleContext<Id_as_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(YQLParser.STRING_VALUE, 0); }
		public An_id_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_an_id_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterAn_id_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitAn_id_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public An_id_as_compatContext an_id_as_compat() {
		An_id_as_compatContext _localctx = new An_id_as_compatContext(Context, State);
		EnterRule(_localctx, 848, RULE_an_id_as_compat);
		try {
			State = 4613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case LAST:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case REVERT:
			case REVOKE:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case VACUUM:
			case VALUES:
			case VIRTUAL:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4611;
				id_as_compat();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4612;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 850, RULE_view_name);
		try {
			State = 4618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4615;
				an_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4616;
				Match(PRIMARY);
				State = 4617;
				Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_id_prefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Opt_id_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_id_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_id_prefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_id_prefix(this);
		}
	}

	[RuleVersion(0)]
	public Opt_id_prefixContext opt_id_prefix() {
		Opt_id_prefixContext _localctx = new Opt_id_prefixContext(Context, State);
		EnterRule(_localctx, 852, RULE_opt_id_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				{
				State = 4620;
				an_id();
				State = 4621;
				Match(DOT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pure_column_or_namedContext pure_column_or_named() {
			return GetRuleContext<Pure_column_or_namedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(YQLParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public An_idContext an_id() {
			return GetRuleContext<An_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(YQLParser.COLON, 0); }
		public Cluster_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterCluster_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitCluster_expr(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_exprContext cluster_expr() {
		Cluster_exprContext _localctx = new Cluster_exprContext(Context, State);
		EnterRule(_localctx, 854, RULE_cluster_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				{
				State = 4625;
				an_id();
				State = 4626;
				Match(COLON);
				}
				break;
			}
			State = 4632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				{
				State = 4630;
				pure_column_or_named();
				}
				break;
			case ASTERISK:
				{
				State = 4631;
				Match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_idContext type_id() {
			return GetRuleContext<Type_idContext>(0);
		}
		public Id_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_typeContext id_or_type() {
		Id_or_typeContext _localctx = new Id_or_typeContext(Context, State);
		EnterRule(_localctx, 856, RULE_id_or_type);
		try {
			State = 4636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERASE:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case STREAM:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4634;
				id();
				}
				break;
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4635;
				type_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_id_prefix_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YQLParser.DOT, 0); }
		public Opt_id_prefix_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_id_prefix_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterOpt_id_prefix_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitOpt_id_prefix_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Opt_id_prefix_or_typeContext opt_id_prefix_or_type() {
		Opt_id_prefix_or_typeContext _localctx = new Opt_id_prefix_or_typeContext(Context, State);
		EnterRule(_localctx, 858, RULE_opt_id_prefix_or_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
			case 1:
				{
				State = 4638;
				an_id_or_type();
				State = 4639;
				Match(DOT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_or_atContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_or_typeContext an_id_or_type() {
			return GetRuleContext<An_id_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Id_or_atContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_or_at; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_or_at(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_or_at(this);
		}
	}

	[RuleVersion(0)]
	public Id_or_atContext id_or_at() {
		Id_or_atContext _localctx = new Id_or_atContext(Context, State);
		EnterRule(_localctx, 860, RULE_id_or_at);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 4643;
				Match(COMMAT);
				}
			}

			State = 4646;
			an_id_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_table_or_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public An_id_tableContext an_id_table() {
			return GetRuleContext<An_id_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_idContext type_id() {
			return GetRuleContext<Type_idContext>(0);
		}
		public Id_table_or_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table_or_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table_or_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table_or_type(this);
		}
	}

	[RuleVersion(0)]
	public Id_table_or_typeContext id_table_or_type() {
		Id_table_or_typeContext _localctx = new Id_table_or_typeContext(Context, State);
		EnterRule(_localctx, 862, RULE_id_table_or_type);
		try {
			State = 4650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case AS:
			case ASC:
			case ASSUME:
			case ASYMMETRIC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BITCAST:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COLUMNS:
			case COMMIT:
			case COMPACT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISTINCT:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case EMPTY_ACTION:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCEPT:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case HOP:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LIMIT:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOT:
			case NOTNULL:
			case NULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case PROCESS:
			case QUERY:
			case QUEUE:
			case RAISE:
			case RANGE:
			case REDUCE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNING:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case SAMPLE:
			case SAVEPOINT:
			case SCHEMA:
			case SECONDS:
			case SEEK:
			case SELECT:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYMMETRIC:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNBOUNDED:
			case UNCONDITIONAL:
			case UNION:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WRAPPER:
			case XOR:
			case STRING_VALUE:
			case ID_PLAIN:
			case ID_QUOTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4648;
				an_id_table();
				}
				break;
			case CALLABLE:
			case DICT:
			case ENUM:
			case FLOW:
			case LIST:
			case OPTIONAL:
			case RESOURCE:
			case SET:
			case STRUCT:
			case TAGGED:
			case TUPLE:
			case VARIANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4649;
				type_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_table_or_atContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_table_or_typeContext id_table_or_type() {
			return GetRuleContext<Id_table_or_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAT() { return GetToken(YQLParser.COMMAT, 0); }
		public Id_table_or_atContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_table_or_at; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterId_table_or_at(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitId_table_or_at(this);
		}
	}

	[RuleVersion(0)]
	public Id_table_or_atContext id_table_or_at() {
		Id_table_or_atContext _localctx = new Id_table_or_atContext(Context, State);
		EnterRule(_localctx, 864, RULE_id_table_or_at);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAT) {
				{
				State = 4652;
				Match(COMMAT);
				}
			}

			State = 4655;
			id_table_or_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_compatContext keyword_compat() {
			return GetRuleContext<Keyword_compatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_expr_uncompatContext keyword_expr_uncompat() {
			return GetRuleContext<Keyword_expr_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_table_uncompatContext keyword_table_uncompat() {
			return GetRuleContext<Keyword_table_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_select_uncompatContext keyword_select_uncompat() {
			return GetRuleContext<Keyword_select_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_alter_uncompatContext keyword_alter_uncompat() {
			return GetRuleContext<Keyword_alter_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_in_uncompatContext keyword_in_uncompat() {
			return GetRuleContext<Keyword_in_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_window_uncompatContext keyword_window_uncompat() {
			return GetRuleContext<Keyword_window_uncompatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_hint_uncompatContext keyword_hint_uncompat() {
			return GetRuleContext<Keyword_hint_uncompatContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 866, RULE_keyword);
		try {
			State = 4665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALTER:
			case ANALYZE:
			case AND:
			case ANSI:
			case ARRAY:
			case ASC:
			case ASYNC:
			case AT:
			case ATTACH:
			case ATTRIBUTES:
			case AUTOINCREMENT:
			case BACKUP:
			case BATCH:
			case COLLECTION:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BY:
			case CASCADE:
			case CHANGEFEED:
			case CHECK:
			case CLASSIFIER:
			case COLLATE:
			case COMMIT:
			case CONDITIONAL:
			case CONFLICT:
			case CONNECT:
			case CONSTRAINT:
			case CONSUMER:
			case COVER:
			case CREATE:
			case CROSS:
			case CURRENT:
			case DATA:
			case DATABASE:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DEFINE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETACH:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DO:
			case DROP:
			case EACH:
			case ELSE:
			case EMPTY:
			case ENCRYPTED:
			case END:
			case ERROR:
			case ESCAPE:
			case EVALUATE:
			case EXCLUDE:
			case EXCLUSION:
			case EXCLUSIVE:
			case EXPLAIN:
			case EXPORT:
			case EXTERNAL:
			case FAIL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FLATTEN:
			case FOLLOWING:
			case FOR:
			case FOREIGN:
			case FUNCTION:
			case GLOB:
			case GLOBAL:
			case GRANT:
			case GROUP:
			case GROUPING:
			case HASH:
			case IF:
			case IGNORE:
			case ILIKE:
			case IMMEDIATE:
			case IMPORT:
			case IN:
			case INCREMENT:
			case INCREMENTAL:
			case INDEX:
			case INDEXED:
			case INHERITS:
			case INITIAL:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LAST:
			case LEFT:
			case LEGACY:
			case LIKE:
			case LOCAL:
			case LOGIN:
			case MANAGE:
			case MATCH:
			case MATCHES:
			case MATCH_RECOGNIZE:
			case MEASURES:
			case MICROSECONDS:
			case MILLISECONDS:
			case MODIFY:
			case NANOSECONDS:
			case NATURAL:
			case NEXT:
			case NO:
			case NOLOGIN:
			case NOTNULL:
			case NULLS:
			case OBJECT:
			case OF:
			case OFFSET:
			case OMIT:
			case ON:
			case ONE:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case OTHERS:
			case OUTER:
			case OVER:
			case OWNER:
			case PARALLEL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PAST:
			case PATTERN:
			case PER:
			case PERMUTE:
			case PLAN:
			case POOL:
			case PRAGMA:
			case PRECEDING:
			case PRESORT:
			case PRIMARY:
			case PRIVILEGES:
			case QUERY:
			case QUEUE:
			case RAISE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case REMOVE:
			case RENAME:
			case REPLACE:
			case REPLICATION:
			case RESET:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESTRICT:
			case RESULT:
			case REVERT:
			case REVOKE:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROW:
			case SAMPLE:
			case SAVEPOINT:
			case SECONDS:
			case SEEK:
			case SEMI:
			case SETS:
			case SHOW:
			case TSKIP:
			case SEQUENCE:
			case SOURCE:
			case START:
			case SUBQUERY:
			case SUBSET:
			case SYMBOLS:
			case SYNC:
			case SYSTEM:
			case TABLE:
			case TABLES:
			case TABLESAMPLE:
			case TABLESTORE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TIES:
			case TO:
			case TOPIC:
			case TRANSACTION:
			case TRANSFER:
			case TRIGGER:
			case TYPE:
			case UNCONDITIONAL:
			case UNIQUE:
			case UNKNOWN:
			case UNMATCHED:
			case UPDATE:
			case UPSERT:
			case USE:
			case USER:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WITH:
			case WRAPPER:
			case XOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4657;
				keyword_compat();
				}
				break;
			case ASYMMETRIC:
			case BETWEEN:
			case BITCAST:
			case CASE:
			case CAST:
			case CUBE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case EMPTY_ACTION:
			case EXISTS:
			case FROM:
			case FULL:
			case HOP:
			case JSON_EXISTS:
			case JSON_QUERY:
			case JSON_VALUE:
			case NOT:
			case NULL:
			case PROCESS:
			case REDUCE:
			case RETURN:
			case RETURNING:
			case ROLLUP:
			case SELECT:
			case SYMMETRIC:
			case UNBOUNDED:
			case WHEN:
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4658;
				keyword_expr_uncompat();
				}
				break;
			case ANY:
			case ERASE:
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4659;
				keyword_table_uncompat();
				}
				break;
			case ALL:
			case AS:
			case ASSUME:
			case DISTINCT:
			case EXCEPT:
			case HAVING:
			case INTERSECT:
			case LIMIT:
			case UNION:
			case WINDOW:
			case WITHOUT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4660;
				keyword_select_uncompat();
				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4661;
				keyword_alter_uncompat();
				}
				break;
			case COMPACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4662;
				keyword_in_uncompat();
				}
				break;
			case GROUPS:
			case RANGE:
			case ROWS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4663;
				keyword_window_uncompat();
				}
				break;
			case COLUMNS:
			case SCHEMA:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4664;
				keyword_hint_uncompat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_expr_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(YQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(YQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITCAST() { return GetToken(YQLParser.BITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(YQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(YQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(YQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(YQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(YQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(YQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_ACTION() { return GetToken(YQLParser.EMPTY_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(YQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(YQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(YQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOP() { return GetToken(YQLParser.HOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXISTS() { return GetToken(YQLParser.JSON_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(YQLParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUERY() { return GetToken(YQLParser.JSON_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(YQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(YQLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(YQLParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(YQLParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(YQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(YQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(YQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(YQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(YQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(YQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(YQLParser.WHERE, 0); }
		public Keyword_expr_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_expr_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_expr_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_expr_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_expr_uncompatContext keyword_expr_uncompat() {
		Keyword_expr_uncompatContext _localctx = new Keyword_expr_uncompatContext(Context, State);
		EnterRule(_localctx, 868, RULE_keyword_expr_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4667;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & -9223370043989139455L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 985162452090881L) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & -9007198687805308923L) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 3377716900413441L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_table_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(YQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERASE() { return GetToken(YQLParser.ERASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(YQLParser.STREAM, 0); }
		public Keyword_table_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_table_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_table_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_table_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_table_uncompatContext keyword_table_uncompat() {
		Keyword_table_uncompatContext _localctx = new Keyword_table_uncompatContext(Context, State);
		EnterRule(_localctx, 870, RULE_keyword_table_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4669;
			_la = TokenStream.LA(1);
			if ( !(_la==ANY || _la==ERASE || _la==STREAM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_select_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(YQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(YQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSUME() { return GetToken(YQLParser.ASSUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(YQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(YQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(YQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(YQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(YQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(YQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(YQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(YQLParser.WITHOUT, 0); }
		public Keyword_select_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_select_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_select_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_select_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_select_uncompatContext keyword_select_uncompat() {
		Keyword_select_uncompatContext _localctx = new Keyword_select_uncompatContext(Context, State);
		EnterRule(_localctx, 872, RULE_keyword_select_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4671;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2819147813617664L) != 0) || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 1152925902653374465L) != 0) || _la==LIMIT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & 327681L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_alter_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(YQLParser.COLUMN, 0); }
		public Keyword_alter_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_alter_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_alter_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_alter_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_alter_uncompatContext keyword_alter_uncompat() {
		Keyword_alter_uncompatContext _localctx = new Keyword_alter_uncompatContext(Context, State);
		EnterRule(_localctx, 874, RULE_keyword_alter_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4673;
			Match(COLUMN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_in_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(YQLParser.COMPACT, 0); }
		public Keyword_in_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_in_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_in_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_in_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_in_uncompatContext keyword_in_uncompat() {
		Keyword_in_uncompatContext _localctx = new Keyword_in_uncompatContext(Context, State);
		EnterRule(_localctx, 876, RULE_keyword_in_uncompat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4675;
			Match(COMPACT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_window_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(YQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(YQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(YQLParser.ROWS, 0); }
		public Keyword_window_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_window_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_window_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_window_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_window_uncompatContext keyword_window_uncompat() {
		Keyword_window_uncompatContext _localctx = new Keyword_window_uncompatContext(Context, State);
		EnterRule(_localctx, 878, RULE_keyword_window_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4677;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_hint_uncompatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(YQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(YQLParser.COLUMNS, 0); }
		public Keyword_hint_uncompatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_hint_uncompat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_hint_uncompat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_hint_uncompat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_hint_uncompatContext keyword_hint_uncompat() {
		Keyword_hint_uncompatContext _localctx = new Keyword_hint_uncompatContext(Context, State);
		EnterRule(_localctx, 880, RULE_keyword_hint_uncompat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4679;
			_la = TokenStream.LA(1);
			if ( !(_la==COLUMNS || _la==SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_as_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(YQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(YQLParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BATCH() { return GetToken(YQLParser.BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(YQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(YQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(YQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(YQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(YQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(YQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(YQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(YQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(YQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(YQLParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(YQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(YQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(YQLParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(YQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(YQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(YQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(YQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(YQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(YQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(YQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(YQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(YQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(YQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(YQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(YQLParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(YQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(YQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(YQLParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(YQLParser.XOR, 0); }
		public Keyword_as_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_as_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_as_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_as_compat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_as_compatContext keyword_as_compat() {
		Keyword_as_compatContext _localctx = new Keyword_as_compatContext(Context, State);
		EnterRule(_localctx, 882, RULE_keyword_as_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4681;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -4644903241137547793L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & -1831272093786505L) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & 9222508889893660699L) != 0) || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & -1162777074046615749L) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & 3241669951L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_compatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(YQLParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(YQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(YQLParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(YQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(YQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(YQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI() { return GetToken(YQLParser.ANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(YQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(YQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YQLParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(YQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(YQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(YQLParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(YQLParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP() { return GetToken(YQLParser.BACKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BATCH() { return GetToken(YQLParser.BATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(YQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(YQLParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI() { return GetToken(YQLParser.BERNOULLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(YQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(YQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEFEED() { return GetToken(YQLParser.CHANGEFEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(YQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSIFIER() { return GetToken(YQLParser.CLASSIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(YQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(YQLParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(YQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL() { return GetToken(YQLParser.CONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(YQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(YQLParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(YQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER() { return GetToken(YQLParser.CONSUMER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COVER() { return GetToken(YQLParser.COVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(YQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(YQLParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(YQLParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(YQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(YQLParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(YQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(YQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(YQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(YQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(YQLParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(YQLParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(YQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(YQLParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(YQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(YQLParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(YQLParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(YQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(YQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(YQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(YQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(YQLParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(YQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YQLParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(YQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(YQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATE() { return GetToken(YQLParser.EVALUATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(YQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSION() { return GetToken(YQLParser.EXCLUSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(YQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(YQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(YQLParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(YQLParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(YQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(YQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(YQLParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLATTEN() { return GetToken(YQLParser.FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(YQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(YQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(YQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(YQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(YQLParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(YQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(YQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(YQLParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(YQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(YQLParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YQLParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(YQLParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(YQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(YQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(YQLParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YQLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(YQLParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(YQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(YQLParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(YQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL() { return GetToken(YQLParser.INITIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(YQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(YQLParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(YQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(YQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(YQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(YQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(YQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(YQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(YQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(YQLParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(YQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEGACY() { return GetToken(YQLParser.LEGACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(YQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(YQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(YQLParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANAGE() { return GetToken(YQLParser.MANAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(YQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(YQLParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(YQLParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(YQLParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECONDS() { return GetToken(YQLParser.MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(YQLParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(YQLParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NANOSECONDS() { return GetToken(YQLParser.NANOSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(YQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(YQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(YQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLOGIN() { return GetToken(YQLParser.NOLOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(YQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(YQLParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(YQLParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(YQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(YQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OMIT() { return GetToken(YQLParser.OMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(YQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(YQLParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(YQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(YQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(YQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(YQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(YQLParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(YQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(YQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(YQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(YQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(YQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(YQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(YQLParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(YQLParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(YQLParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMUTE() { return GetToken(YQLParser.PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(YQLParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POOL() { return GetToken(YQLParser.POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(YQLParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(YQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESORT() { return GetToken(YQLParser.PRESORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(YQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(YQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(YQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEUE() { return GetToken(YQLParser.QUEUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(YQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(YQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(YQLParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(YQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(YQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(YQLParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(YQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(YQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(YQLParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(YQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(YQLParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(YQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(YQLParser.RESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(YQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(YQLParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(YQLParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(YQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(YQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(YQLParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(YQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(YQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(YQLParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(YQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(YQLParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEEK() { return GetToken(YQLParser.SEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(YQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(YQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(YQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSKIP() { return GetToken(YQLParser.TSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(YQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(YQLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(YQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBQUERY() { return GetToken(YQLParser.SUBQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSET() { return GetToken(YQLParser.SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOLS() { return GetToken(YQLParser.SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(YQLParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(YQLParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(YQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(YQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(YQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESTORE() { return GetToken(YQLParser.TABLESTORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(YQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(YQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(YQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(YQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOPIC() { return GetToken(YQLParser.TOPIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(YQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFER() { return GetToken(YQLParser.TRANSFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(YQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YQLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCONDITIONAL() { return GetToken(YQLParser.UNCONDITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(YQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(YQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMATCHED() { return GetToken(YQLParser.UNMATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(YQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPSERT() { return GetToken(YQLParser.UPSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(YQLParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(YQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(YQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(YQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(YQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(YQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(YQLParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(YQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(YQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(YQLParser.XOR, 0); }
		public Keyword_compatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_compat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterKeyword_compat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitKeyword_compat(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_compatContext keyword_compat() {
		Keyword_compatContext _localctx = new Keyword_compatContext(Context, State);
		EnterRule(_localctx, 884, RULE_keyword_compat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4683;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -32654135317785105L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & -1831272085397641L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & -35227321960201L) != 0) || ((((_la - 230)) & ~0x3f) == 0 && ((1L << (_la - 230)) & -2325551914156589449L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 7038036607L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(YQLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE() { return GetToken(YQLParser.TUPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(YQLParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(YQLParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(YQLParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(YQLParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(YQLParser.DICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YQLParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(YQLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAGGED() { return GetToken(YQLParser.TAGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLABLE() { return GetToken(YQLParser.CALLABLE, 0); }
		public Type_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterType_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitType_id(this);
		}
	}

	[RuleVersion(0)]
	public Type_idContext type_id() {
		Type_idContext _localctx = new Type_idContext(Context, State);
		EnterRule(_localctx, 886, RULE_type_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4685;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 1126037345796097L) != 0) || _la==FLOW || _la==LIST || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & 2305843284091600897L) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & 137443149825L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(YQLParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(YQLParser.FALSE, 0); }
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterBool_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitBool_value(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		Bool_valueContext _localctx = new Bool_valueContext(Context, State);
		EnterRule(_localctx, 888, RULE_bool_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4687;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(YQLParser.REAL, 0); }
		public RealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitReal(this);
		}
	}

	[RuleVersion(0)]
	public RealContext real() {
		RealContext _localctx = new RealContext(Context, State);
		EnterRule(_localctx, 890, RULE_real);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689;
			Match(REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITS() { return GetToken(YQLParser.DIGITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(YQLParser.INTEGER_VALUE, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYQLListener typedListener = listener as IYQLListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 892, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4691;
			_la = TokenStream.LA(1);
			if ( !(_la==DIGITS || _la==INTEGER_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,335,4694,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		1,0,1,0,1,0,1,0,1,0,3,0,900,8,0,1,1,5,1,903,8,1,10,1,12,1,906,9,1,1,1,
		1,1,4,1,910,8,1,11,1,12,1,911,1,1,5,1,915,8,1,10,1,12,1,918,9,1,1,1,5,
		1,921,8,1,10,1,12,1,924,9,1,1,1,1,1,1,2,5,2,929,8,2,10,2,12,2,932,9,2,
		1,2,1,2,1,3,5,3,937,8,3,10,3,12,3,940,9,3,1,3,1,3,4,3,944,8,3,11,3,12,
		3,945,5,3,948,8,3,10,3,12,3,951,9,3,1,3,1,3,1,3,5,3,956,8,3,10,3,12,3,
		959,9,3,1,4,1,4,3,4,963,8,4,1,5,1,5,1,5,3,5,968,8,5,3,5,970,8,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1036,8,6,1,7,1,7,1,7,5,7,1041,
		8,7,10,7,12,7,1044,9,7,1,7,3,7,1047,8,7,1,8,1,8,1,8,5,8,1052,8,8,10,8,
		12,8,1055,9,8,1,9,1,9,1,9,5,9,1060,8,9,10,9,12,9,1063,9,9,1,10,1,10,3,
		10,1067,8,10,1,11,1,11,3,11,1071,8,11,1,11,1,11,1,11,1,12,3,12,1077,8,
		12,1,12,1,12,1,12,1,12,3,12,1083,8,12,1,12,3,12,1086,8,12,1,12,1,12,3,
		12,1090,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1098,8,12,1,12,1,12,3,
		12,1102,8,12,1,12,3,12,1105,8,12,1,12,1,12,3,12,1109,8,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1120,8,12,1,12,4,12,1123,8,12,11,
		12,12,12,1124,3,12,1127,8,12,1,13,1,13,1,14,1,14,1,14,5,14,1134,8,14,10,
		14,12,14,1137,9,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1157,8,18,1,18,5,18,1160,8,
		18,10,18,12,18,1163,9,18,1,18,1,18,1,18,1,18,4,18,1169,8,18,11,18,12,18,
		1170,3,18,1173,8,18,1,19,1,19,1,19,5,19,1178,8,19,10,19,12,19,1181,9,19,
		1,20,1,20,1,20,5,20,1186,8,20,10,20,12,20,1189,9,20,1,21,1,21,1,21,5,21,
		1194,8,21,10,21,12,21,1197,9,21,1,22,1,22,1,22,1,22,3,22,1203,8,22,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1213,8,24,3,24,1215,8,24,5,24,
		1217,8,24,10,24,12,24,1220,9,24,1,24,1,24,3,24,1224,8,24,1,25,1,25,3,25,
		1228,8,25,1,25,1,25,1,26,1,26,3,26,1234,8,26,1,26,1,26,1,27,1,27,3,27,
		1240,8,27,1,28,1,28,3,28,1244,8,28,1,29,1,29,3,29,1248,8,29,1,29,3,29,
		1251,8,29,1,29,1,29,1,30,1,30,1,30,3,30,1258,8,30,1,30,1,30,1,30,1,30,
		3,30,1264,8,30,5,30,1266,8,30,10,30,12,30,1269,9,30,1,31,1,31,3,31,1273,
		8,31,1,31,3,31,1276,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,5,32,1288,8,32,10,32,12,32,1291,9,32,1,33,1,33,3,33,1295,8,33,1,33,
		3,33,1298,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,3,34,1312,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1319,8,34,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1330,8,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,3,35,1341,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,1361,
		8,38,1,38,1,38,1,39,1,39,3,39,1367,8,39,1,39,4,39,1370,8,39,11,39,12,39,
		1371,1,39,1,39,3,39,1376,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,3,40,1390,8,40,3,40,1392,8,40,1,41,1,41,1,42,1,42,
		1,42,3,42,1399,8,42,1,43,1,43,1,44,1,44,3,44,1405,8,44,1,45,1,45,1,45,
		1,45,1,46,1,46,1,46,5,46,1414,8,46,10,46,12,46,1417,9,46,1,47,1,47,1,47,
		1,47,1,47,3,47,1424,8,47,1,48,1,48,1,48,1,48,3,48,1430,8,48,1,49,1,49,
		1,49,1,49,1,49,3,49,1437,8,49,1,49,1,49,1,49,1,49,5,49,1443,8,49,10,49,
		12,49,1446,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,
		1458,8,51,1,51,1,51,1,52,1,52,3,52,1464,8,52,1,52,1,52,3,52,1468,8,52,
		1,52,3,52,1471,8,52,3,52,1473,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
		1481,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1489,8,54,1,54,1,54,1,54,
		1,54,3,54,1495,8,54,1,54,1,54,1,54,1,54,3,54,1501,8,54,1,54,1,54,1,55,
		1,55,3,55,1507,8,55,1,55,3,55,1510,8,55,1,55,1,55,1,56,1,56,1,56,5,56,
		1517,8,56,10,56,12,56,1520,9,56,1,57,1,57,1,57,1,57,5,57,1526,8,57,10,
		57,12,57,1529,9,57,1,57,1,57,1,58,1,58,3,58,1535,8,58,1,59,1,59,1,59,1,
		59,5,59,1541,8,59,10,59,12,59,1544,9,59,1,59,1,59,1,60,1,60,1,60,1,61,
		1,61,1,61,1,61,1,61,3,61,1556,8,61,1,62,1,62,1,62,5,62,1561,8,62,10,62,
		12,62,1564,9,62,1,62,3,62,1567,8,62,1,63,1,63,1,63,5,63,1572,8,63,10,63,
		12,63,1575,9,63,1,63,3,63,1578,8,63,1,64,1,64,1,64,3,64,1583,8,64,1,65,
		1,65,1,65,5,65,1588,8,65,10,65,12,65,1591,9,65,1,66,1,66,1,66,1,66,3,66,
		1597,8,66,1,66,3,66,1600,8,66,1,66,1,66,1,66,1,67,1,67,3,67,1607,8,67,
		1,67,1,67,3,67,1611,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
		1621,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1644,8,71,1,72,1,72,
		1,72,1,72,3,72,1650,8,72,1,73,1,73,3,73,1654,8,73,1,74,1,74,1,74,5,74,
		1659,8,74,10,74,12,74,1662,9,74,1,75,1,75,1,75,3,75,1667,8,75,1,76,1,76,
		1,76,5,76,1672,8,76,10,76,12,76,1675,9,76,1,77,3,77,1678,8,77,1,77,1,77,
		3,77,1682,8,77,1,78,1,78,1,79,1,79,3,79,1688,8,79,1,80,1,80,1,80,3,80,
		1693,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,1702,8,82,1,82,3,82,
		1705,8,82,1,82,1,82,1,82,1,82,3,82,1711,8,82,1,83,1,83,1,83,3,83,1716,
		8,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1724,8,84,1,85,1,85,1,85,5,85,
		1729,8,85,10,85,12,85,1732,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,
		1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,1751,8,88,10,88,12,88,
		1754,9,88,1,88,3,88,1757,8,88,3,88,1759,8,88,1,88,1,88,3,88,1763,8,88,
		1,89,1,89,1,89,1,89,1,89,5,89,1770,8,89,10,89,12,89,1773,9,89,1,89,3,89,
		1776,8,89,3,89,1778,8,89,1,89,1,89,3,89,1782,8,89,1,90,1,90,1,90,1,90,
		1,90,5,90,1789,8,90,10,90,12,90,1792,9,90,1,90,3,90,1795,8,90,1,90,1,90,
		1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,
		1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,
		1,96,1,96,1,96,1,96,5,96,1831,8,96,10,96,12,96,1834,9,96,1,96,3,96,1837,
		8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,
		1,98,1,99,1,99,1,99,1,99,3,99,1857,8,99,1,99,3,99,1860,8,99,1,99,1,99,
		1,99,1,99,3,99,1866,8,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,
		100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1886,8,
		100,1,100,5,100,1889,8,100,10,100,12,100,1892,9,100,1,101,1,101,1,101,
		3,101,1897,8,101,1,101,5,101,1900,8,101,10,101,12,101,1903,9,101,3,101,
		1905,8,101,1,102,1,102,3,102,1909,8,102,1,103,1,103,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1936,8,104,1,105,
		1,105,1,105,1,105,1,105,1,105,3,105,1944,8,105,1,106,3,106,1947,8,106,
		1,106,1,106,1,106,5,106,1952,8,106,10,106,12,106,1955,9,106,1,107,1,107,
		1,107,1,107,1,107,1,108,1,108,1,108,1,109,1,109,3,109,1967,8,109,1,109,
		1,109,3,109,1971,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,
		1,111,1,111,3,111,1983,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
		1,112,1,112,5,112,1994,8,112,10,112,12,112,1997,9,112,1,112,1,112,3,112,
		2001,8,112,1,113,1,113,1,113,1,113,1,113,3,113,2008,8,113,1,114,1,114,
		3,114,2012,8,114,1,115,1,115,1,115,5,115,2017,8,115,10,115,12,115,2020,
		9,115,1,116,1,116,1,116,1,116,5,116,2026,8,116,10,116,12,116,2029,9,116,
		1,117,1,117,1,117,1,117,5,117,2035,8,117,10,117,12,117,2038,9,117,1,118,
		1,118,1,118,1,118,1,118,3,118,2045,8,118,1,119,1,119,3,119,2049,8,119,
		1,119,1,119,3,119,2053,8,119,1,120,1,120,1,120,1,120,1,120,3,120,2060,
		8,120,3,120,2062,8,120,1,121,3,121,2065,8,121,1,121,1,121,1,121,3,121,
		2070,8,121,1,121,1,121,1,121,3,121,2075,8,121,1,122,1,122,3,122,2079,8,
		122,1,122,1,122,1,122,5,122,2084,8,122,10,122,12,122,2087,9,122,1,122,
		1,122,1,122,1,122,3,122,2093,8,122,1,122,1,122,3,122,2097,8,122,1,122,
		1,122,3,122,2101,8,122,1,122,1,122,3,122,2105,8,122,1,122,1,122,3,122,
		2109,8,122,3,122,2111,8,122,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
		5,124,2120,8,124,10,124,12,124,2123,9,124,1,125,1,125,1,125,1,125,5,125,
		2129,8,125,10,125,12,125,2132,9,125,1,125,1,125,3,125,2136,8,125,1,125,
		1,125,1,125,1,125,3,125,2142,8,125,1,125,1,125,1,125,3,125,2147,8,125,
		1,125,1,125,3,125,2151,8,125,1,125,1,125,3,125,2155,8,125,1,125,1,125,
		3,125,2159,8,125,1,126,3,126,2162,8,126,1,127,1,127,3,127,2166,8,127,1,
		127,1,127,3,127,2170,8,127,1,127,1,127,1,127,1,127,5,127,2176,8,127,10,
		127,12,127,2179,9,127,1,127,3,127,2182,8,127,1,127,1,127,1,127,3,127,2187,
		8,127,1,127,3,127,2190,8,127,1,127,1,127,3,127,2194,8,127,1,127,1,127,
		3,127,2198,8,127,1,127,3,127,2201,8,127,1,127,1,127,3,127,2205,8,127,1,
		127,3,127,2208,8,127,1,127,3,127,2211,8,127,1,128,1,128,1,128,3,128,2216,
		8,128,1,128,3,128,2219,8,128,1,128,3,128,2222,8,128,1,128,3,128,2225,8,
		128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
		1,129,3,129,2239,8,129,3,129,2241,8,129,1,130,1,130,1,130,1,130,1,130,
		1,130,1,130,1,130,1,130,3,130,2252,8,130,1,131,1,131,1,131,1,132,1,132,
		1,132,5,132,2260,8,132,10,132,12,132,2263,9,132,1,133,1,133,1,133,1,133,
		1,134,1,134,1,134,3,134,2272,8,134,1,134,3,134,2275,8,134,1,134,1,134,
		1,134,1,134,1,134,3,134,2282,8,134,1,134,1,134,1,134,1,135,1,135,1,135,
		1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
		1,135,1,135,1,135,1,135,3,135,2306,8,135,1,136,1,136,1,137,1,137,1,138,
		1,138,1,138,5,138,2315,8,138,10,138,12,138,2318,9,138,1,139,4,139,2321,
		8,139,11,139,12,139,2322,1,140,1,140,3,140,2327,8,140,1,141,1,141,3,141,
		2331,8,141,1,141,1,141,3,141,2335,8,141,1,141,1,141,3,141,2339,8,141,1,
		141,1,141,3,141,2343,8,141,1,141,1,141,3,141,2347,8,141,1,141,1,141,3,
		141,2351,8,141,1,141,1,141,1,141,1,141,3,141,2357,8,141,1,142,1,142,1,
		142,1,142,1,142,3,142,2364,8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,
		142,1,142,3,142,2374,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,5,
		144,2383,8,144,10,144,12,144,2386,9,144,1,144,1,144,1,145,1,145,1,145,
		1,146,1,146,1,146,5,146,2396,8,146,10,146,12,146,2399,9,146,1,147,1,147,
		1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,149,5,149,2412,8,149,
		10,149,12,149,2415,9,149,1,150,1,150,1,151,1,151,1,151,5,151,2422,8,151,
		10,151,12,151,2425,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,
		1,155,1,155,1,156,1,156,1,157,1,157,1,157,1,157,1,158,3,158,2444,8,158,
		1,158,1,158,1,159,1,159,3,159,2450,8,159,1,159,1,159,1,159,1,159,1,159,
		3,159,2457,8,159,1,160,1,160,1,160,5,160,2462,8,160,10,160,12,160,2465,
		9,160,1,161,1,161,1,161,1,161,1,161,3,161,2472,8,161,1,162,1,162,1,163,
		1,163,1,163,5,163,2479,8,163,10,163,12,163,2482,9,163,1,164,1,164,1,164,
		1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,
		1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2518,8,168,3,168,2520,
		8,168,1,169,3,169,2523,8,169,1,169,1,169,1,169,3,169,2528,8,169,1,169,
		1,169,3,169,2532,8,169,5,169,2534,8,169,10,169,12,169,2537,9,169,1,170,
		1,170,1,170,3,170,2542,8,170,1,171,1,171,1,171,1,171,3,171,2548,8,171,
		1,171,1,171,3,171,2552,8,171,1,172,1,172,1,172,3,172,2557,8,172,1,172,
		1,172,1,172,3,172,2562,8,172,3,172,2564,8,172,1,173,1,173,3,173,2568,8,
		173,1,173,1,173,1,173,3,173,2573,8,173,1,173,3,173,2576,8,173,3,173,2578,
		8,173,1,173,1,173,3,173,2582,8,173,1,174,1,174,1,174,1,174,1,174,1,174,
		1,174,1,174,1,174,3,174,2593,8,174,1,175,1,175,1,175,1,176,1,176,1,176,
		1,176,1,176,1,176,3,176,2604,8,176,1,177,1,177,1,178,1,178,1,178,1,178,
		1,178,1,179,1,179,3,179,2615,8,179,1,179,1,179,3,179,2619,8,179,1,179,
		1,179,3,179,2623,8,179,1,179,1,179,3,179,2627,8,179,1,179,3,179,2630,8,
		179,1,179,1,179,3,179,2634,8,179,1,179,3,179,2637,8,179,1,180,1,180,1,
		180,1,180,3,180,2643,8,180,1,181,1,181,1,181,1,181,1,181,5,181,2650,8,
		181,10,181,12,181,2653,9,181,3,181,2655,8,181,1,182,1,182,1,182,1,182,
		1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,2669,8,182,1,182,
		1,182,1,182,1,182,3,182,2675,8,182,1,183,3,183,2678,8,183,1,183,1,183,
		1,183,3,183,2683,8,183,1,184,1,184,1,184,1,185,1,185,3,185,2690,8,185,
		1,186,1,186,1,186,5,186,2695,8,186,10,186,12,186,2698,9,186,1,187,1,187,
		1,187,1,187,1,188,1,188,3,188,2706,8,188,1,189,1,189,1,189,3,189,2711,
		8,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,2719,8,189,1,189,1,189,
		1,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,2732,8,190,
		10,190,12,190,2735,9,190,1,191,1,191,1,191,3,191,2740,8,191,1,192,1,192,
		1,192,1,192,1,192,1,192,3,192,2748,8,192,1,192,1,192,1,193,1,193,1,193,
		1,193,1,193,3,193,2757,8,193,1,193,1,193,3,193,2761,8,193,1,193,1,193,
		1,193,1,194,1,194,1,194,1,194,3,194,2770,8,194,1,194,1,194,1,195,1,195,
		1,195,1,195,1,195,1,195,1,195,1,195,3,195,2782,8,195,1,196,1,196,1,196,
		1,196,1,196,3,196,2789,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,
		2797,8,196,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
		1,198,1,198,1,199,1,199,1,199,1,200,1,200,1,200,1,200,3,200,2818,8,200,
		1,200,1,200,1,200,1,200,1,200,1,200,3,200,2826,8,200,1,201,1,201,1,201,
		1,202,1,202,1,202,1,202,3,202,2835,8,202,1,203,1,203,1,203,1,203,1,204,
		1,204,1,205,1,205,3,205,2845,8,205,1,206,1,206,1,206,1,206,1,206,5,206,
		2852,8,206,10,206,12,206,2855,9,206,1,206,1,206,3,206,2859,8,206,1,207,
		1,207,1,208,1,208,1,208,3,208,2866,8,208,1,208,1,208,1,208,1,208,1,208,
		1,208,1,208,1,208,3,208,2876,8,208,1,208,1,208,1,208,3,208,2881,8,208,
		1,208,1,208,1,208,1,208,1,208,5,208,2888,8,208,10,208,12,208,2891,9,208,
		1,208,3,208,2894,8,208,1,208,1,208,3,208,2898,8,208,1,208,3,208,2901,8,
		208,1,208,3,208,2904,8,208,1,208,3,208,2907,8,208,1,208,3,208,2910,8,208,
		1,209,1,209,1,209,1,209,1,209,1,209,3,209,2918,8,209,1,210,1,210,1,210,
		3,210,2923,8,210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,
		3,211,2934,8,211,1,212,1,212,1,212,1,213,1,213,3,213,2941,8,213,1,214,
		1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,5,215,2952,8,215,10,215,
		12,215,2955,9,215,1,216,1,216,1,216,5,216,2960,8,216,10,216,12,216,2963,
		9,216,1,217,1,217,3,217,2967,8,217,1,218,1,218,1,218,5,218,2972,8,218,
		10,218,12,218,2975,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
		1,219,1,219,3,219,2987,8,219,1,220,1,220,1,220,1,220,1,221,1,221,1,221,
		5,221,2996,8,221,10,221,12,221,2999,9,221,1,222,1,222,1,222,1,222,1,223,
		1,223,1,223,3,223,3008,8,223,1,224,1,224,1,224,1,224,3,224,3014,8,224,
		1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,
		5,226,3028,8,226,10,226,12,226,3031,9,226,1,226,1,226,1,227,1,227,1,227,
		1,227,1,227,1,228,1,228,1,228,1,228,1,228,5,228,3045,8,228,10,228,12,228,
		3048,9,228,1,228,1,228,1,229,1,229,1,229,1,230,1,230,1,230,1,230,1,231,
		1,231,1,231,1,232,1,232,1,232,1,232,1,232,1,232,5,232,3068,8,232,10,232,
		12,232,3071,9,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
		1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3090,8,233,1,234,
		1,234,1,234,1,234,1,234,1,234,1,234,5,234,3099,8,234,10,234,12,234,3102,
		9,234,1,235,1,235,1,235,1,235,1,235,3,235,3109,8,235,1,236,1,236,1,236,
		1,236,1,236,1,236,5,236,3117,8,236,10,236,12,236,3120,9,236,1,237,1,237,
		3,237,3124,8,237,1,238,1,238,3,238,3128,8,238,1,238,1,238,1,239,1,239,
		3,239,3134,8,239,1,239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,241,
		1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,
		1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,
		1,245,5,245,3170,8,245,10,245,12,245,3173,9,245,1,245,1,245,1,246,1,246,
		1,246,1,246,1,246,5,246,3182,8,246,10,246,12,246,3185,9,246,1,246,1,246,
		1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,
		1,250,1,250,1,250,1,250,1,250,1,251,1,251,1,251,1,252,1,252,1,252,1,252,
		1,252,1,253,1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,255,1,255,
		1,255,3,255,3226,8,255,1,255,1,255,1,256,1,256,1,256,1,257,3,257,3234,
		8,257,1,257,3,257,3237,8,257,1,257,1,257,3,257,3241,8,257,1,258,1,258,
		3,258,3245,8,258,1,259,1,259,1,259,1,259,1,259,1,259,5,259,3253,8,259,
		10,259,12,259,3256,9,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
		5,259,3266,8,259,10,259,12,259,3269,9,259,1,259,1,259,1,259,1,259,1,259,
		1,259,1,259,1,259,5,259,3279,8,259,10,259,12,259,3282,9,259,1,259,1,259,
		3,259,3286,8,259,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,5,260,
		3296,8,260,10,260,12,260,3299,9,260,1,260,1,260,1,260,1,260,1,260,1,260,
		5,260,3307,8,260,10,260,12,260,3310,9,260,1,260,1,260,3,260,3314,8,260,
		1,260,3,260,3317,8,260,1,261,1,261,3,261,3321,8,261,1,261,1,261,3,261,
		3325,8,261,1,262,1,262,3,262,3329,8,262,1,262,3,262,3332,8,262,1,263,1,
		263,1,264,1,264,1,265,1,265,1,265,1,265,1,265,5,265,3343,8,265,10,265,
		12,265,3346,9,265,1,265,3,265,3349,8,265,1,265,1,265,1,266,1,266,1,266,
		1,266,1,267,1,267,1,267,1,267,3,267,3361,8,267,1,268,1,268,1,268,1,268,
		1,268,1,268,1,268,1,269,1,269,1,269,5,269,3373,8,269,10,269,12,269,3376,
		9,269,1,270,1,270,1,270,1,270,1,271,1,271,1,272,1,272,1,272,1,272,1,272,
		1,272,3,272,3390,8,272,1,273,1,273,1,273,1,273,1,274,1,274,1,274,1,274,
		1,274,1,274,1,274,1,274,1,274,3,274,3405,8,274,1,274,3,274,3408,8,274,
		1,275,1,275,1,275,1,275,1,275,1,275,5,275,3416,8,275,10,275,12,275,3419,
		9,275,3,275,3421,8,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,3429,
		8,276,1,277,1,277,1,277,1,277,1,278,1,278,1,278,1,278,5,278,3439,8,278,
		10,278,12,278,3442,9,278,3,278,3444,8,278,1,278,1,278,1,279,1,279,1,279,
		1,279,1,280,1,280,3,280,3454,8,280,1,281,1,281,1,281,1,281,5,281,3460,
		8,281,10,281,12,281,3463,9,281,1,281,1,281,1,281,3,281,3468,8,281,1,282,
		1,282,1,282,1,282,5,282,3474,8,282,10,282,12,282,3477,9,282,1,282,1,282,
		1,283,1,283,1,283,3,283,3484,8,283,1,284,1,284,1,284,1,284,1,284,3,284,
		3491,8,284,1,284,1,284,3,284,3495,8,284,1,284,1,284,1,285,1,285,1,285,
		1,285,5,285,3503,8,285,10,285,12,285,3506,9,285,1,286,1,286,1,286,1,286,
		3,286,3512,8,286,1,286,4,286,3515,8,286,11,286,12,286,3516,1,286,1,286,
		1,286,3,286,3522,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
		5,287,3532,8,287,10,287,12,287,3535,9,287,1,287,3,287,3538,8,287,3,287,
		3540,8,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,5,288,3550,
		8,288,10,288,12,288,3553,9,288,1,288,3,288,3556,8,288,1,288,1,288,1,288,
		3,288,3561,8,288,1,289,1,289,1,289,1,289,3,289,3567,8,289,1,289,1,289,
		1,289,5,289,3572,8,289,10,289,12,289,3575,9,289,1,289,3,289,3578,8,289,
		1,290,1,290,3,290,3582,8,290,1,291,1,291,3,291,3586,8,291,1,292,1,292,
		3,292,3590,8,292,1,293,3,293,3593,8,293,1,293,1,293,1,293,1,294,1,294,
		1,295,1,295,1,295,1,296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,5,297,
		3611,8,297,10,297,12,297,3614,9,297,1,297,1,297,1,297,1,297,5,297,3620,
		8,297,10,297,12,297,3623,9,297,1,297,3,297,3626,8,297,1,297,1,297,1,297,
		3,297,3631,8,297,1,298,1,298,1,298,1,298,3,298,3637,8,298,1,298,1,298,
		1,298,1,298,1,298,5,298,3644,8,298,10,298,12,298,3647,9,298,1,298,1,298,
		1,298,1,298,5,298,3653,8,298,10,298,12,298,3656,9,298,1,299,1,299,1,299,
		1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,
		3672,8,299,1,299,1,299,3,299,3676,8,299,1,299,1,299,3,299,3680,8,299,3,
		299,3682,8,299,1,300,1,300,3,300,3686,8,300,1,301,1,301,1,301,5,301,3691,
		8,301,10,301,12,301,3694,9,301,1,301,3,301,3697,8,301,1,301,1,301,3,301,
		3701,8,301,3,301,3703,8,301,1,302,1,302,1,302,1,302,1,302,1,302,1,303,
		1,303,1,303,1,303,1,303,1,303,1,303,5,303,3718,8,303,10,303,12,303,3721,
		9,303,1,304,1,304,3,304,3725,8,304,1,305,1,305,1,305,1,305,1,305,1,306,
		1,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,1,307,1,307,
		1,307,1,307,5,307,3747,8,307,10,307,12,307,3750,9,307,1,308,1,308,3,308,
		3754,8,308,1,309,1,309,1,309,1,309,1,309,1,309,1,310,1,310,1,310,1,310,
		1,310,1,310,1,310,1,310,5,310,3770,8,310,10,310,12,310,3773,9,310,1,310,
		1,310,1,310,1,310,1,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,5,312,
		3787,8,312,10,312,12,312,3790,9,312,1,313,1,313,1,313,1,313,1,314,1,314,
		1,314,1,314,1,314,1,314,1,314,5,314,3803,8,314,10,314,12,314,3806,9,314,
		1,315,1,315,1,316,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,317,1,317,
		3,317,3820,8,317,1,318,1,318,3,318,3824,8,318,1,319,1,319,1,319,1,319,
		1,319,1,319,1,319,1,319,1,319,3,319,3835,8,319,1,319,1,319,1,319,1,319,
		1,319,1,320,1,320,1,320,5,320,3845,8,320,10,320,12,320,3848,9,320,1,321,
		1,321,1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,5,322,3860,8,322,
		10,322,12,322,3863,9,322,1,323,1,323,3,323,3867,8,323,1,324,1,324,1,324,
		1,324,1,324,1,325,1,325,1,325,1,325,1,326,1,326,1,326,1,326,3,326,3882,
		8,326,1,327,1,327,1,327,5,327,3887,8,327,10,327,12,327,3890,9,327,1,328,
		1,328,1,328,1,328,1,328,3,328,3897,8,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,329,5,329,3906,8,329,10,329,12,329,3909,9,329,1,329,1,329,4,329,
		3913,8,329,11,329,12,329,3914,1,329,5,329,3918,8,329,10,329,12,329,3921,
		9,329,1,329,5,329,3924,8,329,10,329,12,329,3927,9,329,3,329,3929,8,329,
		1,330,3,330,3932,8,330,1,330,1,330,1,330,1,330,1,330,3,330,3939,8,330,
		1,331,3,331,3942,8,331,1,331,3,331,3945,8,331,1,331,1,331,1,331,1,331,
		1,331,1,331,1,331,3,331,3954,8,331,1,332,1,332,1,332,3,332,3959,8,332,
		1,332,3,332,3962,8,332,1,332,1,332,1,332,1,332,1,332,1,332,5,332,3970,
		8,332,10,332,12,332,3973,9,332,1,332,3,332,3976,8,332,3,332,3978,8,332,
		1,332,1,332,1,332,1,332,1,332,3,332,3985,8,332,1,332,3,332,3988,8,332,
		1,332,1,332,3,332,3992,8,332,3,332,3994,8,332,1,332,3,332,3997,8,332,1,
		333,1,333,1,333,3,333,4002,8,333,1,334,3,334,4005,8,334,1,334,1,334,1,
		334,3,334,4010,8,334,1,335,1,335,1,335,1,335,1,335,1,335,5,335,4018,8,
		335,10,335,12,335,4021,9,335,1,335,1,335,3,335,4025,8,335,1,336,1,336,
		1,336,1,336,1,336,1,336,1,336,5,336,4034,8,336,10,336,12,336,4037,9,336,
		1,336,3,336,4040,8,336,1,336,1,336,3,336,4044,8,336,3,336,4046,8,336,1,
		336,1,336,3,336,4050,8,336,1,336,1,336,1,336,3,336,4055,8,336,1,336,1,
		336,1,336,1,336,5,336,4061,8,336,10,336,12,336,4064,9,336,3,336,4066,8,
		336,1,336,3,336,4069,8,336,1,336,3,336,4072,8,336,1,337,1,337,1,337,3,
		337,4077,8,337,1,337,1,337,1,338,1,338,3,338,4083,8,338,1,338,3,338,4086,
		8,338,1,339,1,339,3,339,4090,8,339,1,340,1,340,1,340,1,340,3,340,4096,
		8,340,1,341,3,341,4099,8,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		3,341,4108,8,341,1,341,3,341,4111,8,341,1,342,3,342,4114,8,342,1,342,1,
		342,1,342,1,342,1,342,1,342,3,342,4122,8,342,1,342,1,342,3,342,4126,8,
		342,1,342,3,342,4129,8,342,1,343,1,343,3,343,4133,8,343,1,344,1,344,1,
		344,5,344,4138,8,344,10,344,12,344,4141,9,344,1,345,1,345,1,345,1,345,
		1,346,1,346,1,347,1,347,1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,
		5,348,4159,8,348,10,348,12,348,4162,9,348,1,348,1,348,1,349,1,349,1,349,
		1,349,1,349,3,349,4171,8,349,1,349,1,349,3,349,4175,8,349,1,349,3,349,
		4178,8,349,1,350,1,350,1,350,1,350,5,350,4184,8,350,10,350,12,350,4187,
		9,350,1,350,1,350,1,351,1,351,1,352,1,352,1,352,1,352,1,352,1,353,1,353,
		1,353,1,353,3,353,4202,8,353,1,353,1,353,1,353,1,353,5,353,4208,8,353,
		10,353,12,353,4211,9,353,1,354,1,354,1,354,1,354,1,354,3,354,4218,8,354,
		1,355,1,355,1,355,1,356,1,356,1,356,3,356,4226,8,356,1,357,1,357,1,357,
		1,357,1,357,1,358,1,358,3,358,4235,8,358,1,359,1,359,1,359,1,359,1,360,
		1,360,1,360,1,360,1,360,1,361,1,361,1,361,1,361,1,361,5,361,4251,8,361,
		10,361,12,361,4254,9,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,363,
		1,363,1,363,1,363,1,363,5,363,4268,8,363,10,363,12,363,4271,9,363,1,363,
		1,363,1,364,1,364,1,364,1,364,3,364,4279,8,364,1,364,1,364,1,365,1,365,
		1,365,5,365,4286,8,365,10,365,12,365,4289,9,365,1,366,1,366,1,366,1,366,
		1,367,1,367,1,368,1,368,1,368,1,368,1,368,1,369,1,369,1,369,5,369,4305,
		8,369,10,369,12,369,4308,9,369,1,370,1,370,1,370,1,370,1,371,1,371,1,372,
		1,372,1,372,3,372,4319,8,372,1,372,1,372,1,373,1,373,1,374,1,374,1,374,
		1,374,3,374,4329,8,374,1,375,1,375,1,375,1,375,1,375,1,375,1,376,1,376,
		3,376,4339,8,376,1,377,1,377,1,378,1,378,1,378,1,379,1,379,1,379,5,379,
		4349,8,379,10,379,12,379,4352,9,379,1,380,1,380,1,380,1,380,1,381,1,381,
		1,382,1,382,1,382,1,382,1,383,3,383,4365,8,383,1,383,3,383,4368,8,383,
		1,383,3,383,4371,8,383,1,383,3,383,4374,8,383,1,384,1,384,1,385,1,385,
		3,385,4380,8,385,1,385,1,385,1,385,1,386,1,386,1,387,1,387,1,387,3,387,
		4390,8,387,1,388,1,388,1,389,1,389,3,389,4396,8,389,1,390,1,390,1,390,
		1,390,1,390,1,391,1,391,1,391,1,391,3,391,4407,8,391,1,391,3,391,4410,
		8,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,
		4422,8,392,1,393,1,393,1,393,1,394,1,394,1,394,1,394,1,394,3,394,4432,
		8,394,1,395,1,395,1,395,1,395,3,395,4438,8,395,1,396,1,396,1,397,1,397,
		1,398,1,398,1,398,1,398,1,398,3,398,4449,8,398,1,399,1,399,1,399,5,399,
		4454,8,399,10,399,12,399,4457,9,399,1,399,3,399,4460,8,399,1,400,1,400,
		1,400,1,401,1,401,1,401,1,401,3,401,4469,8,401,1,401,1,401,4,401,4473,
		8,401,11,401,12,401,4474,1,402,1,402,3,402,4479,8,402,1,402,1,402,1,402,
		3,402,4484,8,402,1,402,1,402,1,402,1,402,3,402,4490,8,402,1,402,3,402,
		4493,8,402,1,403,1,403,1,403,1,403,1,403,1,404,1,404,1,405,1,405,3,405,
		4504,8,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,3,406,4513,8,406,
		1,407,1,407,1,407,1,407,1,407,1,407,3,407,4521,8,407,1,408,1,408,1,408,
		1,408,1,408,3,408,4528,8,408,1,409,1,409,1,409,1,409,1,409,1,409,1,409,
		1,409,3,409,4538,8,409,1,410,1,410,1,410,1,410,1,410,1,410,1,410,3,410,
		4547,8,410,1,411,1,411,1,411,1,411,1,411,1,411,1,411,3,411,4556,8,411,
		1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,3,412,4566,8,412,1,413,
		1,413,3,413,4570,8,413,1,414,1,414,3,414,4574,8,414,1,415,1,415,3,415,
		4578,8,415,1,416,1,416,3,416,4582,8,416,1,417,1,417,3,417,4586,8,417,1,
		418,1,418,3,418,4590,8,418,1,419,1,419,3,419,4594,8,419,1,420,1,420,3,
		420,4598,8,420,1,421,1,421,3,421,4602,8,421,1,422,1,422,3,422,4606,8,422,
		1,423,1,423,3,423,4610,8,423,1,424,1,424,3,424,4614,8,424,1,425,1,425,
		1,425,3,425,4619,8,425,1,426,1,426,1,426,3,426,4624,8,426,1,427,1,427,
		1,427,3,427,4629,8,427,1,427,1,427,3,427,4633,8,427,1,428,1,428,3,428,
		4637,8,428,1,429,1,429,1,429,3,429,4642,8,429,1,430,3,430,4645,8,430,1,
		430,1,430,1,431,1,431,3,431,4651,8,431,1,432,3,432,4654,8,432,1,432,1,
		432,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,3,433,4666,8,433,1,
		434,1,434,1,435,1,435,1,436,1,436,1,437,1,437,1,438,1,438,1,439,1,439,
		1,440,1,440,1,441,1,441,1,442,1,442,1,443,1,443,1,444,1,444,1,445,1,445,
		1,446,1,446,1,446,0,0,447,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
		230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
		266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
		302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
		338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
		374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
		410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
		446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
		482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
		518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,
		554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,
		590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,
		626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,
		662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
		698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,
		734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,
		770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,
		806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,
		842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,
		878,880,882,884,886,888,890,892,0,41,2,0,52,52,284,284,6,0,144,144,155,
		155,181,181,187,187,240,240,260,260,1,0,5,8,1,0,16,17,1,0,19,21,2,0,16,
		18,199,199,2,0,114,114,120,120,4,0,120,120,132,132,301,301,308,308,2,0,
		80,80,305,305,2,0,50,50,102,102,2,0,24,24,205,205,2,0,42,42,109,109,2,
		0,164,164,269,269,3,0,105,105,183,183,211,211,2,0,64,64,286,286,2,0,209,
		209,271,271,2,0,53,53,285,285,3,0,191,192,194,194,268,268,2,0,40,40,111,
		111,2,0,147,147,313,313,2,0,201,201,327,327,2,0,185,185,198,198,2,0,56,
		56,288,288,2,0,119,119,310,310,3,0,43,43,103,103,243,243,3,0,56,56,263,
		263,288,288,2,0,142,142,312,312,3,0,106,106,235,235,287,287,2,0,39,39,
		281,281,2,0,77,77,267,267,3,0,149,149,237,237,264,264,2,0,138,138,229,
		229,1,0,328,329,20,0,52,52,65,66,70,71,88,88,90,92,115,115,127,127,141,
		142,152,152,174,176,199,199,201,201,233,233,238,238,255,256,262,262,270,
		270,284,284,304,304,320,321,3,0,47,47,119,119,279,279,11,0,42,42,49,49,
		51,51,109,109,123,123,151,151,169,169,182,182,306,306,322,322,324,324,
		56,0,38,41,43,46,48,48,50,50,53,57,59,64,67,67,69,69,72,74,78,78,80,86,
		89,89,93,99,101,104,106,108,111,114,116,117,120,122,124,124,126,126,128,
		131,133,136,138,140,143,148,150,150,153,165,167,168,170,171,178,178,180,
		181,184,194,196,198,202,206,208,210,212,214,217,229,231,232,234,236,239,
		244,246,248,250,253,257,258,260,261,263,263,266,266,268,269,273,278,281,
		283,285,290,292,300,303,303,305,305,307,313,315,316,319,319,325,326,49,
		0,38,41,43,46,48,48,50,50,53,57,59,64,67,67,69,69,72,75,78,78,80,87,89,
		89,93,104,106,108,110,114,116,117,120,122,124,126,128,131,133,136,138,
		140,143,148,150,150,153,168,170,173,177,181,184,198,200,200,202,210,212,
		232,234,236,239,244,246,248,250,254,257,261,263,263,265,266,268,269,271,
		271,273,278,281,283,285,290,292,300,303,303,305,305,307,316,318,319,323,
		323,325,326,12,0,68,68,105,105,118,118,137,137,183,183,211,211,249,249,
		272,272,280,280,291,291,302,302,317,317,2,0,132,132,301,301,1,0,330,331,
		5017,0,899,1,0,0,0,2,904,1,0,0,0,4,930,1,0,0,0,6,938,1,0,0,0,8,962,1,0,
		0,0,10,969,1,0,0,0,12,1035,1,0,0,0,14,1046,1,0,0,0,16,1048,1,0,0,0,18,
		1056,1,0,0,0,20,1064,1,0,0,0,22,1068,1,0,0,0,24,1126,1,0,0,0,26,1128,1,
		0,0,0,28,1130,1,0,0,0,30,1138,1,0,0,0,32,1141,1,0,0,0,34,1145,1,0,0,0,
		36,1148,1,0,0,0,38,1174,1,0,0,0,40,1182,1,0,0,0,42,1190,1,0,0,0,44,1202,
		1,0,0,0,46,1204,1,0,0,0,48,1218,1,0,0,0,50,1227,1,0,0,0,52,1233,1,0,0,
		0,54,1239,1,0,0,0,56,1243,1,0,0,0,58,1245,1,0,0,0,60,1254,1,0,0,0,62,1270,
		1,0,0,0,64,1279,1,0,0,0,66,1292,1,0,0,0,68,1318,1,0,0,0,70,1340,1,0,0,
		0,72,1342,1,0,0,0,74,1349,1,0,0,0,76,1356,1,0,0,0,78,1364,1,0,0,0,80,1379,
		1,0,0,0,82,1393,1,0,0,0,84,1398,1,0,0,0,86,1400,1,0,0,0,88,1404,1,0,0,
		0,90,1406,1,0,0,0,92,1410,1,0,0,0,94,1418,1,0,0,0,96,1429,1,0,0,0,98,1431,
		1,0,0,0,100,1449,1,0,0,0,102,1453,1,0,0,0,104,1472,1,0,0,0,106,1480,1,
		0,0,0,108,1482,1,0,0,0,110,1504,1,0,0,0,112,1513,1,0,0,0,114,1521,1,0,
		0,0,116,1534,1,0,0,0,118,1536,1,0,0,0,120,1547,1,0,0,0,122,1555,1,0,0,
		0,124,1557,1,0,0,0,126,1568,1,0,0,0,128,1579,1,0,0,0,130,1584,1,0,0,0,
		132,1592,1,0,0,0,134,1606,1,0,0,0,136,1620,1,0,0,0,138,1624,1,0,0,0,140,
		1628,1,0,0,0,142,1643,1,0,0,0,144,1645,1,0,0,0,146,1651,1,0,0,0,148,1655,
		1,0,0,0,150,1663,1,0,0,0,152,1668,1,0,0,0,154,1677,1,0,0,0,156,1683,1,
		0,0,0,158,1687,1,0,0,0,160,1692,1,0,0,0,162,1694,1,0,0,0,164,1710,1,0,
		0,0,166,1715,1,0,0,0,168,1719,1,0,0,0,170,1725,1,0,0,0,172,1733,1,0,0,
		0,174,1740,1,0,0,0,176,1745,1,0,0,0,178,1764,1,0,0,0,180,1783,1,0,0,0,
		182,1798,1,0,0,0,184,1803,1,0,0,0,186,1808,1,0,0,0,188,1813,1,0,0,0,190,
		1820,1,0,0,0,192,1825,1,0,0,0,194,1840,1,0,0,0,196,1845,1,0,0,0,198,1852,
		1,0,0,0,200,1885,1,0,0,0,202,1904,1,0,0,0,204,1908,1,0,0,0,206,1910,1,
		0,0,0,208,1935,1,0,0,0,210,1937,1,0,0,0,212,1946,1,0,0,0,214,1956,1,0,
		0,0,216,1961,1,0,0,0,218,1966,1,0,0,0,220,1974,1,0,0,0,222,1979,1,0,0,
		0,224,1984,1,0,0,0,226,2007,1,0,0,0,228,2009,1,0,0,0,230,2013,1,0,0,0,
		232,2021,1,0,0,0,234,2030,1,0,0,0,236,2044,1,0,0,0,238,2052,1,0,0,0,240,
		2054,1,0,0,0,242,2064,1,0,0,0,244,2076,1,0,0,0,246,2112,1,0,0,0,248,2116,
		1,0,0,0,250,2124,1,0,0,0,252,2161,1,0,0,0,254,2165,1,0,0,0,256,2212,1,
		0,0,0,258,2240,1,0,0,0,260,2251,1,0,0,0,262,2253,1,0,0,0,264,2256,1,0,
		0,0,266,2264,1,0,0,0,268,2271,1,0,0,0,270,2305,1,0,0,0,272,2307,1,0,0,
		0,274,2309,1,0,0,0,276,2311,1,0,0,0,278,2320,1,0,0,0,280,2324,1,0,0,0,
		282,2356,1,0,0,0,284,2373,1,0,0,0,286,2375,1,0,0,0,288,2377,1,0,0,0,290,
		2389,1,0,0,0,292,2392,1,0,0,0,294,2400,1,0,0,0,296,2406,1,0,0,0,298,2408,
		1,0,0,0,300,2416,1,0,0,0,302,2418,1,0,0,0,304,2426,1,0,0,0,306,2430,1,
		0,0,0,308,2432,1,0,0,0,310,2434,1,0,0,0,312,2436,1,0,0,0,314,2438,1,0,
		0,0,316,2443,1,0,0,0,318,2447,1,0,0,0,320,2458,1,0,0,0,322,2471,1,0,0,
		0,324,2473,1,0,0,0,326,2475,1,0,0,0,328,2483,1,0,0,0,330,2488,1,0,0,0,
		332,2493,1,0,0,0,334,2499,1,0,0,0,336,2519,1,0,0,0,338,2522,1,0,0,0,340,
		2538,1,0,0,0,342,2551,1,0,0,0,344,2553,1,0,0,0,346,2565,1,0,0,0,348,2592,
		1,0,0,0,350,2594,1,0,0,0,352,2597,1,0,0,0,354,2605,1,0,0,0,356,2607,1,
		0,0,0,358,2636,1,0,0,0,360,2642,1,0,0,0,362,2644,1,0,0,0,364,2668,1,0,
		0,0,366,2682,1,0,0,0,368,2684,1,0,0,0,370,2689,1,0,0,0,372,2691,1,0,0,
		0,374,2699,1,0,0,0,376,2705,1,0,0,0,378,2707,1,0,0,0,380,2723,1,0,0,0,
		382,2739,1,0,0,0,384,2741,1,0,0,0,386,2751,1,0,0,0,388,2765,1,0,0,0,390,
		2773,1,0,0,0,392,2783,1,0,0,0,394,2798,1,0,0,0,396,2801,1,0,0,0,398,2810,
		1,0,0,0,400,2813,1,0,0,0,402,2827,1,0,0,0,404,2834,1,0,0,0,406,2836,1,
		0,0,0,408,2840,1,0,0,0,410,2844,1,0,0,0,412,2858,1,0,0,0,414,2860,1,0,
		0,0,416,2862,1,0,0,0,418,2917,1,0,0,0,420,2919,1,0,0,0,422,2929,1,0,0,
		0,424,2935,1,0,0,0,426,2940,1,0,0,0,428,2942,1,0,0,0,430,2946,1,0,0,0,
		432,2956,1,0,0,0,434,2966,1,0,0,0,436,2968,1,0,0,0,438,2986,1,0,0,0,440,
		2988,1,0,0,0,442,2992,1,0,0,0,444,3000,1,0,0,0,446,3004,1,0,0,0,448,3009,
		1,0,0,0,450,3015,1,0,0,0,452,3022,1,0,0,0,454,3034,1,0,0,0,456,3039,1,
		0,0,0,458,3051,1,0,0,0,460,3054,1,0,0,0,462,3058,1,0,0,0,464,3061,1,0,
		0,0,466,3089,1,0,0,0,468,3091,1,0,0,0,470,3108,1,0,0,0,472,3110,1,0,0,
		0,474,3123,1,0,0,0,476,3125,1,0,0,0,478,3131,1,0,0,0,480,3137,1,0,0,0,
		482,3143,1,0,0,0,484,3150,1,0,0,0,486,3153,1,0,0,0,488,3160,1,0,0,0,490,
		3164,1,0,0,0,492,3176,1,0,0,0,494,3188,1,0,0,0,496,3191,1,0,0,0,498,3195,
		1,0,0,0,500,3199,1,0,0,0,502,3205,1,0,0,0,504,3208,1,0,0,0,506,3213,1,
		0,0,0,508,3217,1,0,0,0,510,3222,1,0,0,0,512,3229,1,0,0,0,514,3236,1,0,
		0,0,516,3242,1,0,0,0,518,3285,1,0,0,0,520,3287,1,0,0,0,522,3320,1,0,0,
		0,524,3326,1,0,0,0,526,3333,1,0,0,0,528,3335,1,0,0,0,530,3337,1,0,0,0,
		532,3352,1,0,0,0,534,3360,1,0,0,0,536,3362,1,0,0,0,538,3369,1,0,0,0,540,
		3377,1,0,0,0,542,3381,1,0,0,0,544,3389,1,0,0,0,546,3391,1,0,0,0,548,3407,
		1,0,0,0,550,3409,1,0,0,0,552,3428,1,0,0,0,554,3430,1,0,0,0,556,3434,1,
		0,0,0,558,3447,1,0,0,0,560,3453,1,0,0,0,562,3467,1,0,0,0,564,3469,1,0,
		0,0,566,3483,1,0,0,0,568,3485,1,0,0,0,570,3498,1,0,0,0,572,3507,1,0,0,
		0,574,3523,1,0,0,0,576,3541,1,0,0,0,578,3562,1,0,0,0,580,3581,1,0,0,0,
		582,3585,1,0,0,0,584,3589,1,0,0,0,586,3592,1,0,0,0,588,3597,1,0,0,0,590,
		3599,1,0,0,0,592,3602,1,0,0,0,594,3604,1,0,0,0,596,3632,1,0,0,0,598,3681,
		1,0,0,0,600,3685,1,0,0,0,602,3702,1,0,0,0,604,3704,1,0,0,0,606,3710,1,
		0,0,0,608,3724,1,0,0,0,610,3726,1,0,0,0,612,3731,1,0,0,0,614,3738,1,0,
		0,0,616,3753,1,0,0,0,618,3755,1,0,0,0,620,3761,1,0,0,0,622,3779,1,0,0,
		0,624,3783,1,0,0,0,626,3791,1,0,0,0,628,3795,1,0,0,0,630,3807,1,0,0,0,
		632,3809,1,0,0,0,634,3814,1,0,0,0,636,3823,1,0,0,0,638,3825,1,0,0,0,640,
		3841,1,0,0,0,642,3849,1,0,0,0,644,3853,1,0,0,0,646,3866,1,0,0,0,648,3868,
		1,0,0,0,650,3873,1,0,0,0,652,3877,1,0,0,0,654,3883,1,0,0,0,656,3891,1,
		0,0,0,658,3907,1,0,0,0,660,3931,1,0,0,0,662,3941,1,0,0,0,664,3958,1,0,
		0,0,666,3998,1,0,0,0,668,4004,1,0,0,0,670,4011,1,0,0,0,672,4071,1,0,0,
		0,674,4076,1,0,0,0,676,4085,1,0,0,0,678,4087,1,0,0,0,680,4091,1,0,0,0,
		682,4098,1,0,0,0,684,4113,1,0,0,0,686,4132,1,0,0,0,688,4134,1,0,0,0,690,
		4142,1,0,0,0,692,4146,1,0,0,0,694,4148,1,0,0,0,696,4154,1,0,0,0,698,4165,
		1,0,0,0,700,4179,1,0,0,0,702,4190,1,0,0,0,704,4192,1,0,0,0,706,4197,1,
		0,0,0,708,4217,1,0,0,0,710,4219,1,0,0,0,712,4222,1,0,0,0,714,4227,1,0,
		0,0,716,4234,1,0,0,0,718,4236,1,0,0,0,720,4240,1,0,0,0,722,4245,1,0,0,
		0,724,4257,1,0,0,0,726,4262,1,0,0,0,728,4274,1,0,0,0,730,4282,1,0,0,0,
		732,4290,1,0,0,0,734,4294,1,0,0,0,736,4296,1,0,0,0,738,4301,1,0,0,0,740,
		4309,1,0,0,0,742,4313,1,0,0,0,744,4318,1,0,0,0,746,4322,1,0,0,0,748,4328,
		1,0,0,0,750,4330,1,0,0,0,752,4338,1,0,0,0,754,4340,1,0,0,0,756,4342,1,
		0,0,0,758,4345,1,0,0,0,760,4353,1,0,0,0,762,4357,1,0,0,0,764,4359,1,0,
		0,0,766,4364,1,0,0,0,768,4375,1,0,0,0,770,4377,1,0,0,0,772,4384,1,0,0,
		0,774,4386,1,0,0,0,776,4391,1,0,0,0,778,4395,1,0,0,0,780,4397,1,0,0,0,
		782,4409,1,0,0,0,784,4421,1,0,0,0,786,4423,1,0,0,0,788,4431,1,0,0,0,790,
		4433,1,0,0,0,792,4439,1,0,0,0,794,4441,1,0,0,0,796,4443,1,0,0,0,798,4450,
		1,0,0,0,800,4461,1,0,0,0,802,4464,1,0,0,0,804,4492,1,0,0,0,806,4494,1,
		0,0,0,808,4499,1,0,0,0,810,4503,1,0,0,0,812,4512,1,0,0,0,814,4520,1,0,
		0,0,816,4527,1,0,0,0,818,4537,1,0,0,0,820,4546,1,0,0,0,822,4555,1,0,0,
		0,824,4565,1,0,0,0,826,4569,1,0,0,0,828,4573,1,0,0,0,830,4577,1,0,0,0,
		832,4581,1,0,0,0,834,4585,1,0,0,0,836,4589,1,0,0,0,838,4593,1,0,0,0,840,
		4597,1,0,0,0,842,4601,1,0,0,0,844,4605,1,0,0,0,846,4609,1,0,0,0,848,4613,
		1,0,0,0,850,4618,1,0,0,0,852,4623,1,0,0,0,854,4628,1,0,0,0,856,4636,1,
		0,0,0,858,4641,1,0,0,0,860,4644,1,0,0,0,862,4650,1,0,0,0,864,4653,1,0,
		0,0,866,4665,1,0,0,0,868,4667,1,0,0,0,870,4669,1,0,0,0,872,4671,1,0,0,
		0,874,4673,1,0,0,0,876,4675,1,0,0,0,878,4677,1,0,0,0,880,4679,1,0,0,0,
		882,4681,1,0,0,0,884,4683,1,0,0,0,886,4685,1,0,0,0,888,4687,1,0,0,0,890,
		4689,1,0,0,0,892,4691,1,0,0,0,894,900,3,2,1,0,895,896,5,228,0,0,896,897,
		5,46,0,0,897,898,5,330,0,0,898,900,3,4,2,0,899,894,1,0,0,0,899,895,1,0,
		0,0,900,1,1,0,0,0,901,903,5,22,0,0,902,901,1,0,0,0,903,906,1,0,0,0,904,
		902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,1,0,0,0,907,916,3,
		10,5,0,908,910,5,22,0,0,909,908,1,0,0,0,910,911,1,0,0,0,911,909,1,0,0,
		0,911,912,1,0,0,0,912,913,1,0,0,0,913,915,3,10,5,0,914,909,1,0,0,0,915,
		918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,922,1,0,0,0,918,916,1,
		0,0,0,919,921,5,22,0,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,
		922,923,1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,926,5,0,0,1,926,3,
		1,0,0,0,927,929,5,22,0,0,928,927,1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,
		0,930,931,1,0,0,0,931,933,1,0,0,0,932,930,1,0,0,0,933,934,5,0,0,1,934,
		5,1,0,0,0,935,937,5,22,0,0,936,935,1,0,0,0,937,940,1,0,0,0,938,936,1,0,
		0,0,938,939,1,0,0,0,939,949,1,0,0,0,940,938,1,0,0,0,941,943,3,8,4,0,942,
		944,5,22,0,0,943,942,1,0,0,0,944,945,1,0,0,0,945,943,1,0,0,0,945,946,1,
		0,0,0,946,948,1,0,0,0,947,941,1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,
		949,950,1,0,0,0,950,952,1,0,0,0,951,949,1,0,0,0,952,953,5,255,0,0,953,
		957,3,14,7,0,954,956,5,22,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,
		1,0,0,0,957,958,1,0,0,0,958,7,1,0,0,0,959,957,1,0,0,0,960,963,3,790,395,
		0,961,963,3,214,107,0,962,960,1,0,0,0,962,961,1,0,0,0,963,9,1,0,0,0,964,
		967,5,128,0,0,965,966,5,234,0,0,966,968,5,226,0,0,967,965,1,0,0,0,967,
		968,1,0,0,0,968,970,1,0,0,0,969,964,1,0,0,0,969,970,1,0,0,0,970,971,1,
		0,0,0,971,972,3,12,6,0,972,11,1,0,0,0,973,1036,3,224,112,0,974,1036,3,
		232,116,0,975,1036,3,790,395,0,976,1036,3,416,208,0,977,1036,3,568,284,
		0,978,1036,3,786,393,0,979,1036,3,364,182,0,980,1036,3,792,396,0,981,1036,
		3,684,342,0,982,1036,3,682,341,0,983,1036,3,794,397,0,984,1036,3,210,105,
		0,985,1036,3,214,107,0,986,1036,3,216,108,0,987,1036,3,464,232,0,988,1036,
		3,468,234,0,989,1036,3,222,111,0,990,1036,3,656,328,0,991,1036,3,660,330,
		0,992,1036,3,662,331,0,993,1036,3,368,184,0,994,1036,3,570,285,0,995,1036,
		3,572,286,0,996,1036,3,574,287,0,997,1036,3,576,288,0,998,1036,3,578,289,
		0,999,1036,3,392,196,0,1000,1036,3,396,198,0,1001,1036,3,400,200,0,1002,
		1036,3,378,189,0,1003,1036,3,380,190,0,1004,1036,3,384,192,0,1005,1036,
		3,620,310,0,1006,1036,3,634,317,0,1007,1036,3,698,349,0,1008,1036,3,706,
		353,0,1009,1036,3,728,364,0,1010,1036,3,594,297,0,1011,1036,3,596,298,
		0,1012,1036,3,472,236,0,1013,1036,3,390,195,0,1014,1036,3,386,193,0,1015,
		1036,3,388,194,0,1016,1036,3,628,314,0,1017,1036,3,604,302,0,1018,1036,
		3,606,303,0,1019,1036,3,610,305,0,1020,1036,3,420,210,0,1021,1036,3,422,
		211,0,1022,1036,3,424,212,0,1023,1036,3,800,400,0,1024,1036,3,612,306,
		0,1025,1036,3,614,307,0,1026,1036,3,618,309,0,1027,1036,3,446,223,0,1028,
		1036,3,448,224,0,1029,1036,3,802,401,0,1030,1036,3,638,319,0,1031,1036,
		3,644,322,0,1032,1036,3,652,326,0,1033,1036,3,450,225,0,1034,1036,3,806,
		403,0,1035,973,1,0,0,0,1035,974,1,0,0,0,1035,975,1,0,0,0,1035,976,1,0,
		0,0,1035,977,1,0,0,0,1035,978,1,0,0,0,1035,979,1,0,0,0,1035,980,1,0,0,
		0,1035,981,1,0,0,0,1035,982,1,0,0,0,1035,983,1,0,0,0,1035,984,1,0,0,0,
		1035,985,1,0,0,0,1035,986,1,0,0,0,1035,987,1,0,0,0,1035,988,1,0,0,0,1035,
		989,1,0,0,0,1035,990,1,0,0,0,1035,991,1,0,0,0,1035,992,1,0,0,0,1035,993,
		1,0,0,0,1035,994,1,0,0,0,1035,995,1,0,0,0,1035,996,1,0,0,0,1035,997,1,
		0,0,0,1035,998,1,0,0,0,1035,999,1,0,0,0,1035,1000,1,0,0,0,1035,1001,1,
		0,0,0,1035,1002,1,0,0,0,1035,1003,1,0,0,0,1035,1004,1,0,0,0,1035,1005,
		1,0,0,0,1035,1006,1,0,0,0,1035,1007,1,0,0,0,1035,1008,1,0,0,0,1035,1009,
		1,0,0,0,1035,1010,1,0,0,0,1035,1011,1,0,0,0,1035,1012,1,0,0,0,1035,1013,
		1,0,0,0,1035,1014,1,0,0,0,1035,1015,1,0,0,0,1035,1016,1,0,0,0,1035,1017,
		1,0,0,0,1035,1018,1,0,0,0,1035,1019,1,0,0,0,1035,1020,1,0,0,0,1035,1021,
		1,0,0,0,1035,1022,1,0,0,0,1035,1023,1,0,0,0,1035,1024,1,0,0,0,1035,1025,
		1,0,0,0,1035,1026,1,0,0,0,1035,1027,1,0,0,0,1035,1028,1,0,0,0,1035,1029,
		1,0,0,0,1035,1030,1,0,0,0,1035,1031,1,0,0,0,1035,1032,1,0,0,0,1035,1033,
		1,0,0,0,1035,1034,1,0,0,0,1036,13,1,0,0,0,1037,1042,3,16,8,0,1038,1039,
		5,212,0,0,1039,1041,3,16,8,0,1040,1038,1,0,0,0,1041,1044,1,0,0,0,1042,
		1040,1,0,0,0,1042,1043,1,0,0,0,1043,1047,1,0,0,0,1044,1042,1,0,0,0,1045,
		1047,3,200,100,0,1046,1037,1,0,0,0,1046,1045,1,0,0,0,1047,15,1,0,0,0,1048,
		1053,3,18,9,0,1049,1050,5,45,0,0,1050,1052,3,18,9,0,1051,1049,1,0,0,0,
		1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,17,1,0,0,0,
		1055,1053,1,0,0,0,1056,1061,3,20,10,0,1057,1058,5,326,0,0,1058,1060,3,
		20,10,0,1059,1057,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,
		1,0,0,0,1062,19,1,0,0,0,1063,1061,1,0,0,0,1064,1066,3,28,14,0,1065,1067,
		3,24,12,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,21,1,0,0,0,1068,1070,
		5,171,0,0,1069,1071,5,199,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
		1072,1,0,0,0,1072,1073,5,109,0,0,1073,1074,5,141,0,0,1074,23,1,0,0,0,1075,
		1077,5,199,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,
		1079,3,26,13,0,1079,1082,3,28,14,0,1080,1081,5,121,0,0,1081,1083,3,28,
		14,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1127,1,0,0,0,1084,1086,5,
		199,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,
		5,158,0,0,1088,1090,5,79,0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,
		1091,1,0,0,0,1091,1127,3,82,41,0,1092,1102,5,172,0,0,1093,1102,5,200,0,
		0,1094,1095,5,171,0,0,1095,1102,5,201,0,0,1096,1098,5,171,0,0,1097,1096,
		1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,199,0,0,1100,1102,
		5,201,0,0,1101,1092,1,0,0,0,1101,1093,1,0,0,0,1101,1094,1,0,0,0,1101,1097,
		1,0,0,0,1102,1127,1,0,0,0,1103,1105,5,199,0,0,1104,1103,1,0,0,0,1104,1105,
		1,0,0,0,1105,1106,1,0,0,0,1106,1108,5,65,0,0,1107,1109,7,0,0,0,1108,1107,
		1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,1111,3,28,14,0,1111,1112,
		5,45,0,0,1112,1113,3,28,14,0,1113,1127,1,0,0,0,1114,1120,5,1,0,0,1115,
		1120,5,2,0,0,1116,1120,5,3,0,0,1117,1120,5,4,0,0,1118,1120,3,22,11,0,1119,
		1114,1,0,0,0,1119,1115,1,0,0,0,1119,1116,1,0,0,0,1119,1117,1,0,0,0,1119,
		1118,1,0,0,0,1120,1121,1,0,0,0,1121,1123,3,28,14,0,1122,1119,1,0,0,0,1123,
		1124,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1127,1,0,0,0,1126,
		1076,1,0,0,0,1126,1085,1,0,0,0,1126,1101,1,0,0,0,1126,1104,1,0,0,0,1126,
		1122,1,0,0,0,1127,25,1,0,0,0,1128,1129,7,1,0,0,1129,27,1,0,0,0,1130,1135,
		3,36,18,0,1131,1132,7,2,0,0,1132,1134,3,36,18,0,1133,1131,1,0,0,0,1134,
		1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,29,1,0,0,0,1137,
		1135,1,0,0,0,1138,1139,5,7,0,0,1139,1140,5,7,0,0,1140,31,1,0,0,0,1141,
		1142,5,7,0,0,1142,1143,5,7,0,0,1143,1144,5,12,0,0,1144,33,1,0,0,0,1145,
		1146,5,27,0,0,1146,1147,5,27,0,0,1147,35,1,0,0,0,1148,1161,3,38,19,0,1149,
		1157,5,9,0,0,1150,1157,3,30,15,0,1151,1157,5,10,0,0,1152,1157,3,32,16,
		0,1153,1157,5,11,0,0,1154,1157,5,12,0,0,1155,1157,5,33,0,0,1156,1149,1,
		0,0,0,1156,1150,1,0,0,0,1156,1151,1,0,0,0,1156,1152,1,0,0,0,1156,1153,
		1,0,0,0,1156,1154,1,0,0,0,1156,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1160,
		3,38,19,0,1159,1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,
		1,0,0,0,1162,1172,1,0,0,0,1163,1161,1,0,0,0,1164,1165,3,34,17,0,1165,1166,
		3,36,18,0,1166,1173,1,0,0,0,1167,1169,5,27,0,0,1168,1167,1,0,0,0,1169,
		1170,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,1173,1,0,0,0,1172,
		1164,1,0,0,0,1172,1168,1,0,0,0,1172,1173,1,0,0,0,1173,37,1,0,0,0,1174,
		1179,3,40,20,0,1175,1176,7,3,0,0,1176,1178,3,40,20,0,1177,1175,1,0,0,0,
		1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,39,1,0,0,0,
		1181,1179,1,0,0,0,1182,1187,3,42,21,0,1183,1184,7,4,0,0,1184,1186,3,42,
		21,0,1185,1183,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,
		0,0,0,1188,41,1,0,0,0,1189,1187,1,0,0,0,1190,1195,3,44,22,0,1191,1192,
		5,13,0,0,1192,1194,3,44,22,0,1193,1191,1,0,0,0,1194,1197,1,0,0,0,1195,
		1193,1,0,0,0,1195,1196,1,0,0,0,1196,43,1,0,0,0,1197,1195,1,0,0,0,1198,
		1203,3,54,27,0,1199,1200,3,46,23,0,1200,1201,3,54,27,0,1201,1203,1,0,0,
		0,1202,1198,1,0,0,0,1202,1199,1,0,0,0,1203,45,1,0,0,0,1204,1205,7,5,0,
		0,1205,47,1,0,0,0,1206,1215,3,138,69,0,1207,1215,3,132,66,0,1208,1212,
		5,23,0,0,1209,1213,3,144,72,0,1210,1213,5,330,0,0,1211,1213,3,830,415,
		0,1212,1209,1,0,0,0,1212,1210,1,0,0,0,1212,1211,1,0,0,0,1213,1215,1,0,
		0,0,1214,1206,1,0,0,0,1214,1207,1,0,0,0,1214,1208,1,0,0,0,1215,1217,1,
		0,0,0,1216,1214,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,
		1,0,0,0,1219,1223,1,0,0,0,1220,1218,1,0,0,0,1221,1222,5,75,0,0,1222,1224,
		3,828,414,0,1223,1221,1,0,0,0,1223,1224,1,0,0,0,1224,49,1,0,0,0,1225,1228,
		3,814,407,0,1226,1228,3,68,34,0,1227,1225,1,0,0,0,1227,1226,1,0,0,0,1228,
		1229,1,0,0,0,1229,1230,3,48,24,0,1230,51,1,0,0,0,1231,1234,3,816,408,0,
		1232,1234,3,70,35,0,1233,1231,1,0,0,0,1233,1232,1,0,0,0,1234,1235,1,0,
		0,0,1235,1236,3,48,24,0,1236,53,1,0,0,0,1237,1240,3,50,25,0,1238,1240,
		3,84,42,0,1239,1237,1,0,0,0,1239,1238,1,0,0,0,1240,55,1,0,0,0,1241,1244,
		3,52,26,0,1242,1244,3,84,42,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,
		57,1,0,0,0,1245,1247,5,37,0,0,1246,1248,3,112,56,0,1247,1246,1,0,0,0,1247,
		1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,5,24,0,0,1250,1249,1,0,0,0,1250,
		1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,5,36,0,0,1253,59,1,0,0,0,1254,
		1257,3,14,7,0,1255,1256,5,28,0,0,1256,1258,3,14,7,0,1257,1255,1,0,0,0,
		1257,1258,1,0,0,0,1258,1267,1,0,0,0,1259,1260,5,24,0,0,1260,1263,3,14,
		7,0,1261,1262,5,28,0,0,1262,1264,3,14,7,0,1263,1261,1,0,0,0,1263,1264,
		1,0,0,0,1264,1266,1,0,0,0,1265,1259,1,0,0,0,1266,1269,1,0,0,0,1267,1265,
		1,0,0,0,1267,1268,1,0,0,0,1268,61,1,0,0,0,1269,1267,1,0,0,0,1270,1272,
		5,31,0,0,1271,1273,3,60,30,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,
		1275,1,0,0,0,1274,1276,5,24,0,0,1275,1274,1,0,0,0,1275,1276,1,0,0,0,1276,
		1277,1,0,0,0,1277,1278,5,32,0,0,1278,63,1,0,0,0,1279,1280,3,14,7,0,1280,
		1281,5,28,0,0,1281,1289,3,14,7,0,1282,1283,5,24,0,0,1283,1284,3,14,7,0,
		1284,1285,5,28,0,0,1285,1286,3,14,7,0,1286,1288,1,0,0,0,1287,1282,1,0,
		0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,65,1,0,
		0,0,1291,1289,1,0,0,0,1292,1294,5,14,0,0,1293,1295,3,64,32,0,1294,1293,
		1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,5,24,0,0,1297,1296,
		1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1300,5,15,0,0,1300,67,
		1,0,0,0,1301,1319,3,142,71,0,1302,1319,3,144,72,0,1303,1319,3,80,40,0,
		1304,1319,3,72,36,0,1305,1319,3,76,38,0,1306,1319,3,78,39,0,1307,1308,
		3,830,415,0,1308,1311,5,34,0,0,1309,1312,3,856,428,0,1310,1312,5,327,0,
		0,1311,1309,1,0,0,0,1311,1310,1,0,0,0,1312,1319,1,0,0,0,1313,1319,3,208,
		104,0,1314,1319,3,74,37,0,1315,1319,3,58,29,0,1316,1319,3,62,31,0,1317,
		1319,3,66,33,0,1318,1301,1,0,0,0,1318,1302,1,0,0,0,1318,1303,1,0,0,0,1318,
		1304,1,0,0,0,1318,1305,1,0,0,0,1318,1306,1,0,0,0,1318,1307,1,0,0,0,1318,
		1313,1,0,0,0,1318,1314,1,0,0,0,1318,1315,1,0,0,0,1318,1316,1,0,0,0,1318,
		1317,1,0,0,0,1319,69,1,0,0,0,1320,1341,3,142,71,0,1321,1341,3,144,72,0,
		1322,1341,3,80,40,0,1323,1341,3,72,36,0,1324,1341,3,78,39,0,1325,1326,
		3,830,415,0,1326,1329,5,34,0,0,1327,1330,3,856,428,0,1328,1330,5,327,0,
		0,1329,1327,1,0,0,0,1329,1328,1,0,0,0,1330,1341,1,0,0,0,1331,1332,5,25,
		0,0,1332,1333,3,232,116,0,1333,1334,5,26,0,0,1334,1341,1,0,0,0,1335,1341,
		3,208,104,0,1336,1341,3,74,37,0,1337,1341,3,58,29,0,1338,1341,3,62,31,
		0,1339,1341,3,66,33,0,1340,1320,1,0,0,0,1340,1321,1,0,0,0,1340,1322,1,
		0,0,0,1340,1323,1,0,0,0,1340,1324,1,0,0,0,1340,1325,1,0,0,0,1340,1331,
		1,0,0,0,1340,1335,1,0,0,0,1340,1336,1,0,0,0,1340,1337,1,0,0,0,1340,1338,
		1,0,0,0,1340,1339,1,0,0,0,1341,71,1,0,0,0,1342,1343,5,71,0,0,1343,1344,
		5,25,0,0,1344,1345,3,14,7,0,1345,1346,5,49,0,0,1346,1347,3,204,102,0,1347,
		1348,5,26,0,0,1348,73,1,0,0,0,1349,1350,5,66,0,0,1350,1351,5,25,0,0,1351,
		1352,3,14,7,0,1352,1353,5,49,0,0,1353,1354,3,156,78,0,1354,1355,5,26,0,
		0,1355,75,1,0,0,0,1356,1357,5,127,0,0,1357,1360,5,25,0,0,1358,1361,3,232,
		116,0,1359,1361,3,368,184,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,1362,
		1,0,0,0,1362,1363,5,26,0,0,1363,77,1,0,0,0,1364,1366,5,70,0,0,1365,1367,
		3,14,7,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1369,1,0,0,0,1368,1370,
		3,140,70,0,1369,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1369,1,0,0,0,1371,
		1372,1,0,0,0,1372,1375,1,0,0,0,1373,1374,5,113,0,0,1374,1376,3,14,7,0,
		1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1378,5,117,
		0,0,1378,79,1,0,0,0,1379,1391,3,110,55,0,1380,1389,5,35,0,0,1381,1382,
		5,25,0,0,1382,1383,3,14,7,0,1383,1384,5,26,0,0,1384,1390,1,0,0,0,1385,
		1386,5,31,0,0,1386,1387,3,6,3,0,1387,1388,5,32,0,0,1388,1390,1,0,0,0,1389,
		1381,1,0,0,0,1389,1385,1,0,0,0,1390,1392,1,0,0,0,1391,1380,1,0,0,0,1391,
		1392,1,0,0,0,1392,81,1,0,0,0,1393,1394,3,56,28,0,1394,83,1,0,0,0,1395,
		1399,3,98,49,0,1396,1399,3,102,51,0,1397,1399,3,108,54,0,1398,1395,1,0,
		0,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,85,1,0,0,0,1400,1401,5,327,
		0,0,1401,87,1,0,0,0,1402,1405,3,814,407,0,1403,1405,5,327,0,0,1404,1402,
		1,0,0,0,1404,1403,1,0,0,0,1405,89,1,0,0,0,1406,1407,3,14,7,0,1407,1408,
		5,49,0,0,1408,1409,3,88,44,0,1409,91,1,0,0,0,1410,1415,3,90,45,0,1411,
		1412,5,24,0,0,1412,1414,3,90,45,0,1413,1411,1,0,0,0,1414,1417,1,0,0,0,
		1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,93,1,0,0,0,1417,1415,1,0,0,0,
		1418,1419,3,14,7,0,1419,1420,5,24,0,0,1420,1423,3,86,43,0,1421,1422,5,
		220,0,0,1422,1424,3,92,46,0,1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,95,
		1,0,0,0,1425,1430,5,120,0,0,1426,1430,5,201,0,0,1427,1428,5,97,0,0,1428,
		1430,3,14,7,0,1429,1425,1,0,0,0,1429,1426,1,0,0,0,1429,1427,1,0,0,0,1430,
		97,1,0,0,0,1431,1432,5,176,0,0,1432,1433,5,25,0,0,1433,1436,3,94,47,0,
		1434,1435,5,256,0,0,1435,1437,3,156,78,0,1436,1434,1,0,0,0,1436,1437,1,
		0,0,0,1437,1444,1,0,0,0,1438,1439,3,96,48,0,1439,1440,5,207,0,0,1440,1441,
		7,6,0,0,1441,1443,1,0,0,0,1442,1438,1,0,0,0,1443,1446,1,0,0,0,1444,1442,
		1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,0,0,0,1446,1444,1,0,0,0,1447,1448,
		5,26,0,0,1448,99,1,0,0,0,1449,1450,7,7,0,0,1450,1451,5,207,0,0,1451,1452,
		5,120,0,0,1452,101,1,0,0,0,1453,1454,5,174,0,0,1454,1455,5,25,0,0,1455,
		1457,3,94,47,0,1456,1458,3,100,50,0,1457,1456,1,0,0,0,1457,1458,1,0,0,
		0,1458,1459,1,0,0,0,1459,1460,5,26,0,0,1460,103,1,0,0,0,1461,1463,5,324,
		0,0,1462,1464,5,48,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1473,1,
		0,0,0,1465,1467,5,323,0,0,1466,1468,7,8,0,0,1467,1466,1,0,0,0,1467,1468,
		1,0,0,0,1468,1470,1,0,0,0,1469,1471,5,48,0,0,1470,1469,1,0,0,0,1470,1471,
		1,0,0,0,1471,1473,1,0,0,0,1472,1461,1,0,0,0,1472,1465,1,0,0,0,1473,105,
		1,0,0,0,1474,1481,5,120,0,0,1475,1481,5,201,0,0,1476,1477,5,114,0,0,1477,
		1481,5,48,0,0,1478,1479,5,114,0,0,1479,1481,5,203,0,0,1480,1474,1,0,0,
		0,1480,1475,1,0,0,0,1480,1476,1,0,0,0,1480,1478,1,0,0,0,1481,107,1,0,0,
		0,1482,1483,5,175,0,0,1483,1484,5,25,0,0,1484,1488,3,94,47,0,1485,1486,
		3,104,52,0,1486,1487,5,325,0,0,1487,1489,1,0,0,0,1488,1485,1,0,0,0,1488,
		1489,1,0,0,0,1489,1494,1,0,0,0,1490,1491,3,106,53,0,1491,1492,5,207,0,
		0,1492,1493,5,114,0,0,1493,1495,1,0,0,0,1494,1490,1,0,0,0,1494,1495,1,
		0,0,0,1495,1500,1,0,0,0,1496,1497,3,106,53,0,1497,1498,5,207,0,0,1498,
		1499,5,120,0,0,1499,1501,1,0,0,0,1500,1496,1,0,0,0,1500,1501,1,0,0,0,1501,
		1502,1,0,0,0,1502,1503,5,26,0,0,1503,109,1,0,0,0,1504,1506,5,25,0,0,1505,
		1507,3,130,65,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,
		1508,1510,5,24,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,
		0,1511,1512,5,26,0,0,1512,111,1,0,0,0,1513,1518,3,14,7,0,1514,1515,5,24,
		0,0,1515,1517,3,14,7,0,1516,1514,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,
		0,0,0,1518,1519,1,0,0,0,1519,113,1,0,0,0,1520,1518,1,0,0,0,1521,1522,5,
		25,0,0,1522,1527,3,828,414,0,1523,1524,5,24,0,0,1524,1526,3,828,414,0,
		1525,1523,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,
		0,1528,1530,1,0,0,0,1529,1527,1,0,0,0,1530,1531,5,26,0,0,1531,115,1,0,
		0,0,1532,1535,3,144,72,0,1533,1535,3,828,414,0,1534,1532,1,0,0,0,1534,
		1533,1,0,0,0,1535,117,1,0,0,0,1536,1537,5,25,0,0,1537,1542,3,116,58,0,
		1538,1539,5,24,0,0,1539,1541,3,116,58,0,1540,1538,1,0,0,0,1541,1544,1,
		0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1542,
		1,0,0,0,1545,1546,5,26,0,0,1546,119,1,0,0,0,1547,1548,3,852,426,0,1548,
		1549,3,828,414,0,1549,121,1,0,0,0,1550,1551,3,828,414,0,1551,1552,5,23,
		0,0,1552,1553,3,828,414,0,1553,1556,1,0,0,0,1554,1556,3,842,421,0,1555,
		1550,1,0,0,0,1555,1554,1,0,0,0,1556,123,1,0,0,0,1557,1562,3,120,60,0,1558,
		1559,5,24,0,0,1559,1561,3,120,60,0,1560,1558,1,0,0,0,1561,1564,1,0,0,0,
		1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,
		0,1565,1567,5,24,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,125,1,0,
		0,0,1568,1573,3,122,61,0,1569,1570,5,24,0,0,1570,1572,3,122,61,0,1571,
		1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,
		1577,1,0,0,0,1575,1573,1,0,0,0,1576,1578,5,24,0,0,1577,1576,1,0,0,0,1577,
		1578,1,0,0,0,1578,127,1,0,0,0,1579,1582,3,14,7,0,1580,1581,5,49,0,0,1581,
		1583,3,830,415,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,129,1,0,0,0,
		1584,1589,3,128,64,0,1585,1586,5,24,0,0,1586,1588,3,128,64,0,1587,1585,
		1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,131,
		1,0,0,0,1591,1589,1,0,0,0,1592,1599,5,25,0,0,1593,1594,3,252,126,0,1594,
		1596,3,130,65,0,1595,1597,5,24,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,
		1597,1600,1,0,0,0,1598,1600,5,19,0,0,1599,1593,1,0,0,0,1599,1598,1,0,0,
		0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1602,5,26,0,0,1602,1603,3,134,
		67,0,1603,133,1,0,0,0,1604,1607,3,748,374,0,1605,1607,3,750,375,0,1606,
		1604,1,0,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1610,1,0,0,0,1608,
		1609,5,216,0,0,1609,1611,3,752,376,0,1610,1608,1,0,0,0,1610,1611,1,0,0,
		0,1611,135,1,0,0,0,1612,1613,3,830,415,0,1613,1614,5,34,0,0,1614,1615,
		3,830,415,0,1615,1621,1,0,0,0,1616,1621,3,834,417,0,1617,1621,3,144,72,
		0,1618,1619,5,130,0,0,1619,1621,5,143,0,0,1620,1612,1,0,0,0,1620,1616,
		1,0,0,0,1620,1617,1,0,0,0,1620,1618,1,0,0,0,1621,1622,1,0,0,0,1622,1623,
		3,132,66,0,1623,137,1,0,0,0,1624,1625,5,37,0,0,1625,1626,3,14,7,0,1626,
		1627,5,36,0,0,1627,139,1,0,0,0,1628,1629,5,320,0,0,1629,1630,3,14,7,0,
		1630,1631,5,294,0,0,1631,1632,3,14,7,0,1632,141,1,0,0,0,1633,1644,3,892,
		446,0,1634,1644,3,890,445,0,1635,1644,5,327,0,0,1636,1644,5,333,0,0,1637,
		1644,5,201,0,0,1638,1644,5,91,0,0,1639,1644,5,90,0,0,1640,1644,5,92,0,
		0,1641,1644,3,888,444,0,1642,1644,5,115,0,0,1643,1633,1,0,0,0,1643,1634,
		1,0,0,0,1643,1635,1,0,0,0,1643,1636,1,0,0,0,1643,1637,1,0,0,0,1643,1638,
		1,0,0,0,1643,1639,1,0,0,0,1643,1640,1,0,0,0,1643,1641,1,0,0,0,1643,1642,
		1,0,0,0,1644,143,1,0,0,0,1645,1649,5,30,0,0,1646,1650,3,830,415,0,1647,
		1650,5,301,0,0,1648,1650,5,132,0,0,1649,1646,1,0,0,0,1649,1647,1,0,0,0,
		1649,1648,1,0,0,0,1650,145,1,0,0,0,1651,1653,3,144,72,0,1652,1654,5,27,
		0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,147,1,0,0,0,1655,1660,3,144,
		72,0,1656,1657,5,24,0,0,1657,1659,3,144,72,0,1658,1656,1,0,0,0,1659,1662,
		1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,0,1661,149,1,0,0,0,1662,1660,
		1,0,0,0,1663,1666,3,144,72,0,1664,1665,5,49,0,0,1665,1667,3,144,72,0,1666,
		1664,1,0,0,0,1666,1667,1,0,0,0,1667,151,1,0,0,0,1668,1673,3,150,75,0,1669,
		1670,5,24,0,0,1670,1672,3,150,75,0,1671,1669,1,0,0,0,1672,1675,1,0,0,0,
		1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,153,1,0,0,0,1675,1673,1,0,0,0,
		1676,1678,7,3,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1681,1,0,0,
		0,1679,1682,3,892,446,0,1680,1682,3,890,445,0,1681,1679,1,0,0,0,1681,1680,
		1,0,0,0,1682,155,1,0,0,0,1683,1684,3,846,423,0,1684,157,1,0,0,0,1685,1688,
		3,892,446,0,1686,1688,3,144,72,0,1687,1685,1,0,0,0,1687,1686,1,0,0,0,1688,
		159,1,0,0,0,1689,1693,3,810,405,0,1690,1693,5,327,0,0,1691,1693,3,144,
		72,0,1692,1689,1,0,0,0,1692,1690,1,0,0,0,1692,1691,1,0,0,0,1693,161,1,
		0,0,0,1694,1695,3,160,80,0,1695,1696,5,28,0,0,1696,1697,3,204,102,0,1697,
		163,1,0,0,0,1698,1699,3,160,80,0,1699,1704,3,204,102,0,1700,1702,5,199,
		0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1705,5,
		201,0,0,1704,1701,1,0,0,0,1704,1705,1,0,0,0,1705,1711,1,0,0,0,1706,1707,
		3,204,102,0,1707,1708,5,49,0,0,1708,1709,3,160,80,0,1709,1711,1,0,0,0,
		1710,1698,1,0,0,0,1710,1706,1,0,0,0,1711,165,1,0,0,0,1712,1713,3,160,80,
		0,1713,1714,5,28,0,0,1714,1716,1,0,0,0,1715,1712,1,0,0,0,1715,1716,1,0,
		0,0,1716,1717,1,0,0,0,1717,1718,3,204,102,0,1718,167,1,0,0,0,1719,1723,
		3,166,83,0,1720,1721,5,31,0,0,1721,1722,5,58,0,0,1722,1724,5,32,0,0,1723,
		1720,1,0,0,0,1723,1724,1,0,0,0,1724,169,1,0,0,0,1725,1730,3,168,84,0,1726,
		1727,5,24,0,0,1727,1729,3,168,84,0,1728,1726,1,0,0,0,1729,1732,1,0,0,0,
		1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,171,1,0,0,0,1732,1730,1,0,0,0,
		1733,1734,5,95,0,0,1734,1735,5,25,0,0,1735,1736,3,158,79,0,1736,1737,5,
		24,0,0,1737,1738,3,158,79,0,1738,1739,5,26,0,0,1739,173,1,0,0,0,1740,1741,
		5,211,0,0,1741,1742,5,5,0,0,1742,1743,3,204,102,0,1743,1744,5,7,0,0,1744,
		175,1,0,0,0,1745,1762,5,302,0,0,1746,1758,5,5,0,0,1747,1752,3,204,102,
		0,1748,1749,5,24,0,0,1749,1751,3,204,102,0,1750,1748,1,0,0,0,1751,1754,
		1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,1756,1,0,0,0,1754,1752,
		1,0,0,0,1755,1757,5,24,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1759,
		1,0,0,0,1758,1747,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1763,
		5,7,0,0,1761,1763,5,4,0,0,1762,1746,1,0,0,0,1762,1761,1,0,0,0,1763,177,
		1,0,0,0,1764,1781,5,280,0,0,1765,1777,5,5,0,0,1766,1771,3,162,81,0,1767,
		1768,5,24,0,0,1768,1770,3,162,81,0,1769,1767,1,0,0,0,1770,1773,1,0,0,0,
		1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,
		0,1774,1776,5,24,0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,
		0,0,1777,1766,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1782,5,
		7,0,0,1780,1782,5,4,0,0,1781,1765,1,0,0,0,1781,1780,1,0,0,0,1782,179,1,
		0,0,0,1783,1784,5,317,0,0,1784,1785,5,5,0,0,1785,1790,3,166,83,0,1786,
		1787,5,24,0,0,1787,1789,3,166,83,0,1788,1786,1,0,0,0,1789,1792,1,0,0,0,
		1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,1794,1,0,0,0,1792,1790,1,0,0,
		0,1793,1795,5,24,0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,
		0,0,1796,1797,5,7,0,0,1797,181,1,0,0,0,1798,1799,5,183,0,0,1799,1800,5,
		5,0,0,1800,1801,3,204,102,0,1801,1802,5,7,0,0,1802,183,1,0,0,0,1803,1804,
		5,279,0,0,1804,1805,5,5,0,0,1805,1806,3,204,102,0,1806,1807,5,7,0,0,1807,
		185,1,0,0,0,1808,1809,5,137,0,0,1809,1810,5,5,0,0,1810,1811,3,204,102,
		0,1811,1812,5,7,0,0,1812,187,1,0,0,0,1813,1814,5,105,0,0,1814,1815,5,5,
		0,0,1815,1816,3,204,102,0,1816,1817,5,24,0,0,1817,1818,3,204,102,0,1818,
		1819,5,7,0,0,1819,189,1,0,0,0,1820,1821,5,272,0,0,1821,1822,5,5,0,0,1822,
		1823,3,204,102,0,1823,1824,5,7,0,0,1824,191,1,0,0,0,1825,1826,5,118,0,
		0,1826,1827,5,5,0,0,1827,1832,3,160,80,0,1828,1829,5,24,0,0,1829,1831,
		3,160,80,0,1830,1828,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,1832,
		1833,1,0,0,0,1833,1836,1,0,0,0,1834,1832,1,0,0,0,1835,1837,5,24,0,0,1836,
		1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,5,7,0,0,1839,
		193,1,0,0,0,1840,1841,5,249,0,0,1841,1842,5,5,0,0,1842,1843,3,160,80,0,
		1843,1844,5,7,0,0,1844,195,1,0,0,0,1845,1846,5,291,0,0,1846,1847,5,5,0,
		0,1847,1848,3,204,102,0,1848,1849,5,24,0,0,1849,1850,3,160,80,0,1850,1851,
		5,7,0,0,1851,197,1,0,0,0,1852,1853,5,68,0,0,1853,1854,5,5,0,0,1854,1856,
		5,25,0,0,1855,1857,3,170,85,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,
		1859,1,0,0,0,1858,1860,5,24,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,
		1865,1,0,0,0,1861,1862,5,37,0,0,1862,1863,3,170,85,0,1863,1864,5,36,0,
		0,1864,1866,1,0,0,0,1865,1861,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,
		0,0,1867,1868,5,26,0,0,1868,1869,5,35,0,0,1869,1870,3,204,102,0,1870,1871,
		5,7,0,0,1871,199,1,0,0,0,1872,1886,3,174,87,0,1873,1886,3,176,88,0,1874,
		1886,3,178,89,0,1875,1886,3,180,90,0,1876,1886,3,182,91,0,1877,1886,3,
		184,92,0,1878,1886,3,186,93,0,1879,1886,3,188,94,0,1880,1886,3,190,95,
		0,1881,1886,3,192,96,0,1882,1886,3,194,97,0,1883,1886,3,196,98,0,1884,
		1886,3,198,99,0,1885,1872,1,0,0,0,1885,1873,1,0,0,0,1885,1874,1,0,0,0,
		1885,1875,1,0,0,0,1885,1876,1,0,0,0,1885,1877,1,0,0,0,1885,1878,1,0,0,
		0,1885,1879,1,0,0,0,1885,1880,1,0,0,0,1885,1881,1,0,0,0,1885,1882,1,0,
		0,0,1885,1883,1,0,0,0,1885,1884,1,0,0,0,1886,1890,1,0,0,0,1887,1889,5,
		27,0,0,1888,1887,1,0,0,0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,
		1,0,0,0,1891,201,1,0,0,0,1892,1890,1,0,0,0,1893,1905,3,200,100,0,1894,
		1897,3,172,86,0,1895,1897,3,156,78,0,1896,1894,1,0,0,0,1896,1895,1,0,0,
		0,1897,1901,1,0,0,0,1898,1900,5,27,0,0,1899,1898,1,0,0,0,1900,1903,1,0,
		0,0,1901,1899,1,0,0,0,1901,1902,1,0,0,0,1902,1905,1,0,0,0,1903,1901,1,
		0,0,0,1904,1893,1,0,0,0,1904,1896,1,0,0,0,1905,203,1,0,0,0,1906,1909,3,
		202,101,0,1907,1909,3,144,72,0,1908,1906,1,0,0,0,1908,1907,1,0,0,0,1909,
		205,1,0,0,0,1910,1911,5,327,0,0,1911,207,1,0,0,0,1912,1913,5,317,0,0,1913,
		1914,5,25,0,0,1914,1915,3,14,7,0,1915,1916,5,24,0,0,1916,1917,3,14,7,0,
		1917,1918,5,24,0,0,1918,1919,3,14,7,0,1919,1920,5,26,0,0,1920,1936,1,0,
		0,0,1921,1922,5,118,0,0,1922,1923,5,25,0,0,1923,1924,3,14,7,0,1924,1925,
		5,24,0,0,1925,1926,3,14,7,0,1926,1927,5,26,0,0,1927,1936,1,0,0,0,1928,
		1929,5,68,0,0,1929,1930,5,25,0,0,1930,1931,3,14,7,0,1931,1932,5,24,0,0,
		1932,1933,3,14,7,0,1933,1934,5,26,0,0,1934,1936,1,0,0,0,1935,1912,1,0,
		0,0,1935,1921,1,0,0,0,1935,1928,1,0,0,0,1936,209,1,0,0,0,1937,1938,5,96,
		0,0,1938,1939,3,144,72,0,1939,1940,5,49,0,0,1940,1943,3,202,101,0,1941,
		1942,5,1,0,0,1942,1944,3,142,71,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,
		1944,211,1,0,0,0,1945,1947,5,23,0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,
		0,1947,1948,1,0,0,0,1948,1953,3,828,414,0,1949,1950,5,23,0,0,1950,1952,
		3,828,414,0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,1953,1951,1,0,0,0,1953,
		1954,1,0,0,0,1954,213,1,0,0,0,1955,1953,1,0,0,0,1956,1957,5,157,0,0,1957,
		1958,3,212,106,0,1958,1959,5,283,0,0,1959,1960,3,152,76,0,1960,215,1,0,
		0,0,1961,1962,5,129,0,0,1962,1963,3,148,74,0,1963,217,1,0,0,0,1964,1967,
		3,144,72,0,1965,1967,5,115,0,0,1966,1964,1,0,0,0,1966,1965,1,0,0,0,1967,
		1968,1,0,0,0,1968,1970,5,25,0,0,1969,1971,3,112,56,0,1970,1969,1,0,0,0,
		1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1973,5,26,0,0,1973,219,1,0,0,
		0,1974,1975,5,63,0,0,1975,1976,3,658,329,0,1976,1977,5,117,0,0,1977,1978,
		5,110,0,0,1978,221,1,0,0,0,1979,1982,5,110,0,0,1980,1983,3,218,109,0,1981,
		1983,3,220,110,0,1982,1980,1,0,0,0,1982,1981,1,0,0,0,1983,223,1,0,0,0,
		1984,1985,5,228,0,0,1985,1986,3,858,429,0,1986,2000,3,828,414,0,1987,1988,
		5,1,0,0,1988,2001,3,226,113,0,1989,1990,5,25,0,0,1990,1995,3,226,113,0,
		1991,1992,5,24,0,0,1992,1994,3,226,113,0,1993,1991,1,0,0,0,1994,1997,1,
		0,0,0,1995,1993,1,0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,
		1,0,0,0,1998,1999,5,26,0,0,1999,2001,1,0,0,0,2000,1987,1,0,0,0,2000,1989,
		1,0,0,0,2000,2001,1,0,0,0,2001,225,1,0,0,0,2002,2008,3,154,77,0,2003,2008,
		3,810,405,0,2004,2008,5,327,0,0,2005,2008,3,888,444,0,2006,2008,3,144,
		72,0,2007,2002,1,0,0,0,2007,2003,1,0,0,0,2007,2004,1,0,0,0,2007,2005,1,
		0,0,0,2007,2006,1,0,0,0,2008,227,1,0,0,0,2009,2011,3,14,7,0,2010,2012,
		7,9,0,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,229,1,0,0,0,2013,2018,
		3,228,114,0,2014,2015,5,24,0,0,2015,2017,3,228,114,0,2016,2014,1,0,0,0,
		2017,2020,1,0,0,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,231,1,0,0,0,
		2020,2018,1,0,0,0,2021,2027,3,236,118,0,2022,2023,3,238,119,0,2023,2024,
		3,236,118,0,2024,2026,1,0,0,0,2025,2022,1,0,0,0,2026,2029,1,0,0,0,2027,
		2025,1,0,0,0,2027,2028,1,0,0,0,2028,233,1,0,0,0,2029,2027,1,0,0,0,2030,
		2036,3,240,120,0,2031,2032,3,238,119,0,2032,2033,3,236,118,0,2033,2035,
		1,0,0,0,2034,2031,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,
		1,0,0,0,2037,235,1,0,0,0,2038,2036,1,0,0,0,2039,2045,3,240,120,0,2040,
		2041,5,25,0,0,2041,2042,3,240,120,0,2042,2043,5,26,0,0,2043,2045,1,0,0,
		0,2044,2039,1,0,0,0,2044,2040,1,0,0,0,2045,237,1,0,0,0,2046,2048,5,306,
		0,0,2047,2049,5,42,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2053,1,
		0,0,0,2050,2053,5,169,0,0,2051,2053,5,123,0,0,2052,2046,1,0,0,0,2052,2050,
		1,0,0,0,2052,2051,1,0,0,0,2053,239,1,0,0,0,2054,2061,3,242,121,0,2055,
		2056,5,182,0,0,2056,2059,3,14,7,0,2057,2058,7,10,0,0,2058,2060,3,14,7,
		0,2059,2057,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,0,0,0,2061,2055,1,0,
		0,0,2061,2062,1,0,0,0,2062,241,1,0,0,0,2063,2065,5,108,0,0,2064,2063,1,
		0,0,0,2064,2065,1,0,0,0,2065,2069,1,0,0,0,2066,2070,3,244,122,0,2067,2070,
		3,250,125,0,2068,2070,3,254,127,0,2069,2066,1,0,0,0,2069,2067,1,0,0,0,
		2069,2068,1,0,0,0,2070,2074,1,0,0,0,2071,2072,5,170,0,0,2072,2073,5,254,
		0,0,2073,2075,3,116,58,0,2074,2071,1,0,0,0,2074,2075,1,0,0,0,2075,243,
		1,0,0,0,2076,2078,5,233,0,0,2077,2079,5,279,0,0,2078,2077,1,0,0,0,2078,
		2079,1,0,0,0,2079,2080,1,0,0,0,2080,2085,3,346,173,0,2081,2082,5,24,0,
		0,2082,2084,3,346,173,0,2083,2081,1,0,0,0,2084,2087,1,0,0,0,2085,2083,
		1,0,0,0,2085,2086,1,0,0,0,2086,2110,1,0,0,0,2087,2085,1,0,0,0,2088,2089,
		5,314,0,0,2089,2092,3,136,68,0,2090,2091,5,49,0,0,2091,2093,3,828,414,
		0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,2096,1,0,0,0,2094,2095,5,323,
		0,0,2095,2097,3,248,124,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,2100,
		1,0,0,0,2098,2099,5,321,0,0,2099,2101,3,14,7,0,2100,2098,1,0,0,0,2100,
		2101,1,0,0,0,2101,2104,1,0,0,0,2102,2103,5,151,0,0,2103,2105,3,14,7,0,
		2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,2108,1,0,0,0,2106,2107,5,51,0,
		0,2107,2109,3,314,157,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,2111,
		1,0,0,0,2110,2088,1,0,0,0,2110,2111,1,0,0,0,2111,245,1,0,0,0,2112,2113,
		3,828,414,0,2113,2114,5,1,0,0,2114,2115,3,14,7,0,2115,247,1,0,0,0,2116,
		2121,3,246,123,0,2117,2118,5,24,0,0,2118,2120,3,246,123,0,2119,2117,1,
		0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,0,2121,2122,1,0,0,0,2122,249,1,
		0,0,0,2123,2121,1,0,0,0,2124,2125,5,238,0,0,2125,2130,3,346,173,0,2126,
		2127,5,24,0,0,2127,2129,3,346,173,0,2128,2126,1,0,0,0,2129,2132,1,0,0,
		0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2135,1,0,0,0,2132,2130,1,0,
		0,0,2133,2134,5,230,0,0,2134,2136,3,230,115,0,2135,2133,1,0,0,0,2135,2136,
		1,0,0,0,2136,2137,1,0,0,0,2137,2138,5,207,0,0,2138,2139,3,124,62,0,2139,
		2141,5,314,0,0,2140,2142,5,42,0,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,
		2142,2143,1,0,0,0,2143,2146,3,136,68,0,2144,2145,5,49,0,0,2145,2147,3,
		828,414,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2150,1,0,0,0,2148,2149,
		5,321,0,0,2149,2151,3,14,7,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,
		2154,1,0,0,0,2152,2153,5,151,0,0,2153,2155,3,14,7,0,2154,2152,1,0,0,0,
		2154,2155,1,0,0,0,2155,2158,1,0,0,0,2156,2157,5,51,0,0,2157,2159,3,314,
		157,0,2158,2156,1,0,0,0,2158,2159,1,0,0,0,2159,251,1,0,0,0,2160,2162,7,
		11,0,0,2161,2160,1,0,0,0,2161,2162,1,0,0,0,2162,253,1,0,0,0,2163,2164,
		5,141,0,0,2164,2166,3,338,169,0,2165,2163,1,0,0,0,2165,2166,1,0,0,0,2166,
		2167,1,0,0,0,2167,2169,5,270,0,0,2168,2170,5,279,0,0,2169,2168,1,0,0,0,
		2169,2170,1,0,0,0,2170,2171,1,0,0,0,2171,2172,3,252,126,0,2172,2177,3,
		336,168,0,2173,2174,5,24,0,0,2174,2176,3,336,168,0,2175,2173,1,0,0,0,2176,
		2179,1,0,0,0,2177,2175,1,0,0,0,2177,2178,1,0,0,0,2178,2181,1,0,0,0,2179,
		2177,1,0,0,0,2180,2182,5,24,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,
		2189,1,0,0,0,2183,2186,5,324,0,0,2184,2185,5,153,0,0,2185,2187,5,127,0,
		0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,2188,2190,3,126,
		63,0,2189,2183,1,0,0,0,2189,2190,1,0,0,0,2190,2193,1,0,0,0,2191,2192,5,
		141,0,0,2192,2194,3,338,169,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,
		2197,1,0,0,0,2195,2196,5,321,0,0,2196,2198,3,14,7,0,2197,2195,1,0,0,0,
		2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,2201,3,318,159,0,2200,2199,1,
		0,0,0,2200,2201,1,0,0,0,2201,2204,1,0,0,0,2202,2203,5,151,0,0,2203,2205,
		3,14,7,0,2204,2202,1,0,0,0,2204,2205,1,0,0,0,2205,2207,1,0,0,0,2206,2208,
		3,756,378,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2210,1,0,0,0,2209,
		2211,3,316,158,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,255,1,0,0,0,
		2212,2213,5,189,0,0,2213,2215,5,25,0,0,2214,2216,3,770,385,0,2215,2214,
		1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2219,3,314,157,0,2218,
		2217,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2222,3,262,131,0,
		2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2224,1,0,0,0,2223,2225,3,258,
		129,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,0,0,0,2226,2227,
		3,268,134,0,2227,2228,5,26,0,0,2228,257,1,0,0,0,2229,2230,5,208,0,0,2230,
		2231,5,263,0,0,2231,2232,5,224,0,0,2232,2241,5,187,0,0,2233,2234,5,42,
		0,0,2234,2235,5,264,0,0,2235,2236,5,224,0,0,2236,2238,5,187,0,0,2237,2239,
		3,260,130,0,2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2241,1,0,0,0,2240,
		2229,1,0,0,0,2240,2233,1,0,0,0,2241,259,1,0,0,0,2242,2243,5,274,0,0,2243,
		2244,5,114,0,0,2244,2252,5,188,0,0,2245,2246,5,206,0,0,2246,2247,5,114,
		0,0,2247,2252,5,188,0,0,2248,2249,5,323,0,0,2249,2250,5,309,0,0,2250,2252,
		5,264,0,0,2251,2242,1,0,0,0,2251,2245,1,0,0,0,2251,2248,1,0,0,0,2252,261,
		1,0,0,0,2253,2254,5,190,0,0,2254,2255,3,264,132,0,2255,263,1,0,0,0,2256,
		2261,3,266,133,0,2257,2258,5,24,0,0,2258,2260,3,266,133,0,2259,2257,1,
		0,0,0,2260,2263,1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,265,1,
		0,0,0,2263,2261,1,0,0,0,2264,2265,3,14,7,0,2265,2266,5,49,0,0,2266,2267,
		3,828,414,0,2267,267,1,0,0,0,2268,2269,5,41,0,0,2269,2270,5,187,0,0,2270,
		2272,3,270,135,0,2271,2268,1,0,0,0,2271,2272,1,0,0,0,2272,2274,1,0,0,0,
		2273,2275,3,274,137,0,2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,
		0,0,0,2276,2277,5,223,0,0,2277,2278,5,25,0,0,2278,2279,3,276,138,0,2279,
		2281,5,26,0,0,2280,2282,3,290,145,0,2281,2280,1,0,0,0,2281,2282,1,0,0,
		0,2282,2283,1,0,0,0,2283,2284,5,100,0,0,2284,2285,3,302,151,0,2285,269,
		1,0,0,0,2286,2287,5,275,0,0,2287,2288,5,296,0,0,2288,2289,5,196,0,0,2289,
		2306,5,263,0,0,2290,2291,5,275,0,0,2291,2292,5,222,0,0,2292,2293,5,178,
		0,0,2293,2306,5,263,0,0,2294,2295,5,275,0,0,2295,2296,5,296,0,0,2296,2297,
		5,135,0,0,2297,2306,3,272,136,0,2298,2299,5,275,0,0,2299,2300,5,296,0,
		0,2300,2301,5,178,0,0,2301,2306,3,272,136,0,2302,2303,5,275,0,0,2303,2304,
		5,296,0,0,2304,2306,3,272,136,0,2305,2286,1,0,0,0,2305,2290,1,0,0,0,2305,
		2294,1,0,0,0,2305,2298,1,0,0,0,2305,2302,1,0,0,0,2306,271,1,0,0,0,2307,
		2308,3,312,156,0,2308,273,1,0,0,0,2309,2310,7,12,0,0,2310,275,1,0,0,0,
		2311,2316,3,278,139,0,2312,2313,5,12,0,0,2313,2315,3,278,139,0,2314,2312,
		1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,277,
		1,0,0,0,2318,2316,1,0,0,0,2319,2321,3,280,140,0,2320,2319,1,0,0,0,2321,
		2322,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,279,1,0,0,0,2324,
		2326,3,284,142,0,2325,2327,3,282,141,0,2326,2325,1,0,0,0,2326,2327,1,0,
		0,0,2327,281,1,0,0,0,2328,2330,5,19,0,0,2329,2331,5,27,0,0,2330,2329,1,
		0,0,0,2330,2331,1,0,0,0,2331,2357,1,0,0,0,2332,2334,5,16,0,0,2333,2335,
		5,27,0,0,2334,2333,1,0,0,0,2334,2335,1,0,0,0,2335,2357,1,0,0,0,2336,2338,
		5,27,0,0,2337,2339,5,27,0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,2357,
		1,0,0,0,2340,2342,5,31,0,0,2341,2343,3,892,446,0,2342,2341,1,0,0,0,2342,
		2343,1,0,0,0,2343,2344,1,0,0,0,2344,2346,5,24,0,0,2345,2347,3,892,446,
		0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2350,5,32,
		0,0,2349,2351,5,27,0,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2357,1,
		0,0,0,2352,2353,5,31,0,0,2353,2354,3,892,446,0,2354,2355,5,32,0,0,2355,
		2357,1,0,0,0,2356,2328,1,0,0,0,2356,2332,1,0,0,0,2356,2336,1,0,0,0,2356,
		2340,1,0,0,0,2356,2352,1,0,0,0,2357,283,1,0,0,0,2358,2374,3,286,143,0,
		2359,2374,5,30,0,0,2360,2374,5,33,0,0,2361,2363,5,25,0,0,2362,2364,3,276,
		138,0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,1,0,0,0,2365,2374,
		5,26,0,0,2366,2367,5,31,0,0,2367,2368,5,17,0,0,2368,2369,3,276,138,0,2369,
		2370,5,17,0,0,2370,2371,5,32,0,0,2371,2374,1,0,0,0,2372,2374,3,288,144,
		0,2373,2358,1,0,0,0,2373,2359,1,0,0,0,2373,2360,1,0,0,0,2373,2361,1,0,
		0,0,2373,2366,1,0,0,0,2373,2372,1,0,0,0,2374,285,1,0,0,0,2375,2376,3,312,
		156,0,2376,287,1,0,0,0,2377,2378,5,225,0,0,2378,2379,5,25,0,0,2379,2384,
		3,276,138,0,2380,2381,5,24,0,0,2381,2383,3,276,138,0,2382,2380,1,0,0,0,
		2383,2386,1,0,0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,0,0,
		0,2386,2384,1,0,0,0,2387,2388,5,26,0,0,2388,289,1,0,0,0,2389,2390,5,282,
		0,0,2390,2391,3,292,146,0,2391,291,1,0,0,0,2392,2397,3,294,147,0,2393,
		2394,5,24,0,0,2394,2396,3,294,147,0,2395,2393,1,0,0,0,2396,2399,1,0,0,
		0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,2398,293,1,0,0,0,2399,2397,1,0,0,
		0,2400,2401,3,296,148,0,2401,2402,5,1,0,0,2402,2403,5,25,0,0,2403,2404,
		3,298,149,0,2404,2405,5,26,0,0,2405,295,1,0,0,0,2406,2407,3,312,156,0,
		2407,297,1,0,0,0,2408,2413,3,300,150,0,2409,2410,5,24,0,0,2410,2412,3,
		300,150,0,2411,2409,1,0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,0,2413,2414,
		1,0,0,0,2414,299,1,0,0,0,2415,2413,1,0,0,0,2416,2417,3,312,156,0,2417,
		301,1,0,0,0,2418,2423,3,304,152,0,2419,2420,5,24,0,0,2420,2422,3,304,152,
		0,2421,2419,1,0,0,0,2422,2425,1,0,0,0,2423,2421,1,0,0,0,2423,2424,1,0,
		0,0,2424,303,1,0,0,0,2425,2423,1,0,0,0,2426,2427,3,306,153,0,2427,2428,
		5,49,0,0,2428,2429,3,308,154,0,2429,305,1,0,0,0,2430,2431,3,312,156,0,
		2431,307,1,0,0,0,2432,2433,3,310,155,0,2433,309,1,0,0,0,2434,2435,3,14,
		7,0,2435,311,1,0,0,0,2436,2437,3,808,404,0,2437,313,1,0,0,0,2438,2439,
		5,213,0,0,2439,2440,5,67,0,0,2440,2441,3,230,115,0,2441,315,1,0,0,0,2442,
		2444,5,51,0,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,2445,1,0,0,0,2445,
		2446,3,314,157,0,2446,317,1,0,0,0,2447,2449,5,147,0,0,2448,2450,5,79,0,
		0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,2451,1,0,0,0,2451,2452,5,67,
		0,0,2452,2453,3,252,126,0,2453,2456,3,320,160,0,2454,2455,5,323,0,0,2455,
		2457,3,828,414,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,319,1,0,0,0,
		2458,2463,3,322,161,0,2459,2460,5,24,0,0,2460,2462,3,322,161,0,2461,2459,
		1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,0,0,2464,321,
		1,0,0,0,2465,2463,1,0,0,0,2466,2472,3,324,162,0,2467,2472,3,328,164,0,
		2468,2472,3,330,165,0,2469,2472,3,332,166,0,2470,2472,3,334,167,0,2471,
		2466,1,0,0,0,2471,2467,1,0,0,0,2471,2468,1,0,0,0,2471,2469,1,0,0,0,2471,
		2470,1,0,0,0,2472,323,1,0,0,0,2473,2474,3,128,64,0,2474,325,1,0,0,0,2475,
		2480,3,324,162,0,2476,2477,5,24,0,0,2477,2479,3,324,162,0,2478,2476,1,
		0,0,0,2479,2482,1,0,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,327,1,
		0,0,0,2482,2480,1,0,0,0,2483,2484,5,262,0,0,2484,2485,5,25,0,0,2485,2486,
		3,326,163,0,2486,2487,5,26,0,0,2487,329,1,0,0,0,2488,2489,5,88,0,0,2489,
		2490,5,25,0,0,2490,2491,3,326,163,0,2491,2492,5,26,0,0,2492,331,1,0,0,
		0,2493,2494,5,148,0,0,2494,2495,5,273,0,0,2495,2496,5,25,0,0,2496,2497,
		3,320,160,0,2497,2498,5,26,0,0,2498,333,1,0,0,0,2499,2500,5,152,0,0,2500,
		2501,5,25,0,0,2501,2502,3,14,7,0,2502,2503,5,24,0,0,2503,2504,3,14,7,0,
		2504,2505,5,24,0,0,2505,2506,3,14,7,0,2506,2507,5,24,0,0,2507,2508,3,14,
		7,0,2508,2509,5,26,0,0,2509,335,1,0,0,0,2510,2511,3,852,426,0,2511,2512,
		5,19,0,0,2512,2520,1,0,0,0,2513,2517,3,14,7,0,2514,2515,5,49,0,0,2515,
		2518,3,830,415,0,2516,2518,3,848,424,0,2517,2514,1,0,0,0,2517,2516,1,0,
		0,0,2517,2518,1,0,0,0,2518,2520,1,0,0,0,2519,2510,1,0,0,0,2519,2513,1,
		0,0,0,2520,337,1,0,0,0,2521,2523,5,47,0,0,2522,2521,1,0,0,0,2522,2523,
		1,0,0,0,2523,2524,1,0,0,0,2524,2535,3,344,172,0,2525,2527,3,358,179,0,
		2526,2528,5,47,0,0,2527,2526,1,0,0,0,2527,2528,1,0,0,0,2528,2529,1,0,0,
		0,2529,2531,3,344,172,0,2530,2532,3,360,180,0,2531,2530,1,0,0,0,2531,2532,
		1,0,0,0,2532,2534,1,0,0,0,2533,2525,1,0,0,0,2534,2537,1,0,0,0,2535,2533,
		1,0,0,0,2535,2536,1,0,0,0,2536,339,1,0,0,0,2537,2535,1,0,0,0,2538,2541,
		3,120,60,0,2539,2540,5,49,0,0,2540,2542,3,828,414,0,2541,2539,1,0,0,0,
		2541,2542,1,0,0,0,2542,341,1,0,0,0,2543,2552,3,340,170,0,2544,2545,5,25,
		0,0,2545,2547,3,130,65,0,2546,2548,5,24,0,0,2547,2546,1,0,0,0,2547,2548,
		1,0,0,0,2548,2549,1,0,0,0,2549,2550,5,26,0,0,2550,2552,1,0,0,0,2551,2543,
		1,0,0,0,2551,2544,1,0,0,0,2552,343,1,0,0,0,2553,2563,3,346,173,0,2554,
		2561,5,136,0,0,2555,2557,7,13,0,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,
		2557,2558,1,0,0,0,2558,2559,5,67,0,0,2559,2562,3,342,171,0,2560,2562,5,
		77,0,0,2561,2556,1,0,0,0,2561,2560,1,0,0,0,2562,2564,1,0,0,0,2563,2554,
		1,0,0,0,2563,2564,1,0,0,0,2564,345,1,0,0,0,2565,2567,3,348,174,0,2566,
		2568,3,256,128,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,2577,1,0,0,0,
		2569,2570,5,49,0,0,2570,2573,3,828,414,0,2571,2573,3,848,424,0,2572,2569,
		1,0,0,0,2572,2571,1,0,0,0,2573,2575,1,0,0,0,2574,2576,3,114,57,0,2575,
		2574,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,2572,1,0,0,0,2577,
		2578,1,0,0,0,2578,2581,1,0,0,0,2579,2582,3,350,175,0,2580,2582,3,352,176,
		0,2581,2579,1,0,0,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,347,1,0,0,
		0,2583,2593,3,664,332,0,2584,2585,5,25,0,0,2585,2586,3,232,116,0,2586,
		2587,5,26,0,0,2587,2593,1,0,0,0,2588,2589,5,25,0,0,2589,2590,3,368,184,
		0,2590,2591,5,26,0,0,2591,2593,1,0,0,0,2592,2583,1,0,0,0,2592,2584,1,0,
		0,0,2592,2588,1,0,0,0,2593,349,1,0,0,0,2594,2595,5,265,0,0,2595,2596,3,
		14,7,0,2596,351,1,0,0,0,2597,2598,5,289,0,0,2598,2599,3,354,177,0,2599,
		2600,5,25,0,0,2600,2601,3,14,7,0,2601,2603,5,26,0,0,2602,2604,3,356,178,
		0,2603,2602,1,0,0,0,2603,2604,1,0,0,0,2604,353,1,0,0,0,2605,2606,7,14,
		0,0,2606,355,1,0,0,0,2607,2608,5,245,0,0,2608,2609,5,25,0,0,2609,2610,
		3,14,7,0,2610,2611,5,26,0,0,2611,357,1,0,0,0,2612,2637,5,24,0,0,2613,2615,
		5,195,0,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2633,1,0,0,0,2616,2618,
		5,179,0,0,2617,2619,7,15,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,
		2627,1,0,0,0,2620,2622,5,259,0,0,2621,2623,7,15,0,0,2622,2621,1,0,0,0,
		2622,2623,1,0,0,0,2623,2627,1,0,0,0,2624,2627,5,125,0,0,2625,2627,5,142,
		0,0,2626,2616,1,0,0,0,2626,2620,1,0,0,0,2626,2624,1,0,0,0,2626,2625,1,
		0,0,0,2626,2627,1,0,0,0,2627,2629,1,0,0,0,2628,2630,5,215,0,0,2629,2628,
		1,0,0,0,2629,2630,1,0,0,0,2630,2634,1,0,0,0,2631,2634,5,166,0,0,2632,2634,
		5,87,0,0,2633,2626,1,0,0,0,2633,2631,1,0,0,0,2633,2632,1,0,0,0,2634,2635,
		1,0,0,0,2635,2637,5,173,0,0,2636,2612,1,0,0,0,2636,2614,1,0,0,0,2637,359,
		1,0,0,0,2638,2639,5,207,0,0,2639,2643,3,14,7,0,2640,2641,5,314,0,0,2641,
		2643,3,118,59,0,2642,2638,1,0,0,0,2642,2640,1,0,0,0,2643,361,1,0,0,0,2644,
		2654,5,256,0,0,2645,2655,5,19,0,0,2646,2651,3,828,414,0,2647,2648,5,24,
		0,0,2648,2650,3,828,414,0,2649,2647,1,0,0,0,2650,2653,1,0,0,0,2651,2649,
		1,0,0,0,2651,2652,1,0,0,0,2652,2655,1,0,0,0,2653,2651,1,0,0,0,2654,2645,
		1,0,0,0,2654,2646,1,0,0,0,2655,363,1,0,0,0,2656,2669,5,167,0,0,2657,2658,
		5,167,0,0,2658,2659,5,212,0,0,2659,2669,5,38,0,0,2660,2661,5,167,0,0,2661,
		2662,5,212,0,0,2662,2669,5,257,0,0,2663,2664,5,167,0,0,2664,2665,5,212,
		0,0,2665,2669,5,154,0,0,2666,2669,5,311,0,0,2667,2669,5,246,0,0,2668,2656,
		1,0,0,0,2668,2657,1,0,0,0,2668,2660,1,0,0,0,2668,2663,1,0,0,0,2668,2666,
		1,0,0,0,2668,2667,1,0,0,0,2669,2670,1,0,0,0,2670,2671,5,170,0,0,2671,2672,
		3,680,340,0,2672,2674,3,366,183,0,2673,2675,3,362,181,0,2674,2673,1,0,
		0,0,2674,2675,1,0,0,0,2675,365,1,0,0,0,2676,2678,3,114,57,0,2677,2676,
		1,0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2683,3,370,185,0,2680,
		2681,5,97,0,0,2681,2683,5,316,0,0,2682,2677,1,0,0,0,2682,2680,1,0,0,0,
		2683,367,1,0,0,0,2684,2685,5,316,0,0,2685,2686,3,372,186,0,2686,369,1,
		0,0,0,2687,2690,3,368,184,0,2688,2690,3,232,116,0,2689,2687,1,0,0,0,2689,
		2688,1,0,0,0,2690,371,1,0,0,0,2691,2696,3,374,187,0,2692,2693,5,24,0,0,
		2693,2695,3,374,187,0,2694,2692,1,0,0,0,2695,2698,1,0,0,0,2696,2694,1,
		0,0,0,2696,2697,1,0,0,0,2697,373,1,0,0,0,2698,2696,1,0,0,0,2699,2700,5,
		25,0,0,2700,2701,3,112,56,0,2701,2702,5,26,0,0,2702,375,1,0,0,0,2703,2706,
		3,112,56,0,2704,2706,3,232,116,0,2705,2703,1,0,0,0,2705,2704,1,0,0,0,2706,
		377,1,0,0,0,2707,2710,5,86,0,0,2708,2709,5,212,0,0,2709,2711,5,246,0,0,
		2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,2713,5,130,
		0,0,2713,2714,5,93,0,0,2714,2718,5,277,0,0,2715,2716,5,153,0,0,2716,2717,
		5,199,0,0,2717,2719,5,127,0,0,2718,2715,1,0,0,0,2718,2719,1,0,0,0,2719,
		2720,1,0,0,0,2720,2721,3,674,337,0,2721,2722,3,456,228,0,2722,379,1,0,
		0,0,2723,2724,5,43,0,0,2724,2725,5,130,0,0,2725,2726,5,93,0,0,2726,2727,
		5,277,0,0,2727,2728,3,674,337,0,2728,2733,3,382,191,0,2729,2730,5,24,0,
		0,2730,2732,3,382,191,0,2731,2729,1,0,0,0,2732,2735,1,0,0,0,2733,2731,
		1,0,0,0,2733,2734,1,0,0,0,2734,381,1,0,0,0,2735,2733,1,0,0,0,2736,2740,
		3,488,244,0,2737,2740,3,490,245,0,2738,2740,3,492,246,0,2739,2736,1,0,
		0,0,2739,2737,1,0,0,0,2739,2738,1,0,0,0,2740,383,1,0,0,0,2741,2742,5,111,
		0,0,2742,2743,5,130,0,0,2743,2744,5,93,0,0,2744,2747,5,277,0,0,2745,2746,
		5,153,0,0,2746,2748,5,127,0,0,2747,2745,1,0,0,0,2747,2748,1,0,0,0,2748,
		2749,1,0,0,0,2749,2750,3,674,337,0,2750,385,1,0,0,0,2751,2752,5,86,0,0,
		2752,2756,5,318,0,0,2753,2754,5,153,0,0,2754,2755,5,199,0,0,2755,2757,
		5,127,0,0,2756,2753,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,2760,
		3,674,337,0,2759,2761,3,394,197,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,
		2761,2762,1,0,0,0,2762,2763,5,49,0,0,2763,2764,3,232,116,0,2764,387,1,
		0,0,0,2765,2766,5,111,0,0,2766,2769,5,318,0,0,2767,2768,5,153,0,0,2768,
		2770,5,127,0,0,2769,2767,1,0,0,0,2769,2770,1,0,0,0,2770,2771,1,0,0,0,2771,
		2772,3,674,337,0,2772,389,1,0,0,0,2773,2774,5,311,0,0,2774,2775,5,203,
		0,0,2775,2776,3,674,337,0,2776,2777,5,25,0,0,2777,2778,5,303,0,0,2778,
		2779,3,414,207,0,2779,2781,5,26,0,0,2780,2782,3,394,197,0,2781,2780,1,
		0,0,0,2781,2782,1,0,0,0,2782,391,1,0,0,0,2783,2784,5,86,0,0,2784,2788,
		5,203,0,0,2785,2786,5,153,0,0,2786,2787,5,199,0,0,2787,2789,5,127,0,0,
		2788,2785,1,0,0,0,2788,2789,1,0,0,0,2789,2790,1,0,0,0,2790,2791,3,674,
		337,0,2791,2792,5,25,0,0,2792,2793,5,303,0,0,2793,2794,3,414,207,0,2794,
		2796,5,26,0,0,2795,2797,3,394,197,0,2796,2795,1,0,0,0,2796,2797,1,0,0,
		0,2797,393,1,0,0,0,2798,2799,5,323,0,0,2799,2800,3,412,206,0,2800,395,
		1,0,0,0,2801,2802,5,43,0,0,2802,2803,5,203,0,0,2803,2804,3,674,337,0,2804,
		2805,5,25,0,0,2805,2806,5,303,0,0,2806,2807,3,414,207,0,2807,2808,5,26,
		0,0,2808,2809,3,398,199,0,2809,397,1,0,0,0,2810,2811,5,272,0,0,2811,2812,
		3,412,206,0,2812,399,1,0,0,0,2813,2814,5,111,0,0,2814,2817,5,203,0,0,2815,
		2816,5,153,0,0,2816,2818,5,127,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,
		2818,2819,1,0,0,0,2819,2820,3,674,337,0,2820,2821,5,25,0,0,2821,2822,5,
		303,0,0,2822,2823,3,414,207,0,2823,2825,5,26,0,0,2824,2826,3,402,201,0,
		2825,2824,1,0,0,0,2825,2826,1,0,0,0,2826,401,1,0,0,0,2827,2828,5,323,0,
		0,2828,2829,3,412,206,0,2829,403,1,0,0,0,2830,2835,3,856,428,0,2831,2835,
		3,144,72,0,2832,2835,5,327,0,0,2833,2835,3,888,444,0,2834,2830,1,0,0,0,
		2834,2831,1,0,0,0,2834,2832,1,0,0,0,2834,2833,1,0,0,0,2835,405,1,0,0,0,
		2836,2837,3,830,415,0,2837,2838,5,1,0,0,2838,2839,3,404,202,0,2839,407,
		1,0,0,0,2840,2841,3,830,415,0,2841,409,1,0,0,0,2842,2845,3,406,203,0,2843,
		2845,3,408,204,0,2844,2842,1,0,0,0,2844,2843,1,0,0,0,2845,411,1,0,0,0,
		2846,2859,3,410,205,0,2847,2848,5,25,0,0,2848,2853,3,410,205,0,2849,2850,
		5,24,0,0,2850,2852,3,410,205,0,2851,2849,1,0,0,0,2852,2855,1,0,0,0,2853,
		2851,1,0,0,0,2853,2854,1,0,0,0,2854,2856,1,0,0,0,2855,2853,1,0,0,0,2856,
		2857,5,26,0,0,2857,2859,1,0,0,0,2858,2846,1,0,0,0,2858,2847,1,0,0,0,2859,
		413,1,0,0,0,2860,2861,3,830,415,0,2861,415,1,0,0,0,2862,2865,5,86,0,0,
		2863,2864,5,212,0,0,2864,2866,5,246,0,0,2865,2863,1,0,0,0,2865,2866,1,
		0,0,0,2866,2875,1,0,0,0,2867,2876,5,287,0,0,2868,2876,5,290,0,0,2869,2870,
		5,130,0,0,2870,2876,5,287,0,0,2871,2872,5,292,0,0,2872,2876,5,287,0,0,
		2873,2874,5,293,0,0,2874,2876,5,287,0,0,2875,2867,1,0,0,0,2875,2868,1,
		0,0,0,2875,2869,1,0,0,0,2875,2871,1,0,0,0,2875,2873,1,0,0,0,2876,2880,
		1,0,0,0,2877,2878,5,153,0,0,2878,2879,5,199,0,0,2879,2881,5,127,0,0,2880,
		2877,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,3,678,339,0,
		2883,2884,5,25,0,0,2884,2889,3,418,209,0,2885,2886,5,24,0,0,2886,2888,
		3,418,209,0,2887,2885,1,0,0,0,2888,2891,1,0,0,0,2889,2887,1,0,0,0,2889,
		2890,1,0,0,0,2890,2893,1,0,0,0,2891,2889,1,0,0,0,2892,2894,5,24,0,0,2893,
		2892,1,0,0,0,2893,2894,1,0,0,0,2894,2895,1,0,0,0,2895,2897,5,26,0,0,2896,
		2898,3,452,226,0,2897,2896,1,0,0,0,2897,2898,1,0,0,0,2898,2900,1,0,0,0,
		2899,2901,3,454,227,0,2900,2899,1,0,0,0,2900,2901,1,0,0,0,2901,2903,1,
		0,0,0,2902,2904,3,456,228,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,2906,
		1,0,0,0,2905,2907,3,458,229,0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,
		2909,1,0,0,0,2908,2910,3,462,231,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,
		2910,417,1,0,0,0,2911,2918,3,510,255,0,2912,2918,3,518,259,0,2913,2918,
		3,520,260,0,2914,2918,3,554,277,0,2915,2918,3,536,268,0,2916,2918,3,832,
		416,0,2917,2911,1,0,0,0,2917,2912,1,0,0,0,2917,2913,1,0,0,0,2917,2914,
		1,0,0,0,2917,2915,1,0,0,0,2917,2916,1,0,0,0,2918,419,1,0,0,0,2919,2920,
		5,86,0,0,2920,2922,3,440,220,0,2921,2923,3,426,213,0,2922,2921,1,0,0,0,
		2922,2923,1,0,0,0,2923,2924,1,0,0,0,2924,2925,5,323,0,0,2925,2926,5,25,
		0,0,2926,2927,3,442,221,0,2927,2928,5,26,0,0,2928,421,1,0,0,0,2929,2930,
		5,43,0,0,2930,2933,3,440,220,0,2931,2934,3,432,216,0,2932,2934,3,436,218,
		0,2933,2931,1,0,0,0,2933,2932,1,0,0,0,2934,423,1,0,0,0,2935,2936,5,111,
		0,0,2936,2937,3,440,220,0,2937,425,1,0,0,0,2938,2941,5,94,0,0,2939,2941,
		3,428,214,0,2940,2938,1,0,0,0,2940,2939,1,0,0,0,2941,427,1,0,0,0,2942,
		2943,5,25,0,0,2943,2944,3,430,215,0,2944,2945,5,26,0,0,2945,429,1,0,0,
		0,2946,2947,5,287,0,0,2947,2953,3,840,420,0,2948,2949,5,24,0,0,2949,2950,
		5,287,0,0,2950,2952,3,840,420,0,2951,2948,1,0,0,0,2952,2955,1,0,0,0,2953,
		2951,1,0,0,0,2953,2954,1,0,0,0,2954,431,1,0,0,0,2955,2953,1,0,0,0,2956,
		2961,3,434,217,0,2957,2958,5,24,0,0,2958,2960,3,434,217,0,2959,2957,1,
		0,0,0,2960,2963,1,0,0,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,433,1,
		0,0,0,2963,2961,1,0,0,0,2964,2967,3,490,245,0,2965,2967,3,492,246,0,2966,
		2964,1,0,0,0,2966,2965,1,0,0,0,2967,435,1,0,0,0,2968,2973,3,438,219,0,
		2969,2970,5,24,0,0,2970,2972,3,438,219,0,2971,2969,1,0,0,0,2972,2975,1,
		0,0,0,2973,2971,1,0,0,0,2973,2974,1,0,0,0,2974,437,1,0,0,0,2975,2973,1,
		0,0,0,2976,2977,5,40,0,0,2977,2987,5,94,0,0,2978,2979,5,111,0,0,2979,2987,
		5,94,0,0,2980,2981,5,40,0,0,2981,2982,5,287,0,0,2982,2987,3,840,420,0,
		2983,2984,5,111,0,0,2984,2985,5,287,0,0,2985,2987,3,840,420,0,2986,2976,
		1,0,0,0,2986,2978,1,0,0,0,2986,2980,1,0,0,0,2986,2983,1,0,0,0,2987,439,
		1,0,0,0,2988,2989,5,59,0,0,2989,2990,5,61,0,0,2990,2991,3,674,337,0,2991,
		441,1,0,0,0,2992,2997,3,444,222,0,2993,2994,5,24,0,0,2994,2996,3,444,222,
		0,2995,2993,1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,0,0,0,2997,2998,1,0,
		0,0,2998,443,1,0,0,0,2999,2997,1,0,0,0,3000,3001,3,828,414,0,3001,3002,
		5,1,0,0,3002,3003,3,548,274,0,3003,445,1,0,0,0,3004,3005,5,59,0,0,3005,
		3007,3,674,337,0,3006,3008,5,160,0,0,3007,3006,1,0,0,0,3007,3008,1,0,0,
		0,3008,447,1,0,0,0,3009,3010,5,252,0,0,3010,3013,3,674,337,0,3011,3012,
		5,54,0,0,3012,3014,5,327,0,0,3013,3011,1,0,0,0,3013,3014,1,0,0,0,3014,
		449,1,0,0,0,3015,3016,5,43,0,0,3016,3017,5,94,0,0,3017,3018,3,832,416,
		0,3018,3019,5,217,0,0,3019,3020,5,296,0,0,3020,3021,3,580,290,0,3021,451,
		1,0,0,0,3022,3023,5,163,0,0,3023,3024,5,25,0,0,3024,3029,3,676,338,0,3025,
		3026,5,24,0,0,3026,3028,3,676,338,0,3027,3025,1,0,0,0,3028,3031,1,0,0,
		0,3029,3027,1,0,0,0,3029,3030,1,0,0,0,3030,3032,1,0,0,0,3031,3029,1,0,
		0,0,3032,3033,5,26,0,0,3033,453,1,0,0,0,3034,3035,5,219,0,0,3035,3036,
		5,67,0,0,3036,3037,5,150,0,0,3037,3038,3,114,57,0,3038,455,1,0,0,0,3039,
		3040,5,323,0,0,3040,3041,5,25,0,0,3041,3046,3,460,230,0,3042,3043,5,24,
		0,0,3043,3045,3,460,230,0,3044,3042,1,0,0,0,3045,3048,1,0,0,0,3046,3044,
		1,0,0,0,3046,3047,1,0,0,0,3047,3049,1,0,0,0,3048,3046,1,0,0,0,3049,3050,
		5,26,0,0,3050,457,1,0,0,0,3051,3052,5,290,0,0,3052,3053,3,676,338,0,3053,
		459,1,0,0,0,3054,3055,3,828,414,0,3055,3056,5,1,0,0,3056,3057,3,548,274,
		0,3057,461,1,0,0,0,3058,3059,5,49,0,0,3059,3060,3,370,185,0,3060,463,1,
		0,0,0,3061,3062,5,43,0,0,3062,3063,5,287,0,0,3063,3064,3,678,339,0,3064,
		3069,3,466,233,0,3065,3066,5,24,0,0,3066,3068,3,466,233,0,3067,3065,1,
		0,0,0,3068,3071,1,0,0,0,3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,465,1,
		0,0,0,3071,3069,1,0,0,0,3072,3090,3,476,238,0,3073,3090,3,478,239,0,3074,
		3090,3,480,240,0,3075,3090,3,484,242,0,3076,3090,3,486,243,0,3077,3090,
		3,488,244,0,3078,3090,3,490,245,0,3079,3090,3,492,246,0,3080,3090,3,494,
		247,0,3081,3090,3,496,248,0,3082,3090,3,498,249,0,3083,3090,3,502,251,
		0,3084,3090,3,504,252,0,3085,3090,3,506,253,0,3086,3090,3,500,250,0,3087,
		3090,3,508,254,0,3088,3090,3,482,241,0,3089,3072,1,0,0,0,3089,3073,1,0,
		0,0,3089,3074,1,0,0,0,3089,3075,1,0,0,0,3089,3076,1,0,0,0,3089,3077,1,
		0,0,0,3089,3078,1,0,0,0,3089,3079,1,0,0,0,3089,3080,1,0,0,0,3089,3081,
		1,0,0,0,3089,3082,1,0,0,0,3089,3083,1,0,0,0,3089,3084,1,0,0,0,3089,3085,
		1,0,0,0,3089,3086,1,0,0,0,3089,3087,1,0,0,0,3089,3088,1,0,0,0,3090,467,
		1,0,0,0,3091,3092,5,43,0,0,3092,3093,5,130,0,0,3093,3094,5,287,0,0,3094,
		3095,3,678,339,0,3095,3100,3,470,235,0,3096,3097,5,24,0,0,3097,3099,3,
		470,235,0,3098,3096,1,0,0,0,3099,3102,1,0,0,0,3100,3098,1,0,0,0,3100,3101,
		1,0,0,0,3101,469,1,0,0,0,3102,3100,1,0,0,0,3103,3109,3,476,238,0,3104,
		3109,3,478,239,0,3105,3109,3,488,244,0,3106,3109,3,490,245,0,3107,3109,
		3,492,246,0,3108,3103,1,0,0,0,3108,3104,1,0,0,0,3108,3105,1,0,0,0,3108,
		3106,1,0,0,0,3108,3107,1,0,0,0,3109,471,1,0,0,0,3110,3111,5,43,0,0,3111,
		3112,5,290,0,0,3112,3113,3,674,337,0,3113,3118,3,474,237,0,3114,3115,5,
		24,0,0,3115,3117,3,474,237,0,3116,3114,1,0,0,0,3117,3120,1,0,0,0,3118,
		3116,1,0,0,0,3118,3119,1,0,0,0,3119,473,1,0,0,0,3120,3118,1,0,0,0,3121,
		3124,3,476,238,0,3122,3124,3,478,239,0,3123,3121,1,0,0,0,3123,3122,1,0,
		0,0,3124,475,1,0,0,0,3125,3127,5,40,0,0,3126,3128,5,76,0,0,3127,3126,1,
		0,0,0,3127,3128,1,0,0,0,3128,3129,1,0,0,0,3129,3130,3,510,255,0,3130,477,
		1,0,0,0,3131,3133,5,111,0,0,3132,3134,5,76,0,0,3133,3132,1,0,0,0,3133,
		3134,1,0,0,0,3134,3135,1,0,0,0,3135,3136,3,828,414,0,3136,479,1,0,0,0,
		3137,3138,5,43,0,0,3138,3139,5,76,0,0,3139,3140,3,828,414,0,3140,3141,
		5,272,0,0,3141,3142,3,512,256,0,3142,481,1,0,0,0,3143,3144,5,43,0,0,3144,
		3145,5,76,0,0,3145,3146,3,828,414,0,3146,3147,5,111,0,0,3147,3148,5,199,
		0,0,3148,3149,5,201,0,0,3149,483,1,0,0,0,3150,3151,5,40,0,0,3151,3152,
		3,554,277,0,3152,485,1,0,0,0,3153,3154,5,43,0,0,3154,3155,5,133,0,0,3155,
		3156,3,828,414,0,3156,3157,5,272,0,0,3157,3158,3,828,414,0,3158,3159,3,
		560,280,0,3159,487,1,0,0,0,3160,3161,5,272,0,0,3161,3162,3,828,414,0,3162,
		3163,3,548,274,0,3163,489,1,0,0,0,3164,3165,5,272,0,0,3165,3166,5,25,0,
		0,3166,3171,3,546,273,0,3167,3168,5,24,0,0,3168,3170,3,546,273,0,3169,
		3167,1,0,0,0,3170,3173,1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,
		3174,1,0,0,0,3173,3171,1,0,0,0,3174,3175,5,26,0,0,3175,491,1,0,0,0,3176,
		3177,5,248,0,0,3177,3178,5,25,0,0,3178,3183,3,828,414,0,3179,3180,5,24,
		0,0,3180,3182,3,828,414,0,3181,3179,1,0,0,0,3182,3185,1,0,0,0,3183,3181,
		1,0,0,0,3183,3184,1,0,0,0,3184,3186,1,0,0,0,3185,3183,1,0,0,0,3186,3187,
		5,26,0,0,3187,493,1,0,0,0,3188,3189,5,40,0,0,3189,3190,3,520,260,0,3190,
		495,1,0,0,0,3191,3192,5,111,0,0,3192,3193,5,161,0,0,3193,3194,3,828,414,
		0,3194,497,1,0,0,0,3195,3196,5,244,0,0,3196,3197,5,296,0,0,3197,3198,3,
		840,420,0,3198,499,1,0,0,0,3199,3200,5,244,0,0,3200,3201,5,161,0,0,3201,
		3202,3,828,414,0,3202,3203,5,296,0,0,3203,3204,3,828,414,0,3204,501,1,
		0,0,0,3205,3206,5,40,0,0,3206,3207,3,536,268,0,3207,503,1,0,0,0,3208,3209,
		5,43,0,0,3209,3210,5,72,0,0,3210,3211,3,828,414,0,3211,3212,3,544,272,
		0,3212,505,1,0,0,0,3213,3214,5,111,0,0,3214,3215,5,72,0,0,3215,3216,3,
		828,414,0,3216,507,1,0,0,0,3217,3218,5,43,0,0,3218,3219,5,161,0,0,3219,
		3220,3,828,414,0,3220,3221,3,566,283,0,3221,509,1,0,0,0,3222,3223,3,832,
		416,0,3223,3225,3,204,102,0,3224,3226,3,512,256,0,3225,3224,1,0,0,0,3225,
		3226,1,0,0,0,3226,3227,1,0,0,0,3227,3228,3,514,257,0,3228,511,1,0,0,0,
		3229,3230,5,133,0,0,3230,3231,3,828,414,0,3231,513,1,0,0,0,3232,3234,5,
		199,0,0,3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,3235,1,0,0,0,3235,3237,
		5,201,0,0,3236,3233,1,0,0,0,3236,3237,1,0,0,0,3237,3240,1,0,0,0,3238,3239,
		5,97,0,0,3239,3241,3,14,7,0,3240,3238,1,0,0,0,3240,3241,1,0,0,0,3241,515,
		1,0,0,0,3242,3244,3,828,414,0,3243,3245,7,9,0,0,3244,3243,1,0,0,0,3244,
		3245,1,0,0,0,3245,517,1,0,0,0,3246,3247,5,231,0,0,3247,3248,5,177,0,0,
		3248,3249,5,25,0,0,3249,3254,3,828,414,0,3250,3251,5,24,0,0,3251,3253,
		3,828,414,0,3252,3250,1,0,0,0,3253,3256,1,0,0,0,3254,3252,1,0,0,0,3254,
		3255,1,0,0,0,3255,3257,1,0,0,0,3256,3254,1,0,0,0,3257,3258,5,26,0,0,3258,
		3286,1,0,0,0,3259,3260,5,219,0,0,3260,3261,5,67,0,0,3261,3262,5,25,0,0,
		3262,3267,3,828,414,0,3263,3264,5,24,0,0,3264,3266,3,828,414,0,3265,3263,
		1,0,0,0,3266,3269,1,0,0,0,3267,3265,1,0,0,0,3267,3268,1,0,0,0,3268,3270,
		1,0,0,0,3269,3267,1,0,0,0,3270,3271,5,26,0,0,3271,3286,1,0,0,0,3272,3273,
		5,213,0,0,3273,3274,5,67,0,0,3274,3275,5,25,0,0,3275,3280,3,516,258,0,
		3276,3277,5,24,0,0,3277,3279,3,516,258,0,3278,3276,1,0,0,0,3279,3282,1,
		0,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,3283,1,0,0,0,3282,3280,
		1,0,0,0,3283,3284,5,26,0,0,3284,3286,1,0,0,0,3285,3246,1,0,0,0,3285,3259,
		1,0,0,0,3285,3272,1,0,0,0,3286,519,1,0,0,0,3287,3288,5,161,0,0,3288,3289,
		3,828,414,0,3289,3290,3,522,261,0,3290,3291,5,207,0,0,3291,3292,5,25,0,
		0,3292,3297,3,832,416,0,3293,3294,5,24,0,0,3294,3296,3,832,416,0,3295,
		3293,1,0,0,0,3296,3299,1,0,0,0,3297,3295,1,0,0,0,3297,3298,1,0,0,0,3298,
		3300,1,0,0,0,3299,3297,1,0,0,0,3300,3313,5,26,0,0,3301,3302,5,85,0,0,3302,
		3303,5,25,0,0,3303,3308,3,832,416,0,3304,3305,5,24,0,0,3305,3307,3,832,
		416,0,3306,3304,1,0,0,0,3307,3310,1,0,0,0,3308,3306,1,0,0,0,3308,3309,
		1,0,0,0,3309,3311,1,0,0,0,3310,3308,1,0,0,0,3311,3312,5,26,0,0,3312,3314,
		1,0,0,0,3313,3301,1,0,0,0,3313,3314,1,0,0,0,3314,3316,1,0,0,0,3315,3317,
		3,530,265,0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,521,1,0,0,0,3318,
		3321,3,524,262,0,3319,3321,3,526,263,0,3320,3318,1,0,0,0,3320,3319,1,0,
		0,0,3321,3324,1,0,0,0,3322,3323,5,314,0,0,3323,3325,3,528,264,0,3324,3322,
		1,0,0,0,3324,3325,1,0,0,0,3325,523,1,0,0,0,3326,3328,5,145,0,0,3327,3329,
		5,307,0,0,3328,3327,1,0,0,0,3328,3329,1,0,0,0,3329,3331,1,0,0,0,3330,3332,
		7,16,0,0,3331,3330,1,0,0,0,3331,3332,1,0,0,0,3332,525,1,0,0,0,3333,3334,
		5,184,0,0,3334,527,1,0,0,0,3335,3336,3,828,414,0,3336,529,1,0,0,0,3337,
		3338,5,323,0,0,3338,3339,5,25,0,0,3339,3344,3,532,266,0,3340,3341,5,24,
		0,0,3341,3343,3,532,266,0,3342,3340,1,0,0,0,3343,3346,1,0,0,0,3344,3342,
		1,0,0,0,3344,3345,1,0,0,0,3345,3348,1,0,0,0,3346,3344,1,0,0,0,3347,3349,
		5,24,0,0,3348,3347,1,0,0,0,3348,3349,1,0,0,0,3349,3350,1,0,0,0,3350,3351,
		5,26,0,0,3351,531,1,0,0,0,3352,3353,3,828,414,0,3353,3354,5,1,0,0,3354,
		3355,3,534,267,0,3355,533,1,0,0,0,3356,3361,3,856,428,0,3357,3361,5,327,
		0,0,3358,3361,3,892,446,0,3359,3361,3,888,444,0,3360,3356,1,0,0,0,3360,
		3357,1,0,0,0,3360,3358,1,0,0,0,3360,3359,1,0,0,0,3361,535,1,0,0,0,3362,
		3363,5,72,0,0,3363,3364,3,828,414,0,3364,3365,5,323,0,0,3365,3366,5,25,
		0,0,3366,3367,3,538,269,0,3367,3368,5,26,0,0,3368,537,1,0,0,0,3369,3374,
		3,540,270,0,3370,3371,5,24,0,0,3371,3373,3,540,270,0,3372,3370,1,0,0,0,
		3373,3376,1,0,0,0,3374,3372,1,0,0,0,3374,3375,1,0,0,0,3375,539,1,0,0,0,
		3376,3374,1,0,0,0,3377,3378,3,828,414,0,3378,3379,5,1,0,0,3379,3380,3,
		542,271,0,3380,541,1,0,0,0,3381,3382,3,14,7,0,3382,543,1,0,0,0,3383,3390,
		5,107,0,0,3384,3385,5,272,0,0,3385,3386,5,25,0,0,3386,3387,3,538,269,0,
		3387,3388,5,26,0,0,3388,3390,1,0,0,0,3389,3383,1,0,0,0,3389,3384,1,0,0,
		0,3390,545,1,0,0,0,3391,3392,3,828,414,0,3392,3393,5,1,0,0,3393,3394,3,
		548,274,0,3394,547,1,0,0,0,3395,3408,3,810,405,0,3396,3408,5,327,0,0,3397,
		3408,3,892,446,0,3398,3408,3,562,281,0,3399,3400,3,550,275,0,3400,3401,
		5,207,0,0,3401,3404,3,828,414,0,3402,3403,5,49,0,0,3403,3405,7,17,0,0,
		3404,3402,1,0,0,0,3404,3405,1,0,0,0,3405,3408,1,0,0,0,3406,3408,3,888,
		444,0,3407,3395,1,0,0,0,3407,3396,1,0,0,0,3407,3397,1,0,0,0,3407,3398,
		1,0,0,0,3407,3399,1,0,0,0,3407,3406,1,0,0,0,3408,549,1,0,0,0,3409,3420,
		3,14,7,0,3410,3417,3,552,276,0,3411,3412,5,24,0,0,3412,3413,3,14,7,0,3413,
		3414,3,552,276,0,3414,3416,1,0,0,0,3415,3411,1,0,0,0,3416,3419,1,0,0,0,
		3417,3415,1,0,0,0,3417,3418,1,0,0,0,3418,3421,1,0,0,0,3419,3417,1,0,0,
		0,3420,3410,1,0,0,0,3420,3421,1,0,0,0,3421,551,1,0,0,0,3422,3423,5,296,
		0,0,3423,3424,5,130,0,0,3424,3425,5,93,0,0,3425,3426,5,277,0,0,3426,3429,
		3,828,414,0,3427,3429,5,101,0,0,3428,3422,1,0,0,0,3428,3427,1,0,0,0,3429,
		553,1,0,0,0,3430,3431,5,133,0,0,3431,3432,3,828,414,0,3432,3433,3,556,
		278,0,3433,555,1,0,0,0,3434,3443,5,25,0,0,3435,3440,3,558,279,0,3436,3437,
		5,24,0,0,3437,3439,3,558,279,0,3438,3436,1,0,0,0,3439,3442,1,0,0,0,3440,
		3438,1,0,0,0,3440,3441,1,0,0,0,3441,3444,1,0,0,0,3442,3440,1,0,0,0,3443,
		3435,1,0,0,0,3443,3444,1,0,0,0,3444,3445,1,0,0,0,3445,3446,5,26,0,0,3446,
		557,1,0,0,0,3447,3448,3,828,414,0,3448,3449,5,1,0,0,3449,3450,3,560,280,
		0,3450,559,1,0,0,0,3451,3454,5,327,0,0,3452,3454,3,892,446,0,3453,3451,
		1,0,0,0,3453,3452,1,0,0,0,3454,561,1,0,0,0,3455,3456,5,25,0,0,3456,3461,
		3,564,282,0,3457,3458,5,24,0,0,3458,3460,3,564,282,0,3459,3457,1,0,0,0,
		3460,3463,1,0,0,0,3461,3459,1,0,0,0,3461,3462,1,0,0,0,3462,3464,1,0,0,
		0,3463,3461,1,0,0,0,3464,3465,5,26,0,0,3465,3468,1,0,0,0,3466,3468,3,564,
		282,0,3467,3455,1,0,0,0,3467,3466,1,0,0,0,3468,563,1,0,0,0,3469,3470,5,
		25,0,0,3470,3475,3,142,71,0,3471,3472,5,24,0,0,3472,3474,3,142,71,0,3473,
		3471,1,0,0,0,3474,3477,1,0,0,0,3475,3473,1,0,0,0,3475,3476,1,0,0,0,3476,
		3478,1,0,0,0,3477,3475,1,0,0,0,3478,3479,5,26,0,0,3479,565,1,0,0,0,3480,
		3484,3,488,244,0,3481,3484,3,490,245,0,3482,3484,3,492,246,0,3483,3480,
		1,0,0,0,3483,3481,1,0,0,0,3483,3482,1,0,0,0,3484,567,1,0,0,0,3485,3490,
		5,111,0,0,3486,3491,5,287,0,0,3487,3491,5,290,0,0,3488,3489,5,130,0,0,
		3489,3491,5,287,0,0,3490,3486,1,0,0,0,3490,3487,1,0,0,0,3490,3488,1,0,
		0,0,3491,3494,1,0,0,0,3492,3493,5,153,0,0,3493,3495,5,127,0,0,3494,3492,
		1,0,0,0,3494,3495,1,0,0,0,3495,3496,1,0,0,0,3496,3497,3,678,339,0,3497,
		569,1,0,0,0,3498,3499,5,86,0,0,3499,3500,5,313,0,0,3500,3504,3,580,290,
		0,3501,3503,3,582,291,0,3502,3501,1,0,0,0,3503,3506,1,0,0,0,3504,3502,
		1,0,0,0,3504,3505,1,0,0,0,3505,571,1,0,0,0,3506,3504,1,0,0,0,3507,3508,
		5,43,0,0,3508,3509,5,313,0,0,3509,3521,3,580,290,0,3510,3512,5,323,0,0,
		3511,3510,1,0,0,0,3511,3512,1,0,0,0,3512,3514,1,0,0,0,3513,3515,3,582,
		291,0,3514,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3514,1,0,0,0,3516,3517,
		1,0,0,0,3517,3522,1,0,0,0,3518,3519,5,244,0,0,3519,3520,5,296,0,0,3520,
		3522,3,580,290,0,3521,3511,1,0,0,0,3521,3518,1,0,0,0,3522,573,1,0,0,0,
		3523,3524,5,86,0,0,3524,3525,5,147,0,0,3525,3539,3,580,290,0,3526,3527,
		5,323,0,0,3527,3528,5,313,0,0,3528,3533,3,580,290,0,3529,3530,5,24,0,0,
		3530,3532,3,580,290,0,3531,3529,1,0,0,0,3532,3535,1,0,0,0,3533,3531,1,
		0,0,0,3533,3534,1,0,0,0,3534,3537,1,0,0,0,3535,3533,1,0,0,0,3536,3538,
		5,24,0,0,3537,3536,1,0,0,0,3537,3538,1,0,0,0,3538,3540,1,0,0,0,3539,3526,
		1,0,0,0,3539,3540,1,0,0,0,3540,575,1,0,0,0,3541,3542,5,43,0,0,3542,3543,
		5,147,0,0,3543,3560,3,580,290,0,3544,3545,7,18,0,0,3545,3546,5,313,0,0,
		3546,3551,3,580,290,0,3547,3548,5,24,0,0,3548,3550,3,580,290,0,3549,3547,
		1,0,0,0,3550,3553,1,0,0,0,3551,3549,1,0,0,0,3551,3552,1,0,0,0,3552,3555,
		1,0,0,0,3553,3551,1,0,0,0,3554,3556,5,24,0,0,3555,3554,1,0,0,0,3555,3556,
		1,0,0,0,3556,3561,1,0,0,0,3557,3558,5,244,0,0,3558,3559,5,296,0,0,3559,
		3561,3,580,290,0,3560,3544,1,0,0,0,3560,3557,1,0,0,0,3561,577,1,0,0,0,
		3562,3563,5,111,0,0,3563,3566,7,19,0,0,3564,3565,5,153,0,0,3565,3567,5,
		127,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,3568,1,0,0,0,3568,3573,
		3,580,290,0,3569,3570,5,24,0,0,3570,3572,3,580,290,0,3571,3569,1,0,0,0,
		3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,0,3574,3577,1,0,0,
		0,3575,3573,1,0,0,0,3576,3578,5,24,0,0,3577,3576,1,0,0,0,3577,3578,1,0,
		0,0,3578,579,1,0,0,0,3579,3582,3,830,415,0,3580,3582,3,144,72,0,3581,3579,
		1,0,0,0,3581,3580,1,0,0,0,3582,581,1,0,0,0,3583,3586,3,584,292,0,3584,
		3586,3,592,296,0,3585,3583,1,0,0,0,3585,3584,1,0,0,0,3586,583,1,0,0,0,
		3587,3590,3,586,293,0,3588,3590,3,590,295,0,3589,3587,1,0,0,0,3589,3588,
		1,0,0,0,3590,585,1,0,0,0,3591,3593,5,116,0,0,3592,3591,1,0,0,0,3592,3593,
		1,0,0,0,3593,3594,1,0,0,0,3594,3595,5,221,0,0,3595,3596,3,588,294,0,3596,
		587,1,0,0,0,3597,3598,7,20,0,0,3598,589,1,0,0,0,3599,3600,5,150,0,0,3600,
		3601,5,327,0,0,3601,591,1,0,0,0,3602,3603,7,21,0,0,3603,593,1,0,0,0,3604,
		3605,5,146,0,0,3605,3606,3,602,301,0,3606,3607,5,207,0,0,3607,3612,3,832,
		416,0,3608,3609,5,24,0,0,3609,3611,3,832,416,0,3610,3608,1,0,0,0,3611,
		3614,1,0,0,0,3612,3610,1,0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,
		3612,1,0,0,0,3615,3616,5,296,0,0,3616,3621,3,580,290,0,3617,3618,5,24,
		0,0,3618,3620,3,580,290,0,3619,3617,1,0,0,0,3620,3623,1,0,0,0,3621,3619,
		1,0,0,0,3621,3622,1,0,0,0,3622,3625,1,0,0,0,3623,3621,1,0,0,0,3624,3626,
		5,24,0,0,3625,3624,1,0,0,0,3625,3626,1,0,0,0,3626,3630,1,0,0,0,3627,3628,
		5,323,0,0,3628,3629,5,146,0,0,3629,3631,5,210,0,0,3630,3627,1,0,0,0,3630,
		3631,1,0,0,0,3631,595,1,0,0,0,3632,3636,5,258,0,0,3633,3634,5,146,0,0,
		3634,3635,5,210,0,0,3635,3637,5,139,0,0,3636,3633,1,0,0,0,3636,3637,1,
		0,0,0,3637,3638,1,0,0,0,3638,3639,3,602,301,0,3639,3640,5,207,0,0,3640,
		3645,3,832,416,0,3641,3642,5,24,0,0,3642,3644,3,832,416,0,3643,3641,1,
		0,0,0,3644,3647,1,0,0,0,3645,3643,1,0,0,0,3645,3646,1,0,0,0,3646,3648,
		1,0,0,0,3647,3645,1,0,0,0,3648,3649,5,141,0,0,3649,3654,3,580,290,0,3650,
		3651,5,24,0,0,3651,3653,3,580,290,0,3652,3650,1,0,0,0,3653,3656,1,0,0,
		0,3654,3652,1,0,0,0,3654,3655,1,0,0,0,3655,597,1,0,0,0,3656,3654,1,0,0,
		0,3657,3682,5,82,0,0,3658,3682,5,183,0,0,3659,3682,5,167,0,0,3660,3682,
		5,186,0,0,3661,3682,5,111,0,0,3662,3682,5,146,0,0,3663,3664,5,193,0,0,
		3664,3682,7,22,0,0,3665,3666,7,23,0,0,3666,3682,5,263,0,0,3667,3668,7,
		24,0,0,3668,3682,5,267,0,0,3669,3671,5,270,0,0,3670,3672,7,25,0,0,3671,
		3670,1,0,0,0,3671,3672,1,0,0,0,3672,3682,1,0,0,0,3673,3675,7,26,0,0,3674,
		3676,5,180,0,0,3675,3674,1,0,0,0,3675,3676,1,0,0,0,3676,3682,1,0,0,0,3677,
		3679,5,86,0,0,3678,3680,7,27,0,0,3679,3678,1,0,0,0,3679,3680,1,0,0,0,3680,
		3682,1,0,0,0,3681,3657,1,0,0,0,3681,3658,1,0,0,0,3681,3659,1,0,0,0,3681,
		3660,1,0,0,0,3681,3661,1,0,0,0,3681,3662,1,0,0,0,3681,3663,1,0,0,0,3681,
		3665,1,0,0,0,3681,3667,1,0,0,0,3681,3669,1,0,0,0,3681,3673,1,0,0,0,3681,
		3677,1,0,0,0,3682,599,1,0,0,0,3683,3686,3,598,299,0,3684,3686,5,327,0,
		0,3685,3683,1,0,0,0,3685,3684,1,0,0,0,3686,601,1,0,0,0,3687,3692,3,600,
		300,0,3688,3689,5,24,0,0,3689,3691,3,600,300,0,3690,3688,1,0,0,0,3691,
		3694,1,0,0,0,3692,3690,1,0,0,0,3692,3693,1,0,0,0,3693,3696,1,0,0,0,3694,
		3692,1,0,0,0,3695,3697,5,24,0,0,3696,3695,1,0,0,0,3696,3697,1,0,0,0,3697,
		3703,1,0,0,0,3698,3700,5,42,0,0,3699,3701,5,232,0,0,3700,3699,1,0,0,0,
		3700,3701,1,0,0,0,3701,3703,1,0,0,0,3702,3687,1,0,0,0,3702,3698,1,0,0,
		0,3703,603,1,0,0,0,3704,3705,5,86,0,0,3705,3706,5,249,0,0,3706,3707,5,
		227,0,0,3707,3708,3,674,337,0,3708,3709,3,456,228,0,3709,605,1,0,0,0,3710,
		3711,5,43,0,0,3711,3712,5,249,0,0,3712,3713,5,227,0,0,3713,3714,3,674,
		337,0,3714,3719,3,608,304,0,3715,3716,5,24,0,0,3716,3718,3,608,304,0,3717,
		3715,1,0,0,0,3718,3721,1,0,0,0,3719,3717,1,0,0,0,3719,3720,1,0,0,0,3720,
		607,1,0,0,0,3721,3719,1,0,0,0,3722,3725,3,490,245,0,3723,3725,3,492,246,
		0,3724,3722,1,0,0,0,3724,3723,1,0,0,0,3725,609,1,0,0,0,3726,3727,5,111,
		0,0,3727,3728,5,249,0,0,3728,3729,5,227,0,0,3729,3730,3,674,337,0,3730,
		611,1,0,0,0,3731,3732,5,86,0,0,3732,3733,5,249,0,0,3733,3734,5,227,0,0,
		3734,3735,5,74,0,0,3735,3736,3,674,337,0,3736,3737,3,456,228,0,3737,613,
		1,0,0,0,3738,3739,5,43,0,0,3739,3740,5,249,0,0,3740,3741,5,227,0,0,3741,
		3742,5,74,0,0,3742,3743,3,674,337,0,3743,3748,3,616,308,0,3744,3745,5,
		24,0,0,3745,3747,3,616,308,0,3746,3744,1,0,0,0,3747,3750,1,0,0,0,3748,
		3746,1,0,0,0,3748,3749,1,0,0,0,3749,615,1,0,0,0,3750,3748,1,0,0,0,3751,
		3754,3,490,245,0,3752,3754,3,492,246,0,3753,3751,1,0,0,0,3753,3752,1,0,
		0,0,3754,617,1,0,0,0,3755,3756,5,111,0,0,3756,3757,5,249,0,0,3757,3758,
		5,227,0,0,3758,3759,5,74,0,0,3759,3760,3,674,337,0,3760,619,1,0,0,0,3761,
		3762,5,86,0,0,3762,3763,5,53,0,0,3763,3764,5,247,0,0,3764,3765,3,674,337,
		0,3765,3766,5,139,0,0,3766,3771,3,622,311,0,3767,3768,5,24,0,0,3768,3770,
		3,622,311,0,3769,3767,1,0,0,0,3770,3773,1,0,0,0,3771,3769,1,0,0,0,3771,
		3772,1,0,0,0,3772,3774,1,0,0,0,3773,3771,1,0,0,0,3774,3775,5,323,0,0,3775,
		3776,5,25,0,0,3776,3777,3,624,312,0,3777,3778,5,26,0,0,3778,621,1,0,0,
		0,3779,3780,3,674,337,0,3780,3781,5,49,0,0,3781,3782,3,674,337,0,3782,
		623,1,0,0,0,3783,3788,3,626,313,0,3784,3785,5,24,0,0,3785,3787,3,626,313,
		0,3786,3784,1,0,0,0,3787,3790,1,0,0,0,3788,3786,1,0,0,0,3788,3789,1,0,
		0,0,3789,625,1,0,0,0,3790,3788,1,0,0,0,3791,3792,3,828,414,0,3792,3793,
		5,1,0,0,3793,3794,3,14,7,0,3794,627,1,0,0,0,3795,3796,5,43,0,0,3796,3797,
		5,53,0,0,3797,3798,5,247,0,0,3798,3799,3,674,337,0,3799,3804,3,630,315,
		0,3800,3801,5,24,0,0,3801,3803,3,630,315,0,3802,3800,1,0,0,0,3803,3806,
		1,0,0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,0,3805,629,1,0,0,0,3806,3804,
		1,0,0,0,3807,3808,3,632,316,0,3808,631,1,0,0,0,3809,3810,5,272,0,0,3810,
		3811,5,25,0,0,3811,3812,3,624,312,0,3812,3813,5,26,0,0,3813,633,1,0,0,
		0,3814,3815,5,111,0,0,3815,3816,5,53,0,0,3816,3817,5,247,0,0,3817,3819,
		3,674,337,0,3818,3820,5,69,0,0,3819,3818,1,0,0,0,3819,3820,1,0,0,0,3820,
		635,1,0,0,0,3821,3824,3,80,40,0,3822,3824,3,144,72,0,3823,3821,1,0,0,0,
		3823,3822,1,0,0,0,3824,637,1,0,0,0,3825,3826,5,86,0,0,3826,3827,5,299,
		0,0,3827,3828,3,674,337,0,3828,3829,5,141,0,0,3829,3830,3,674,337,0,3830,
		3831,5,296,0,0,3831,3834,3,674,337,0,3832,3833,5,314,0,0,3833,3835,3,636,
		318,0,3834,3832,1,0,0,0,3834,3835,1,0,0,0,3835,3836,1,0,0,0,3836,3837,
		5,323,0,0,3837,3838,5,25,0,0,3838,3839,3,640,320,0,3839,3840,5,26,0,0,
		3840,639,1,0,0,0,3841,3846,3,642,321,0,3842,3843,5,24,0,0,3843,3845,3,
		642,321,0,3844,3842,1,0,0,0,3845,3848,1,0,0,0,3846,3844,1,0,0,0,3846,3847,
		1,0,0,0,3847,641,1,0,0,0,3848,3846,1,0,0,0,3849,3850,3,828,414,0,3850,
		3851,5,1,0,0,3851,3852,3,14,7,0,3852,643,1,0,0,0,3853,3854,5,43,0,0,3854,
		3855,5,299,0,0,3855,3856,3,674,337,0,3856,3861,3,646,323,0,3857,3858,5,
		24,0,0,3858,3860,3,646,323,0,3859,3857,1,0,0,0,3860,3863,1,0,0,0,3861,
		3859,1,0,0,0,3861,3862,1,0,0,0,3862,645,1,0,0,0,3863,3861,1,0,0,0,3864,
		3867,3,648,324,0,3865,3867,3,650,325,0,3866,3864,1,0,0,0,3866,3865,1,0,
		0,0,3867,647,1,0,0,0,3868,3869,5,272,0,0,3869,3870,5,25,0,0,3870,3871,
		3,640,320,0,3871,3872,5,26,0,0,3872,649,1,0,0,0,3873,3874,5,272,0,0,3874,
		3875,5,314,0,0,3875,3876,3,636,318,0,3876,651,1,0,0,0,3877,3878,5,111,
		0,0,3878,3879,5,299,0,0,3879,3881,3,674,337,0,3880,3882,5,69,0,0,3881,
		3880,1,0,0,0,3881,3882,1,0,0,0,3882,653,1,0,0,0,3883,3888,3,146,73,0,3884,
		3885,5,24,0,0,3885,3887,3,146,73,0,3886,3884,1,0,0,0,3887,3890,1,0,0,0,
		3888,3886,1,0,0,0,3888,3889,1,0,0,0,3889,655,1,0,0,0,3890,3888,1,0,0,0,
		3891,3892,5,100,0,0,3892,3893,7,28,0,0,3893,3894,3,144,72,0,3894,3896,
		5,25,0,0,3895,3897,3,654,327,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,
		3898,1,0,0,0,3898,3899,5,26,0,0,3899,3900,5,49,0,0,3900,3901,3,658,329,
		0,3901,3902,5,117,0,0,3902,3903,5,100,0,0,3903,657,1,0,0,0,3904,3906,5,
		22,0,0,3905,3904,1,0,0,0,3906,3909,1,0,0,0,3907,3905,1,0,0,0,3907,3908,
		1,0,0,0,3908,3928,1,0,0,0,3909,3907,1,0,0,0,3910,3919,3,12,6,0,3911,3913,
		5,22,0,0,3912,3911,1,0,0,0,3913,3914,1,0,0,0,3914,3912,1,0,0,0,3914,3915,
		1,0,0,0,3915,3916,1,0,0,0,3916,3918,3,12,6,0,3917,3912,1,0,0,0,3918,3921,
		1,0,0,0,3919,3917,1,0,0,0,3919,3920,1,0,0,0,3920,3925,1,0,0,0,3921,3919,
		1,0,0,0,3922,3924,5,22,0,0,3923,3922,1,0,0,0,3924,3927,1,0,0,0,3925,3923,
		1,0,0,0,3925,3926,1,0,0,0,3926,3929,1,0,0,0,3927,3925,1,0,0,0,3928,3910,
		1,0,0,0,3928,3929,1,0,0,0,3929,659,1,0,0,0,3930,3932,5,122,0,0,3931,3930,
		1,0,0,0,3931,3932,1,0,0,0,3932,3933,1,0,0,0,3933,3934,5,153,0,0,3934,3935,
		3,14,7,0,3935,3938,3,222,111,0,3936,3937,5,113,0,0,3937,3939,3,222,111,
		0,3938,3936,1,0,0,0,3938,3939,1,0,0,0,3939,661,1,0,0,0,3940,3942,5,122,
		0,0,3941,3940,1,0,0,0,3941,3942,1,0,0,0,3942,3944,1,0,0,0,3943,3945,5,
		218,0,0,3944,3943,1,0,0,0,3944,3945,1,0,0,0,3945,3946,1,0,0,0,3946,3947,
		5,139,0,0,3947,3948,3,144,72,0,3948,3949,5,158,0,0,3949,3950,3,14,7,0,
		3950,3953,3,222,111,0,3951,3952,5,113,0,0,3952,3954,3,222,111,0,3953,3951,
		1,0,0,0,3953,3954,1,0,0,0,3954,663,1,0,0,0,3955,3956,3,854,427,0,3956,
		3957,5,23,0,0,3957,3959,1,0,0,0,3958,3955,1,0,0,0,3958,3959,1,0,0,0,3959,
		3961,1,0,0,0,3960,3962,5,29,0,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,
		3993,1,0,0,0,3963,3994,3,666,333,0,3964,3965,3,834,417,0,3965,3977,5,25,
		0,0,3966,3971,3,668,334,0,3967,3968,5,24,0,0,3968,3970,3,668,334,0,3969,
		3967,1,0,0,0,3970,3973,1,0,0,0,3971,3969,1,0,0,0,3971,3972,1,0,0,0,3972,
		3975,1,0,0,0,3973,3971,1,0,0,0,3974,3976,5,24,0,0,3975,3974,1,0,0,0,3975,
		3976,1,0,0,0,3976,3978,1,0,0,0,3977,3966,1,0,0,0,3977,3978,1,0,0,0,3978,
		3979,1,0,0,0,3979,3980,5,26,0,0,3980,3994,1,0,0,0,3981,3987,3,144,72,0,
		3982,3984,5,25,0,0,3983,3985,3,112,56,0,3984,3983,1,0,0,0,3984,3985,1,
		0,0,0,3985,3986,1,0,0,0,3986,3988,5,26,0,0,3987,3982,1,0,0,0,3987,3988,
		1,0,0,0,3988,3991,1,0,0,0,3989,3990,5,318,0,0,3990,3992,3,850,425,0,3991,
		3989,1,0,0,0,3991,3992,1,0,0,0,3992,3994,1,0,0,0,3993,3963,1,0,0,0,3993,
		3964,1,0,0,0,3993,3981,1,0,0,0,3994,3996,1,0,0,0,3995,3997,3,670,335,0,
		3996,3995,1,0,0,0,3996,3997,1,0,0,0,3997,665,1,0,0,0,3998,4001,3,862,431,
		0,3999,4000,5,318,0,0,4000,4002,3,850,425,0,4001,3999,1,0,0,0,4001,4002,
		1,0,0,0,4002,667,1,0,0,0,4003,4005,5,29,0,0,4004,4003,1,0,0,0,4004,4005,
		1,0,0,0,4005,4006,1,0,0,0,4006,4009,3,128,64,0,4007,4008,5,318,0,0,4008,
		4010,3,850,425,0,4009,4007,1,0,0,0,4009,4010,1,0,0,0,4010,669,1,0,0,0,
		4011,4024,5,323,0,0,4012,4025,3,672,336,0,4013,4014,5,25,0,0,4014,4019,
		3,672,336,0,4015,4016,5,24,0,0,4016,4018,3,672,336,0,4017,4015,1,0,0,0,
		4018,4021,1,0,0,0,4019,4017,1,0,0,0,4019,4020,1,0,0,0,4020,4022,1,0,0,
		0,4021,4019,1,0,0,0,4022,4023,5,26,0,0,4023,4025,1,0,0,0,4024,4012,1,0,
		0,0,4024,4013,1,0,0,0,4025,671,1,0,0,0,4026,4045,3,844,422,0,4027,4043,
		5,1,0,0,4028,4044,3,160,80,0,4029,4030,5,25,0,0,4030,4035,3,160,80,0,4031,
		4032,5,24,0,0,4032,4034,3,160,80,0,4033,4031,1,0,0,0,4034,4037,1,0,0,0,
		4035,4033,1,0,0,0,4035,4036,1,0,0,0,4036,4039,1,0,0,0,4037,4035,1,0,0,
		0,4038,4040,5,24,0,0,4039,4038,1,0,0,0,4039,4040,1,0,0,0,4040,4041,1,0,
		0,0,4041,4042,5,26,0,0,4042,4044,1,0,0,0,4043,4028,1,0,0,0,4043,4029,1,
		0,0,0,4044,4046,1,0,0,0,4045,4027,1,0,0,0,4045,4046,1,0,0,0,4046,4072,
		1,0,0,0,4047,4049,7,29,0,0,4048,4050,5,1,0,0,4049,4048,1,0,0,0,4049,4050,
		1,0,0,0,4050,4051,1,0,0,0,4051,4072,3,204,102,0,4052,4054,5,267,0,0,4053,
		4055,5,1,0,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,4055,4056,1,0,0,0,4056,
		4065,5,25,0,0,4057,4062,3,164,82,0,4058,4059,5,24,0,0,4059,4061,3,164,
		82,0,4060,4058,1,0,0,0,4061,4064,1,0,0,0,4062,4060,1,0,0,0,4062,4063,1,
		0,0,0,4063,4066,1,0,0,0,4064,4062,1,0,0,0,4065,4057,1,0,0,0,4065,4066,
		1,0,0,0,4066,4068,1,0,0,0,4067,4069,5,24,0,0,4068,4067,1,0,0,0,4068,4069,
		1,0,0,0,4069,4070,1,0,0,0,4070,4072,5,26,0,0,4071,4026,1,0,0,0,4071,4047,
		1,0,0,0,4071,4052,1,0,0,0,4072,673,1,0,0,0,4073,4074,3,854,427,0,4074,
		4075,5,23,0,0,4075,4077,1,0,0,0,4076,4073,1,0,0,0,4076,4077,1,0,0,0,4077,
		4078,1,0,0,0,4078,4079,3,860,430,0,4079,675,1,0,0,0,4080,4086,3,674,337,
		0,4081,4083,5,29,0,0,4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,4084,1,0,
		0,0,4084,4086,3,144,72,0,4085,4080,1,0,0,0,4085,4082,1,0,0,0,4086,677,
		1,0,0,0,4087,4089,3,676,338,0,4088,4090,3,670,335,0,4089,4088,1,0,0,0,
		4089,4090,1,0,0,0,4090,679,1,0,0,0,4091,4095,3,678,339,0,4092,4093,5,119,
		0,0,4093,4094,5,67,0,0,4094,4096,3,114,57,0,4095,4092,1,0,0,0,4095,4096,
		1,0,0,0,4096,681,1,0,0,0,4097,4099,5,60,0,0,4098,4097,1,0,0,0,4098,4099,
		1,0,0,0,4099,4100,1,0,0,0,4100,4101,5,101,0,0,4101,4102,5,141,0,0,4102,
		4107,3,678,339,0,4103,4104,5,321,0,0,4104,4108,3,14,7,0,4105,4106,5,207,
		0,0,4106,4108,3,366,183,0,4107,4103,1,0,0,0,4107,4105,1,0,0,0,4107,4108,
		1,0,0,0,4108,4110,1,0,0,0,4109,4111,3,362,181,0,4110,4109,1,0,0,0,4110,
		4111,1,0,0,0,4111,683,1,0,0,0,4112,4114,5,60,0,0,4113,4112,1,0,0,0,4113,
		4114,1,0,0,0,4114,4115,1,0,0,0,4115,4116,5,310,0,0,4116,4125,3,678,339,
		0,4117,4118,5,272,0,0,4118,4121,3,686,343,0,4119,4120,5,321,0,0,4120,4122,
		3,14,7,0,4121,4119,1,0,0,0,4121,4122,1,0,0,0,4122,4126,1,0,0,0,4123,4124,
		5,207,0,0,4124,4126,3,366,183,0,4125,4117,1,0,0,0,4125,4123,1,0,0,0,4126,
		4128,1,0,0,0,4127,4129,3,362,181,0,4128,4127,1,0,0,0,4128,4129,1,0,0,0,
		4129,685,1,0,0,0,4130,4133,3,688,344,0,4131,4133,3,694,347,0,4132,4130,
		1,0,0,0,4132,4131,1,0,0,0,4133,687,1,0,0,0,4134,4139,3,690,345,0,4135,
		4136,5,24,0,0,4136,4138,3,690,345,0,4137,4135,1,0,0,0,4138,4141,1,0,0,
		0,4139,4137,1,0,0,0,4139,4140,1,0,0,0,4140,689,1,0,0,0,4141,4139,1,0,0,
		0,4142,4143,3,692,346,0,4143,4144,5,1,0,0,4144,4145,3,14,7,0,4145,691,
		1,0,0,0,4146,4147,3,120,60,0,4147,693,1,0,0,0,4148,4149,3,696,348,0,4149,
		4150,5,1,0,0,4150,4151,5,25,0,0,4151,4152,3,376,188,0,4152,4153,5,26,0,
		0,4153,695,1,0,0,0,4154,4155,5,25,0,0,4155,4160,3,692,346,0,4156,4157,
		5,24,0,0,4157,4159,3,692,346,0,4158,4156,1,0,0,0,4159,4162,1,0,0,0,4160,
		4158,1,0,0,0,4160,4161,1,0,0,0,4161,4163,1,0,0,0,4162,4160,1,0,0,0,4163,
		4164,5,26,0,0,4164,697,1,0,0,0,4165,4166,5,86,0,0,4166,4170,5,297,0,0,
		4167,4168,5,153,0,0,4168,4169,5,199,0,0,4169,4171,5,127,0,0,4170,4167,
		1,0,0,0,4170,4171,1,0,0,0,4171,4172,1,0,0,0,4172,4174,3,744,372,0,4173,
		4175,3,700,350,0,4174,4173,1,0,0,0,4174,4175,1,0,0,0,4175,4177,1,0,0,0,
		4176,4178,3,704,352,0,4177,4176,1,0,0,0,4177,4178,1,0,0,0,4178,699,1,0,
		0,0,4179,4180,5,25,0,0,4180,4185,3,702,351,0,4181,4182,5,24,0,0,4182,4184,
		3,702,351,0,4183,4181,1,0,0,0,4184,4187,1,0,0,0,4185,4183,1,0,0,0,4185,
		4186,1,0,0,0,4186,4188,1,0,0,0,4187,4185,1,0,0,0,4188,4189,5,26,0,0,4189,
		701,1,0,0,0,4190,4191,3,712,356,0,4191,703,1,0,0,0,4192,4193,5,323,0,0,
		4193,4194,5,25,0,0,4194,4195,3,730,365,0,4195,4196,5,26,0,0,4196,705,1,
		0,0,0,4197,4198,5,43,0,0,4198,4201,5,297,0,0,4199,4200,5,153,0,0,4200,
		4202,5,127,0,0,4201,4199,1,0,0,0,4201,4202,1,0,0,0,4202,4203,1,0,0,0,4203,
		4204,3,744,372,0,4204,4209,3,708,354,0,4205,4206,5,24,0,0,4206,4208,3,
		708,354,0,4207,4205,1,0,0,0,4208,4211,1,0,0,0,4209,4207,1,0,0,0,4209,4210,
		1,0,0,0,4210,707,1,0,0,0,4211,4209,1,0,0,0,4212,4218,3,710,355,0,4213,
		4218,3,714,357,0,4214,4218,3,718,359,0,4215,4218,3,724,362,0,4216,4218,
		3,726,363,0,4217,4212,1,0,0,0,4217,4213,1,0,0,0,4217,4214,1,0,0,0,4217,
		4215,1,0,0,0,4217,4216,1,0,0,0,4218,709,1,0,0,0,4219,4220,5,40,0,0,4220,
		4221,3,712,356,0,4221,711,1,0,0,0,4222,4223,5,84,0,0,4223,4225,3,828,414,
		0,4224,4226,3,736,368,0,4225,4224,1,0,0,0,4225,4226,1,0,0,0,4226,713,1,
		0,0,0,4227,4228,5,43,0,0,4228,4229,5,84,0,0,4229,4230,3,746,373,0,4230,
		4231,3,716,358,0,4231,715,1,0,0,0,4232,4235,3,720,360,0,4233,4235,3,722,
		361,0,4234,4232,1,0,0,0,4234,4233,1,0,0,0,4235,717,1,0,0,0,4236,4237,5,
		111,0,0,4237,4238,5,84,0,0,4238,4239,3,746,373,0,4239,719,1,0,0,0,4240,
		4241,5,272,0,0,4241,4242,5,25,0,0,4242,4243,3,738,369,0,4243,4244,5,26,
		0,0,4244,721,1,0,0,0,4245,4246,5,248,0,0,4246,4247,5,25,0,0,4247,4252,
		3,828,414,0,4248,4249,5,24,0,0,4249,4251,3,828,414,0,4250,4248,1,0,0,0,
		4251,4254,1,0,0,0,4252,4250,1,0,0,0,4252,4253,1,0,0,0,4253,4255,1,0,0,
		0,4254,4252,1,0,0,0,4255,4256,5,26,0,0,4256,723,1,0,0,0,4257,4258,5,272,
		0,0,4258,4259,5,25,0,0,4259,4260,3,730,365,0,4260,4261,5,26,0,0,4261,725,
		1,0,0,0,4262,4263,5,248,0,0,4263,4264,5,25,0,0,4264,4269,3,828,414,0,4265,
		4266,5,24,0,0,4266,4268,3,846,423,0,4267,4265,1,0,0,0,4268,4271,1,0,0,
		0,4269,4267,1,0,0,0,4269,4270,1,0,0,0,4270,4272,1,0,0,0,4271,4269,1,0,
		0,0,4272,4273,5,26,0,0,4273,727,1,0,0,0,4274,4275,5,111,0,0,4275,4278,
		5,297,0,0,4276,4277,5,153,0,0,4277,4279,5,127,0,0,4278,4276,1,0,0,0,4278,
		4279,1,0,0,0,4279,4280,1,0,0,0,4280,4281,3,744,372,0,4281,729,1,0,0,0,
		4282,4287,3,732,366,0,4283,4284,5,24,0,0,4284,4286,3,732,366,0,4285,4283,
		1,0,0,0,4286,4289,1,0,0,0,4287,4285,1,0,0,0,4287,4288,1,0,0,0,4288,731,
		1,0,0,0,4289,4287,1,0,0,0,4290,4291,3,828,414,0,4291,4292,5,1,0,0,4292,
		4293,3,734,367,0,4293,733,1,0,0,0,4294,4295,3,14,7,0,4295,735,1,0,0,0,
		4296,4297,5,323,0,0,4297,4298,5,25,0,0,4298,4299,3,738,369,0,4299,4300,
		5,26,0,0,4300,737,1,0,0,0,4301,4306,3,740,370,0,4302,4303,5,24,0,0,4303,
		4305,3,740,370,0,4304,4302,1,0,0,0,4305,4308,1,0,0,0,4306,4304,1,0,0,0,
		4306,4307,1,0,0,0,4307,739,1,0,0,0,4308,4306,1,0,0,0,4309,4310,3,828,414,
		0,4310,4311,5,1,0,0,4311,4312,3,742,371,0,4312,741,1,0,0,0,4313,4314,3,
		14,7,0,4314,743,1,0,0,0,4315,4316,3,854,427,0,4316,4317,5,23,0,0,4317,
		4319,1,0,0,0,4318,4315,1,0,0,0,4318,4319,1,0,0,0,4319,4320,1,0,0,0,4320,
		4321,3,828,414,0,4321,745,1,0,0,0,4322,4323,3,846,423,0,4323,747,1,0,0,
		0,4324,4325,5,250,0,0,4325,4329,5,202,0,0,4326,4327,5,154,0,0,4327,4329,
		5,202,0,0,4328,4324,1,0,0,0,4328,4326,1,0,0,0,4329,749,1,0,0,0,4330,4331,
		5,134,0,0,4331,4332,5,25,0,0,4332,4333,5,321,0,0,4333,4334,3,14,7,0,4334,
		4335,5,26,0,0,4335,751,1,0,0,0,4336,4339,3,754,377,0,4337,4339,3,764,382,
		0,4338,4336,1,0,0,0,4338,4337,1,0,0,0,4339,753,1,0,0,0,4340,4341,3,838,
		419,0,4341,755,1,0,0,0,4342,4343,5,322,0,0,4343,4344,3,758,379,0,4344,
		757,1,0,0,0,4345,4350,3,760,380,0,4346,4347,5,24,0,0,4347,4349,3,760,380,
		0,4348,4346,1,0,0,0,4349,4352,1,0,0,0,4350,4348,1,0,0,0,4350,4351,1,0,
		0,0,4351,759,1,0,0,0,4352,4350,1,0,0,0,4353,4354,3,762,381,0,4354,4355,
		5,49,0,0,4355,4356,3,764,382,0,4356,761,1,0,0,0,4357,4358,3,754,377,0,
		4358,763,1,0,0,0,4359,4360,5,25,0,0,4360,4361,3,766,383,0,4361,4362,5,
		26,0,0,4362,765,1,0,0,0,4363,4365,3,768,384,0,4364,4363,1,0,0,0,4364,4365,
		1,0,0,0,4365,4367,1,0,0,0,4366,4368,3,770,385,0,4367,4366,1,0,0,0,4367,
		4368,1,0,0,0,4368,4370,1,0,0,0,4369,4371,3,772,386,0,4370,4369,1,0,0,0,
		4370,4371,1,0,0,0,4371,4373,1,0,0,0,4372,4374,3,774,387,0,4373,4372,1,
		0,0,0,4373,4374,1,0,0,0,4374,767,1,0,0,0,4375,4376,3,754,377,0,4376,769,
		1,0,0,0,4377,4379,5,219,0,0,4378,4380,5,79,0,0,4379,4378,1,0,0,0,4379,
		4380,1,0,0,0,4380,4381,1,0,0,0,4381,4382,5,67,0,0,4382,4383,3,130,65,0,
		4383,771,1,0,0,0,4384,4385,3,314,157,0,4385,773,1,0,0,0,4386,4387,3,776,
		388,0,4387,4389,3,778,389,0,4388,4390,3,784,392,0,4389,4388,1,0,0,0,4389,
		4390,1,0,0,0,4390,775,1,0,0,0,4391,4392,7,30,0,0,4392,777,1,0,0,0,4393,
		4396,3,782,391,0,4394,4396,3,780,390,0,4395,4393,1,0,0,0,4395,4394,1,0,
		0,0,4396,779,1,0,0,0,4397,4398,5,65,0,0,4398,4399,3,782,391,0,4399,4400,
		5,45,0,0,4400,4401,3,782,391,0,4401,781,1,0,0,0,4402,4403,5,89,0,0,4403,
		4410,5,263,0,0,4404,4407,3,14,7,0,4405,4407,5,304,0,0,4406,4404,1,0,0,
		0,4406,4405,1,0,0,0,4407,4408,1,0,0,0,4408,4410,7,31,0,0,4409,4402,1,0,
		0,0,4409,4406,1,0,0,0,4410,783,1,0,0,0,4411,4412,5,124,0,0,4412,4413,5,
		89,0,0,4413,4422,5,263,0,0,4414,4415,5,124,0,0,4415,4422,5,147,0,0,4416,
		4417,5,124,0,0,4417,4422,5,295,0,0,4418,4419,5,124,0,0,4419,4420,5,197,
		0,0,4420,4422,5,214,0,0,4421,4411,1,0,0,0,4421,4414,1,0,0,0,4421,4416,
		1,0,0,0,4421,4418,1,0,0,0,4422,785,1,0,0,0,4423,4424,5,312,0,0,4424,4425,
		3,854,427,0,4425,787,1,0,0,0,4426,4427,5,25,0,0,4427,4428,3,232,116,0,
		4428,4429,5,26,0,0,4429,4432,1,0,0,0,4430,4432,3,234,117,0,4431,4426,1,
		0,0,0,4431,4430,1,0,0,0,4432,789,1,0,0,0,4433,4434,3,148,74,0,4434,4437,
		5,1,0,0,4435,4438,3,14,7,0,4436,4438,3,788,394,0,4437,4435,1,0,0,0,4437,
		4436,1,0,0,0,4438,791,1,0,0,0,4439,4440,5,78,0,0,4440,793,1,0,0,0,4441,
		4442,5,261,0,0,4442,795,1,0,0,0,4443,4448,3,678,339,0,4444,4445,5,25,0,
		0,4445,4446,3,124,62,0,4446,4447,5,26,0,0,4447,4449,1,0,0,0,4448,4444,
		1,0,0,0,4448,4449,1,0,0,0,4449,797,1,0,0,0,4450,4455,3,796,398,0,4451,
		4452,5,24,0,0,4452,4454,3,796,398,0,4453,4451,1,0,0,0,4454,4457,1,0,0,
		0,4455,4453,1,0,0,0,4455,4456,1,0,0,0,4456,4459,1,0,0,0,4457,4455,1,0,
		0,0,4458,4460,5,24,0,0,4459,4458,1,0,0,0,4459,4460,1,0,0,0,4460,799,1,
		0,0,0,4461,4462,5,44,0,0,4462,4463,3,798,399,0,4463,801,1,0,0,0,4464,4465,
		5,43,0,0,4465,4468,5,276,0,0,4466,4467,5,153,0,0,4467,4469,5,127,0,0,4468,
		4466,1,0,0,0,4468,4469,1,0,0,0,4469,4470,1,0,0,0,4470,4472,3,674,337,0,
		4471,4473,3,804,402,0,4472,4471,1,0,0,0,4473,4474,1,0,0,0,4474,4472,1,
		0,0,0,4474,4475,1,0,0,0,4475,803,1,0,0,0,4476,4478,5,278,0,0,4477,4479,
		5,323,0,0,4478,4477,1,0,0,0,4478,4479,1,0,0,0,4479,4480,1,0,0,0,4480,4493,
		3,892,446,0,4481,4483,5,251,0,0,4482,4484,5,323,0,0,4483,4482,1,0,0,0,
		4483,4484,1,0,0,0,4484,4485,1,0,0,0,4485,4493,3,892,446,0,4486,4493,5,
		251,0,0,4487,4489,5,159,0,0,4488,4490,5,67,0,0,4489,4488,1,0,0,0,4489,
		4490,1,0,0,0,4490,4491,1,0,0,0,4491,4493,3,892,446,0,4492,4476,1,0,0,0,
		4492,4481,1,0,0,0,4492,4486,1,0,0,0,4492,4487,1,0,0,0,4493,805,1,0,0,0,
		4494,4495,5,274,0,0,4495,4496,5,86,0,0,4496,4497,5,287,0,0,4497,4498,3,
		678,339,0,4498,807,1,0,0,0,4499,4500,7,32,0,0,4500,809,1,0,0,0,4501,4504,
		3,808,404,0,4502,4504,3,866,433,0,4503,4501,1,0,0,0,4503,4502,1,0,0,0,
		4504,811,1,0,0,0,4505,4513,3,808,404,0,4506,4513,3,884,442,0,4507,4513,
		3,868,434,0,4508,4513,3,872,436,0,4509,4513,3,876,438,0,4510,4513,3,878,
		439,0,4511,4513,3,880,440,0,4512,4505,1,0,0,0,4512,4506,1,0,0,0,4512,4507,
		1,0,0,0,4512,4508,1,0,0,0,4512,4509,1,0,0,0,4512,4510,1,0,0,0,4512,4511,
		1,0,0,0,4513,813,1,0,0,0,4514,4521,3,808,404,0,4515,4521,3,884,442,0,4516,
		4521,3,874,437,0,4517,4521,3,876,438,0,4518,4521,3,878,439,0,4519,4521,
		3,880,440,0,4520,4514,1,0,0,0,4520,4515,1,0,0,0,4520,4516,1,0,0,0,4520,
		4517,1,0,0,0,4520,4518,1,0,0,0,4520,4519,1,0,0,0,4521,815,1,0,0,0,4522,
		4528,3,808,404,0,4523,4528,3,884,442,0,4524,4528,3,874,437,0,4525,4528,
		3,878,439,0,4526,4528,3,880,440,0,4527,4522,1,0,0,0,4527,4523,1,0,0,0,
		4527,4524,1,0,0,0,4527,4525,1,0,0,0,4527,4526,1,0,0,0,4528,817,1,0,0,0,
		4529,4538,3,808,404,0,4530,4538,3,884,442,0,4531,4538,3,868,434,0,4532,
		4538,3,870,435,0,4533,4538,3,872,436,0,4534,4538,3,874,437,0,4535,4538,
		3,876,438,0,4536,4538,3,880,440,0,4537,4529,1,0,0,0,4537,4530,1,0,0,0,
		4537,4531,1,0,0,0,4537,4532,1,0,0,0,4537,4533,1,0,0,0,4537,4534,1,0,0,
		0,4537,4535,1,0,0,0,4537,4536,1,0,0,0,4538,819,1,0,0,0,4539,4547,3,808,
		404,0,4540,4547,3,884,442,0,4541,4547,3,868,434,0,4542,4547,3,872,436,
		0,4543,4547,3,876,438,0,4544,4547,3,878,439,0,4545,4547,3,880,440,0,4546,
		4539,1,0,0,0,4546,4540,1,0,0,0,4546,4541,1,0,0,0,4546,4542,1,0,0,0,4546,
		4543,1,0,0,0,4546,4544,1,0,0,0,4546,4545,1,0,0,0,4547,821,1,0,0,0,4548,
		4556,3,808,404,0,4549,4556,3,884,442,0,4550,4556,3,870,435,0,4551,4556,
		3,874,437,0,4552,4556,3,876,438,0,4553,4556,3,878,439,0,4554,4556,3,880,
		440,0,4555,4548,1,0,0,0,4555,4549,1,0,0,0,4555,4550,1,0,0,0,4555,4551,
		1,0,0,0,4555,4552,1,0,0,0,4555,4553,1,0,0,0,4555,4554,1,0,0,0,4556,823,
		1,0,0,0,4557,4566,3,808,404,0,4558,4566,3,884,442,0,4559,4566,3,868,434,
		0,4560,4566,3,870,435,0,4561,4566,3,872,436,0,4562,4566,3,874,437,0,4563,
		4566,3,876,438,0,4564,4566,3,878,439,0,4565,4557,1,0,0,0,4565,4558,1,0,
		0,0,4565,4559,1,0,0,0,4565,4560,1,0,0,0,4565,4561,1,0,0,0,4565,4562,1,
		0,0,0,4565,4563,1,0,0,0,4565,4564,1,0,0,0,4566,825,1,0,0,0,4567,4570,3,
		808,404,0,4568,4570,3,882,441,0,4569,4567,1,0,0,0,4569,4568,1,0,0,0,4570,
		827,1,0,0,0,4571,4574,3,810,405,0,4572,4574,5,327,0,0,4573,4571,1,0,0,
		0,4573,4572,1,0,0,0,4574,829,1,0,0,0,4575,4578,3,856,428,0,4576,4578,5,
		327,0,0,4577,4575,1,0,0,0,4577,4576,1,0,0,0,4578,831,1,0,0,0,4579,4582,
		3,812,406,0,4580,4582,5,327,0,0,4581,4579,1,0,0,0,4581,4580,1,0,0,0,4582,
		833,1,0,0,0,4583,4586,3,814,407,0,4584,4586,5,327,0,0,4585,4583,1,0,0,
		0,4585,4584,1,0,0,0,4586,835,1,0,0,0,4587,4590,3,816,408,0,4588,4590,5,
		327,0,0,4589,4587,1,0,0,0,4589,4588,1,0,0,0,4590,837,1,0,0,0,4591,4594,
		3,818,409,0,4592,4594,5,327,0,0,4593,4591,1,0,0,0,4593,4592,1,0,0,0,4594,
		839,1,0,0,0,4595,4598,3,820,410,0,4596,4598,5,327,0,0,4597,4595,1,0,0,
		0,4597,4596,1,0,0,0,4598,841,1,0,0,0,4599,4602,3,822,411,0,4600,4602,5,
		327,0,0,4601,4599,1,0,0,0,4601,4600,1,0,0,0,4602,843,1,0,0,0,4603,4606,
		3,824,412,0,4604,4606,5,327,0,0,4605,4603,1,0,0,0,4605,4604,1,0,0,0,4606,
		845,1,0,0,0,4607,4610,3,808,404,0,4608,4610,5,327,0,0,4609,4607,1,0,0,
		0,4609,4608,1,0,0,0,4610,847,1,0,0,0,4611,4614,3,826,413,0,4612,4614,5,
		327,0,0,4613,4611,1,0,0,0,4613,4612,1,0,0,0,4614,849,1,0,0,0,4615,4619,
		3,828,414,0,4616,4617,5,231,0,0,4617,4619,5,177,0,0,4618,4615,1,0,0,0,
		4618,4616,1,0,0,0,4619,851,1,0,0,0,4620,4621,3,828,414,0,4621,4622,5,23,
		0,0,4622,4624,1,0,0,0,4623,4620,1,0,0,0,4623,4624,1,0,0,0,4624,853,1,0,
		0,0,4625,4626,3,828,414,0,4626,4627,5,28,0,0,4627,4629,1,0,0,0,4628,4625,
		1,0,0,0,4628,4629,1,0,0,0,4629,4632,1,0,0,0,4630,4633,3,116,58,0,4631,
		4633,5,19,0,0,4632,4630,1,0,0,0,4632,4631,1,0,0,0,4633,855,1,0,0,0,4634,
		4637,3,810,405,0,4635,4637,3,886,443,0,4636,4634,1,0,0,0,4636,4635,1,0,
		0,0,4637,857,1,0,0,0,4638,4639,3,830,415,0,4639,4640,5,23,0,0,4640,4642,
		1,0,0,0,4641,4638,1,0,0,0,4641,4642,1,0,0,0,4642,859,1,0,0,0,4643,4645,
		5,29,0,0,4644,4643,1,0,0,0,4644,4645,1,0,0,0,4645,4646,1,0,0,0,4646,4647,
		3,830,415,0,4647,861,1,0,0,0,4648,4651,3,840,420,0,4649,4651,3,886,443,
		0,4650,4648,1,0,0,0,4650,4649,1,0,0,0,4651,863,1,0,0,0,4652,4654,5,29,
		0,0,4653,4652,1,0,0,0,4653,4654,1,0,0,0,4654,4655,1,0,0,0,4655,4656,3,
		862,431,0,4656,865,1,0,0,0,4657,4666,3,884,442,0,4658,4666,3,868,434,0,
		4659,4666,3,870,435,0,4660,4666,3,872,436,0,4661,4666,3,874,437,0,4662,
		4666,3,876,438,0,4663,4666,3,878,439,0,4664,4666,3,880,440,0,4665,4657,
		1,0,0,0,4665,4658,1,0,0,0,4665,4659,1,0,0,0,4665,4660,1,0,0,0,4665,4661,
		1,0,0,0,4665,4662,1,0,0,0,4665,4663,1,0,0,0,4665,4664,1,0,0,0,4666,867,
		1,0,0,0,4667,4668,7,33,0,0,4668,869,1,0,0,0,4669,4670,7,34,0,0,4670,871,
		1,0,0,0,4671,4672,7,35,0,0,4672,873,1,0,0,0,4673,4674,5,76,0,0,4674,875,
		1,0,0,0,4675,4676,5,79,0,0,4676,877,1,0,0,0,4677,4678,7,30,0,0,4678,879,
		1,0,0,0,4679,4680,7,29,0,0,4680,881,1,0,0,0,4681,4682,7,36,0,0,4682,883,
		1,0,0,0,4683,4684,7,37,0,0,4684,885,1,0,0,0,4685,4686,7,38,0,0,4686,887,
		1,0,0,0,4687,4688,7,39,0,0,4688,889,1,0,0,0,4689,4690,5,332,0,0,4690,891,
		1,0,0,0,4691,4692,7,40,0,0,4692,893,1,0,0,0,515,899,904,911,916,922,930,
		938,945,949,957,962,967,969,1035,1042,1046,1053,1061,1066,1070,1076,1082,
		1085,1089,1097,1101,1104,1108,1119,1124,1126,1135,1156,1161,1170,1172,
		1179,1187,1195,1202,1212,1214,1218,1223,1227,1233,1239,1243,1247,1250,
		1257,1263,1267,1272,1275,1289,1294,1297,1311,1318,1329,1340,1360,1366,
		1371,1375,1389,1391,1398,1404,1415,1423,1429,1436,1444,1457,1463,1467,
		1470,1472,1480,1488,1494,1500,1506,1509,1518,1527,1534,1542,1555,1562,
		1566,1573,1577,1582,1589,1596,1599,1606,1610,1620,1643,1649,1653,1660,
		1666,1673,1677,1681,1687,1692,1701,1704,1710,1715,1723,1730,1752,1756,
		1758,1762,1771,1775,1777,1781,1790,1794,1832,1836,1856,1859,1865,1885,
		1890,1896,1901,1904,1908,1935,1943,1946,1953,1966,1970,1982,1995,2000,
		2007,2011,2018,2027,2036,2044,2048,2052,2059,2061,2064,2069,2074,2078,
		2085,2092,2096,2100,2104,2108,2110,2121,2130,2135,2141,2146,2150,2154,
		2158,2161,2165,2169,2177,2181,2186,2189,2193,2197,2200,2204,2207,2210,
		2215,2218,2221,2224,2238,2240,2251,2261,2271,2274,2281,2305,2316,2322,
		2326,2330,2334,2338,2342,2346,2350,2356,2363,2373,2384,2397,2413,2423,
		2443,2449,2456,2463,2471,2480,2517,2519,2522,2527,2531,2535,2541,2547,
		2551,2556,2561,2563,2567,2572,2575,2577,2581,2592,2603,2614,2618,2622,
		2626,2629,2633,2636,2642,2651,2654,2668,2674,2677,2682,2689,2696,2705,
		2710,2718,2733,2739,2747,2756,2760,2769,2781,2788,2796,2817,2825,2834,
		2844,2853,2858,2865,2875,2880,2889,2893,2897,2900,2903,2906,2909,2917,
		2922,2933,2940,2953,2961,2966,2973,2986,2997,3007,3013,3029,3046,3069,
		3089,3100,3108,3118,3123,3127,3133,3171,3183,3225,3233,3236,3240,3244,
		3254,3267,3280,3285,3297,3308,3313,3316,3320,3324,3328,3331,3344,3348,
		3360,3374,3389,3404,3407,3417,3420,3428,3440,3443,3453,3461,3467,3475,
		3483,3490,3494,3504,3511,3516,3521,3533,3537,3539,3551,3555,3560,3566,
		3573,3577,3581,3585,3589,3592,3612,3621,3625,3630,3636,3645,3654,3671,
		3675,3679,3681,3685,3692,3696,3700,3702,3719,3724,3748,3753,3771,3788,
		3804,3819,3823,3834,3846,3861,3866,3881,3888,3896,3907,3914,3919,3925,
		3928,3931,3938,3941,3944,3953,3958,3961,3971,3975,3977,3984,3987,3991,
		3993,3996,4001,4004,4009,4019,4024,4035,4039,4043,4045,4049,4054,4062,
		4065,4068,4071,4076,4082,4085,4089,4095,4098,4107,4110,4113,4121,4125,
		4128,4132,4139,4160,4170,4174,4177,4185,4201,4209,4217,4225,4234,4252,
		4269,4278,4287,4306,4318,4328,4338,4350,4364,4367,4370,4373,4379,4389,
		4395,4406,4409,4421,4431,4437,4448,4455,4459,4468,4474,4478,4483,4489,
		4492,4503,4512,4520,4527,4537,4546,4555,4565,4569,4573,4577,4581,4585,
		4589,4593,4597,4601,4605,4609,4613,4618,4623,4628,4632,4636,4641,4644,
		4650,4653,4665
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace YQLAntlr4Parser
