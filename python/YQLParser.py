# Generated from YQL.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,335,4694,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,1,0,1,0,1,0,1,0,1,0,3,0,900,8,0,1,1,5,1,
        903,8,1,10,1,12,1,906,9,1,1,1,1,1,4,1,910,8,1,11,1,12,1,911,1,1,
        5,1,915,8,1,10,1,12,1,918,9,1,1,1,5,1,921,8,1,10,1,12,1,924,9,1,
        1,1,1,1,1,2,5,2,929,8,2,10,2,12,2,932,9,2,1,2,1,2,1,3,5,3,937,8,
        3,10,3,12,3,940,9,3,1,3,1,3,4,3,944,8,3,11,3,12,3,945,5,3,948,8,
        3,10,3,12,3,951,9,3,1,3,1,3,1,3,5,3,956,8,3,10,3,12,3,959,9,3,1,
        4,1,4,3,4,963,8,4,1,5,1,5,1,5,3,5,968,8,5,3,5,970,8,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1036,8,
        6,1,7,1,7,1,7,5,7,1041,8,7,10,7,12,7,1044,9,7,1,7,3,7,1047,8,7,1,
        8,1,8,1,8,5,8,1052,8,8,10,8,12,8,1055,9,8,1,9,1,9,1,9,5,9,1060,8,
        9,10,9,12,9,1063,9,9,1,10,1,10,3,10,1067,8,10,1,11,1,11,3,11,1071,
        8,11,1,11,1,11,1,11,1,12,3,12,1077,8,12,1,12,1,12,1,12,1,12,3,12,
        1083,8,12,1,12,3,12,1086,8,12,1,12,1,12,3,12,1090,8,12,1,12,1,12,
        1,12,1,12,1,12,1,12,3,12,1098,8,12,1,12,1,12,3,12,1102,8,12,1,12,
        3,12,1105,8,12,1,12,1,12,3,12,1109,8,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,3,12,1120,8,12,1,12,4,12,1123,8,12,11,12,12,
        12,1124,3,12,1127,8,12,1,13,1,13,1,14,1,14,1,14,5,14,1134,8,14,10,
        14,12,14,1137,9,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1157,8,18,1,18,
        5,18,1160,8,18,10,18,12,18,1163,9,18,1,18,1,18,1,18,1,18,4,18,1169,
        8,18,11,18,12,18,1170,3,18,1173,8,18,1,19,1,19,1,19,5,19,1178,8,
        19,10,19,12,19,1181,9,19,1,20,1,20,1,20,5,20,1186,8,20,10,20,12,
        20,1189,9,20,1,21,1,21,1,21,5,21,1194,8,21,10,21,12,21,1197,9,21,
        1,22,1,22,1,22,1,22,3,22,1203,8,22,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,3,24,1213,8,24,3,24,1215,8,24,5,24,1217,8,24,10,24,12,
        24,1220,9,24,1,24,1,24,3,24,1224,8,24,1,25,1,25,3,25,1228,8,25,1,
        25,1,25,1,26,1,26,3,26,1234,8,26,1,26,1,26,1,27,1,27,3,27,1240,8,
        27,1,28,1,28,3,28,1244,8,28,1,29,1,29,3,29,1248,8,29,1,29,3,29,1251,
        8,29,1,29,1,29,1,30,1,30,1,30,3,30,1258,8,30,1,30,1,30,1,30,1,30,
        3,30,1264,8,30,5,30,1266,8,30,10,30,12,30,1269,9,30,1,31,1,31,3,
        31,1273,8,31,1,31,3,31,1276,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,5,32,1288,8,32,10,32,12,32,1291,9,32,1,33,1,33,
        3,33,1295,8,33,1,33,3,33,1298,8,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,3,34,1312,8,34,1,34,1,34,1,34,1,34,
        1,34,3,34,1319,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        3,35,1330,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
        1341,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,1361,8,38,1,38,1,38,1,39,
        1,39,3,39,1367,8,39,1,39,4,39,1370,8,39,11,39,12,39,1371,1,39,1,
        39,3,39,1376,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,3,40,1390,8,40,3,40,1392,8,40,1,41,1,41,1,42,1,42,1,
        42,3,42,1399,8,42,1,43,1,43,1,44,1,44,3,44,1405,8,44,1,45,1,45,1,
        45,1,45,1,46,1,46,1,46,5,46,1414,8,46,10,46,12,46,1417,9,46,1,47,
        1,47,1,47,1,47,1,47,3,47,1424,8,47,1,48,1,48,1,48,1,48,3,48,1430,
        8,48,1,49,1,49,1,49,1,49,1,49,3,49,1437,8,49,1,49,1,49,1,49,1,49,
        5,49,1443,8,49,10,49,12,49,1446,9,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,51,1,51,1,51,1,51,3,51,1458,8,51,1,51,1,51,1,52,1,52,3,52,1464,
        8,52,1,52,1,52,3,52,1468,8,52,1,52,3,52,1471,8,52,3,52,1473,8,52,
        1,53,1,53,1,53,1,53,1,53,1,53,3,53,1481,8,53,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,1489,8,54,1,54,1,54,1,54,1,54,3,54,1495,8,54,1,54,
        1,54,1,54,1,54,3,54,1501,8,54,1,54,1,54,1,55,1,55,3,55,1507,8,55,
        1,55,3,55,1510,8,55,1,55,1,55,1,56,1,56,1,56,5,56,1517,8,56,10,56,
        12,56,1520,9,56,1,57,1,57,1,57,1,57,5,57,1526,8,57,10,57,12,57,1529,
        9,57,1,57,1,57,1,58,1,58,3,58,1535,8,58,1,59,1,59,1,59,1,59,5,59,
        1541,8,59,10,59,12,59,1544,9,59,1,59,1,59,1,60,1,60,1,60,1,61,1,
        61,1,61,1,61,1,61,3,61,1556,8,61,1,62,1,62,1,62,5,62,1561,8,62,10,
        62,12,62,1564,9,62,1,62,3,62,1567,8,62,1,63,1,63,1,63,5,63,1572,
        8,63,10,63,12,63,1575,9,63,1,63,3,63,1578,8,63,1,64,1,64,1,64,3,
        64,1583,8,64,1,65,1,65,1,65,5,65,1588,8,65,10,65,12,65,1591,9,65,
        1,66,1,66,1,66,1,66,3,66,1597,8,66,1,66,3,66,1600,8,66,1,66,1,66,
        1,66,1,67,1,67,3,67,1607,8,67,1,67,1,67,3,67,1611,8,67,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,3,68,1621,8,68,1,68,1,68,1,69,1,69,
        1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,3,71,1644,8,71,1,72,1,72,1,72,1,72,3,72,1650,
        8,72,1,73,1,73,3,73,1654,8,73,1,74,1,74,1,74,5,74,1659,8,74,10,74,
        12,74,1662,9,74,1,75,1,75,1,75,3,75,1667,8,75,1,76,1,76,1,76,5,76,
        1672,8,76,10,76,12,76,1675,9,76,1,77,3,77,1678,8,77,1,77,1,77,3,
        77,1682,8,77,1,78,1,78,1,79,1,79,3,79,1688,8,79,1,80,1,80,1,80,3,
        80,1693,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,1702,8,82,1,
        82,3,82,1705,8,82,1,82,1,82,1,82,1,82,3,82,1711,8,82,1,83,1,83,1,
        83,3,83,1716,8,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1724,8,84,1,
        85,1,85,1,85,5,85,1729,8,85,10,85,12,85,1732,9,85,1,86,1,86,1,86,
        1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
        1,88,5,88,1751,8,88,10,88,12,88,1754,9,88,1,88,3,88,1757,8,88,3,
        88,1759,8,88,1,88,1,88,3,88,1763,8,88,1,89,1,89,1,89,1,89,1,89,5,
        89,1770,8,89,10,89,12,89,1773,9,89,1,89,3,89,1776,8,89,3,89,1778,
        8,89,1,89,1,89,3,89,1782,8,89,1,90,1,90,1,90,1,90,1,90,5,90,1789,
        8,90,10,90,12,90,1792,9,90,1,90,3,90,1795,8,90,1,90,1,90,1,91,1,
        91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,
        93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,
        96,1,96,1,96,1,96,1,96,5,96,1831,8,96,10,96,12,96,1834,9,96,1,96,
        3,96,1837,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,
        1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,1857,8,99,1,99,3,99,
        1860,8,99,1,99,1,99,1,99,1,99,3,99,1866,8,99,1,99,1,99,1,99,1,99,
        1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,3,100,1886,8,100,1,100,5,100,1889,8,100,10,100,
        12,100,1892,9,100,1,101,1,101,1,101,3,101,1897,8,101,1,101,5,101,
        1900,8,101,10,101,12,101,1903,9,101,3,101,1905,8,101,1,102,1,102,
        3,102,1909,8,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,1936,8,104,1,105,1,105,
        1,105,1,105,1,105,1,105,3,105,1944,8,105,1,106,3,106,1947,8,106,
        1,106,1,106,1,106,5,106,1952,8,106,10,106,12,106,1955,9,106,1,107,
        1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,109,1,109,3,109,1967,
        8,109,1,109,1,109,3,109,1971,8,109,1,109,1,109,1,110,1,110,1,110,
        1,110,1,110,1,111,1,111,1,111,3,111,1983,8,111,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,5,112,1994,8,112,10,112,12,112,
        1997,9,112,1,112,1,112,3,112,2001,8,112,1,113,1,113,1,113,1,113,
        1,113,3,113,2008,8,113,1,114,1,114,3,114,2012,8,114,1,115,1,115,
        1,115,5,115,2017,8,115,10,115,12,115,2020,9,115,1,116,1,116,1,116,
        1,116,5,116,2026,8,116,10,116,12,116,2029,9,116,1,117,1,117,1,117,
        1,117,5,117,2035,8,117,10,117,12,117,2038,9,117,1,118,1,118,1,118,
        1,118,1,118,3,118,2045,8,118,1,119,1,119,3,119,2049,8,119,1,119,
        1,119,3,119,2053,8,119,1,120,1,120,1,120,1,120,1,120,3,120,2060,
        8,120,3,120,2062,8,120,1,121,3,121,2065,8,121,1,121,1,121,1,121,
        3,121,2070,8,121,1,121,1,121,1,121,3,121,2075,8,121,1,122,1,122,
        3,122,2079,8,122,1,122,1,122,1,122,5,122,2084,8,122,10,122,12,122,
        2087,9,122,1,122,1,122,1,122,1,122,3,122,2093,8,122,1,122,1,122,
        3,122,2097,8,122,1,122,1,122,3,122,2101,8,122,1,122,1,122,3,122,
        2105,8,122,1,122,1,122,3,122,2109,8,122,3,122,2111,8,122,1,123,1,
        123,1,123,1,123,1,124,1,124,1,124,5,124,2120,8,124,10,124,12,124,
        2123,9,124,1,125,1,125,1,125,1,125,5,125,2129,8,125,10,125,12,125,
        2132,9,125,1,125,1,125,3,125,2136,8,125,1,125,1,125,1,125,1,125,
        3,125,2142,8,125,1,125,1,125,1,125,3,125,2147,8,125,1,125,1,125,
        3,125,2151,8,125,1,125,1,125,3,125,2155,8,125,1,125,1,125,3,125,
        2159,8,125,1,126,3,126,2162,8,126,1,127,1,127,3,127,2166,8,127,1,
        127,1,127,3,127,2170,8,127,1,127,1,127,1,127,1,127,5,127,2176,8,
        127,10,127,12,127,2179,9,127,1,127,3,127,2182,8,127,1,127,1,127,
        1,127,3,127,2187,8,127,1,127,3,127,2190,8,127,1,127,1,127,3,127,
        2194,8,127,1,127,1,127,3,127,2198,8,127,1,127,3,127,2201,8,127,1,
        127,1,127,3,127,2205,8,127,1,127,3,127,2208,8,127,1,127,3,127,2211,
        8,127,1,128,1,128,1,128,3,128,2216,8,128,1,128,3,128,2219,8,128,
        1,128,3,128,2222,8,128,1,128,3,128,2225,8,128,1,128,1,128,1,128,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,2239,
        8,129,3,129,2241,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,3,130,2252,8,130,1,131,1,131,1,131,1,132,1,132,1,132,
        5,132,2260,8,132,10,132,12,132,2263,9,132,1,133,1,133,1,133,1,133,
        1,134,1,134,1,134,3,134,2272,8,134,1,134,3,134,2275,8,134,1,134,
        1,134,1,134,1,134,1,134,3,134,2282,8,134,1,134,1,134,1,134,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2306,8,135,1,136,
        1,136,1,137,1,137,1,138,1,138,1,138,5,138,2315,8,138,10,138,12,138,
        2318,9,138,1,139,4,139,2321,8,139,11,139,12,139,2322,1,140,1,140,
        3,140,2327,8,140,1,141,1,141,3,141,2331,8,141,1,141,1,141,3,141,
        2335,8,141,1,141,1,141,3,141,2339,8,141,1,141,1,141,3,141,2343,8,
        141,1,141,1,141,3,141,2347,8,141,1,141,1,141,3,141,2351,8,141,1,
        141,1,141,1,141,1,141,3,141,2357,8,141,1,142,1,142,1,142,1,142,1,
        142,3,142,2364,8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,
        142,3,142,2374,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,5,
        144,2383,8,144,10,144,12,144,2386,9,144,1,144,1,144,1,145,1,145,
        1,145,1,146,1,146,1,146,5,146,2396,8,146,10,146,12,146,2399,9,146,
        1,147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,149,
        5,149,2412,8,149,10,149,12,149,2415,9,149,1,150,1,150,1,151,1,151,
        1,151,5,151,2422,8,151,10,151,12,151,2425,9,151,1,152,1,152,1,152,
        1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,
        1,157,1,157,1,158,3,158,2444,8,158,1,158,1,158,1,159,1,159,3,159,
        2450,8,159,1,159,1,159,1,159,1,159,1,159,3,159,2457,8,159,1,160,
        1,160,1,160,5,160,2462,8,160,10,160,12,160,2465,9,160,1,161,1,161,
        1,161,1,161,1,161,3,161,2472,8,161,1,162,1,162,1,163,1,163,1,163,
        5,163,2479,8,163,10,163,12,163,2482,9,163,1,164,1,164,1,164,1,164,
        1,164,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,
        1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2518,8,168,
        3,168,2520,8,168,1,169,3,169,2523,8,169,1,169,1,169,1,169,3,169,
        2528,8,169,1,169,1,169,3,169,2532,8,169,5,169,2534,8,169,10,169,
        12,169,2537,9,169,1,170,1,170,1,170,3,170,2542,8,170,1,171,1,171,
        1,171,1,171,3,171,2548,8,171,1,171,1,171,3,171,2552,8,171,1,172,
        1,172,1,172,3,172,2557,8,172,1,172,1,172,1,172,3,172,2562,8,172,
        3,172,2564,8,172,1,173,1,173,3,173,2568,8,173,1,173,1,173,1,173,
        3,173,2573,8,173,1,173,3,173,2576,8,173,3,173,2578,8,173,1,173,1,
        173,3,173,2582,8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,
        174,1,174,3,174,2593,8,174,1,175,1,175,1,175,1,176,1,176,1,176,1,
        176,1,176,1,176,3,176,2604,8,176,1,177,1,177,1,178,1,178,1,178,1,
        178,1,178,1,179,1,179,3,179,2615,8,179,1,179,1,179,3,179,2619,8,
        179,1,179,1,179,3,179,2623,8,179,1,179,1,179,3,179,2627,8,179,1,
        179,3,179,2630,8,179,1,179,1,179,3,179,2634,8,179,1,179,3,179,2637,
        8,179,1,180,1,180,1,180,1,180,3,180,2643,8,180,1,181,1,181,1,181,
        1,181,1,181,5,181,2650,8,181,10,181,12,181,2653,9,181,3,181,2655,
        8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,3,182,2669,8,182,1,182,1,182,1,182,1,182,3,182,2675,
        8,182,1,183,3,183,2678,8,183,1,183,1,183,1,183,3,183,2683,8,183,
        1,184,1,184,1,184,1,185,1,185,3,185,2690,8,185,1,186,1,186,1,186,
        5,186,2695,8,186,10,186,12,186,2698,9,186,1,187,1,187,1,187,1,187,
        1,188,1,188,3,188,2706,8,188,1,189,1,189,1,189,3,189,2711,8,189,
        1,189,1,189,1,189,1,189,1,189,1,189,3,189,2719,8,189,1,189,1,189,
        1,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,2732,
        8,190,10,190,12,190,2735,9,190,1,191,1,191,1,191,3,191,2740,8,191,
        1,192,1,192,1,192,1,192,1,192,1,192,3,192,2748,8,192,1,192,1,192,
        1,193,1,193,1,193,1,193,1,193,3,193,2757,8,193,1,193,1,193,3,193,
        2761,8,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,3,194,2770,
        8,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        3,195,2782,8,195,1,196,1,196,1,196,1,196,1,196,3,196,2789,8,196,
        1,196,1,196,1,196,1,196,1,196,1,196,3,196,2797,8,196,1,197,1,197,
        1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,
        1,199,1,199,1,200,1,200,1,200,1,200,3,200,2818,8,200,1,200,1,200,
        1,200,1,200,1,200,1,200,3,200,2826,8,200,1,201,1,201,1,201,1,202,
        1,202,1,202,1,202,3,202,2835,8,202,1,203,1,203,1,203,1,203,1,204,
        1,204,1,205,1,205,3,205,2845,8,205,1,206,1,206,1,206,1,206,1,206,
        5,206,2852,8,206,10,206,12,206,2855,9,206,1,206,1,206,3,206,2859,
        8,206,1,207,1,207,1,208,1,208,1,208,3,208,2866,8,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,1,208,3,208,2876,8,208,1,208,1,208,
        1,208,3,208,2881,8,208,1,208,1,208,1,208,1,208,1,208,5,208,2888,
        8,208,10,208,12,208,2891,9,208,1,208,3,208,2894,8,208,1,208,1,208,
        3,208,2898,8,208,1,208,3,208,2901,8,208,1,208,3,208,2904,8,208,1,
        208,3,208,2907,8,208,1,208,3,208,2910,8,208,1,209,1,209,1,209,1,
        209,1,209,1,209,3,209,2918,8,209,1,210,1,210,1,210,3,210,2923,8,
        210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,3,211,
        2934,8,211,1,212,1,212,1,212,1,213,1,213,3,213,2941,8,213,1,214,
        1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,5,215,2952,8,215,
        10,215,12,215,2955,9,215,1,216,1,216,1,216,5,216,2960,8,216,10,216,
        12,216,2963,9,216,1,217,1,217,3,217,2967,8,217,1,218,1,218,1,218,
        5,218,2972,8,218,10,218,12,218,2975,9,218,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,3,219,2987,8,219,1,220,1,220,
        1,220,1,220,1,221,1,221,1,221,5,221,2996,8,221,10,221,12,221,2999,
        9,221,1,222,1,222,1,222,1,222,1,223,1,223,1,223,3,223,3008,8,223,
        1,224,1,224,1,224,1,224,3,224,3014,8,224,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,5,226,3028,8,226,
        10,226,12,226,3031,9,226,1,226,1,226,1,227,1,227,1,227,1,227,1,227,
        1,228,1,228,1,228,1,228,1,228,5,228,3045,8,228,10,228,12,228,3048,
        9,228,1,228,1,228,1,229,1,229,1,229,1,230,1,230,1,230,1,230,1,231,
        1,231,1,231,1,232,1,232,1,232,1,232,1,232,1,232,5,232,3068,8,232,
        10,232,12,232,3071,9,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,
        3090,8,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,5,234,3099,
        8,234,10,234,12,234,3102,9,234,1,235,1,235,1,235,1,235,1,235,3,235,
        3109,8,235,1,236,1,236,1,236,1,236,1,236,1,236,5,236,3117,8,236,
        10,236,12,236,3120,9,236,1,237,1,237,3,237,3124,8,237,1,238,1,238,
        3,238,3128,8,238,1,238,1,238,1,239,1,239,3,239,3134,8,239,1,239,
        1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,241,1,241,1,241,1,241,
        1,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,243,
        1,243,1,243,1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,245,
        5,245,3170,8,245,10,245,12,245,3173,9,245,1,245,1,245,1,246,1,246,
        1,246,1,246,1,246,5,246,3182,8,246,10,246,12,246,3185,9,246,1,246,
        1,246,1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,249,1,249,1,249,
        1,249,1,250,1,250,1,250,1,250,1,250,1,250,1,251,1,251,1,251,1,252,
        1,252,1,252,1,252,1,252,1,253,1,253,1,253,1,253,1,254,1,254,1,254,
        1,254,1,254,1,255,1,255,1,255,3,255,3226,8,255,1,255,1,255,1,256,
        1,256,1,256,1,257,3,257,3234,8,257,1,257,3,257,3237,8,257,1,257,
        1,257,3,257,3241,8,257,1,258,1,258,3,258,3245,8,258,1,259,1,259,
        1,259,1,259,1,259,1,259,5,259,3253,8,259,10,259,12,259,3256,9,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,3266,8,259,
        10,259,12,259,3269,9,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,5,259,3279,8,259,10,259,12,259,3282,9,259,1,259,1,259,3,259,
        3286,8,259,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,5,260,
        3296,8,260,10,260,12,260,3299,9,260,1,260,1,260,1,260,1,260,1,260,
        1,260,5,260,3307,8,260,10,260,12,260,3310,9,260,1,260,1,260,3,260,
        3314,8,260,1,260,3,260,3317,8,260,1,261,1,261,3,261,3321,8,261,1,
        261,1,261,3,261,3325,8,261,1,262,1,262,3,262,3329,8,262,1,262,3,
        262,3332,8,262,1,263,1,263,1,264,1,264,1,265,1,265,1,265,1,265,1,
        265,5,265,3343,8,265,10,265,12,265,3346,9,265,1,265,3,265,3349,8,
        265,1,265,1,265,1,266,1,266,1,266,1,266,1,267,1,267,1,267,1,267,
        3,267,3361,8,267,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,269,
        1,269,1,269,5,269,3373,8,269,10,269,12,269,3376,9,269,1,270,1,270,
        1,270,1,270,1,271,1,271,1,272,1,272,1,272,1,272,1,272,1,272,3,272,
        3390,8,272,1,273,1,273,1,273,1,273,1,274,1,274,1,274,1,274,1,274,
        1,274,1,274,1,274,1,274,3,274,3405,8,274,1,274,3,274,3408,8,274,
        1,275,1,275,1,275,1,275,1,275,1,275,5,275,3416,8,275,10,275,12,275,
        3419,9,275,3,275,3421,8,275,1,276,1,276,1,276,1,276,1,276,1,276,
        3,276,3429,8,276,1,277,1,277,1,277,1,277,1,278,1,278,1,278,1,278,
        5,278,3439,8,278,10,278,12,278,3442,9,278,3,278,3444,8,278,1,278,
        1,278,1,279,1,279,1,279,1,279,1,280,1,280,3,280,3454,8,280,1,281,
        1,281,1,281,1,281,5,281,3460,8,281,10,281,12,281,3463,9,281,1,281,
        1,281,1,281,3,281,3468,8,281,1,282,1,282,1,282,1,282,5,282,3474,
        8,282,10,282,12,282,3477,9,282,1,282,1,282,1,283,1,283,1,283,3,283,
        3484,8,283,1,284,1,284,1,284,1,284,1,284,3,284,3491,8,284,1,284,
        1,284,3,284,3495,8,284,1,284,1,284,1,285,1,285,1,285,1,285,5,285,
        3503,8,285,10,285,12,285,3506,9,285,1,286,1,286,1,286,1,286,3,286,
        3512,8,286,1,286,4,286,3515,8,286,11,286,12,286,3516,1,286,1,286,
        1,286,3,286,3522,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
        1,287,5,287,3532,8,287,10,287,12,287,3535,9,287,1,287,3,287,3538,
        8,287,3,287,3540,8,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,5,288,3550,8,288,10,288,12,288,3553,9,288,1,288,3,288,3556,
        8,288,1,288,1,288,1,288,3,288,3561,8,288,1,289,1,289,1,289,1,289,
        3,289,3567,8,289,1,289,1,289,1,289,5,289,3572,8,289,10,289,12,289,
        3575,9,289,1,289,3,289,3578,8,289,1,290,1,290,3,290,3582,8,290,1,
        291,1,291,3,291,3586,8,291,1,292,1,292,3,292,3590,8,292,1,293,3,
        293,3593,8,293,1,293,1,293,1,293,1,294,1,294,1,295,1,295,1,295,1,
        296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,5,297,3611,8,297,10,
        297,12,297,3614,9,297,1,297,1,297,1,297,1,297,5,297,3620,8,297,10,
        297,12,297,3623,9,297,1,297,3,297,3626,8,297,1,297,1,297,1,297,3,
        297,3631,8,297,1,298,1,298,1,298,1,298,3,298,3637,8,298,1,298,1,
        298,1,298,1,298,1,298,5,298,3644,8,298,10,298,12,298,3647,9,298,
        1,298,1,298,1,298,1,298,5,298,3653,8,298,10,298,12,298,3656,9,298,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,3,299,3672,8,299,1,299,1,299,3,299,3676,8,299,
        1,299,1,299,3,299,3680,8,299,3,299,3682,8,299,1,300,1,300,3,300,
        3686,8,300,1,301,1,301,1,301,5,301,3691,8,301,10,301,12,301,3694,
        9,301,1,301,3,301,3697,8,301,1,301,1,301,3,301,3701,8,301,3,301,
        3703,8,301,1,302,1,302,1,302,1,302,1,302,1,302,1,303,1,303,1,303,
        1,303,1,303,1,303,1,303,5,303,3718,8,303,10,303,12,303,3721,9,303,
        1,304,1,304,3,304,3725,8,304,1,305,1,305,1,305,1,305,1,305,1,306,
        1,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,1,307,
        1,307,1,307,1,307,5,307,3747,8,307,10,307,12,307,3750,9,307,1,308,
        1,308,3,308,3754,8,308,1,309,1,309,1,309,1,309,1,309,1,309,1,310,
        1,310,1,310,1,310,1,310,1,310,1,310,1,310,5,310,3770,8,310,10,310,
        12,310,3773,9,310,1,310,1,310,1,310,1,310,1,310,1,311,1,311,1,311,
        1,311,1,312,1,312,1,312,5,312,3787,8,312,10,312,12,312,3790,9,312,
        1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,314,1,314,1,314,1,314,
        5,314,3803,8,314,10,314,12,314,3806,9,314,1,315,1,315,1,316,1,316,
        1,316,1,316,1,316,1,317,1,317,1,317,1,317,1,317,3,317,3820,8,317,
        1,318,1,318,3,318,3824,8,318,1,319,1,319,1,319,1,319,1,319,1,319,
        1,319,1,319,1,319,3,319,3835,8,319,1,319,1,319,1,319,1,319,1,319,
        1,320,1,320,1,320,5,320,3845,8,320,10,320,12,320,3848,9,320,1,321,
        1,321,1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,5,322,3860,
        8,322,10,322,12,322,3863,9,322,1,323,1,323,3,323,3867,8,323,1,324,
        1,324,1,324,1,324,1,324,1,325,1,325,1,325,1,325,1,326,1,326,1,326,
        1,326,3,326,3882,8,326,1,327,1,327,1,327,5,327,3887,8,327,10,327,
        12,327,3890,9,327,1,328,1,328,1,328,1,328,1,328,3,328,3897,8,328,
        1,328,1,328,1,328,1,328,1,328,1,328,1,329,5,329,3906,8,329,10,329,
        12,329,3909,9,329,1,329,1,329,4,329,3913,8,329,11,329,12,329,3914,
        1,329,5,329,3918,8,329,10,329,12,329,3921,9,329,1,329,5,329,3924,
        8,329,10,329,12,329,3927,9,329,3,329,3929,8,329,1,330,3,330,3932,
        8,330,1,330,1,330,1,330,1,330,1,330,3,330,3939,8,330,1,331,3,331,
        3942,8,331,1,331,3,331,3945,8,331,1,331,1,331,1,331,1,331,1,331,
        1,331,1,331,3,331,3954,8,331,1,332,1,332,1,332,3,332,3959,8,332,
        1,332,3,332,3962,8,332,1,332,1,332,1,332,1,332,1,332,1,332,5,332,
        3970,8,332,10,332,12,332,3973,9,332,1,332,3,332,3976,8,332,3,332,
        3978,8,332,1,332,1,332,1,332,1,332,1,332,3,332,3985,8,332,1,332,
        3,332,3988,8,332,1,332,1,332,3,332,3992,8,332,3,332,3994,8,332,1,
        332,3,332,3997,8,332,1,333,1,333,1,333,3,333,4002,8,333,1,334,3,
        334,4005,8,334,1,334,1,334,1,334,3,334,4010,8,334,1,335,1,335,1,
        335,1,335,1,335,1,335,5,335,4018,8,335,10,335,12,335,4021,9,335,
        1,335,1,335,3,335,4025,8,335,1,336,1,336,1,336,1,336,1,336,1,336,
        1,336,5,336,4034,8,336,10,336,12,336,4037,9,336,1,336,3,336,4040,
        8,336,1,336,1,336,3,336,4044,8,336,3,336,4046,8,336,1,336,1,336,
        3,336,4050,8,336,1,336,1,336,1,336,3,336,4055,8,336,1,336,1,336,
        1,336,1,336,5,336,4061,8,336,10,336,12,336,4064,9,336,3,336,4066,
        8,336,1,336,3,336,4069,8,336,1,336,3,336,4072,8,336,1,337,1,337,
        1,337,3,337,4077,8,337,1,337,1,337,1,338,1,338,3,338,4083,8,338,
        1,338,3,338,4086,8,338,1,339,1,339,3,339,4090,8,339,1,340,1,340,
        1,340,1,340,3,340,4096,8,340,1,341,3,341,4099,8,341,1,341,1,341,
        1,341,1,341,1,341,1,341,1,341,3,341,4108,8,341,1,341,3,341,4111,
        8,341,1,342,3,342,4114,8,342,1,342,1,342,1,342,1,342,1,342,1,342,
        3,342,4122,8,342,1,342,1,342,3,342,4126,8,342,1,342,3,342,4129,8,
        342,1,343,1,343,3,343,4133,8,343,1,344,1,344,1,344,5,344,4138,8,
        344,10,344,12,344,4141,9,344,1,345,1,345,1,345,1,345,1,346,1,346,
        1,347,1,347,1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,5,348,
        4159,8,348,10,348,12,348,4162,9,348,1,348,1,348,1,349,1,349,1,349,
        1,349,1,349,3,349,4171,8,349,1,349,1,349,3,349,4175,8,349,1,349,
        3,349,4178,8,349,1,350,1,350,1,350,1,350,5,350,4184,8,350,10,350,
        12,350,4187,9,350,1,350,1,350,1,351,1,351,1,352,1,352,1,352,1,352,
        1,352,1,353,1,353,1,353,1,353,3,353,4202,8,353,1,353,1,353,1,353,
        1,353,5,353,4208,8,353,10,353,12,353,4211,9,353,1,354,1,354,1,354,
        1,354,1,354,3,354,4218,8,354,1,355,1,355,1,355,1,356,1,356,1,356,
        3,356,4226,8,356,1,357,1,357,1,357,1,357,1,357,1,358,1,358,3,358,
        4235,8,358,1,359,1,359,1,359,1,359,1,360,1,360,1,360,1,360,1,360,
        1,361,1,361,1,361,1,361,1,361,5,361,4251,8,361,10,361,12,361,4254,
        9,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,363,1,363,1,363,
        1,363,1,363,5,363,4268,8,363,10,363,12,363,4271,9,363,1,363,1,363,
        1,364,1,364,1,364,1,364,3,364,4279,8,364,1,364,1,364,1,365,1,365,
        1,365,5,365,4286,8,365,10,365,12,365,4289,9,365,1,366,1,366,1,366,
        1,366,1,367,1,367,1,368,1,368,1,368,1,368,1,368,1,369,1,369,1,369,
        5,369,4305,8,369,10,369,12,369,4308,9,369,1,370,1,370,1,370,1,370,
        1,371,1,371,1,372,1,372,1,372,3,372,4319,8,372,1,372,1,372,1,373,
        1,373,1,374,1,374,1,374,1,374,3,374,4329,8,374,1,375,1,375,1,375,
        1,375,1,375,1,375,1,376,1,376,3,376,4339,8,376,1,377,1,377,1,378,
        1,378,1,378,1,379,1,379,1,379,5,379,4349,8,379,10,379,12,379,4352,
        9,379,1,380,1,380,1,380,1,380,1,381,1,381,1,382,1,382,1,382,1,382,
        1,383,3,383,4365,8,383,1,383,3,383,4368,8,383,1,383,3,383,4371,8,
        383,1,383,3,383,4374,8,383,1,384,1,384,1,385,1,385,3,385,4380,8,
        385,1,385,1,385,1,385,1,386,1,386,1,387,1,387,1,387,3,387,4390,8,
        387,1,388,1,388,1,389,1,389,3,389,4396,8,389,1,390,1,390,1,390,1,
        390,1,390,1,391,1,391,1,391,1,391,3,391,4407,8,391,1,391,3,391,4410,
        8,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
        3,392,4422,8,392,1,393,1,393,1,393,1,394,1,394,1,394,1,394,1,394,
        3,394,4432,8,394,1,395,1,395,1,395,1,395,3,395,4438,8,395,1,396,
        1,396,1,397,1,397,1,398,1,398,1,398,1,398,1,398,3,398,4449,8,398,
        1,399,1,399,1,399,5,399,4454,8,399,10,399,12,399,4457,9,399,1,399,
        3,399,4460,8,399,1,400,1,400,1,400,1,401,1,401,1,401,1,401,3,401,
        4469,8,401,1,401,1,401,4,401,4473,8,401,11,401,12,401,4474,1,402,
        1,402,3,402,4479,8,402,1,402,1,402,1,402,3,402,4484,8,402,1,402,
        1,402,1,402,1,402,3,402,4490,8,402,1,402,3,402,4493,8,402,1,403,
        1,403,1,403,1,403,1,403,1,404,1,404,1,405,1,405,3,405,4504,8,405,
        1,406,1,406,1,406,1,406,1,406,1,406,1,406,3,406,4513,8,406,1,407,
        1,407,1,407,1,407,1,407,1,407,3,407,4521,8,407,1,408,1,408,1,408,
        1,408,1,408,3,408,4528,8,408,1,409,1,409,1,409,1,409,1,409,1,409,
        1,409,1,409,3,409,4538,8,409,1,410,1,410,1,410,1,410,1,410,1,410,
        1,410,3,410,4547,8,410,1,411,1,411,1,411,1,411,1,411,1,411,1,411,
        3,411,4556,8,411,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
        3,412,4566,8,412,1,413,1,413,3,413,4570,8,413,1,414,1,414,3,414,
        4574,8,414,1,415,1,415,3,415,4578,8,415,1,416,1,416,3,416,4582,8,
        416,1,417,1,417,3,417,4586,8,417,1,418,1,418,3,418,4590,8,418,1,
        419,1,419,3,419,4594,8,419,1,420,1,420,3,420,4598,8,420,1,421,1,
        421,3,421,4602,8,421,1,422,1,422,3,422,4606,8,422,1,423,1,423,3,
        423,4610,8,423,1,424,1,424,3,424,4614,8,424,1,425,1,425,1,425,3,
        425,4619,8,425,1,426,1,426,1,426,3,426,4624,8,426,1,427,1,427,1,
        427,3,427,4629,8,427,1,427,1,427,3,427,4633,8,427,1,428,1,428,3,
        428,4637,8,428,1,429,1,429,1,429,3,429,4642,8,429,1,430,3,430,4645,
        8,430,1,430,1,430,1,431,1,431,3,431,4651,8,431,1,432,3,432,4654,
        8,432,1,432,1,432,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
        3,433,4666,8,433,1,434,1,434,1,435,1,435,1,436,1,436,1,437,1,437,
        1,438,1,438,1,439,1,439,1,440,1,440,1,441,1,441,1,442,1,442,1,443,
        1,443,1,444,1,444,1,445,1,445,1,446,1,446,1,446,0,0,447,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
        290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
        322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
        354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,
        386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,
        418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
        450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
        482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
        514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,
        546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
        578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,
        610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,
        642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,
        674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,
        706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,
        738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,
        770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,
        802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,
        834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
        866,868,870,872,874,876,878,880,882,884,886,888,890,892,0,41,2,0,
        52,52,284,284,6,0,144,144,155,155,181,181,187,187,240,240,260,260,
        1,0,5,8,1,0,16,17,1,0,19,21,2,0,16,18,199,199,2,0,114,114,120,120,
        4,0,120,120,132,132,301,301,308,308,2,0,80,80,305,305,2,0,50,50,
        102,102,2,0,24,24,205,205,2,0,42,42,109,109,2,0,164,164,269,269,
        3,0,105,105,183,183,211,211,2,0,64,64,286,286,2,0,209,209,271,271,
        2,0,53,53,285,285,3,0,191,192,194,194,268,268,2,0,40,40,111,111,
        2,0,147,147,313,313,2,0,201,201,327,327,2,0,185,185,198,198,2,0,
        56,56,288,288,2,0,119,119,310,310,3,0,43,43,103,103,243,243,3,0,
        56,56,263,263,288,288,2,0,142,142,312,312,3,0,106,106,235,235,287,
        287,2,0,39,39,281,281,2,0,77,77,267,267,3,0,149,149,237,237,264,
        264,2,0,138,138,229,229,1,0,328,329,20,0,52,52,65,66,70,71,88,88,
        90,92,115,115,127,127,141,142,152,152,174,176,199,199,201,201,233,
        233,238,238,255,256,262,262,270,270,284,284,304,304,320,321,3,0,
        47,47,119,119,279,279,11,0,42,42,49,49,51,51,109,109,123,123,151,
        151,169,169,182,182,306,306,322,322,324,324,56,0,38,41,43,46,48,
        48,50,50,53,57,59,64,67,67,69,69,72,74,78,78,80,86,89,89,93,99,101,
        104,106,108,111,114,116,117,120,122,124,124,126,126,128,131,133,
        136,138,140,143,148,150,150,153,165,167,168,170,171,178,178,180,
        181,184,194,196,198,202,206,208,210,212,214,217,229,231,232,234,
        236,239,244,246,248,250,253,257,258,260,261,263,263,266,266,268,
        269,273,278,281,283,285,290,292,300,303,303,305,305,307,313,315,
        316,319,319,325,326,49,0,38,41,43,46,48,48,50,50,53,57,59,64,67,
        67,69,69,72,75,78,78,80,87,89,89,93,104,106,108,110,114,116,117,
        120,122,124,126,128,131,133,136,138,140,143,148,150,150,153,168,
        170,173,177,181,184,198,200,200,202,210,212,232,234,236,239,244,
        246,248,250,254,257,261,263,263,265,266,268,269,271,271,273,278,
        281,283,285,290,292,300,303,303,305,305,307,316,318,319,323,323,
        325,326,12,0,68,68,105,105,118,118,137,137,183,183,211,211,249,249,
        272,272,280,280,291,291,302,302,317,317,2,0,132,132,301,301,1,0,
        330,331,5017,0,899,1,0,0,0,2,904,1,0,0,0,4,930,1,0,0,0,6,938,1,0,
        0,0,8,962,1,0,0,0,10,969,1,0,0,0,12,1035,1,0,0,0,14,1046,1,0,0,0,
        16,1048,1,0,0,0,18,1056,1,0,0,0,20,1064,1,0,0,0,22,1068,1,0,0,0,
        24,1126,1,0,0,0,26,1128,1,0,0,0,28,1130,1,0,0,0,30,1138,1,0,0,0,
        32,1141,1,0,0,0,34,1145,1,0,0,0,36,1148,1,0,0,0,38,1174,1,0,0,0,
        40,1182,1,0,0,0,42,1190,1,0,0,0,44,1202,1,0,0,0,46,1204,1,0,0,0,
        48,1218,1,0,0,0,50,1227,1,0,0,0,52,1233,1,0,0,0,54,1239,1,0,0,0,
        56,1243,1,0,0,0,58,1245,1,0,0,0,60,1254,1,0,0,0,62,1270,1,0,0,0,
        64,1279,1,0,0,0,66,1292,1,0,0,0,68,1318,1,0,0,0,70,1340,1,0,0,0,
        72,1342,1,0,0,0,74,1349,1,0,0,0,76,1356,1,0,0,0,78,1364,1,0,0,0,
        80,1379,1,0,0,0,82,1393,1,0,0,0,84,1398,1,0,0,0,86,1400,1,0,0,0,
        88,1404,1,0,0,0,90,1406,1,0,0,0,92,1410,1,0,0,0,94,1418,1,0,0,0,
        96,1429,1,0,0,0,98,1431,1,0,0,0,100,1449,1,0,0,0,102,1453,1,0,0,
        0,104,1472,1,0,0,0,106,1480,1,0,0,0,108,1482,1,0,0,0,110,1504,1,
        0,0,0,112,1513,1,0,0,0,114,1521,1,0,0,0,116,1534,1,0,0,0,118,1536,
        1,0,0,0,120,1547,1,0,0,0,122,1555,1,0,0,0,124,1557,1,0,0,0,126,1568,
        1,0,0,0,128,1579,1,0,0,0,130,1584,1,0,0,0,132,1592,1,0,0,0,134,1606,
        1,0,0,0,136,1620,1,0,0,0,138,1624,1,0,0,0,140,1628,1,0,0,0,142,1643,
        1,0,0,0,144,1645,1,0,0,0,146,1651,1,0,0,0,148,1655,1,0,0,0,150,1663,
        1,0,0,0,152,1668,1,0,0,0,154,1677,1,0,0,0,156,1683,1,0,0,0,158,1687,
        1,0,0,0,160,1692,1,0,0,0,162,1694,1,0,0,0,164,1710,1,0,0,0,166,1715,
        1,0,0,0,168,1719,1,0,0,0,170,1725,1,0,0,0,172,1733,1,0,0,0,174,1740,
        1,0,0,0,176,1745,1,0,0,0,178,1764,1,0,0,0,180,1783,1,0,0,0,182,1798,
        1,0,0,0,184,1803,1,0,0,0,186,1808,1,0,0,0,188,1813,1,0,0,0,190,1820,
        1,0,0,0,192,1825,1,0,0,0,194,1840,1,0,0,0,196,1845,1,0,0,0,198,1852,
        1,0,0,0,200,1885,1,0,0,0,202,1904,1,0,0,0,204,1908,1,0,0,0,206,1910,
        1,0,0,0,208,1935,1,0,0,0,210,1937,1,0,0,0,212,1946,1,0,0,0,214,1956,
        1,0,0,0,216,1961,1,0,0,0,218,1966,1,0,0,0,220,1974,1,0,0,0,222,1979,
        1,0,0,0,224,1984,1,0,0,0,226,2007,1,0,0,0,228,2009,1,0,0,0,230,2013,
        1,0,0,0,232,2021,1,0,0,0,234,2030,1,0,0,0,236,2044,1,0,0,0,238,2052,
        1,0,0,0,240,2054,1,0,0,0,242,2064,1,0,0,0,244,2076,1,0,0,0,246,2112,
        1,0,0,0,248,2116,1,0,0,0,250,2124,1,0,0,0,252,2161,1,0,0,0,254,2165,
        1,0,0,0,256,2212,1,0,0,0,258,2240,1,0,0,0,260,2251,1,0,0,0,262,2253,
        1,0,0,0,264,2256,1,0,0,0,266,2264,1,0,0,0,268,2271,1,0,0,0,270,2305,
        1,0,0,0,272,2307,1,0,0,0,274,2309,1,0,0,0,276,2311,1,0,0,0,278,2320,
        1,0,0,0,280,2324,1,0,0,0,282,2356,1,0,0,0,284,2373,1,0,0,0,286,2375,
        1,0,0,0,288,2377,1,0,0,0,290,2389,1,0,0,0,292,2392,1,0,0,0,294,2400,
        1,0,0,0,296,2406,1,0,0,0,298,2408,1,0,0,0,300,2416,1,0,0,0,302,2418,
        1,0,0,0,304,2426,1,0,0,0,306,2430,1,0,0,0,308,2432,1,0,0,0,310,2434,
        1,0,0,0,312,2436,1,0,0,0,314,2438,1,0,0,0,316,2443,1,0,0,0,318,2447,
        1,0,0,0,320,2458,1,0,0,0,322,2471,1,0,0,0,324,2473,1,0,0,0,326,2475,
        1,0,0,0,328,2483,1,0,0,0,330,2488,1,0,0,0,332,2493,1,0,0,0,334,2499,
        1,0,0,0,336,2519,1,0,0,0,338,2522,1,0,0,0,340,2538,1,0,0,0,342,2551,
        1,0,0,0,344,2553,1,0,0,0,346,2565,1,0,0,0,348,2592,1,0,0,0,350,2594,
        1,0,0,0,352,2597,1,0,0,0,354,2605,1,0,0,0,356,2607,1,0,0,0,358,2636,
        1,0,0,0,360,2642,1,0,0,0,362,2644,1,0,0,0,364,2668,1,0,0,0,366,2682,
        1,0,0,0,368,2684,1,0,0,0,370,2689,1,0,0,0,372,2691,1,0,0,0,374,2699,
        1,0,0,0,376,2705,1,0,0,0,378,2707,1,0,0,0,380,2723,1,0,0,0,382,2739,
        1,0,0,0,384,2741,1,0,0,0,386,2751,1,0,0,0,388,2765,1,0,0,0,390,2773,
        1,0,0,0,392,2783,1,0,0,0,394,2798,1,0,0,0,396,2801,1,0,0,0,398,2810,
        1,0,0,0,400,2813,1,0,0,0,402,2827,1,0,0,0,404,2834,1,0,0,0,406,2836,
        1,0,0,0,408,2840,1,0,0,0,410,2844,1,0,0,0,412,2858,1,0,0,0,414,2860,
        1,0,0,0,416,2862,1,0,0,0,418,2917,1,0,0,0,420,2919,1,0,0,0,422,2929,
        1,0,0,0,424,2935,1,0,0,0,426,2940,1,0,0,0,428,2942,1,0,0,0,430,2946,
        1,0,0,0,432,2956,1,0,0,0,434,2966,1,0,0,0,436,2968,1,0,0,0,438,2986,
        1,0,0,0,440,2988,1,0,0,0,442,2992,1,0,0,0,444,3000,1,0,0,0,446,3004,
        1,0,0,0,448,3009,1,0,0,0,450,3015,1,0,0,0,452,3022,1,0,0,0,454,3034,
        1,0,0,0,456,3039,1,0,0,0,458,3051,1,0,0,0,460,3054,1,0,0,0,462,3058,
        1,0,0,0,464,3061,1,0,0,0,466,3089,1,0,0,0,468,3091,1,0,0,0,470,3108,
        1,0,0,0,472,3110,1,0,0,0,474,3123,1,0,0,0,476,3125,1,0,0,0,478,3131,
        1,0,0,0,480,3137,1,0,0,0,482,3143,1,0,0,0,484,3150,1,0,0,0,486,3153,
        1,0,0,0,488,3160,1,0,0,0,490,3164,1,0,0,0,492,3176,1,0,0,0,494,3188,
        1,0,0,0,496,3191,1,0,0,0,498,3195,1,0,0,0,500,3199,1,0,0,0,502,3205,
        1,0,0,0,504,3208,1,0,0,0,506,3213,1,0,0,0,508,3217,1,0,0,0,510,3222,
        1,0,0,0,512,3229,1,0,0,0,514,3236,1,0,0,0,516,3242,1,0,0,0,518,3285,
        1,0,0,0,520,3287,1,0,0,0,522,3320,1,0,0,0,524,3326,1,0,0,0,526,3333,
        1,0,0,0,528,3335,1,0,0,0,530,3337,1,0,0,0,532,3352,1,0,0,0,534,3360,
        1,0,0,0,536,3362,1,0,0,0,538,3369,1,0,0,0,540,3377,1,0,0,0,542,3381,
        1,0,0,0,544,3389,1,0,0,0,546,3391,1,0,0,0,548,3407,1,0,0,0,550,3409,
        1,0,0,0,552,3428,1,0,0,0,554,3430,1,0,0,0,556,3434,1,0,0,0,558,3447,
        1,0,0,0,560,3453,1,0,0,0,562,3467,1,0,0,0,564,3469,1,0,0,0,566,3483,
        1,0,0,0,568,3485,1,0,0,0,570,3498,1,0,0,0,572,3507,1,0,0,0,574,3523,
        1,0,0,0,576,3541,1,0,0,0,578,3562,1,0,0,0,580,3581,1,0,0,0,582,3585,
        1,0,0,0,584,3589,1,0,0,0,586,3592,1,0,0,0,588,3597,1,0,0,0,590,3599,
        1,0,0,0,592,3602,1,0,0,0,594,3604,1,0,0,0,596,3632,1,0,0,0,598,3681,
        1,0,0,0,600,3685,1,0,0,0,602,3702,1,0,0,0,604,3704,1,0,0,0,606,3710,
        1,0,0,0,608,3724,1,0,0,0,610,3726,1,0,0,0,612,3731,1,0,0,0,614,3738,
        1,0,0,0,616,3753,1,0,0,0,618,3755,1,0,0,0,620,3761,1,0,0,0,622,3779,
        1,0,0,0,624,3783,1,0,0,0,626,3791,1,0,0,0,628,3795,1,0,0,0,630,3807,
        1,0,0,0,632,3809,1,0,0,0,634,3814,1,0,0,0,636,3823,1,0,0,0,638,3825,
        1,0,0,0,640,3841,1,0,0,0,642,3849,1,0,0,0,644,3853,1,0,0,0,646,3866,
        1,0,0,0,648,3868,1,0,0,0,650,3873,1,0,0,0,652,3877,1,0,0,0,654,3883,
        1,0,0,0,656,3891,1,0,0,0,658,3907,1,0,0,0,660,3931,1,0,0,0,662,3941,
        1,0,0,0,664,3958,1,0,0,0,666,3998,1,0,0,0,668,4004,1,0,0,0,670,4011,
        1,0,0,0,672,4071,1,0,0,0,674,4076,1,0,0,0,676,4085,1,0,0,0,678,4087,
        1,0,0,0,680,4091,1,0,0,0,682,4098,1,0,0,0,684,4113,1,0,0,0,686,4132,
        1,0,0,0,688,4134,1,0,0,0,690,4142,1,0,0,0,692,4146,1,0,0,0,694,4148,
        1,0,0,0,696,4154,1,0,0,0,698,4165,1,0,0,0,700,4179,1,0,0,0,702,4190,
        1,0,0,0,704,4192,1,0,0,0,706,4197,1,0,0,0,708,4217,1,0,0,0,710,4219,
        1,0,0,0,712,4222,1,0,0,0,714,4227,1,0,0,0,716,4234,1,0,0,0,718,4236,
        1,0,0,0,720,4240,1,0,0,0,722,4245,1,0,0,0,724,4257,1,0,0,0,726,4262,
        1,0,0,0,728,4274,1,0,0,0,730,4282,1,0,0,0,732,4290,1,0,0,0,734,4294,
        1,0,0,0,736,4296,1,0,0,0,738,4301,1,0,0,0,740,4309,1,0,0,0,742,4313,
        1,0,0,0,744,4318,1,0,0,0,746,4322,1,0,0,0,748,4328,1,0,0,0,750,4330,
        1,0,0,0,752,4338,1,0,0,0,754,4340,1,0,0,0,756,4342,1,0,0,0,758,4345,
        1,0,0,0,760,4353,1,0,0,0,762,4357,1,0,0,0,764,4359,1,0,0,0,766,4364,
        1,0,0,0,768,4375,1,0,0,0,770,4377,1,0,0,0,772,4384,1,0,0,0,774,4386,
        1,0,0,0,776,4391,1,0,0,0,778,4395,1,0,0,0,780,4397,1,0,0,0,782,4409,
        1,0,0,0,784,4421,1,0,0,0,786,4423,1,0,0,0,788,4431,1,0,0,0,790,4433,
        1,0,0,0,792,4439,1,0,0,0,794,4441,1,0,0,0,796,4443,1,0,0,0,798,4450,
        1,0,0,0,800,4461,1,0,0,0,802,4464,1,0,0,0,804,4492,1,0,0,0,806,4494,
        1,0,0,0,808,4499,1,0,0,0,810,4503,1,0,0,0,812,4512,1,0,0,0,814,4520,
        1,0,0,0,816,4527,1,0,0,0,818,4537,1,0,0,0,820,4546,1,0,0,0,822,4555,
        1,0,0,0,824,4565,1,0,0,0,826,4569,1,0,0,0,828,4573,1,0,0,0,830,4577,
        1,0,0,0,832,4581,1,0,0,0,834,4585,1,0,0,0,836,4589,1,0,0,0,838,4593,
        1,0,0,0,840,4597,1,0,0,0,842,4601,1,0,0,0,844,4605,1,0,0,0,846,4609,
        1,0,0,0,848,4613,1,0,0,0,850,4618,1,0,0,0,852,4623,1,0,0,0,854,4628,
        1,0,0,0,856,4636,1,0,0,0,858,4641,1,0,0,0,860,4644,1,0,0,0,862,4650,
        1,0,0,0,864,4653,1,0,0,0,866,4665,1,0,0,0,868,4667,1,0,0,0,870,4669,
        1,0,0,0,872,4671,1,0,0,0,874,4673,1,0,0,0,876,4675,1,0,0,0,878,4677,
        1,0,0,0,880,4679,1,0,0,0,882,4681,1,0,0,0,884,4683,1,0,0,0,886,4685,
        1,0,0,0,888,4687,1,0,0,0,890,4689,1,0,0,0,892,4691,1,0,0,0,894,900,
        3,2,1,0,895,896,5,228,0,0,896,897,5,46,0,0,897,898,5,330,0,0,898,
        900,3,4,2,0,899,894,1,0,0,0,899,895,1,0,0,0,900,1,1,0,0,0,901,903,
        5,22,0,0,902,901,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,
        1,0,0,0,905,907,1,0,0,0,906,904,1,0,0,0,907,916,3,10,5,0,908,910,
        5,22,0,0,909,908,1,0,0,0,910,911,1,0,0,0,911,909,1,0,0,0,911,912,
        1,0,0,0,912,913,1,0,0,0,913,915,3,10,5,0,914,909,1,0,0,0,915,918,
        1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,922,1,0,0,0,918,916,
        1,0,0,0,919,921,5,22,0,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,
        1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,926,
        5,0,0,1,926,3,1,0,0,0,927,929,5,22,0,0,928,927,1,0,0,0,929,932,1,
        0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,930,1,
        0,0,0,933,934,5,0,0,1,934,5,1,0,0,0,935,937,5,22,0,0,936,935,1,0,
        0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,949,1,0,
        0,0,940,938,1,0,0,0,941,943,3,8,4,0,942,944,5,22,0,0,943,942,1,0,
        0,0,944,945,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,
        0,0,947,941,1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,1,0,
        0,0,950,952,1,0,0,0,951,949,1,0,0,0,952,953,5,255,0,0,953,957,3,
        14,7,0,954,956,5,22,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,
        1,0,0,0,957,958,1,0,0,0,958,7,1,0,0,0,959,957,1,0,0,0,960,963,3,
        790,395,0,961,963,3,214,107,0,962,960,1,0,0,0,962,961,1,0,0,0,963,
        9,1,0,0,0,964,967,5,128,0,0,965,966,5,234,0,0,966,968,5,226,0,0,
        967,965,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,964,1,0,0,0,
        969,970,1,0,0,0,970,971,1,0,0,0,971,972,3,12,6,0,972,11,1,0,0,0,
        973,1036,3,224,112,0,974,1036,3,232,116,0,975,1036,3,790,395,0,976,
        1036,3,416,208,0,977,1036,3,568,284,0,978,1036,3,786,393,0,979,1036,
        3,364,182,0,980,1036,3,792,396,0,981,1036,3,684,342,0,982,1036,3,
        682,341,0,983,1036,3,794,397,0,984,1036,3,210,105,0,985,1036,3,214,
        107,0,986,1036,3,216,108,0,987,1036,3,464,232,0,988,1036,3,468,234,
        0,989,1036,3,222,111,0,990,1036,3,656,328,0,991,1036,3,660,330,0,
        992,1036,3,662,331,0,993,1036,3,368,184,0,994,1036,3,570,285,0,995,
        1036,3,572,286,0,996,1036,3,574,287,0,997,1036,3,576,288,0,998,1036,
        3,578,289,0,999,1036,3,392,196,0,1000,1036,3,396,198,0,1001,1036,
        3,400,200,0,1002,1036,3,378,189,0,1003,1036,3,380,190,0,1004,1036,
        3,384,192,0,1005,1036,3,620,310,0,1006,1036,3,634,317,0,1007,1036,
        3,698,349,0,1008,1036,3,706,353,0,1009,1036,3,728,364,0,1010,1036,
        3,594,297,0,1011,1036,3,596,298,0,1012,1036,3,472,236,0,1013,1036,
        3,390,195,0,1014,1036,3,386,193,0,1015,1036,3,388,194,0,1016,1036,
        3,628,314,0,1017,1036,3,604,302,0,1018,1036,3,606,303,0,1019,1036,
        3,610,305,0,1020,1036,3,420,210,0,1021,1036,3,422,211,0,1022,1036,
        3,424,212,0,1023,1036,3,800,400,0,1024,1036,3,612,306,0,1025,1036,
        3,614,307,0,1026,1036,3,618,309,0,1027,1036,3,446,223,0,1028,1036,
        3,448,224,0,1029,1036,3,802,401,0,1030,1036,3,638,319,0,1031,1036,
        3,644,322,0,1032,1036,3,652,326,0,1033,1036,3,450,225,0,1034,1036,
        3,806,403,0,1035,973,1,0,0,0,1035,974,1,0,0,0,1035,975,1,0,0,0,1035,
        976,1,0,0,0,1035,977,1,0,0,0,1035,978,1,0,0,0,1035,979,1,0,0,0,1035,
        980,1,0,0,0,1035,981,1,0,0,0,1035,982,1,0,0,0,1035,983,1,0,0,0,1035,
        984,1,0,0,0,1035,985,1,0,0,0,1035,986,1,0,0,0,1035,987,1,0,0,0,1035,
        988,1,0,0,0,1035,989,1,0,0,0,1035,990,1,0,0,0,1035,991,1,0,0,0,1035,
        992,1,0,0,0,1035,993,1,0,0,0,1035,994,1,0,0,0,1035,995,1,0,0,0,1035,
        996,1,0,0,0,1035,997,1,0,0,0,1035,998,1,0,0,0,1035,999,1,0,0,0,1035,
        1000,1,0,0,0,1035,1001,1,0,0,0,1035,1002,1,0,0,0,1035,1003,1,0,0,
        0,1035,1004,1,0,0,0,1035,1005,1,0,0,0,1035,1006,1,0,0,0,1035,1007,
        1,0,0,0,1035,1008,1,0,0,0,1035,1009,1,0,0,0,1035,1010,1,0,0,0,1035,
        1011,1,0,0,0,1035,1012,1,0,0,0,1035,1013,1,0,0,0,1035,1014,1,0,0,
        0,1035,1015,1,0,0,0,1035,1016,1,0,0,0,1035,1017,1,0,0,0,1035,1018,
        1,0,0,0,1035,1019,1,0,0,0,1035,1020,1,0,0,0,1035,1021,1,0,0,0,1035,
        1022,1,0,0,0,1035,1023,1,0,0,0,1035,1024,1,0,0,0,1035,1025,1,0,0,
        0,1035,1026,1,0,0,0,1035,1027,1,0,0,0,1035,1028,1,0,0,0,1035,1029,
        1,0,0,0,1035,1030,1,0,0,0,1035,1031,1,0,0,0,1035,1032,1,0,0,0,1035,
        1033,1,0,0,0,1035,1034,1,0,0,0,1036,13,1,0,0,0,1037,1042,3,16,8,
        0,1038,1039,5,212,0,0,1039,1041,3,16,8,0,1040,1038,1,0,0,0,1041,
        1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1047,1,0,0,
        0,1044,1042,1,0,0,0,1045,1047,3,200,100,0,1046,1037,1,0,0,0,1046,
        1045,1,0,0,0,1047,15,1,0,0,0,1048,1053,3,18,9,0,1049,1050,5,45,0,
        0,1050,1052,3,18,9,0,1051,1049,1,0,0,0,1052,1055,1,0,0,0,1053,1051,
        1,0,0,0,1053,1054,1,0,0,0,1054,17,1,0,0,0,1055,1053,1,0,0,0,1056,
        1061,3,20,10,0,1057,1058,5,326,0,0,1058,1060,3,20,10,0,1059,1057,
        1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,
        19,1,0,0,0,1063,1061,1,0,0,0,1064,1066,3,28,14,0,1065,1067,3,24,
        12,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,21,1,0,0,0,1068,1070,
        5,171,0,0,1069,1071,5,199,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,
        0,1071,1072,1,0,0,0,1072,1073,5,109,0,0,1073,1074,5,141,0,0,1074,
        23,1,0,0,0,1075,1077,5,199,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,
        0,1077,1078,1,0,0,0,1078,1079,3,26,13,0,1079,1082,3,28,14,0,1080,
        1081,5,121,0,0,1081,1083,3,28,14,0,1082,1080,1,0,0,0,1082,1083,1,
        0,0,0,1083,1127,1,0,0,0,1084,1086,5,199,0,0,1085,1084,1,0,0,0,1085,
        1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,5,158,0,0,1088,1090,5,79,
        0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1127,
        3,82,41,0,1092,1102,5,172,0,0,1093,1102,5,200,0,0,1094,1095,5,171,
        0,0,1095,1102,5,201,0,0,1096,1098,5,171,0,0,1097,1096,1,0,0,0,1097,
        1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,199,0,0,1100,1102,5,201,
        0,0,1101,1092,1,0,0,0,1101,1093,1,0,0,0,1101,1094,1,0,0,0,1101,1097,
        1,0,0,0,1102,1127,1,0,0,0,1103,1105,5,199,0,0,1104,1103,1,0,0,0,
        1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1108,5,65,0,0,1107,1109,
        7,0,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,
        1111,3,28,14,0,1111,1112,5,45,0,0,1112,1113,3,28,14,0,1113,1127,
        1,0,0,0,1114,1120,5,1,0,0,1115,1120,5,2,0,0,1116,1120,5,3,0,0,1117,
        1120,5,4,0,0,1118,1120,3,22,11,0,1119,1114,1,0,0,0,1119,1115,1,0,
        0,0,1119,1116,1,0,0,0,1119,1117,1,0,0,0,1119,1118,1,0,0,0,1120,1121,
        1,0,0,0,1121,1123,3,28,14,0,1122,1119,1,0,0,0,1123,1124,1,0,0,0,
        1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1127,1,0,0,0,1126,1076,
        1,0,0,0,1126,1085,1,0,0,0,1126,1101,1,0,0,0,1126,1104,1,0,0,0,1126,
        1122,1,0,0,0,1127,25,1,0,0,0,1128,1129,7,1,0,0,1129,27,1,0,0,0,1130,
        1135,3,36,18,0,1131,1132,7,2,0,0,1132,1134,3,36,18,0,1133,1131,1,
        0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,
        29,1,0,0,0,1137,1135,1,0,0,0,1138,1139,5,7,0,0,1139,1140,5,7,0,0,
        1140,31,1,0,0,0,1141,1142,5,7,0,0,1142,1143,5,7,0,0,1143,1144,5,
        12,0,0,1144,33,1,0,0,0,1145,1146,5,27,0,0,1146,1147,5,27,0,0,1147,
        35,1,0,0,0,1148,1161,3,38,19,0,1149,1157,5,9,0,0,1150,1157,3,30,
        15,0,1151,1157,5,10,0,0,1152,1157,3,32,16,0,1153,1157,5,11,0,0,1154,
        1157,5,12,0,0,1155,1157,5,33,0,0,1156,1149,1,0,0,0,1156,1150,1,0,
        0,0,1156,1151,1,0,0,0,1156,1152,1,0,0,0,1156,1153,1,0,0,0,1156,1154,
        1,0,0,0,1156,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1160,3,38,19,0,
        1159,1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,
        1,0,0,0,1162,1172,1,0,0,0,1163,1161,1,0,0,0,1164,1165,3,34,17,0,
        1165,1166,3,36,18,0,1166,1173,1,0,0,0,1167,1169,5,27,0,0,1168,1167,
        1,0,0,0,1169,1170,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,
        1173,1,0,0,0,1172,1164,1,0,0,0,1172,1168,1,0,0,0,1172,1173,1,0,0,
        0,1173,37,1,0,0,0,1174,1179,3,40,20,0,1175,1176,7,3,0,0,1176,1178,
        3,40,20,0,1177,1175,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,
        1179,1180,1,0,0,0,1180,39,1,0,0,0,1181,1179,1,0,0,0,1182,1187,3,
        42,21,0,1183,1184,7,4,0,0,1184,1186,3,42,21,0,1185,1183,1,0,0,0,
        1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,41,1,
        0,0,0,1189,1187,1,0,0,0,1190,1195,3,44,22,0,1191,1192,5,13,0,0,1192,
        1194,3,44,22,0,1193,1191,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,
        0,0,1195,1196,1,0,0,0,1196,43,1,0,0,0,1197,1195,1,0,0,0,1198,1203,
        3,54,27,0,1199,1200,3,46,23,0,1200,1201,3,54,27,0,1201,1203,1,0,
        0,0,1202,1198,1,0,0,0,1202,1199,1,0,0,0,1203,45,1,0,0,0,1204,1205,
        7,5,0,0,1205,47,1,0,0,0,1206,1215,3,138,69,0,1207,1215,3,132,66,
        0,1208,1212,5,23,0,0,1209,1213,3,144,72,0,1210,1213,5,330,0,0,1211,
        1213,3,830,415,0,1212,1209,1,0,0,0,1212,1210,1,0,0,0,1212,1211,1,
        0,0,0,1213,1215,1,0,0,0,1214,1206,1,0,0,0,1214,1207,1,0,0,0,1214,
        1208,1,0,0,0,1215,1217,1,0,0,0,1216,1214,1,0,0,0,1217,1220,1,0,0,
        0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1223,1,0,0,0,1220,1218,
        1,0,0,0,1221,1222,5,75,0,0,1222,1224,3,828,414,0,1223,1221,1,0,0,
        0,1223,1224,1,0,0,0,1224,49,1,0,0,0,1225,1228,3,814,407,0,1226,1228,
        3,68,34,0,1227,1225,1,0,0,0,1227,1226,1,0,0,0,1228,1229,1,0,0,0,
        1229,1230,3,48,24,0,1230,51,1,0,0,0,1231,1234,3,816,408,0,1232,1234,
        3,70,35,0,1233,1231,1,0,0,0,1233,1232,1,0,0,0,1234,1235,1,0,0,0,
        1235,1236,3,48,24,0,1236,53,1,0,0,0,1237,1240,3,50,25,0,1238,1240,
        3,84,42,0,1239,1237,1,0,0,0,1239,1238,1,0,0,0,1240,55,1,0,0,0,1241,
        1244,3,52,26,0,1242,1244,3,84,42,0,1243,1241,1,0,0,0,1243,1242,1,
        0,0,0,1244,57,1,0,0,0,1245,1247,5,37,0,0,1246,1248,3,112,56,0,1247,
        1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,5,24,
        0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
        5,36,0,0,1253,59,1,0,0,0,1254,1257,3,14,7,0,1255,1256,5,28,0,0,1256,
        1258,3,14,7,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,1267,1,0,
        0,0,1259,1260,5,24,0,0,1260,1263,3,14,7,0,1261,1262,5,28,0,0,1262,
        1264,3,14,7,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,
        0,0,1265,1259,1,0,0,0,1266,1269,1,0,0,0,1267,1265,1,0,0,0,1267,1268,
        1,0,0,0,1268,61,1,0,0,0,1269,1267,1,0,0,0,1270,1272,5,31,0,0,1271,
        1273,3,60,30,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1275,1,0,
        0,0,1274,1276,5,24,0,0,1275,1274,1,0,0,0,1275,1276,1,0,0,0,1276,
        1277,1,0,0,0,1277,1278,5,32,0,0,1278,63,1,0,0,0,1279,1280,3,14,7,
        0,1280,1281,5,28,0,0,1281,1289,3,14,7,0,1282,1283,5,24,0,0,1283,
        1284,3,14,7,0,1284,1285,5,28,0,0,1285,1286,3,14,7,0,1286,1288,1,
        0,0,0,1287,1282,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,
        1290,1,0,0,0,1290,65,1,0,0,0,1291,1289,1,0,0,0,1292,1294,5,14,0,
        0,1293,1295,3,64,32,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1297,
        1,0,0,0,1296,1298,5,24,0,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,
        1299,1,0,0,0,1299,1300,5,15,0,0,1300,67,1,0,0,0,1301,1319,3,142,
        71,0,1302,1319,3,144,72,0,1303,1319,3,80,40,0,1304,1319,3,72,36,
        0,1305,1319,3,76,38,0,1306,1319,3,78,39,0,1307,1308,3,830,415,0,
        1308,1311,5,34,0,0,1309,1312,3,856,428,0,1310,1312,5,327,0,0,1311,
        1309,1,0,0,0,1311,1310,1,0,0,0,1312,1319,1,0,0,0,1313,1319,3,208,
        104,0,1314,1319,3,74,37,0,1315,1319,3,58,29,0,1316,1319,3,62,31,
        0,1317,1319,3,66,33,0,1318,1301,1,0,0,0,1318,1302,1,0,0,0,1318,1303,
        1,0,0,0,1318,1304,1,0,0,0,1318,1305,1,0,0,0,1318,1306,1,0,0,0,1318,
        1307,1,0,0,0,1318,1313,1,0,0,0,1318,1314,1,0,0,0,1318,1315,1,0,0,
        0,1318,1316,1,0,0,0,1318,1317,1,0,0,0,1319,69,1,0,0,0,1320,1341,
        3,142,71,0,1321,1341,3,144,72,0,1322,1341,3,80,40,0,1323,1341,3,
        72,36,0,1324,1341,3,78,39,0,1325,1326,3,830,415,0,1326,1329,5,34,
        0,0,1327,1330,3,856,428,0,1328,1330,5,327,0,0,1329,1327,1,0,0,0,
        1329,1328,1,0,0,0,1330,1341,1,0,0,0,1331,1332,5,25,0,0,1332,1333,
        3,232,116,0,1333,1334,5,26,0,0,1334,1341,1,0,0,0,1335,1341,3,208,
        104,0,1336,1341,3,74,37,0,1337,1341,3,58,29,0,1338,1341,3,62,31,
        0,1339,1341,3,66,33,0,1340,1320,1,0,0,0,1340,1321,1,0,0,0,1340,1322,
        1,0,0,0,1340,1323,1,0,0,0,1340,1324,1,0,0,0,1340,1325,1,0,0,0,1340,
        1331,1,0,0,0,1340,1335,1,0,0,0,1340,1336,1,0,0,0,1340,1337,1,0,0,
        0,1340,1338,1,0,0,0,1340,1339,1,0,0,0,1341,71,1,0,0,0,1342,1343,
        5,71,0,0,1343,1344,5,25,0,0,1344,1345,3,14,7,0,1345,1346,5,49,0,
        0,1346,1347,3,204,102,0,1347,1348,5,26,0,0,1348,73,1,0,0,0,1349,
        1350,5,66,0,0,1350,1351,5,25,0,0,1351,1352,3,14,7,0,1352,1353,5,
        49,0,0,1353,1354,3,156,78,0,1354,1355,5,26,0,0,1355,75,1,0,0,0,1356,
        1357,5,127,0,0,1357,1360,5,25,0,0,1358,1361,3,232,116,0,1359,1361,
        3,368,184,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,1362,1,0,0,
        0,1362,1363,5,26,0,0,1363,77,1,0,0,0,1364,1366,5,70,0,0,1365,1367,
        3,14,7,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1369,1,0,0,0,1368,
        1370,3,140,70,0,1369,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1369,1,
        0,0,0,1371,1372,1,0,0,0,1372,1375,1,0,0,0,1373,1374,5,113,0,0,1374,
        1376,3,14,7,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,
        0,0,1377,1378,5,117,0,0,1378,79,1,0,0,0,1379,1391,3,110,55,0,1380,
        1389,5,35,0,0,1381,1382,5,25,0,0,1382,1383,3,14,7,0,1383,1384,5,
        26,0,0,1384,1390,1,0,0,0,1385,1386,5,31,0,0,1386,1387,3,6,3,0,1387,
        1388,5,32,0,0,1388,1390,1,0,0,0,1389,1381,1,0,0,0,1389,1385,1,0,
        0,0,1390,1392,1,0,0,0,1391,1380,1,0,0,0,1391,1392,1,0,0,0,1392,81,
        1,0,0,0,1393,1394,3,56,28,0,1394,83,1,0,0,0,1395,1399,3,98,49,0,
        1396,1399,3,102,51,0,1397,1399,3,108,54,0,1398,1395,1,0,0,0,1398,
        1396,1,0,0,0,1398,1397,1,0,0,0,1399,85,1,0,0,0,1400,1401,5,327,0,
        0,1401,87,1,0,0,0,1402,1405,3,814,407,0,1403,1405,5,327,0,0,1404,
        1402,1,0,0,0,1404,1403,1,0,0,0,1405,89,1,0,0,0,1406,1407,3,14,7,
        0,1407,1408,5,49,0,0,1408,1409,3,88,44,0,1409,91,1,0,0,0,1410,1415,
        3,90,45,0,1411,1412,5,24,0,0,1412,1414,3,90,45,0,1413,1411,1,0,0,
        0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,93,
        1,0,0,0,1417,1415,1,0,0,0,1418,1419,3,14,7,0,1419,1420,5,24,0,0,
        1420,1423,3,86,43,0,1421,1422,5,220,0,0,1422,1424,3,92,46,0,1423,
        1421,1,0,0,0,1423,1424,1,0,0,0,1424,95,1,0,0,0,1425,1430,5,120,0,
        0,1426,1430,5,201,0,0,1427,1428,5,97,0,0,1428,1430,3,14,7,0,1429,
        1425,1,0,0,0,1429,1426,1,0,0,0,1429,1427,1,0,0,0,1430,97,1,0,0,0,
        1431,1432,5,176,0,0,1432,1433,5,25,0,0,1433,1436,3,94,47,0,1434,
        1435,5,256,0,0,1435,1437,3,156,78,0,1436,1434,1,0,0,0,1436,1437,
        1,0,0,0,1437,1444,1,0,0,0,1438,1439,3,96,48,0,1439,1440,5,207,0,
        0,1440,1441,7,6,0,0,1441,1443,1,0,0,0,1442,1438,1,0,0,0,1443,1446,
        1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,0,0,0,1446,
        1444,1,0,0,0,1447,1448,5,26,0,0,1448,99,1,0,0,0,1449,1450,7,7,0,
        0,1450,1451,5,207,0,0,1451,1452,5,120,0,0,1452,101,1,0,0,0,1453,
        1454,5,174,0,0,1454,1455,5,25,0,0,1455,1457,3,94,47,0,1456,1458,
        3,100,50,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,
        1459,1460,5,26,0,0,1460,103,1,0,0,0,1461,1463,5,324,0,0,1462,1464,
        5,48,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1473,1,0,0,0,1465,
        1467,5,323,0,0,1466,1468,7,8,0,0,1467,1466,1,0,0,0,1467,1468,1,0,
        0,0,1468,1470,1,0,0,0,1469,1471,5,48,0,0,1470,1469,1,0,0,0,1470,
        1471,1,0,0,0,1471,1473,1,0,0,0,1472,1461,1,0,0,0,1472,1465,1,0,0,
        0,1473,105,1,0,0,0,1474,1481,5,120,0,0,1475,1481,5,201,0,0,1476,
        1477,5,114,0,0,1477,1481,5,48,0,0,1478,1479,5,114,0,0,1479,1481,
        5,203,0,0,1480,1474,1,0,0,0,1480,1475,1,0,0,0,1480,1476,1,0,0,0,
        1480,1478,1,0,0,0,1481,107,1,0,0,0,1482,1483,5,175,0,0,1483,1484,
        5,25,0,0,1484,1488,3,94,47,0,1485,1486,3,104,52,0,1486,1487,5,325,
        0,0,1487,1489,1,0,0,0,1488,1485,1,0,0,0,1488,1489,1,0,0,0,1489,1494,
        1,0,0,0,1490,1491,3,106,53,0,1491,1492,5,207,0,0,1492,1493,5,114,
        0,0,1493,1495,1,0,0,0,1494,1490,1,0,0,0,1494,1495,1,0,0,0,1495,1500,
        1,0,0,0,1496,1497,3,106,53,0,1497,1498,5,207,0,0,1498,1499,5,120,
        0,0,1499,1501,1,0,0,0,1500,1496,1,0,0,0,1500,1501,1,0,0,0,1501,1502,
        1,0,0,0,1502,1503,5,26,0,0,1503,109,1,0,0,0,1504,1506,5,25,0,0,1505,
        1507,3,130,65,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,
        0,0,0,1508,1510,5,24,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,
        1511,1,0,0,0,1511,1512,5,26,0,0,1512,111,1,0,0,0,1513,1518,3,14,
        7,0,1514,1515,5,24,0,0,1515,1517,3,14,7,0,1516,1514,1,0,0,0,1517,
        1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,113,1,0,0,
        0,1520,1518,1,0,0,0,1521,1522,5,25,0,0,1522,1527,3,828,414,0,1523,
        1524,5,24,0,0,1524,1526,3,828,414,0,1525,1523,1,0,0,0,1526,1529,
        1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,
        1527,1,0,0,0,1530,1531,5,26,0,0,1531,115,1,0,0,0,1532,1535,3,144,
        72,0,1533,1535,3,828,414,0,1534,1532,1,0,0,0,1534,1533,1,0,0,0,1535,
        117,1,0,0,0,1536,1537,5,25,0,0,1537,1542,3,116,58,0,1538,1539,5,
        24,0,0,1539,1541,3,116,58,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,
        1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1542,
        1,0,0,0,1545,1546,5,26,0,0,1546,119,1,0,0,0,1547,1548,3,852,426,
        0,1548,1549,3,828,414,0,1549,121,1,0,0,0,1550,1551,3,828,414,0,1551,
        1552,5,23,0,0,1552,1553,3,828,414,0,1553,1556,1,0,0,0,1554,1556,
        3,842,421,0,1555,1550,1,0,0,0,1555,1554,1,0,0,0,1556,123,1,0,0,0,
        1557,1562,3,120,60,0,1558,1559,5,24,0,0,1559,1561,3,120,60,0,1560,
        1558,1,0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,
        0,1563,1566,1,0,0,0,1564,1562,1,0,0,0,1565,1567,5,24,0,0,1566,1565,
        1,0,0,0,1566,1567,1,0,0,0,1567,125,1,0,0,0,1568,1573,3,122,61,0,
        1569,1570,5,24,0,0,1570,1572,3,122,61,0,1571,1569,1,0,0,0,1572,1575,
        1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1577,1,0,0,0,1575,
        1573,1,0,0,0,1576,1578,5,24,0,0,1577,1576,1,0,0,0,1577,1578,1,0,
        0,0,1578,127,1,0,0,0,1579,1582,3,14,7,0,1580,1581,5,49,0,0,1581,
        1583,3,830,415,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,129,1,
        0,0,0,1584,1589,3,128,64,0,1585,1586,5,24,0,0,1586,1588,3,128,64,
        0,1587,1585,1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,0,0,0,1589,1590,
        1,0,0,0,1590,131,1,0,0,0,1591,1589,1,0,0,0,1592,1599,5,25,0,0,1593,
        1594,3,252,126,0,1594,1596,3,130,65,0,1595,1597,5,24,0,0,1596,1595,
        1,0,0,0,1596,1597,1,0,0,0,1597,1600,1,0,0,0,1598,1600,5,19,0,0,1599,
        1593,1,0,0,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,
        0,1601,1602,5,26,0,0,1602,1603,3,134,67,0,1603,133,1,0,0,0,1604,
        1607,3,748,374,0,1605,1607,3,750,375,0,1606,1604,1,0,0,0,1606,1605,
        1,0,0,0,1606,1607,1,0,0,0,1607,1610,1,0,0,0,1608,1609,5,216,0,0,
        1609,1611,3,752,376,0,1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,135,
        1,0,0,0,1612,1613,3,830,415,0,1613,1614,5,34,0,0,1614,1615,3,830,
        415,0,1615,1621,1,0,0,0,1616,1621,3,834,417,0,1617,1621,3,144,72,
        0,1618,1619,5,130,0,0,1619,1621,5,143,0,0,1620,1612,1,0,0,0,1620,
        1616,1,0,0,0,1620,1617,1,0,0,0,1620,1618,1,0,0,0,1621,1622,1,0,0,
        0,1622,1623,3,132,66,0,1623,137,1,0,0,0,1624,1625,5,37,0,0,1625,
        1626,3,14,7,0,1626,1627,5,36,0,0,1627,139,1,0,0,0,1628,1629,5,320,
        0,0,1629,1630,3,14,7,0,1630,1631,5,294,0,0,1631,1632,3,14,7,0,1632,
        141,1,0,0,0,1633,1644,3,892,446,0,1634,1644,3,890,445,0,1635,1644,
        5,327,0,0,1636,1644,5,333,0,0,1637,1644,5,201,0,0,1638,1644,5,91,
        0,0,1639,1644,5,90,0,0,1640,1644,5,92,0,0,1641,1644,3,888,444,0,
        1642,1644,5,115,0,0,1643,1633,1,0,0,0,1643,1634,1,0,0,0,1643,1635,
        1,0,0,0,1643,1636,1,0,0,0,1643,1637,1,0,0,0,1643,1638,1,0,0,0,1643,
        1639,1,0,0,0,1643,1640,1,0,0,0,1643,1641,1,0,0,0,1643,1642,1,0,0,
        0,1644,143,1,0,0,0,1645,1649,5,30,0,0,1646,1650,3,830,415,0,1647,
        1650,5,301,0,0,1648,1650,5,132,0,0,1649,1646,1,0,0,0,1649,1647,1,
        0,0,0,1649,1648,1,0,0,0,1650,145,1,0,0,0,1651,1653,3,144,72,0,1652,
        1654,5,27,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,147,1,0,0,
        0,1655,1660,3,144,72,0,1656,1657,5,24,0,0,1657,1659,3,144,72,0,1658,
        1656,1,0,0,0,1659,1662,1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,
        0,1661,149,1,0,0,0,1662,1660,1,0,0,0,1663,1666,3,144,72,0,1664,1665,
        5,49,0,0,1665,1667,3,144,72,0,1666,1664,1,0,0,0,1666,1667,1,0,0,
        0,1667,151,1,0,0,0,1668,1673,3,150,75,0,1669,1670,5,24,0,0,1670,
        1672,3,150,75,0,1671,1669,1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,
        0,0,0,1673,1674,1,0,0,0,1674,153,1,0,0,0,1675,1673,1,0,0,0,1676,
        1678,7,3,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1681,1,0,0,
        0,1679,1682,3,892,446,0,1680,1682,3,890,445,0,1681,1679,1,0,0,0,
        1681,1680,1,0,0,0,1682,155,1,0,0,0,1683,1684,3,846,423,0,1684,157,
        1,0,0,0,1685,1688,3,892,446,0,1686,1688,3,144,72,0,1687,1685,1,0,
        0,0,1687,1686,1,0,0,0,1688,159,1,0,0,0,1689,1693,3,810,405,0,1690,
        1693,5,327,0,0,1691,1693,3,144,72,0,1692,1689,1,0,0,0,1692,1690,
        1,0,0,0,1692,1691,1,0,0,0,1693,161,1,0,0,0,1694,1695,3,160,80,0,
        1695,1696,5,28,0,0,1696,1697,3,204,102,0,1697,163,1,0,0,0,1698,1699,
        3,160,80,0,1699,1704,3,204,102,0,1700,1702,5,199,0,0,1701,1700,1,
        0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1705,5,201,0,0,1704,
        1701,1,0,0,0,1704,1705,1,0,0,0,1705,1711,1,0,0,0,1706,1707,3,204,
        102,0,1707,1708,5,49,0,0,1708,1709,3,160,80,0,1709,1711,1,0,0,0,
        1710,1698,1,0,0,0,1710,1706,1,0,0,0,1711,165,1,0,0,0,1712,1713,3,
        160,80,0,1713,1714,5,28,0,0,1714,1716,1,0,0,0,1715,1712,1,0,0,0,
        1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,1718,3,204,102,0,1718,167,
        1,0,0,0,1719,1723,3,166,83,0,1720,1721,5,31,0,0,1721,1722,5,58,0,
        0,1722,1724,5,32,0,0,1723,1720,1,0,0,0,1723,1724,1,0,0,0,1724,169,
        1,0,0,0,1725,1730,3,168,84,0,1726,1727,5,24,0,0,1727,1729,3,168,
        84,0,1728,1726,1,0,0,0,1729,1732,1,0,0,0,1730,1728,1,0,0,0,1730,
        1731,1,0,0,0,1731,171,1,0,0,0,1732,1730,1,0,0,0,1733,1734,5,95,0,
        0,1734,1735,5,25,0,0,1735,1736,3,158,79,0,1736,1737,5,24,0,0,1737,
        1738,3,158,79,0,1738,1739,5,26,0,0,1739,173,1,0,0,0,1740,1741,5,
        211,0,0,1741,1742,5,5,0,0,1742,1743,3,204,102,0,1743,1744,5,7,0,
        0,1744,175,1,0,0,0,1745,1762,5,302,0,0,1746,1758,5,5,0,0,1747,1752,
        3,204,102,0,1748,1749,5,24,0,0,1749,1751,3,204,102,0,1750,1748,1,
        0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,
        1756,1,0,0,0,1754,1752,1,0,0,0,1755,1757,5,24,0,0,1756,1755,1,0,
        0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,1758,1747,1,0,0,0,1758,1759,
        1,0,0,0,1759,1760,1,0,0,0,1760,1763,5,7,0,0,1761,1763,5,4,0,0,1762,
        1746,1,0,0,0,1762,1761,1,0,0,0,1763,177,1,0,0,0,1764,1781,5,280,
        0,0,1765,1777,5,5,0,0,1766,1771,3,162,81,0,1767,1768,5,24,0,0,1768,
        1770,3,162,81,0,1769,1767,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,
        0,0,0,1771,1772,1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1774,
        1776,5,24,0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,
        0,0,1777,1766,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1782,
        5,7,0,0,1780,1782,5,4,0,0,1781,1765,1,0,0,0,1781,1780,1,0,0,0,1782,
        179,1,0,0,0,1783,1784,5,317,0,0,1784,1785,5,5,0,0,1785,1790,3,166,
        83,0,1786,1787,5,24,0,0,1787,1789,3,166,83,0,1788,1786,1,0,0,0,1789,
        1792,1,0,0,0,1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,1794,1,0,0,
        0,1792,1790,1,0,0,0,1793,1795,5,24,0,0,1794,1793,1,0,0,0,1794,1795,
        1,0,0,0,1795,1796,1,0,0,0,1796,1797,5,7,0,0,1797,181,1,0,0,0,1798,
        1799,5,183,0,0,1799,1800,5,5,0,0,1800,1801,3,204,102,0,1801,1802,
        5,7,0,0,1802,183,1,0,0,0,1803,1804,5,279,0,0,1804,1805,5,5,0,0,1805,
        1806,3,204,102,0,1806,1807,5,7,0,0,1807,185,1,0,0,0,1808,1809,5,
        137,0,0,1809,1810,5,5,0,0,1810,1811,3,204,102,0,1811,1812,5,7,0,
        0,1812,187,1,0,0,0,1813,1814,5,105,0,0,1814,1815,5,5,0,0,1815,1816,
        3,204,102,0,1816,1817,5,24,0,0,1817,1818,3,204,102,0,1818,1819,5,
        7,0,0,1819,189,1,0,0,0,1820,1821,5,272,0,0,1821,1822,5,5,0,0,1822,
        1823,3,204,102,0,1823,1824,5,7,0,0,1824,191,1,0,0,0,1825,1826,5,
        118,0,0,1826,1827,5,5,0,0,1827,1832,3,160,80,0,1828,1829,5,24,0,
        0,1829,1831,3,160,80,0,1830,1828,1,0,0,0,1831,1834,1,0,0,0,1832,
        1830,1,0,0,0,1832,1833,1,0,0,0,1833,1836,1,0,0,0,1834,1832,1,0,0,
        0,1835,1837,5,24,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,
        1,0,0,0,1838,1839,5,7,0,0,1839,193,1,0,0,0,1840,1841,5,249,0,0,1841,
        1842,5,5,0,0,1842,1843,3,160,80,0,1843,1844,5,7,0,0,1844,195,1,0,
        0,0,1845,1846,5,291,0,0,1846,1847,5,5,0,0,1847,1848,3,204,102,0,
        1848,1849,5,24,0,0,1849,1850,3,160,80,0,1850,1851,5,7,0,0,1851,197,
        1,0,0,0,1852,1853,5,68,0,0,1853,1854,5,5,0,0,1854,1856,5,25,0,0,
        1855,1857,3,170,85,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,1859,
        1,0,0,0,1858,1860,5,24,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,
        1865,1,0,0,0,1861,1862,5,37,0,0,1862,1863,3,170,85,0,1863,1864,5,
        36,0,0,1864,1866,1,0,0,0,1865,1861,1,0,0,0,1865,1866,1,0,0,0,1866,
        1867,1,0,0,0,1867,1868,5,26,0,0,1868,1869,5,35,0,0,1869,1870,3,204,
        102,0,1870,1871,5,7,0,0,1871,199,1,0,0,0,1872,1886,3,174,87,0,1873,
        1886,3,176,88,0,1874,1886,3,178,89,0,1875,1886,3,180,90,0,1876,1886,
        3,182,91,0,1877,1886,3,184,92,0,1878,1886,3,186,93,0,1879,1886,3,
        188,94,0,1880,1886,3,190,95,0,1881,1886,3,192,96,0,1882,1886,3,194,
        97,0,1883,1886,3,196,98,0,1884,1886,3,198,99,0,1885,1872,1,0,0,0,
        1885,1873,1,0,0,0,1885,1874,1,0,0,0,1885,1875,1,0,0,0,1885,1876,
        1,0,0,0,1885,1877,1,0,0,0,1885,1878,1,0,0,0,1885,1879,1,0,0,0,1885,
        1880,1,0,0,0,1885,1881,1,0,0,0,1885,1882,1,0,0,0,1885,1883,1,0,0,
        0,1885,1884,1,0,0,0,1886,1890,1,0,0,0,1887,1889,5,27,0,0,1888,1887,
        1,0,0,0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,1,0,0,0,1891,
        201,1,0,0,0,1892,1890,1,0,0,0,1893,1905,3,200,100,0,1894,1897,3,
        172,86,0,1895,1897,3,156,78,0,1896,1894,1,0,0,0,1896,1895,1,0,0,
        0,1897,1901,1,0,0,0,1898,1900,5,27,0,0,1899,1898,1,0,0,0,1900,1903,
        1,0,0,0,1901,1899,1,0,0,0,1901,1902,1,0,0,0,1902,1905,1,0,0,0,1903,
        1901,1,0,0,0,1904,1893,1,0,0,0,1904,1896,1,0,0,0,1905,203,1,0,0,
        0,1906,1909,3,202,101,0,1907,1909,3,144,72,0,1908,1906,1,0,0,0,1908,
        1907,1,0,0,0,1909,205,1,0,0,0,1910,1911,5,327,0,0,1911,207,1,0,0,
        0,1912,1913,5,317,0,0,1913,1914,5,25,0,0,1914,1915,3,14,7,0,1915,
        1916,5,24,0,0,1916,1917,3,14,7,0,1917,1918,5,24,0,0,1918,1919,3,
        14,7,0,1919,1920,5,26,0,0,1920,1936,1,0,0,0,1921,1922,5,118,0,0,
        1922,1923,5,25,0,0,1923,1924,3,14,7,0,1924,1925,5,24,0,0,1925,1926,
        3,14,7,0,1926,1927,5,26,0,0,1927,1936,1,0,0,0,1928,1929,5,68,0,0,
        1929,1930,5,25,0,0,1930,1931,3,14,7,0,1931,1932,5,24,0,0,1932,1933,
        3,14,7,0,1933,1934,5,26,0,0,1934,1936,1,0,0,0,1935,1912,1,0,0,0,
        1935,1921,1,0,0,0,1935,1928,1,0,0,0,1936,209,1,0,0,0,1937,1938,5,
        96,0,0,1938,1939,3,144,72,0,1939,1940,5,49,0,0,1940,1943,3,202,101,
        0,1941,1942,5,1,0,0,1942,1944,3,142,71,0,1943,1941,1,0,0,0,1943,
        1944,1,0,0,0,1944,211,1,0,0,0,1945,1947,5,23,0,0,1946,1945,1,0,0,
        0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1953,3,828,414,0,1949,
        1950,5,23,0,0,1950,1952,3,828,414,0,1951,1949,1,0,0,0,1952,1955,
        1,0,0,0,1953,1951,1,0,0,0,1953,1954,1,0,0,0,1954,213,1,0,0,0,1955,
        1953,1,0,0,0,1956,1957,5,157,0,0,1957,1958,3,212,106,0,1958,1959,
        5,283,0,0,1959,1960,3,152,76,0,1960,215,1,0,0,0,1961,1962,5,129,
        0,0,1962,1963,3,148,74,0,1963,217,1,0,0,0,1964,1967,3,144,72,0,1965,
        1967,5,115,0,0,1966,1964,1,0,0,0,1966,1965,1,0,0,0,1967,1968,1,0,
        0,0,1968,1970,5,25,0,0,1969,1971,3,112,56,0,1970,1969,1,0,0,0,1970,
        1971,1,0,0,0,1971,1972,1,0,0,0,1972,1973,5,26,0,0,1973,219,1,0,0,
        0,1974,1975,5,63,0,0,1975,1976,3,658,329,0,1976,1977,5,117,0,0,1977,
        1978,5,110,0,0,1978,221,1,0,0,0,1979,1982,5,110,0,0,1980,1983,3,
        218,109,0,1981,1983,3,220,110,0,1982,1980,1,0,0,0,1982,1981,1,0,
        0,0,1983,223,1,0,0,0,1984,1985,5,228,0,0,1985,1986,3,858,429,0,1986,
        2000,3,828,414,0,1987,1988,5,1,0,0,1988,2001,3,226,113,0,1989,1990,
        5,25,0,0,1990,1995,3,226,113,0,1991,1992,5,24,0,0,1992,1994,3,226,
        113,0,1993,1991,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,0,0,0,1995,
        1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,1999,5,26,
        0,0,1999,2001,1,0,0,0,2000,1987,1,0,0,0,2000,1989,1,0,0,0,2000,2001,
        1,0,0,0,2001,225,1,0,0,0,2002,2008,3,154,77,0,2003,2008,3,810,405,
        0,2004,2008,5,327,0,0,2005,2008,3,888,444,0,2006,2008,3,144,72,0,
        2007,2002,1,0,0,0,2007,2003,1,0,0,0,2007,2004,1,0,0,0,2007,2005,
        1,0,0,0,2007,2006,1,0,0,0,2008,227,1,0,0,0,2009,2011,3,14,7,0,2010,
        2012,7,9,0,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,229,1,0,0,
        0,2013,2018,3,228,114,0,2014,2015,5,24,0,0,2015,2017,3,228,114,0,
        2016,2014,1,0,0,0,2017,2020,1,0,0,0,2018,2016,1,0,0,0,2018,2019,
        1,0,0,0,2019,231,1,0,0,0,2020,2018,1,0,0,0,2021,2027,3,236,118,0,
        2022,2023,3,238,119,0,2023,2024,3,236,118,0,2024,2026,1,0,0,0,2025,
        2022,1,0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,
        0,2028,233,1,0,0,0,2029,2027,1,0,0,0,2030,2036,3,240,120,0,2031,
        2032,3,238,119,0,2032,2033,3,236,118,0,2033,2035,1,0,0,0,2034,2031,
        1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,0,2037,
        235,1,0,0,0,2038,2036,1,0,0,0,2039,2045,3,240,120,0,2040,2041,5,
        25,0,0,2041,2042,3,240,120,0,2042,2043,5,26,0,0,2043,2045,1,0,0,
        0,2044,2039,1,0,0,0,2044,2040,1,0,0,0,2045,237,1,0,0,0,2046,2048,
        5,306,0,0,2047,2049,5,42,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,
        2049,2053,1,0,0,0,2050,2053,5,169,0,0,2051,2053,5,123,0,0,2052,2046,
        1,0,0,0,2052,2050,1,0,0,0,2052,2051,1,0,0,0,2053,239,1,0,0,0,2054,
        2061,3,242,121,0,2055,2056,5,182,0,0,2056,2059,3,14,7,0,2057,2058,
        7,10,0,0,2058,2060,3,14,7,0,2059,2057,1,0,0,0,2059,2060,1,0,0,0,
        2060,2062,1,0,0,0,2061,2055,1,0,0,0,2061,2062,1,0,0,0,2062,241,1,
        0,0,0,2063,2065,5,108,0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,
        2069,1,0,0,0,2066,2070,3,244,122,0,2067,2070,3,250,125,0,2068,2070,
        3,254,127,0,2069,2066,1,0,0,0,2069,2067,1,0,0,0,2069,2068,1,0,0,
        0,2070,2074,1,0,0,0,2071,2072,5,170,0,0,2072,2073,5,254,0,0,2073,
        2075,3,116,58,0,2074,2071,1,0,0,0,2074,2075,1,0,0,0,2075,243,1,0,
        0,0,2076,2078,5,233,0,0,2077,2079,5,279,0,0,2078,2077,1,0,0,0,2078,
        2079,1,0,0,0,2079,2080,1,0,0,0,2080,2085,3,346,173,0,2081,2082,5,
        24,0,0,2082,2084,3,346,173,0,2083,2081,1,0,0,0,2084,2087,1,0,0,0,
        2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,2110,1,0,0,0,2087,2085,
        1,0,0,0,2088,2089,5,314,0,0,2089,2092,3,136,68,0,2090,2091,5,49,
        0,0,2091,2093,3,828,414,0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,
        2096,1,0,0,0,2094,2095,5,323,0,0,2095,2097,3,248,124,0,2096,2094,
        1,0,0,0,2096,2097,1,0,0,0,2097,2100,1,0,0,0,2098,2099,5,321,0,0,
        2099,2101,3,14,7,0,2100,2098,1,0,0,0,2100,2101,1,0,0,0,2101,2104,
        1,0,0,0,2102,2103,5,151,0,0,2103,2105,3,14,7,0,2104,2102,1,0,0,0,
        2104,2105,1,0,0,0,2105,2108,1,0,0,0,2106,2107,5,51,0,0,2107,2109,
        3,314,157,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,2111,1,0,0,
        0,2110,2088,1,0,0,0,2110,2111,1,0,0,0,2111,245,1,0,0,0,2112,2113,
        3,828,414,0,2113,2114,5,1,0,0,2114,2115,3,14,7,0,2115,247,1,0,0,
        0,2116,2121,3,246,123,0,2117,2118,5,24,0,0,2118,2120,3,246,123,0,
        2119,2117,1,0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,0,2121,2122,
        1,0,0,0,2122,249,1,0,0,0,2123,2121,1,0,0,0,2124,2125,5,238,0,0,2125,
        2130,3,346,173,0,2126,2127,5,24,0,0,2127,2129,3,346,173,0,2128,2126,
        1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,
        2135,1,0,0,0,2132,2130,1,0,0,0,2133,2134,5,230,0,0,2134,2136,3,230,
        115,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,
        2138,5,207,0,0,2138,2139,3,124,62,0,2139,2141,5,314,0,0,2140,2142,
        5,42,0,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,2143,1,0,0,0,2143,
        2146,3,136,68,0,2144,2145,5,49,0,0,2145,2147,3,828,414,0,2146,2144,
        1,0,0,0,2146,2147,1,0,0,0,2147,2150,1,0,0,0,2148,2149,5,321,0,0,
        2149,2151,3,14,7,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,2154,
        1,0,0,0,2152,2153,5,151,0,0,2153,2155,3,14,7,0,2154,2152,1,0,0,0,
        2154,2155,1,0,0,0,2155,2158,1,0,0,0,2156,2157,5,51,0,0,2157,2159,
        3,314,157,0,2158,2156,1,0,0,0,2158,2159,1,0,0,0,2159,251,1,0,0,0,
        2160,2162,7,11,0,0,2161,2160,1,0,0,0,2161,2162,1,0,0,0,2162,253,
        1,0,0,0,2163,2164,5,141,0,0,2164,2166,3,338,169,0,2165,2163,1,0,
        0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2169,5,270,0,0,2168,
        2170,5,279,0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,
        0,0,2171,2172,3,252,126,0,2172,2177,3,336,168,0,2173,2174,5,24,0,
        0,2174,2176,3,336,168,0,2175,2173,1,0,0,0,2176,2179,1,0,0,0,2177,
        2175,1,0,0,0,2177,2178,1,0,0,0,2178,2181,1,0,0,0,2179,2177,1,0,0,
        0,2180,2182,5,24,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2189,
        1,0,0,0,2183,2186,5,324,0,0,2184,2185,5,153,0,0,2185,2187,5,127,
        0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,2188,2190,
        3,126,63,0,2189,2183,1,0,0,0,2189,2190,1,0,0,0,2190,2193,1,0,0,0,
        2191,2192,5,141,0,0,2192,2194,3,338,169,0,2193,2191,1,0,0,0,2193,
        2194,1,0,0,0,2194,2197,1,0,0,0,2195,2196,5,321,0,0,2196,2198,3,14,
        7,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,2201,
        3,318,159,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2204,1,0,0,
        0,2202,2203,5,151,0,0,2203,2205,3,14,7,0,2204,2202,1,0,0,0,2204,
        2205,1,0,0,0,2205,2207,1,0,0,0,2206,2208,3,756,378,0,2207,2206,1,
        0,0,0,2207,2208,1,0,0,0,2208,2210,1,0,0,0,2209,2211,3,316,158,0,
        2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,255,1,0,0,0,2212,2213,5,
        189,0,0,2213,2215,5,25,0,0,2214,2216,3,770,385,0,2215,2214,1,0,0,
        0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2219,3,314,157,0,2218,
        2217,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2222,3,262,
        131,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2224,1,0,0,0,2223,
        2225,3,258,129,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,
        0,0,0,2226,2227,3,268,134,0,2227,2228,5,26,0,0,2228,257,1,0,0,0,
        2229,2230,5,208,0,0,2230,2231,5,263,0,0,2231,2232,5,224,0,0,2232,
        2241,5,187,0,0,2233,2234,5,42,0,0,2234,2235,5,264,0,0,2235,2236,
        5,224,0,0,2236,2238,5,187,0,0,2237,2239,3,260,130,0,2238,2237,1,
        0,0,0,2238,2239,1,0,0,0,2239,2241,1,0,0,0,2240,2229,1,0,0,0,2240,
        2233,1,0,0,0,2241,259,1,0,0,0,2242,2243,5,274,0,0,2243,2244,5,114,
        0,0,2244,2252,5,188,0,0,2245,2246,5,206,0,0,2246,2247,5,114,0,0,
        2247,2252,5,188,0,0,2248,2249,5,323,0,0,2249,2250,5,309,0,0,2250,
        2252,5,264,0,0,2251,2242,1,0,0,0,2251,2245,1,0,0,0,2251,2248,1,0,
        0,0,2252,261,1,0,0,0,2253,2254,5,190,0,0,2254,2255,3,264,132,0,2255,
        263,1,0,0,0,2256,2261,3,266,133,0,2257,2258,5,24,0,0,2258,2260,3,
        266,133,0,2259,2257,1,0,0,0,2260,2263,1,0,0,0,2261,2259,1,0,0,0,
        2261,2262,1,0,0,0,2262,265,1,0,0,0,2263,2261,1,0,0,0,2264,2265,3,
        14,7,0,2265,2266,5,49,0,0,2266,2267,3,828,414,0,2267,267,1,0,0,0,
        2268,2269,5,41,0,0,2269,2270,5,187,0,0,2270,2272,3,270,135,0,2271,
        2268,1,0,0,0,2271,2272,1,0,0,0,2272,2274,1,0,0,0,2273,2275,3,274,
        137,0,2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,
        2277,5,223,0,0,2277,2278,5,25,0,0,2278,2279,3,276,138,0,2279,2281,
        5,26,0,0,2280,2282,3,290,145,0,2281,2280,1,0,0,0,2281,2282,1,0,0,
        0,2282,2283,1,0,0,0,2283,2284,5,100,0,0,2284,2285,3,302,151,0,2285,
        269,1,0,0,0,2286,2287,5,275,0,0,2287,2288,5,296,0,0,2288,2289,5,
        196,0,0,2289,2306,5,263,0,0,2290,2291,5,275,0,0,2291,2292,5,222,
        0,0,2292,2293,5,178,0,0,2293,2306,5,263,0,0,2294,2295,5,275,0,0,
        2295,2296,5,296,0,0,2296,2297,5,135,0,0,2297,2306,3,272,136,0,2298,
        2299,5,275,0,0,2299,2300,5,296,0,0,2300,2301,5,178,0,0,2301,2306,
        3,272,136,0,2302,2303,5,275,0,0,2303,2304,5,296,0,0,2304,2306,3,
        272,136,0,2305,2286,1,0,0,0,2305,2290,1,0,0,0,2305,2294,1,0,0,0,
        2305,2298,1,0,0,0,2305,2302,1,0,0,0,2306,271,1,0,0,0,2307,2308,3,
        312,156,0,2308,273,1,0,0,0,2309,2310,7,12,0,0,2310,275,1,0,0,0,2311,
        2316,3,278,139,0,2312,2313,5,12,0,0,2313,2315,3,278,139,0,2314,2312,
        1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,
        277,1,0,0,0,2318,2316,1,0,0,0,2319,2321,3,280,140,0,2320,2319,1,
        0,0,0,2321,2322,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,
        279,1,0,0,0,2324,2326,3,284,142,0,2325,2327,3,282,141,0,2326,2325,
        1,0,0,0,2326,2327,1,0,0,0,2327,281,1,0,0,0,2328,2330,5,19,0,0,2329,
        2331,5,27,0,0,2330,2329,1,0,0,0,2330,2331,1,0,0,0,2331,2357,1,0,
        0,0,2332,2334,5,16,0,0,2333,2335,5,27,0,0,2334,2333,1,0,0,0,2334,
        2335,1,0,0,0,2335,2357,1,0,0,0,2336,2338,5,27,0,0,2337,2339,5,27,
        0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,2357,1,0,0,0,2340,2342,
        5,31,0,0,2341,2343,3,892,446,0,2342,2341,1,0,0,0,2342,2343,1,0,0,
        0,2343,2344,1,0,0,0,2344,2346,5,24,0,0,2345,2347,3,892,446,0,2346,
        2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2350,5,32,
        0,0,2349,2351,5,27,0,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,
        2357,1,0,0,0,2352,2353,5,31,0,0,2353,2354,3,892,446,0,2354,2355,
        5,32,0,0,2355,2357,1,0,0,0,2356,2328,1,0,0,0,2356,2332,1,0,0,0,2356,
        2336,1,0,0,0,2356,2340,1,0,0,0,2356,2352,1,0,0,0,2357,283,1,0,0,
        0,2358,2374,3,286,143,0,2359,2374,5,30,0,0,2360,2374,5,33,0,0,2361,
        2363,5,25,0,0,2362,2364,3,276,138,0,2363,2362,1,0,0,0,2363,2364,
        1,0,0,0,2364,2365,1,0,0,0,2365,2374,5,26,0,0,2366,2367,5,31,0,0,
        2367,2368,5,17,0,0,2368,2369,3,276,138,0,2369,2370,5,17,0,0,2370,
        2371,5,32,0,0,2371,2374,1,0,0,0,2372,2374,3,288,144,0,2373,2358,
        1,0,0,0,2373,2359,1,0,0,0,2373,2360,1,0,0,0,2373,2361,1,0,0,0,2373,
        2366,1,0,0,0,2373,2372,1,0,0,0,2374,285,1,0,0,0,2375,2376,3,312,
        156,0,2376,287,1,0,0,0,2377,2378,5,225,0,0,2378,2379,5,25,0,0,2379,
        2384,3,276,138,0,2380,2381,5,24,0,0,2381,2383,3,276,138,0,2382,2380,
        1,0,0,0,2383,2386,1,0,0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,
        2387,1,0,0,0,2386,2384,1,0,0,0,2387,2388,5,26,0,0,2388,289,1,0,0,
        0,2389,2390,5,282,0,0,2390,2391,3,292,146,0,2391,291,1,0,0,0,2392,
        2397,3,294,147,0,2393,2394,5,24,0,0,2394,2396,3,294,147,0,2395,2393,
        1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,2398,
        293,1,0,0,0,2399,2397,1,0,0,0,2400,2401,3,296,148,0,2401,2402,5,
        1,0,0,2402,2403,5,25,0,0,2403,2404,3,298,149,0,2404,2405,5,26,0,
        0,2405,295,1,0,0,0,2406,2407,3,312,156,0,2407,297,1,0,0,0,2408,2413,
        3,300,150,0,2409,2410,5,24,0,0,2410,2412,3,300,150,0,2411,2409,1,
        0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,0,2413,2414,1,0,0,0,2414,
        299,1,0,0,0,2415,2413,1,0,0,0,2416,2417,3,312,156,0,2417,301,1,0,
        0,0,2418,2423,3,304,152,0,2419,2420,5,24,0,0,2420,2422,3,304,152,
        0,2421,2419,1,0,0,0,2422,2425,1,0,0,0,2423,2421,1,0,0,0,2423,2424,
        1,0,0,0,2424,303,1,0,0,0,2425,2423,1,0,0,0,2426,2427,3,306,153,0,
        2427,2428,5,49,0,0,2428,2429,3,308,154,0,2429,305,1,0,0,0,2430,2431,
        3,312,156,0,2431,307,1,0,0,0,2432,2433,3,310,155,0,2433,309,1,0,
        0,0,2434,2435,3,14,7,0,2435,311,1,0,0,0,2436,2437,3,808,404,0,2437,
        313,1,0,0,0,2438,2439,5,213,0,0,2439,2440,5,67,0,0,2440,2441,3,230,
        115,0,2441,315,1,0,0,0,2442,2444,5,51,0,0,2443,2442,1,0,0,0,2443,
        2444,1,0,0,0,2444,2445,1,0,0,0,2445,2446,3,314,157,0,2446,317,1,
        0,0,0,2447,2449,5,147,0,0,2448,2450,5,79,0,0,2449,2448,1,0,0,0,2449,
        2450,1,0,0,0,2450,2451,1,0,0,0,2451,2452,5,67,0,0,2452,2453,3,252,
        126,0,2453,2456,3,320,160,0,2454,2455,5,323,0,0,2455,2457,3,828,
        414,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,319,1,0,0,0,2458,
        2463,3,322,161,0,2459,2460,5,24,0,0,2460,2462,3,322,161,0,2461,2459,
        1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,0,0,2464,
        321,1,0,0,0,2465,2463,1,0,0,0,2466,2472,3,324,162,0,2467,2472,3,
        328,164,0,2468,2472,3,330,165,0,2469,2472,3,332,166,0,2470,2472,
        3,334,167,0,2471,2466,1,0,0,0,2471,2467,1,0,0,0,2471,2468,1,0,0,
        0,2471,2469,1,0,0,0,2471,2470,1,0,0,0,2472,323,1,0,0,0,2473,2474,
        3,128,64,0,2474,325,1,0,0,0,2475,2480,3,324,162,0,2476,2477,5,24,
        0,0,2477,2479,3,324,162,0,2478,2476,1,0,0,0,2479,2482,1,0,0,0,2480,
        2478,1,0,0,0,2480,2481,1,0,0,0,2481,327,1,0,0,0,2482,2480,1,0,0,
        0,2483,2484,5,262,0,0,2484,2485,5,25,0,0,2485,2486,3,326,163,0,2486,
        2487,5,26,0,0,2487,329,1,0,0,0,2488,2489,5,88,0,0,2489,2490,5,25,
        0,0,2490,2491,3,326,163,0,2491,2492,5,26,0,0,2492,331,1,0,0,0,2493,
        2494,5,148,0,0,2494,2495,5,273,0,0,2495,2496,5,25,0,0,2496,2497,
        3,320,160,0,2497,2498,5,26,0,0,2498,333,1,0,0,0,2499,2500,5,152,
        0,0,2500,2501,5,25,0,0,2501,2502,3,14,7,0,2502,2503,5,24,0,0,2503,
        2504,3,14,7,0,2504,2505,5,24,0,0,2505,2506,3,14,7,0,2506,2507,5,
        24,0,0,2507,2508,3,14,7,0,2508,2509,5,26,0,0,2509,335,1,0,0,0,2510,
        2511,3,852,426,0,2511,2512,5,19,0,0,2512,2520,1,0,0,0,2513,2517,
        3,14,7,0,2514,2515,5,49,0,0,2515,2518,3,830,415,0,2516,2518,3,848,
        424,0,2517,2514,1,0,0,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,
        2520,1,0,0,0,2519,2510,1,0,0,0,2519,2513,1,0,0,0,2520,337,1,0,0,
        0,2521,2523,5,47,0,0,2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,2524,
        1,0,0,0,2524,2535,3,344,172,0,2525,2527,3,358,179,0,2526,2528,5,
        47,0,0,2527,2526,1,0,0,0,2527,2528,1,0,0,0,2528,2529,1,0,0,0,2529,
        2531,3,344,172,0,2530,2532,3,360,180,0,2531,2530,1,0,0,0,2531,2532,
        1,0,0,0,2532,2534,1,0,0,0,2533,2525,1,0,0,0,2534,2537,1,0,0,0,2535,
        2533,1,0,0,0,2535,2536,1,0,0,0,2536,339,1,0,0,0,2537,2535,1,0,0,
        0,2538,2541,3,120,60,0,2539,2540,5,49,0,0,2540,2542,3,828,414,0,
        2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,341,1,0,0,0,2543,2552,3,
        340,170,0,2544,2545,5,25,0,0,2545,2547,3,130,65,0,2546,2548,5,24,
        0,0,2547,2546,1,0,0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2550,
        5,26,0,0,2550,2552,1,0,0,0,2551,2543,1,0,0,0,2551,2544,1,0,0,0,2552,
        343,1,0,0,0,2553,2563,3,346,173,0,2554,2561,5,136,0,0,2555,2557,
        7,13,0,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,
        2559,5,67,0,0,2559,2562,3,342,171,0,2560,2562,5,77,0,0,2561,2556,
        1,0,0,0,2561,2560,1,0,0,0,2562,2564,1,0,0,0,2563,2554,1,0,0,0,2563,
        2564,1,0,0,0,2564,345,1,0,0,0,2565,2567,3,348,174,0,2566,2568,3,
        256,128,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,2577,1,0,0,0,
        2569,2570,5,49,0,0,2570,2573,3,828,414,0,2571,2573,3,848,424,0,2572,
        2569,1,0,0,0,2572,2571,1,0,0,0,2573,2575,1,0,0,0,2574,2576,3,114,
        57,0,2575,2574,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,
        2572,1,0,0,0,2577,2578,1,0,0,0,2578,2581,1,0,0,0,2579,2582,3,350,
        175,0,2580,2582,3,352,176,0,2581,2579,1,0,0,0,2581,2580,1,0,0,0,
        2581,2582,1,0,0,0,2582,347,1,0,0,0,2583,2593,3,664,332,0,2584,2585,
        5,25,0,0,2585,2586,3,232,116,0,2586,2587,5,26,0,0,2587,2593,1,0,
        0,0,2588,2589,5,25,0,0,2589,2590,3,368,184,0,2590,2591,5,26,0,0,
        2591,2593,1,0,0,0,2592,2583,1,0,0,0,2592,2584,1,0,0,0,2592,2588,
        1,0,0,0,2593,349,1,0,0,0,2594,2595,5,265,0,0,2595,2596,3,14,7,0,
        2596,351,1,0,0,0,2597,2598,5,289,0,0,2598,2599,3,354,177,0,2599,
        2600,5,25,0,0,2600,2601,3,14,7,0,2601,2603,5,26,0,0,2602,2604,3,
        356,178,0,2603,2602,1,0,0,0,2603,2604,1,0,0,0,2604,353,1,0,0,0,2605,
        2606,7,14,0,0,2606,355,1,0,0,0,2607,2608,5,245,0,0,2608,2609,5,25,
        0,0,2609,2610,3,14,7,0,2610,2611,5,26,0,0,2611,357,1,0,0,0,2612,
        2637,5,24,0,0,2613,2615,5,195,0,0,2614,2613,1,0,0,0,2614,2615,1,
        0,0,0,2615,2633,1,0,0,0,2616,2618,5,179,0,0,2617,2619,7,15,0,0,2618,
        2617,1,0,0,0,2618,2619,1,0,0,0,2619,2627,1,0,0,0,2620,2622,5,259,
        0,0,2621,2623,7,15,0,0,2622,2621,1,0,0,0,2622,2623,1,0,0,0,2623,
        2627,1,0,0,0,2624,2627,5,125,0,0,2625,2627,5,142,0,0,2626,2616,1,
        0,0,0,2626,2620,1,0,0,0,2626,2624,1,0,0,0,2626,2625,1,0,0,0,2626,
        2627,1,0,0,0,2627,2629,1,0,0,0,2628,2630,5,215,0,0,2629,2628,1,0,
        0,0,2629,2630,1,0,0,0,2630,2634,1,0,0,0,2631,2634,5,166,0,0,2632,
        2634,5,87,0,0,2633,2626,1,0,0,0,2633,2631,1,0,0,0,2633,2632,1,0,
        0,0,2634,2635,1,0,0,0,2635,2637,5,173,0,0,2636,2612,1,0,0,0,2636,
        2614,1,0,0,0,2637,359,1,0,0,0,2638,2639,5,207,0,0,2639,2643,3,14,
        7,0,2640,2641,5,314,0,0,2641,2643,3,118,59,0,2642,2638,1,0,0,0,2642,
        2640,1,0,0,0,2643,361,1,0,0,0,2644,2654,5,256,0,0,2645,2655,5,19,
        0,0,2646,2651,3,828,414,0,2647,2648,5,24,0,0,2648,2650,3,828,414,
        0,2649,2647,1,0,0,0,2650,2653,1,0,0,0,2651,2649,1,0,0,0,2651,2652,
        1,0,0,0,2652,2655,1,0,0,0,2653,2651,1,0,0,0,2654,2645,1,0,0,0,2654,
        2646,1,0,0,0,2655,363,1,0,0,0,2656,2669,5,167,0,0,2657,2658,5,167,
        0,0,2658,2659,5,212,0,0,2659,2669,5,38,0,0,2660,2661,5,167,0,0,2661,
        2662,5,212,0,0,2662,2669,5,257,0,0,2663,2664,5,167,0,0,2664,2665,
        5,212,0,0,2665,2669,5,154,0,0,2666,2669,5,311,0,0,2667,2669,5,246,
        0,0,2668,2656,1,0,0,0,2668,2657,1,0,0,0,2668,2660,1,0,0,0,2668,2663,
        1,0,0,0,2668,2666,1,0,0,0,2668,2667,1,0,0,0,2669,2670,1,0,0,0,2670,
        2671,5,170,0,0,2671,2672,3,680,340,0,2672,2674,3,366,183,0,2673,
        2675,3,362,181,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,2675,365,1,
        0,0,0,2676,2678,3,114,57,0,2677,2676,1,0,0,0,2677,2678,1,0,0,0,2678,
        2679,1,0,0,0,2679,2683,3,370,185,0,2680,2681,5,97,0,0,2681,2683,
        5,316,0,0,2682,2677,1,0,0,0,2682,2680,1,0,0,0,2683,367,1,0,0,0,2684,
        2685,5,316,0,0,2685,2686,3,372,186,0,2686,369,1,0,0,0,2687,2690,
        3,368,184,0,2688,2690,3,232,116,0,2689,2687,1,0,0,0,2689,2688,1,
        0,0,0,2690,371,1,0,0,0,2691,2696,3,374,187,0,2692,2693,5,24,0,0,
        2693,2695,3,374,187,0,2694,2692,1,0,0,0,2695,2698,1,0,0,0,2696,2694,
        1,0,0,0,2696,2697,1,0,0,0,2697,373,1,0,0,0,2698,2696,1,0,0,0,2699,
        2700,5,25,0,0,2700,2701,3,112,56,0,2701,2702,5,26,0,0,2702,375,1,
        0,0,0,2703,2706,3,112,56,0,2704,2706,3,232,116,0,2705,2703,1,0,0,
        0,2705,2704,1,0,0,0,2706,377,1,0,0,0,2707,2710,5,86,0,0,2708,2709,
        5,212,0,0,2709,2711,5,246,0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,
        0,2711,2712,1,0,0,0,2712,2713,5,130,0,0,2713,2714,5,93,0,0,2714,
        2718,5,277,0,0,2715,2716,5,153,0,0,2716,2717,5,199,0,0,2717,2719,
        5,127,0,0,2718,2715,1,0,0,0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,
        2720,2721,3,674,337,0,2721,2722,3,456,228,0,2722,379,1,0,0,0,2723,
        2724,5,43,0,0,2724,2725,5,130,0,0,2725,2726,5,93,0,0,2726,2727,5,
        277,0,0,2727,2728,3,674,337,0,2728,2733,3,382,191,0,2729,2730,5,
        24,0,0,2730,2732,3,382,191,0,2731,2729,1,0,0,0,2732,2735,1,0,0,0,
        2733,2731,1,0,0,0,2733,2734,1,0,0,0,2734,381,1,0,0,0,2735,2733,1,
        0,0,0,2736,2740,3,488,244,0,2737,2740,3,490,245,0,2738,2740,3,492,
        246,0,2739,2736,1,0,0,0,2739,2737,1,0,0,0,2739,2738,1,0,0,0,2740,
        383,1,0,0,0,2741,2742,5,111,0,0,2742,2743,5,130,0,0,2743,2744,5,
        93,0,0,2744,2747,5,277,0,0,2745,2746,5,153,0,0,2746,2748,5,127,0,
        0,2747,2745,1,0,0,0,2747,2748,1,0,0,0,2748,2749,1,0,0,0,2749,2750,
        3,674,337,0,2750,385,1,0,0,0,2751,2752,5,86,0,0,2752,2756,5,318,
        0,0,2753,2754,5,153,0,0,2754,2755,5,199,0,0,2755,2757,5,127,0,0,
        2756,2753,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,2760,
        3,674,337,0,2759,2761,3,394,197,0,2760,2759,1,0,0,0,2760,2761,1,
        0,0,0,2761,2762,1,0,0,0,2762,2763,5,49,0,0,2763,2764,3,232,116,0,
        2764,387,1,0,0,0,2765,2766,5,111,0,0,2766,2769,5,318,0,0,2767,2768,
        5,153,0,0,2768,2770,5,127,0,0,2769,2767,1,0,0,0,2769,2770,1,0,0,
        0,2770,2771,1,0,0,0,2771,2772,3,674,337,0,2772,389,1,0,0,0,2773,
        2774,5,311,0,0,2774,2775,5,203,0,0,2775,2776,3,674,337,0,2776,2777,
        5,25,0,0,2777,2778,5,303,0,0,2778,2779,3,414,207,0,2779,2781,5,26,
        0,0,2780,2782,3,394,197,0,2781,2780,1,0,0,0,2781,2782,1,0,0,0,2782,
        391,1,0,0,0,2783,2784,5,86,0,0,2784,2788,5,203,0,0,2785,2786,5,153,
        0,0,2786,2787,5,199,0,0,2787,2789,5,127,0,0,2788,2785,1,0,0,0,2788,
        2789,1,0,0,0,2789,2790,1,0,0,0,2790,2791,3,674,337,0,2791,2792,5,
        25,0,0,2792,2793,5,303,0,0,2793,2794,3,414,207,0,2794,2796,5,26,
        0,0,2795,2797,3,394,197,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,
        393,1,0,0,0,2798,2799,5,323,0,0,2799,2800,3,412,206,0,2800,395,1,
        0,0,0,2801,2802,5,43,0,0,2802,2803,5,203,0,0,2803,2804,3,674,337,
        0,2804,2805,5,25,0,0,2805,2806,5,303,0,0,2806,2807,3,414,207,0,2807,
        2808,5,26,0,0,2808,2809,3,398,199,0,2809,397,1,0,0,0,2810,2811,5,
        272,0,0,2811,2812,3,412,206,0,2812,399,1,0,0,0,2813,2814,5,111,0,
        0,2814,2817,5,203,0,0,2815,2816,5,153,0,0,2816,2818,5,127,0,0,2817,
        2815,1,0,0,0,2817,2818,1,0,0,0,2818,2819,1,0,0,0,2819,2820,3,674,
        337,0,2820,2821,5,25,0,0,2821,2822,5,303,0,0,2822,2823,3,414,207,
        0,2823,2825,5,26,0,0,2824,2826,3,402,201,0,2825,2824,1,0,0,0,2825,
        2826,1,0,0,0,2826,401,1,0,0,0,2827,2828,5,323,0,0,2828,2829,3,412,
        206,0,2829,403,1,0,0,0,2830,2835,3,856,428,0,2831,2835,3,144,72,
        0,2832,2835,5,327,0,0,2833,2835,3,888,444,0,2834,2830,1,0,0,0,2834,
        2831,1,0,0,0,2834,2832,1,0,0,0,2834,2833,1,0,0,0,2835,405,1,0,0,
        0,2836,2837,3,830,415,0,2837,2838,5,1,0,0,2838,2839,3,404,202,0,
        2839,407,1,0,0,0,2840,2841,3,830,415,0,2841,409,1,0,0,0,2842,2845,
        3,406,203,0,2843,2845,3,408,204,0,2844,2842,1,0,0,0,2844,2843,1,
        0,0,0,2845,411,1,0,0,0,2846,2859,3,410,205,0,2847,2848,5,25,0,0,
        2848,2853,3,410,205,0,2849,2850,5,24,0,0,2850,2852,3,410,205,0,2851,
        2849,1,0,0,0,2852,2855,1,0,0,0,2853,2851,1,0,0,0,2853,2854,1,0,0,
        0,2854,2856,1,0,0,0,2855,2853,1,0,0,0,2856,2857,5,26,0,0,2857,2859,
        1,0,0,0,2858,2846,1,0,0,0,2858,2847,1,0,0,0,2859,413,1,0,0,0,2860,
        2861,3,830,415,0,2861,415,1,0,0,0,2862,2865,5,86,0,0,2863,2864,5,
        212,0,0,2864,2866,5,246,0,0,2865,2863,1,0,0,0,2865,2866,1,0,0,0,
        2866,2875,1,0,0,0,2867,2876,5,287,0,0,2868,2876,5,290,0,0,2869,2870,
        5,130,0,0,2870,2876,5,287,0,0,2871,2872,5,292,0,0,2872,2876,5,287,
        0,0,2873,2874,5,293,0,0,2874,2876,5,287,0,0,2875,2867,1,0,0,0,2875,
        2868,1,0,0,0,2875,2869,1,0,0,0,2875,2871,1,0,0,0,2875,2873,1,0,0,
        0,2876,2880,1,0,0,0,2877,2878,5,153,0,0,2878,2879,5,199,0,0,2879,
        2881,5,127,0,0,2880,2877,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,
        0,0,2882,2883,3,678,339,0,2883,2884,5,25,0,0,2884,2889,3,418,209,
        0,2885,2886,5,24,0,0,2886,2888,3,418,209,0,2887,2885,1,0,0,0,2888,
        2891,1,0,0,0,2889,2887,1,0,0,0,2889,2890,1,0,0,0,2890,2893,1,0,0,
        0,2891,2889,1,0,0,0,2892,2894,5,24,0,0,2893,2892,1,0,0,0,2893,2894,
        1,0,0,0,2894,2895,1,0,0,0,2895,2897,5,26,0,0,2896,2898,3,452,226,
        0,2897,2896,1,0,0,0,2897,2898,1,0,0,0,2898,2900,1,0,0,0,2899,2901,
        3,454,227,0,2900,2899,1,0,0,0,2900,2901,1,0,0,0,2901,2903,1,0,0,
        0,2902,2904,3,456,228,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,
        2906,1,0,0,0,2905,2907,3,458,229,0,2906,2905,1,0,0,0,2906,2907,1,
        0,0,0,2907,2909,1,0,0,0,2908,2910,3,462,231,0,2909,2908,1,0,0,0,
        2909,2910,1,0,0,0,2910,417,1,0,0,0,2911,2918,3,510,255,0,2912,2918,
        3,518,259,0,2913,2918,3,520,260,0,2914,2918,3,554,277,0,2915,2918,
        3,536,268,0,2916,2918,3,832,416,0,2917,2911,1,0,0,0,2917,2912,1,
        0,0,0,2917,2913,1,0,0,0,2917,2914,1,0,0,0,2917,2915,1,0,0,0,2917,
        2916,1,0,0,0,2918,419,1,0,0,0,2919,2920,5,86,0,0,2920,2922,3,440,
        220,0,2921,2923,3,426,213,0,2922,2921,1,0,0,0,2922,2923,1,0,0,0,
        2923,2924,1,0,0,0,2924,2925,5,323,0,0,2925,2926,5,25,0,0,2926,2927,
        3,442,221,0,2927,2928,5,26,0,0,2928,421,1,0,0,0,2929,2930,5,43,0,
        0,2930,2933,3,440,220,0,2931,2934,3,432,216,0,2932,2934,3,436,218,
        0,2933,2931,1,0,0,0,2933,2932,1,0,0,0,2934,423,1,0,0,0,2935,2936,
        5,111,0,0,2936,2937,3,440,220,0,2937,425,1,0,0,0,2938,2941,5,94,
        0,0,2939,2941,3,428,214,0,2940,2938,1,0,0,0,2940,2939,1,0,0,0,2941,
        427,1,0,0,0,2942,2943,5,25,0,0,2943,2944,3,430,215,0,2944,2945,5,
        26,0,0,2945,429,1,0,0,0,2946,2947,5,287,0,0,2947,2953,3,840,420,
        0,2948,2949,5,24,0,0,2949,2950,5,287,0,0,2950,2952,3,840,420,0,2951,
        2948,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,0,2953,2954,1,0,0,
        0,2954,431,1,0,0,0,2955,2953,1,0,0,0,2956,2961,3,434,217,0,2957,
        2958,5,24,0,0,2958,2960,3,434,217,0,2959,2957,1,0,0,0,2960,2963,
        1,0,0,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,433,1,0,0,0,2963,
        2961,1,0,0,0,2964,2967,3,490,245,0,2965,2967,3,492,246,0,2966,2964,
        1,0,0,0,2966,2965,1,0,0,0,2967,435,1,0,0,0,2968,2973,3,438,219,0,
        2969,2970,5,24,0,0,2970,2972,3,438,219,0,2971,2969,1,0,0,0,2972,
        2975,1,0,0,0,2973,2971,1,0,0,0,2973,2974,1,0,0,0,2974,437,1,0,0,
        0,2975,2973,1,0,0,0,2976,2977,5,40,0,0,2977,2987,5,94,0,0,2978,2979,
        5,111,0,0,2979,2987,5,94,0,0,2980,2981,5,40,0,0,2981,2982,5,287,
        0,0,2982,2987,3,840,420,0,2983,2984,5,111,0,0,2984,2985,5,287,0,
        0,2985,2987,3,840,420,0,2986,2976,1,0,0,0,2986,2978,1,0,0,0,2986,
        2980,1,0,0,0,2986,2983,1,0,0,0,2987,439,1,0,0,0,2988,2989,5,59,0,
        0,2989,2990,5,61,0,0,2990,2991,3,674,337,0,2991,441,1,0,0,0,2992,
        2997,3,444,222,0,2993,2994,5,24,0,0,2994,2996,3,444,222,0,2995,2993,
        1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,0,0,0,2997,2998,1,0,0,0,2998,
        443,1,0,0,0,2999,2997,1,0,0,0,3000,3001,3,828,414,0,3001,3002,5,
        1,0,0,3002,3003,3,548,274,0,3003,445,1,0,0,0,3004,3005,5,59,0,0,
        3005,3007,3,674,337,0,3006,3008,5,160,0,0,3007,3006,1,0,0,0,3007,
        3008,1,0,0,0,3008,447,1,0,0,0,3009,3010,5,252,0,0,3010,3013,3,674,
        337,0,3011,3012,5,54,0,0,3012,3014,5,327,0,0,3013,3011,1,0,0,0,3013,
        3014,1,0,0,0,3014,449,1,0,0,0,3015,3016,5,43,0,0,3016,3017,5,94,
        0,0,3017,3018,3,832,416,0,3018,3019,5,217,0,0,3019,3020,5,296,0,
        0,3020,3021,3,580,290,0,3021,451,1,0,0,0,3022,3023,5,163,0,0,3023,
        3024,5,25,0,0,3024,3029,3,676,338,0,3025,3026,5,24,0,0,3026,3028,
        3,676,338,0,3027,3025,1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,
        0,3029,3030,1,0,0,0,3030,3032,1,0,0,0,3031,3029,1,0,0,0,3032,3033,
        5,26,0,0,3033,453,1,0,0,0,3034,3035,5,219,0,0,3035,3036,5,67,0,0,
        3036,3037,5,150,0,0,3037,3038,3,114,57,0,3038,455,1,0,0,0,3039,3040,
        5,323,0,0,3040,3041,5,25,0,0,3041,3046,3,460,230,0,3042,3043,5,24,
        0,0,3043,3045,3,460,230,0,3044,3042,1,0,0,0,3045,3048,1,0,0,0,3046,
        3044,1,0,0,0,3046,3047,1,0,0,0,3047,3049,1,0,0,0,3048,3046,1,0,0,
        0,3049,3050,5,26,0,0,3050,457,1,0,0,0,3051,3052,5,290,0,0,3052,3053,
        3,676,338,0,3053,459,1,0,0,0,3054,3055,3,828,414,0,3055,3056,5,1,
        0,0,3056,3057,3,548,274,0,3057,461,1,0,0,0,3058,3059,5,49,0,0,3059,
        3060,3,370,185,0,3060,463,1,0,0,0,3061,3062,5,43,0,0,3062,3063,5,
        287,0,0,3063,3064,3,678,339,0,3064,3069,3,466,233,0,3065,3066,5,
        24,0,0,3066,3068,3,466,233,0,3067,3065,1,0,0,0,3068,3071,1,0,0,0,
        3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,465,1,0,0,0,3071,3069,1,
        0,0,0,3072,3090,3,476,238,0,3073,3090,3,478,239,0,3074,3090,3,480,
        240,0,3075,3090,3,484,242,0,3076,3090,3,486,243,0,3077,3090,3,488,
        244,0,3078,3090,3,490,245,0,3079,3090,3,492,246,0,3080,3090,3,494,
        247,0,3081,3090,3,496,248,0,3082,3090,3,498,249,0,3083,3090,3,502,
        251,0,3084,3090,3,504,252,0,3085,3090,3,506,253,0,3086,3090,3,500,
        250,0,3087,3090,3,508,254,0,3088,3090,3,482,241,0,3089,3072,1,0,
        0,0,3089,3073,1,0,0,0,3089,3074,1,0,0,0,3089,3075,1,0,0,0,3089,3076,
        1,0,0,0,3089,3077,1,0,0,0,3089,3078,1,0,0,0,3089,3079,1,0,0,0,3089,
        3080,1,0,0,0,3089,3081,1,0,0,0,3089,3082,1,0,0,0,3089,3083,1,0,0,
        0,3089,3084,1,0,0,0,3089,3085,1,0,0,0,3089,3086,1,0,0,0,3089,3087,
        1,0,0,0,3089,3088,1,0,0,0,3090,467,1,0,0,0,3091,3092,5,43,0,0,3092,
        3093,5,130,0,0,3093,3094,5,287,0,0,3094,3095,3,678,339,0,3095,3100,
        3,470,235,0,3096,3097,5,24,0,0,3097,3099,3,470,235,0,3098,3096,1,
        0,0,0,3099,3102,1,0,0,0,3100,3098,1,0,0,0,3100,3101,1,0,0,0,3101,
        469,1,0,0,0,3102,3100,1,0,0,0,3103,3109,3,476,238,0,3104,3109,3,
        478,239,0,3105,3109,3,488,244,0,3106,3109,3,490,245,0,3107,3109,
        3,492,246,0,3108,3103,1,0,0,0,3108,3104,1,0,0,0,3108,3105,1,0,0,
        0,3108,3106,1,0,0,0,3108,3107,1,0,0,0,3109,471,1,0,0,0,3110,3111,
        5,43,0,0,3111,3112,5,290,0,0,3112,3113,3,674,337,0,3113,3118,3,474,
        237,0,3114,3115,5,24,0,0,3115,3117,3,474,237,0,3116,3114,1,0,0,0,
        3117,3120,1,0,0,0,3118,3116,1,0,0,0,3118,3119,1,0,0,0,3119,473,1,
        0,0,0,3120,3118,1,0,0,0,3121,3124,3,476,238,0,3122,3124,3,478,239,
        0,3123,3121,1,0,0,0,3123,3122,1,0,0,0,3124,475,1,0,0,0,3125,3127,
        5,40,0,0,3126,3128,5,76,0,0,3127,3126,1,0,0,0,3127,3128,1,0,0,0,
        3128,3129,1,0,0,0,3129,3130,3,510,255,0,3130,477,1,0,0,0,3131,3133,
        5,111,0,0,3132,3134,5,76,0,0,3133,3132,1,0,0,0,3133,3134,1,0,0,0,
        3134,3135,1,0,0,0,3135,3136,3,828,414,0,3136,479,1,0,0,0,3137,3138,
        5,43,0,0,3138,3139,5,76,0,0,3139,3140,3,828,414,0,3140,3141,5,272,
        0,0,3141,3142,3,512,256,0,3142,481,1,0,0,0,3143,3144,5,43,0,0,3144,
        3145,5,76,0,0,3145,3146,3,828,414,0,3146,3147,5,111,0,0,3147,3148,
        5,199,0,0,3148,3149,5,201,0,0,3149,483,1,0,0,0,3150,3151,5,40,0,
        0,3151,3152,3,554,277,0,3152,485,1,0,0,0,3153,3154,5,43,0,0,3154,
        3155,5,133,0,0,3155,3156,3,828,414,0,3156,3157,5,272,0,0,3157,3158,
        3,828,414,0,3158,3159,3,560,280,0,3159,487,1,0,0,0,3160,3161,5,272,
        0,0,3161,3162,3,828,414,0,3162,3163,3,548,274,0,3163,489,1,0,0,0,
        3164,3165,5,272,0,0,3165,3166,5,25,0,0,3166,3171,3,546,273,0,3167,
        3168,5,24,0,0,3168,3170,3,546,273,0,3169,3167,1,0,0,0,3170,3173,
        1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,3174,1,0,0,0,3173,
        3171,1,0,0,0,3174,3175,5,26,0,0,3175,491,1,0,0,0,3176,3177,5,248,
        0,0,3177,3178,5,25,0,0,3178,3183,3,828,414,0,3179,3180,5,24,0,0,
        3180,3182,3,828,414,0,3181,3179,1,0,0,0,3182,3185,1,0,0,0,3183,3181,
        1,0,0,0,3183,3184,1,0,0,0,3184,3186,1,0,0,0,3185,3183,1,0,0,0,3186,
        3187,5,26,0,0,3187,493,1,0,0,0,3188,3189,5,40,0,0,3189,3190,3,520,
        260,0,3190,495,1,0,0,0,3191,3192,5,111,0,0,3192,3193,5,161,0,0,3193,
        3194,3,828,414,0,3194,497,1,0,0,0,3195,3196,5,244,0,0,3196,3197,
        5,296,0,0,3197,3198,3,840,420,0,3198,499,1,0,0,0,3199,3200,5,244,
        0,0,3200,3201,5,161,0,0,3201,3202,3,828,414,0,3202,3203,5,296,0,
        0,3203,3204,3,828,414,0,3204,501,1,0,0,0,3205,3206,5,40,0,0,3206,
        3207,3,536,268,0,3207,503,1,0,0,0,3208,3209,5,43,0,0,3209,3210,5,
        72,0,0,3210,3211,3,828,414,0,3211,3212,3,544,272,0,3212,505,1,0,
        0,0,3213,3214,5,111,0,0,3214,3215,5,72,0,0,3215,3216,3,828,414,0,
        3216,507,1,0,0,0,3217,3218,5,43,0,0,3218,3219,5,161,0,0,3219,3220,
        3,828,414,0,3220,3221,3,566,283,0,3221,509,1,0,0,0,3222,3223,3,832,
        416,0,3223,3225,3,204,102,0,3224,3226,3,512,256,0,3225,3224,1,0,
        0,0,3225,3226,1,0,0,0,3226,3227,1,0,0,0,3227,3228,3,514,257,0,3228,
        511,1,0,0,0,3229,3230,5,133,0,0,3230,3231,3,828,414,0,3231,513,1,
        0,0,0,3232,3234,5,199,0,0,3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,
        3235,1,0,0,0,3235,3237,5,201,0,0,3236,3233,1,0,0,0,3236,3237,1,0,
        0,0,3237,3240,1,0,0,0,3238,3239,5,97,0,0,3239,3241,3,14,7,0,3240,
        3238,1,0,0,0,3240,3241,1,0,0,0,3241,515,1,0,0,0,3242,3244,3,828,
        414,0,3243,3245,7,9,0,0,3244,3243,1,0,0,0,3244,3245,1,0,0,0,3245,
        517,1,0,0,0,3246,3247,5,231,0,0,3247,3248,5,177,0,0,3248,3249,5,
        25,0,0,3249,3254,3,828,414,0,3250,3251,5,24,0,0,3251,3253,3,828,
        414,0,3252,3250,1,0,0,0,3253,3256,1,0,0,0,3254,3252,1,0,0,0,3254,
        3255,1,0,0,0,3255,3257,1,0,0,0,3256,3254,1,0,0,0,3257,3258,5,26,
        0,0,3258,3286,1,0,0,0,3259,3260,5,219,0,0,3260,3261,5,67,0,0,3261,
        3262,5,25,0,0,3262,3267,3,828,414,0,3263,3264,5,24,0,0,3264,3266,
        3,828,414,0,3265,3263,1,0,0,0,3266,3269,1,0,0,0,3267,3265,1,0,0,
        0,3267,3268,1,0,0,0,3268,3270,1,0,0,0,3269,3267,1,0,0,0,3270,3271,
        5,26,0,0,3271,3286,1,0,0,0,3272,3273,5,213,0,0,3273,3274,5,67,0,
        0,3274,3275,5,25,0,0,3275,3280,3,516,258,0,3276,3277,5,24,0,0,3277,
        3279,3,516,258,0,3278,3276,1,0,0,0,3279,3282,1,0,0,0,3280,3278,1,
        0,0,0,3280,3281,1,0,0,0,3281,3283,1,0,0,0,3282,3280,1,0,0,0,3283,
        3284,5,26,0,0,3284,3286,1,0,0,0,3285,3246,1,0,0,0,3285,3259,1,0,
        0,0,3285,3272,1,0,0,0,3286,519,1,0,0,0,3287,3288,5,161,0,0,3288,
        3289,3,828,414,0,3289,3290,3,522,261,0,3290,3291,5,207,0,0,3291,
        3292,5,25,0,0,3292,3297,3,832,416,0,3293,3294,5,24,0,0,3294,3296,
        3,832,416,0,3295,3293,1,0,0,0,3296,3299,1,0,0,0,3297,3295,1,0,0,
        0,3297,3298,1,0,0,0,3298,3300,1,0,0,0,3299,3297,1,0,0,0,3300,3313,
        5,26,0,0,3301,3302,5,85,0,0,3302,3303,5,25,0,0,3303,3308,3,832,416,
        0,3304,3305,5,24,0,0,3305,3307,3,832,416,0,3306,3304,1,0,0,0,3307,
        3310,1,0,0,0,3308,3306,1,0,0,0,3308,3309,1,0,0,0,3309,3311,1,0,0,
        0,3310,3308,1,0,0,0,3311,3312,5,26,0,0,3312,3314,1,0,0,0,3313,3301,
        1,0,0,0,3313,3314,1,0,0,0,3314,3316,1,0,0,0,3315,3317,3,530,265,
        0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,521,1,0,0,0,3318,3321,
        3,524,262,0,3319,3321,3,526,263,0,3320,3318,1,0,0,0,3320,3319,1,
        0,0,0,3321,3324,1,0,0,0,3322,3323,5,314,0,0,3323,3325,3,528,264,
        0,3324,3322,1,0,0,0,3324,3325,1,0,0,0,3325,523,1,0,0,0,3326,3328,
        5,145,0,0,3327,3329,5,307,0,0,3328,3327,1,0,0,0,3328,3329,1,0,0,
        0,3329,3331,1,0,0,0,3330,3332,7,16,0,0,3331,3330,1,0,0,0,3331,3332,
        1,0,0,0,3332,525,1,0,0,0,3333,3334,5,184,0,0,3334,527,1,0,0,0,3335,
        3336,3,828,414,0,3336,529,1,0,0,0,3337,3338,5,323,0,0,3338,3339,
        5,25,0,0,3339,3344,3,532,266,0,3340,3341,5,24,0,0,3341,3343,3,532,
        266,0,3342,3340,1,0,0,0,3343,3346,1,0,0,0,3344,3342,1,0,0,0,3344,
        3345,1,0,0,0,3345,3348,1,0,0,0,3346,3344,1,0,0,0,3347,3349,5,24,
        0,0,3348,3347,1,0,0,0,3348,3349,1,0,0,0,3349,3350,1,0,0,0,3350,3351,
        5,26,0,0,3351,531,1,0,0,0,3352,3353,3,828,414,0,3353,3354,5,1,0,
        0,3354,3355,3,534,267,0,3355,533,1,0,0,0,3356,3361,3,856,428,0,3357,
        3361,5,327,0,0,3358,3361,3,892,446,0,3359,3361,3,888,444,0,3360,
        3356,1,0,0,0,3360,3357,1,0,0,0,3360,3358,1,0,0,0,3360,3359,1,0,0,
        0,3361,535,1,0,0,0,3362,3363,5,72,0,0,3363,3364,3,828,414,0,3364,
        3365,5,323,0,0,3365,3366,5,25,0,0,3366,3367,3,538,269,0,3367,3368,
        5,26,0,0,3368,537,1,0,0,0,3369,3374,3,540,270,0,3370,3371,5,24,0,
        0,3371,3373,3,540,270,0,3372,3370,1,0,0,0,3373,3376,1,0,0,0,3374,
        3372,1,0,0,0,3374,3375,1,0,0,0,3375,539,1,0,0,0,3376,3374,1,0,0,
        0,3377,3378,3,828,414,0,3378,3379,5,1,0,0,3379,3380,3,542,271,0,
        3380,541,1,0,0,0,3381,3382,3,14,7,0,3382,543,1,0,0,0,3383,3390,5,
        107,0,0,3384,3385,5,272,0,0,3385,3386,5,25,0,0,3386,3387,3,538,269,
        0,3387,3388,5,26,0,0,3388,3390,1,0,0,0,3389,3383,1,0,0,0,3389,3384,
        1,0,0,0,3390,545,1,0,0,0,3391,3392,3,828,414,0,3392,3393,5,1,0,0,
        3393,3394,3,548,274,0,3394,547,1,0,0,0,3395,3408,3,810,405,0,3396,
        3408,5,327,0,0,3397,3408,3,892,446,0,3398,3408,3,562,281,0,3399,
        3400,3,550,275,0,3400,3401,5,207,0,0,3401,3404,3,828,414,0,3402,
        3403,5,49,0,0,3403,3405,7,17,0,0,3404,3402,1,0,0,0,3404,3405,1,0,
        0,0,3405,3408,1,0,0,0,3406,3408,3,888,444,0,3407,3395,1,0,0,0,3407,
        3396,1,0,0,0,3407,3397,1,0,0,0,3407,3398,1,0,0,0,3407,3399,1,0,0,
        0,3407,3406,1,0,0,0,3408,549,1,0,0,0,3409,3420,3,14,7,0,3410,3417,
        3,552,276,0,3411,3412,5,24,0,0,3412,3413,3,14,7,0,3413,3414,3,552,
        276,0,3414,3416,1,0,0,0,3415,3411,1,0,0,0,3416,3419,1,0,0,0,3417,
        3415,1,0,0,0,3417,3418,1,0,0,0,3418,3421,1,0,0,0,3419,3417,1,0,0,
        0,3420,3410,1,0,0,0,3420,3421,1,0,0,0,3421,551,1,0,0,0,3422,3423,
        5,296,0,0,3423,3424,5,130,0,0,3424,3425,5,93,0,0,3425,3426,5,277,
        0,0,3426,3429,3,828,414,0,3427,3429,5,101,0,0,3428,3422,1,0,0,0,
        3428,3427,1,0,0,0,3429,553,1,0,0,0,3430,3431,5,133,0,0,3431,3432,
        3,828,414,0,3432,3433,3,556,278,0,3433,555,1,0,0,0,3434,3443,5,25,
        0,0,3435,3440,3,558,279,0,3436,3437,5,24,0,0,3437,3439,3,558,279,
        0,3438,3436,1,0,0,0,3439,3442,1,0,0,0,3440,3438,1,0,0,0,3440,3441,
        1,0,0,0,3441,3444,1,0,0,0,3442,3440,1,0,0,0,3443,3435,1,0,0,0,3443,
        3444,1,0,0,0,3444,3445,1,0,0,0,3445,3446,5,26,0,0,3446,557,1,0,0,
        0,3447,3448,3,828,414,0,3448,3449,5,1,0,0,3449,3450,3,560,280,0,
        3450,559,1,0,0,0,3451,3454,5,327,0,0,3452,3454,3,892,446,0,3453,
        3451,1,0,0,0,3453,3452,1,0,0,0,3454,561,1,0,0,0,3455,3456,5,25,0,
        0,3456,3461,3,564,282,0,3457,3458,5,24,0,0,3458,3460,3,564,282,0,
        3459,3457,1,0,0,0,3460,3463,1,0,0,0,3461,3459,1,0,0,0,3461,3462,
        1,0,0,0,3462,3464,1,0,0,0,3463,3461,1,0,0,0,3464,3465,5,26,0,0,3465,
        3468,1,0,0,0,3466,3468,3,564,282,0,3467,3455,1,0,0,0,3467,3466,1,
        0,0,0,3468,563,1,0,0,0,3469,3470,5,25,0,0,3470,3475,3,142,71,0,3471,
        3472,5,24,0,0,3472,3474,3,142,71,0,3473,3471,1,0,0,0,3474,3477,1,
        0,0,0,3475,3473,1,0,0,0,3475,3476,1,0,0,0,3476,3478,1,0,0,0,3477,
        3475,1,0,0,0,3478,3479,5,26,0,0,3479,565,1,0,0,0,3480,3484,3,488,
        244,0,3481,3484,3,490,245,0,3482,3484,3,492,246,0,3483,3480,1,0,
        0,0,3483,3481,1,0,0,0,3483,3482,1,0,0,0,3484,567,1,0,0,0,3485,3490,
        5,111,0,0,3486,3491,5,287,0,0,3487,3491,5,290,0,0,3488,3489,5,130,
        0,0,3489,3491,5,287,0,0,3490,3486,1,0,0,0,3490,3487,1,0,0,0,3490,
        3488,1,0,0,0,3491,3494,1,0,0,0,3492,3493,5,153,0,0,3493,3495,5,127,
        0,0,3494,3492,1,0,0,0,3494,3495,1,0,0,0,3495,3496,1,0,0,0,3496,3497,
        3,678,339,0,3497,569,1,0,0,0,3498,3499,5,86,0,0,3499,3500,5,313,
        0,0,3500,3504,3,580,290,0,3501,3503,3,582,291,0,3502,3501,1,0,0,
        0,3503,3506,1,0,0,0,3504,3502,1,0,0,0,3504,3505,1,0,0,0,3505,571,
        1,0,0,0,3506,3504,1,0,0,0,3507,3508,5,43,0,0,3508,3509,5,313,0,0,
        3509,3521,3,580,290,0,3510,3512,5,323,0,0,3511,3510,1,0,0,0,3511,
        3512,1,0,0,0,3512,3514,1,0,0,0,3513,3515,3,582,291,0,3514,3513,1,
        0,0,0,3515,3516,1,0,0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,
        3522,1,0,0,0,3518,3519,5,244,0,0,3519,3520,5,296,0,0,3520,3522,3,
        580,290,0,3521,3511,1,0,0,0,3521,3518,1,0,0,0,3522,573,1,0,0,0,3523,
        3524,5,86,0,0,3524,3525,5,147,0,0,3525,3539,3,580,290,0,3526,3527,
        5,323,0,0,3527,3528,5,313,0,0,3528,3533,3,580,290,0,3529,3530,5,
        24,0,0,3530,3532,3,580,290,0,3531,3529,1,0,0,0,3532,3535,1,0,0,0,
        3533,3531,1,0,0,0,3533,3534,1,0,0,0,3534,3537,1,0,0,0,3535,3533,
        1,0,0,0,3536,3538,5,24,0,0,3537,3536,1,0,0,0,3537,3538,1,0,0,0,3538,
        3540,1,0,0,0,3539,3526,1,0,0,0,3539,3540,1,0,0,0,3540,575,1,0,0,
        0,3541,3542,5,43,0,0,3542,3543,5,147,0,0,3543,3560,3,580,290,0,3544,
        3545,7,18,0,0,3545,3546,5,313,0,0,3546,3551,3,580,290,0,3547,3548,
        5,24,0,0,3548,3550,3,580,290,0,3549,3547,1,0,0,0,3550,3553,1,0,0,
        0,3551,3549,1,0,0,0,3551,3552,1,0,0,0,3552,3555,1,0,0,0,3553,3551,
        1,0,0,0,3554,3556,5,24,0,0,3555,3554,1,0,0,0,3555,3556,1,0,0,0,3556,
        3561,1,0,0,0,3557,3558,5,244,0,0,3558,3559,5,296,0,0,3559,3561,3,
        580,290,0,3560,3544,1,0,0,0,3560,3557,1,0,0,0,3561,577,1,0,0,0,3562,
        3563,5,111,0,0,3563,3566,7,19,0,0,3564,3565,5,153,0,0,3565,3567,
        5,127,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,3568,1,0,0,0,
        3568,3573,3,580,290,0,3569,3570,5,24,0,0,3570,3572,3,580,290,0,3571,
        3569,1,0,0,0,3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,
        0,3574,3577,1,0,0,0,3575,3573,1,0,0,0,3576,3578,5,24,0,0,3577,3576,
        1,0,0,0,3577,3578,1,0,0,0,3578,579,1,0,0,0,3579,3582,3,830,415,0,
        3580,3582,3,144,72,0,3581,3579,1,0,0,0,3581,3580,1,0,0,0,3582,581,
        1,0,0,0,3583,3586,3,584,292,0,3584,3586,3,592,296,0,3585,3583,1,
        0,0,0,3585,3584,1,0,0,0,3586,583,1,0,0,0,3587,3590,3,586,293,0,3588,
        3590,3,590,295,0,3589,3587,1,0,0,0,3589,3588,1,0,0,0,3590,585,1,
        0,0,0,3591,3593,5,116,0,0,3592,3591,1,0,0,0,3592,3593,1,0,0,0,3593,
        3594,1,0,0,0,3594,3595,5,221,0,0,3595,3596,3,588,294,0,3596,587,
        1,0,0,0,3597,3598,7,20,0,0,3598,589,1,0,0,0,3599,3600,5,150,0,0,
        3600,3601,5,327,0,0,3601,591,1,0,0,0,3602,3603,7,21,0,0,3603,593,
        1,0,0,0,3604,3605,5,146,0,0,3605,3606,3,602,301,0,3606,3607,5,207,
        0,0,3607,3612,3,832,416,0,3608,3609,5,24,0,0,3609,3611,3,832,416,
        0,3610,3608,1,0,0,0,3611,3614,1,0,0,0,3612,3610,1,0,0,0,3612,3613,
        1,0,0,0,3613,3615,1,0,0,0,3614,3612,1,0,0,0,3615,3616,5,296,0,0,
        3616,3621,3,580,290,0,3617,3618,5,24,0,0,3618,3620,3,580,290,0,3619,
        3617,1,0,0,0,3620,3623,1,0,0,0,3621,3619,1,0,0,0,3621,3622,1,0,0,
        0,3622,3625,1,0,0,0,3623,3621,1,0,0,0,3624,3626,5,24,0,0,3625,3624,
        1,0,0,0,3625,3626,1,0,0,0,3626,3630,1,0,0,0,3627,3628,5,323,0,0,
        3628,3629,5,146,0,0,3629,3631,5,210,0,0,3630,3627,1,0,0,0,3630,3631,
        1,0,0,0,3631,595,1,0,0,0,3632,3636,5,258,0,0,3633,3634,5,146,0,0,
        3634,3635,5,210,0,0,3635,3637,5,139,0,0,3636,3633,1,0,0,0,3636,3637,
        1,0,0,0,3637,3638,1,0,0,0,3638,3639,3,602,301,0,3639,3640,5,207,
        0,0,3640,3645,3,832,416,0,3641,3642,5,24,0,0,3642,3644,3,832,416,
        0,3643,3641,1,0,0,0,3644,3647,1,0,0,0,3645,3643,1,0,0,0,3645,3646,
        1,0,0,0,3646,3648,1,0,0,0,3647,3645,1,0,0,0,3648,3649,5,141,0,0,
        3649,3654,3,580,290,0,3650,3651,5,24,0,0,3651,3653,3,580,290,0,3652,
        3650,1,0,0,0,3653,3656,1,0,0,0,3654,3652,1,0,0,0,3654,3655,1,0,0,
        0,3655,597,1,0,0,0,3656,3654,1,0,0,0,3657,3682,5,82,0,0,3658,3682,
        5,183,0,0,3659,3682,5,167,0,0,3660,3682,5,186,0,0,3661,3682,5,111,
        0,0,3662,3682,5,146,0,0,3663,3664,5,193,0,0,3664,3682,7,22,0,0,3665,
        3666,7,23,0,0,3666,3682,5,263,0,0,3667,3668,7,24,0,0,3668,3682,5,
        267,0,0,3669,3671,5,270,0,0,3670,3672,7,25,0,0,3671,3670,1,0,0,0,
        3671,3672,1,0,0,0,3672,3682,1,0,0,0,3673,3675,7,26,0,0,3674,3676,
        5,180,0,0,3675,3674,1,0,0,0,3675,3676,1,0,0,0,3676,3682,1,0,0,0,
        3677,3679,5,86,0,0,3678,3680,7,27,0,0,3679,3678,1,0,0,0,3679,3680,
        1,0,0,0,3680,3682,1,0,0,0,3681,3657,1,0,0,0,3681,3658,1,0,0,0,3681,
        3659,1,0,0,0,3681,3660,1,0,0,0,3681,3661,1,0,0,0,3681,3662,1,0,0,
        0,3681,3663,1,0,0,0,3681,3665,1,0,0,0,3681,3667,1,0,0,0,3681,3669,
        1,0,0,0,3681,3673,1,0,0,0,3681,3677,1,0,0,0,3682,599,1,0,0,0,3683,
        3686,3,598,299,0,3684,3686,5,327,0,0,3685,3683,1,0,0,0,3685,3684,
        1,0,0,0,3686,601,1,0,0,0,3687,3692,3,600,300,0,3688,3689,5,24,0,
        0,3689,3691,3,600,300,0,3690,3688,1,0,0,0,3691,3694,1,0,0,0,3692,
        3690,1,0,0,0,3692,3693,1,0,0,0,3693,3696,1,0,0,0,3694,3692,1,0,0,
        0,3695,3697,5,24,0,0,3696,3695,1,0,0,0,3696,3697,1,0,0,0,3697,3703,
        1,0,0,0,3698,3700,5,42,0,0,3699,3701,5,232,0,0,3700,3699,1,0,0,0,
        3700,3701,1,0,0,0,3701,3703,1,0,0,0,3702,3687,1,0,0,0,3702,3698,
        1,0,0,0,3703,603,1,0,0,0,3704,3705,5,86,0,0,3705,3706,5,249,0,0,
        3706,3707,5,227,0,0,3707,3708,3,674,337,0,3708,3709,3,456,228,0,
        3709,605,1,0,0,0,3710,3711,5,43,0,0,3711,3712,5,249,0,0,3712,3713,
        5,227,0,0,3713,3714,3,674,337,0,3714,3719,3,608,304,0,3715,3716,
        5,24,0,0,3716,3718,3,608,304,0,3717,3715,1,0,0,0,3718,3721,1,0,0,
        0,3719,3717,1,0,0,0,3719,3720,1,0,0,0,3720,607,1,0,0,0,3721,3719,
        1,0,0,0,3722,3725,3,490,245,0,3723,3725,3,492,246,0,3724,3722,1,
        0,0,0,3724,3723,1,0,0,0,3725,609,1,0,0,0,3726,3727,5,111,0,0,3727,
        3728,5,249,0,0,3728,3729,5,227,0,0,3729,3730,3,674,337,0,3730,611,
        1,0,0,0,3731,3732,5,86,0,0,3732,3733,5,249,0,0,3733,3734,5,227,0,
        0,3734,3735,5,74,0,0,3735,3736,3,674,337,0,3736,3737,3,456,228,0,
        3737,613,1,0,0,0,3738,3739,5,43,0,0,3739,3740,5,249,0,0,3740,3741,
        5,227,0,0,3741,3742,5,74,0,0,3742,3743,3,674,337,0,3743,3748,3,616,
        308,0,3744,3745,5,24,0,0,3745,3747,3,616,308,0,3746,3744,1,0,0,0,
        3747,3750,1,0,0,0,3748,3746,1,0,0,0,3748,3749,1,0,0,0,3749,615,1,
        0,0,0,3750,3748,1,0,0,0,3751,3754,3,490,245,0,3752,3754,3,492,246,
        0,3753,3751,1,0,0,0,3753,3752,1,0,0,0,3754,617,1,0,0,0,3755,3756,
        5,111,0,0,3756,3757,5,249,0,0,3757,3758,5,227,0,0,3758,3759,5,74,
        0,0,3759,3760,3,674,337,0,3760,619,1,0,0,0,3761,3762,5,86,0,0,3762,
        3763,5,53,0,0,3763,3764,5,247,0,0,3764,3765,3,674,337,0,3765,3766,
        5,139,0,0,3766,3771,3,622,311,0,3767,3768,5,24,0,0,3768,3770,3,622,
        311,0,3769,3767,1,0,0,0,3770,3773,1,0,0,0,3771,3769,1,0,0,0,3771,
        3772,1,0,0,0,3772,3774,1,0,0,0,3773,3771,1,0,0,0,3774,3775,5,323,
        0,0,3775,3776,5,25,0,0,3776,3777,3,624,312,0,3777,3778,5,26,0,0,
        3778,621,1,0,0,0,3779,3780,3,674,337,0,3780,3781,5,49,0,0,3781,3782,
        3,674,337,0,3782,623,1,0,0,0,3783,3788,3,626,313,0,3784,3785,5,24,
        0,0,3785,3787,3,626,313,0,3786,3784,1,0,0,0,3787,3790,1,0,0,0,3788,
        3786,1,0,0,0,3788,3789,1,0,0,0,3789,625,1,0,0,0,3790,3788,1,0,0,
        0,3791,3792,3,828,414,0,3792,3793,5,1,0,0,3793,3794,3,14,7,0,3794,
        627,1,0,0,0,3795,3796,5,43,0,0,3796,3797,5,53,0,0,3797,3798,5,247,
        0,0,3798,3799,3,674,337,0,3799,3804,3,630,315,0,3800,3801,5,24,0,
        0,3801,3803,3,630,315,0,3802,3800,1,0,0,0,3803,3806,1,0,0,0,3804,
        3802,1,0,0,0,3804,3805,1,0,0,0,3805,629,1,0,0,0,3806,3804,1,0,0,
        0,3807,3808,3,632,316,0,3808,631,1,0,0,0,3809,3810,5,272,0,0,3810,
        3811,5,25,0,0,3811,3812,3,624,312,0,3812,3813,5,26,0,0,3813,633,
        1,0,0,0,3814,3815,5,111,0,0,3815,3816,5,53,0,0,3816,3817,5,247,0,
        0,3817,3819,3,674,337,0,3818,3820,5,69,0,0,3819,3818,1,0,0,0,3819,
        3820,1,0,0,0,3820,635,1,0,0,0,3821,3824,3,80,40,0,3822,3824,3,144,
        72,0,3823,3821,1,0,0,0,3823,3822,1,0,0,0,3824,637,1,0,0,0,3825,3826,
        5,86,0,0,3826,3827,5,299,0,0,3827,3828,3,674,337,0,3828,3829,5,141,
        0,0,3829,3830,3,674,337,0,3830,3831,5,296,0,0,3831,3834,3,674,337,
        0,3832,3833,5,314,0,0,3833,3835,3,636,318,0,3834,3832,1,0,0,0,3834,
        3835,1,0,0,0,3835,3836,1,0,0,0,3836,3837,5,323,0,0,3837,3838,5,25,
        0,0,3838,3839,3,640,320,0,3839,3840,5,26,0,0,3840,639,1,0,0,0,3841,
        3846,3,642,321,0,3842,3843,5,24,0,0,3843,3845,3,642,321,0,3844,3842,
        1,0,0,0,3845,3848,1,0,0,0,3846,3844,1,0,0,0,3846,3847,1,0,0,0,3847,
        641,1,0,0,0,3848,3846,1,0,0,0,3849,3850,3,828,414,0,3850,3851,5,
        1,0,0,3851,3852,3,14,7,0,3852,643,1,0,0,0,3853,3854,5,43,0,0,3854,
        3855,5,299,0,0,3855,3856,3,674,337,0,3856,3861,3,646,323,0,3857,
        3858,5,24,0,0,3858,3860,3,646,323,0,3859,3857,1,0,0,0,3860,3863,
        1,0,0,0,3861,3859,1,0,0,0,3861,3862,1,0,0,0,3862,645,1,0,0,0,3863,
        3861,1,0,0,0,3864,3867,3,648,324,0,3865,3867,3,650,325,0,3866,3864,
        1,0,0,0,3866,3865,1,0,0,0,3867,647,1,0,0,0,3868,3869,5,272,0,0,3869,
        3870,5,25,0,0,3870,3871,3,640,320,0,3871,3872,5,26,0,0,3872,649,
        1,0,0,0,3873,3874,5,272,0,0,3874,3875,5,314,0,0,3875,3876,3,636,
        318,0,3876,651,1,0,0,0,3877,3878,5,111,0,0,3878,3879,5,299,0,0,3879,
        3881,3,674,337,0,3880,3882,5,69,0,0,3881,3880,1,0,0,0,3881,3882,
        1,0,0,0,3882,653,1,0,0,0,3883,3888,3,146,73,0,3884,3885,5,24,0,0,
        3885,3887,3,146,73,0,3886,3884,1,0,0,0,3887,3890,1,0,0,0,3888,3886,
        1,0,0,0,3888,3889,1,0,0,0,3889,655,1,0,0,0,3890,3888,1,0,0,0,3891,
        3892,5,100,0,0,3892,3893,7,28,0,0,3893,3894,3,144,72,0,3894,3896,
        5,25,0,0,3895,3897,3,654,327,0,3896,3895,1,0,0,0,3896,3897,1,0,0,
        0,3897,3898,1,0,0,0,3898,3899,5,26,0,0,3899,3900,5,49,0,0,3900,3901,
        3,658,329,0,3901,3902,5,117,0,0,3902,3903,5,100,0,0,3903,657,1,0,
        0,0,3904,3906,5,22,0,0,3905,3904,1,0,0,0,3906,3909,1,0,0,0,3907,
        3905,1,0,0,0,3907,3908,1,0,0,0,3908,3928,1,0,0,0,3909,3907,1,0,0,
        0,3910,3919,3,12,6,0,3911,3913,5,22,0,0,3912,3911,1,0,0,0,3913,3914,
        1,0,0,0,3914,3912,1,0,0,0,3914,3915,1,0,0,0,3915,3916,1,0,0,0,3916,
        3918,3,12,6,0,3917,3912,1,0,0,0,3918,3921,1,0,0,0,3919,3917,1,0,
        0,0,3919,3920,1,0,0,0,3920,3925,1,0,0,0,3921,3919,1,0,0,0,3922,3924,
        5,22,0,0,3923,3922,1,0,0,0,3924,3927,1,0,0,0,3925,3923,1,0,0,0,3925,
        3926,1,0,0,0,3926,3929,1,0,0,0,3927,3925,1,0,0,0,3928,3910,1,0,0,
        0,3928,3929,1,0,0,0,3929,659,1,0,0,0,3930,3932,5,122,0,0,3931,3930,
        1,0,0,0,3931,3932,1,0,0,0,3932,3933,1,0,0,0,3933,3934,5,153,0,0,
        3934,3935,3,14,7,0,3935,3938,3,222,111,0,3936,3937,5,113,0,0,3937,
        3939,3,222,111,0,3938,3936,1,0,0,0,3938,3939,1,0,0,0,3939,661,1,
        0,0,0,3940,3942,5,122,0,0,3941,3940,1,0,0,0,3941,3942,1,0,0,0,3942,
        3944,1,0,0,0,3943,3945,5,218,0,0,3944,3943,1,0,0,0,3944,3945,1,0,
        0,0,3945,3946,1,0,0,0,3946,3947,5,139,0,0,3947,3948,3,144,72,0,3948,
        3949,5,158,0,0,3949,3950,3,14,7,0,3950,3953,3,222,111,0,3951,3952,
        5,113,0,0,3952,3954,3,222,111,0,3953,3951,1,0,0,0,3953,3954,1,0,
        0,0,3954,663,1,0,0,0,3955,3956,3,854,427,0,3956,3957,5,23,0,0,3957,
        3959,1,0,0,0,3958,3955,1,0,0,0,3958,3959,1,0,0,0,3959,3961,1,0,0,
        0,3960,3962,5,29,0,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,3993,
        1,0,0,0,3963,3994,3,666,333,0,3964,3965,3,834,417,0,3965,3977,5,
        25,0,0,3966,3971,3,668,334,0,3967,3968,5,24,0,0,3968,3970,3,668,
        334,0,3969,3967,1,0,0,0,3970,3973,1,0,0,0,3971,3969,1,0,0,0,3971,
        3972,1,0,0,0,3972,3975,1,0,0,0,3973,3971,1,0,0,0,3974,3976,5,24,
        0,0,3975,3974,1,0,0,0,3975,3976,1,0,0,0,3976,3978,1,0,0,0,3977,3966,
        1,0,0,0,3977,3978,1,0,0,0,3978,3979,1,0,0,0,3979,3980,5,26,0,0,3980,
        3994,1,0,0,0,3981,3987,3,144,72,0,3982,3984,5,25,0,0,3983,3985,3,
        112,56,0,3984,3983,1,0,0,0,3984,3985,1,0,0,0,3985,3986,1,0,0,0,3986,
        3988,5,26,0,0,3987,3982,1,0,0,0,3987,3988,1,0,0,0,3988,3991,1,0,
        0,0,3989,3990,5,318,0,0,3990,3992,3,850,425,0,3991,3989,1,0,0,0,
        3991,3992,1,0,0,0,3992,3994,1,0,0,0,3993,3963,1,0,0,0,3993,3964,
        1,0,0,0,3993,3981,1,0,0,0,3994,3996,1,0,0,0,3995,3997,3,670,335,
        0,3996,3995,1,0,0,0,3996,3997,1,0,0,0,3997,665,1,0,0,0,3998,4001,
        3,862,431,0,3999,4000,5,318,0,0,4000,4002,3,850,425,0,4001,3999,
        1,0,0,0,4001,4002,1,0,0,0,4002,667,1,0,0,0,4003,4005,5,29,0,0,4004,
        4003,1,0,0,0,4004,4005,1,0,0,0,4005,4006,1,0,0,0,4006,4009,3,128,
        64,0,4007,4008,5,318,0,0,4008,4010,3,850,425,0,4009,4007,1,0,0,0,
        4009,4010,1,0,0,0,4010,669,1,0,0,0,4011,4024,5,323,0,0,4012,4025,
        3,672,336,0,4013,4014,5,25,0,0,4014,4019,3,672,336,0,4015,4016,5,
        24,0,0,4016,4018,3,672,336,0,4017,4015,1,0,0,0,4018,4021,1,0,0,0,
        4019,4017,1,0,0,0,4019,4020,1,0,0,0,4020,4022,1,0,0,0,4021,4019,
        1,0,0,0,4022,4023,5,26,0,0,4023,4025,1,0,0,0,4024,4012,1,0,0,0,4024,
        4013,1,0,0,0,4025,671,1,0,0,0,4026,4045,3,844,422,0,4027,4043,5,
        1,0,0,4028,4044,3,160,80,0,4029,4030,5,25,0,0,4030,4035,3,160,80,
        0,4031,4032,5,24,0,0,4032,4034,3,160,80,0,4033,4031,1,0,0,0,4034,
        4037,1,0,0,0,4035,4033,1,0,0,0,4035,4036,1,0,0,0,4036,4039,1,0,0,
        0,4037,4035,1,0,0,0,4038,4040,5,24,0,0,4039,4038,1,0,0,0,4039,4040,
        1,0,0,0,4040,4041,1,0,0,0,4041,4042,5,26,0,0,4042,4044,1,0,0,0,4043,
        4028,1,0,0,0,4043,4029,1,0,0,0,4044,4046,1,0,0,0,4045,4027,1,0,0,
        0,4045,4046,1,0,0,0,4046,4072,1,0,0,0,4047,4049,7,29,0,0,4048,4050,
        5,1,0,0,4049,4048,1,0,0,0,4049,4050,1,0,0,0,4050,4051,1,0,0,0,4051,
        4072,3,204,102,0,4052,4054,5,267,0,0,4053,4055,5,1,0,0,4054,4053,
        1,0,0,0,4054,4055,1,0,0,0,4055,4056,1,0,0,0,4056,4065,5,25,0,0,4057,
        4062,3,164,82,0,4058,4059,5,24,0,0,4059,4061,3,164,82,0,4060,4058,
        1,0,0,0,4061,4064,1,0,0,0,4062,4060,1,0,0,0,4062,4063,1,0,0,0,4063,
        4066,1,0,0,0,4064,4062,1,0,0,0,4065,4057,1,0,0,0,4065,4066,1,0,0,
        0,4066,4068,1,0,0,0,4067,4069,5,24,0,0,4068,4067,1,0,0,0,4068,4069,
        1,0,0,0,4069,4070,1,0,0,0,4070,4072,5,26,0,0,4071,4026,1,0,0,0,4071,
        4047,1,0,0,0,4071,4052,1,0,0,0,4072,673,1,0,0,0,4073,4074,3,854,
        427,0,4074,4075,5,23,0,0,4075,4077,1,0,0,0,4076,4073,1,0,0,0,4076,
        4077,1,0,0,0,4077,4078,1,0,0,0,4078,4079,3,860,430,0,4079,675,1,
        0,0,0,4080,4086,3,674,337,0,4081,4083,5,29,0,0,4082,4081,1,0,0,0,
        4082,4083,1,0,0,0,4083,4084,1,0,0,0,4084,4086,3,144,72,0,4085,4080,
        1,0,0,0,4085,4082,1,0,0,0,4086,677,1,0,0,0,4087,4089,3,676,338,0,
        4088,4090,3,670,335,0,4089,4088,1,0,0,0,4089,4090,1,0,0,0,4090,679,
        1,0,0,0,4091,4095,3,678,339,0,4092,4093,5,119,0,0,4093,4094,5,67,
        0,0,4094,4096,3,114,57,0,4095,4092,1,0,0,0,4095,4096,1,0,0,0,4096,
        681,1,0,0,0,4097,4099,5,60,0,0,4098,4097,1,0,0,0,4098,4099,1,0,0,
        0,4099,4100,1,0,0,0,4100,4101,5,101,0,0,4101,4102,5,141,0,0,4102,
        4107,3,678,339,0,4103,4104,5,321,0,0,4104,4108,3,14,7,0,4105,4106,
        5,207,0,0,4106,4108,3,366,183,0,4107,4103,1,0,0,0,4107,4105,1,0,
        0,0,4107,4108,1,0,0,0,4108,4110,1,0,0,0,4109,4111,3,362,181,0,4110,
        4109,1,0,0,0,4110,4111,1,0,0,0,4111,683,1,0,0,0,4112,4114,5,60,0,
        0,4113,4112,1,0,0,0,4113,4114,1,0,0,0,4114,4115,1,0,0,0,4115,4116,
        5,310,0,0,4116,4125,3,678,339,0,4117,4118,5,272,0,0,4118,4121,3,
        686,343,0,4119,4120,5,321,0,0,4120,4122,3,14,7,0,4121,4119,1,0,0,
        0,4121,4122,1,0,0,0,4122,4126,1,0,0,0,4123,4124,5,207,0,0,4124,4126,
        3,366,183,0,4125,4117,1,0,0,0,4125,4123,1,0,0,0,4126,4128,1,0,0,
        0,4127,4129,3,362,181,0,4128,4127,1,0,0,0,4128,4129,1,0,0,0,4129,
        685,1,0,0,0,4130,4133,3,688,344,0,4131,4133,3,694,347,0,4132,4130,
        1,0,0,0,4132,4131,1,0,0,0,4133,687,1,0,0,0,4134,4139,3,690,345,0,
        4135,4136,5,24,0,0,4136,4138,3,690,345,0,4137,4135,1,0,0,0,4138,
        4141,1,0,0,0,4139,4137,1,0,0,0,4139,4140,1,0,0,0,4140,689,1,0,0,
        0,4141,4139,1,0,0,0,4142,4143,3,692,346,0,4143,4144,5,1,0,0,4144,
        4145,3,14,7,0,4145,691,1,0,0,0,4146,4147,3,120,60,0,4147,693,1,0,
        0,0,4148,4149,3,696,348,0,4149,4150,5,1,0,0,4150,4151,5,25,0,0,4151,
        4152,3,376,188,0,4152,4153,5,26,0,0,4153,695,1,0,0,0,4154,4155,5,
        25,0,0,4155,4160,3,692,346,0,4156,4157,5,24,0,0,4157,4159,3,692,
        346,0,4158,4156,1,0,0,0,4159,4162,1,0,0,0,4160,4158,1,0,0,0,4160,
        4161,1,0,0,0,4161,4163,1,0,0,0,4162,4160,1,0,0,0,4163,4164,5,26,
        0,0,4164,697,1,0,0,0,4165,4166,5,86,0,0,4166,4170,5,297,0,0,4167,
        4168,5,153,0,0,4168,4169,5,199,0,0,4169,4171,5,127,0,0,4170,4167,
        1,0,0,0,4170,4171,1,0,0,0,4171,4172,1,0,0,0,4172,4174,3,744,372,
        0,4173,4175,3,700,350,0,4174,4173,1,0,0,0,4174,4175,1,0,0,0,4175,
        4177,1,0,0,0,4176,4178,3,704,352,0,4177,4176,1,0,0,0,4177,4178,1,
        0,0,0,4178,699,1,0,0,0,4179,4180,5,25,0,0,4180,4185,3,702,351,0,
        4181,4182,5,24,0,0,4182,4184,3,702,351,0,4183,4181,1,0,0,0,4184,
        4187,1,0,0,0,4185,4183,1,0,0,0,4185,4186,1,0,0,0,4186,4188,1,0,0,
        0,4187,4185,1,0,0,0,4188,4189,5,26,0,0,4189,701,1,0,0,0,4190,4191,
        3,712,356,0,4191,703,1,0,0,0,4192,4193,5,323,0,0,4193,4194,5,25,
        0,0,4194,4195,3,730,365,0,4195,4196,5,26,0,0,4196,705,1,0,0,0,4197,
        4198,5,43,0,0,4198,4201,5,297,0,0,4199,4200,5,153,0,0,4200,4202,
        5,127,0,0,4201,4199,1,0,0,0,4201,4202,1,0,0,0,4202,4203,1,0,0,0,
        4203,4204,3,744,372,0,4204,4209,3,708,354,0,4205,4206,5,24,0,0,4206,
        4208,3,708,354,0,4207,4205,1,0,0,0,4208,4211,1,0,0,0,4209,4207,1,
        0,0,0,4209,4210,1,0,0,0,4210,707,1,0,0,0,4211,4209,1,0,0,0,4212,
        4218,3,710,355,0,4213,4218,3,714,357,0,4214,4218,3,718,359,0,4215,
        4218,3,724,362,0,4216,4218,3,726,363,0,4217,4212,1,0,0,0,4217,4213,
        1,0,0,0,4217,4214,1,0,0,0,4217,4215,1,0,0,0,4217,4216,1,0,0,0,4218,
        709,1,0,0,0,4219,4220,5,40,0,0,4220,4221,3,712,356,0,4221,711,1,
        0,0,0,4222,4223,5,84,0,0,4223,4225,3,828,414,0,4224,4226,3,736,368,
        0,4225,4224,1,0,0,0,4225,4226,1,0,0,0,4226,713,1,0,0,0,4227,4228,
        5,43,0,0,4228,4229,5,84,0,0,4229,4230,3,746,373,0,4230,4231,3,716,
        358,0,4231,715,1,0,0,0,4232,4235,3,720,360,0,4233,4235,3,722,361,
        0,4234,4232,1,0,0,0,4234,4233,1,0,0,0,4235,717,1,0,0,0,4236,4237,
        5,111,0,0,4237,4238,5,84,0,0,4238,4239,3,746,373,0,4239,719,1,0,
        0,0,4240,4241,5,272,0,0,4241,4242,5,25,0,0,4242,4243,3,738,369,0,
        4243,4244,5,26,0,0,4244,721,1,0,0,0,4245,4246,5,248,0,0,4246,4247,
        5,25,0,0,4247,4252,3,828,414,0,4248,4249,5,24,0,0,4249,4251,3,828,
        414,0,4250,4248,1,0,0,0,4251,4254,1,0,0,0,4252,4250,1,0,0,0,4252,
        4253,1,0,0,0,4253,4255,1,0,0,0,4254,4252,1,0,0,0,4255,4256,5,26,
        0,0,4256,723,1,0,0,0,4257,4258,5,272,0,0,4258,4259,5,25,0,0,4259,
        4260,3,730,365,0,4260,4261,5,26,0,0,4261,725,1,0,0,0,4262,4263,5,
        248,0,0,4263,4264,5,25,0,0,4264,4269,3,828,414,0,4265,4266,5,24,
        0,0,4266,4268,3,846,423,0,4267,4265,1,0,0,0,4268,4271,1,0,0,0,4269,
        4267,1,0,0,0,4269,4270,1,0,0,0,4270,4272,1,0,0,0,4271,4269,1,0,0,
        0,4272,4273,5,26,0,0,4273,727,1,0,0,0,4274,4275,5,111,0,0,4275,4278,
        5,297,0,0,4276,4277,5,153,0,0,4277,4279,5,127,0,0,4278,4276,1,0,
        0,0,4278,4279,1,0,0,0,4279,4280,1,0,0,0,4280,4281,3,744,372,0,4281,
        729,1,0,0,0,4282,4287,3,732,366,0,4283,4284,5,24,0,0,4284,4286,3,
        732,366,0,4285,4283,1,0,0,0,4286,4289,1,0,0,0,4287,4285,1,0,0,0,
        4287,4288,1,0,0,0,4288,731,1,0,0,0,4289,4287,1,0,0,0,4290,4291,3,
        828,414,0,4291,4292,5,1,0,0,4292,4293,3,734,367,0,4293,733,1,0,0,
        0,4294,4295,3,14,7,0,4295,735,1,0,0,0,4296,4297,5,323,0,0,4297,4298,
        5,25,0,0,4298,4299,3,738,369,0,4299,4300,5,26,0,0,4300,737,1,0,0,
        0,4301,4306,3,740,370,0,4302,4303,5,24,0,0,4303,4305,3,740,370,0,
        4304,4302,1,0,0,0,4305,4308,1,0,0,0,4306,4304,1,0,0,0,4306,4307,
        1,0,0,0,4307,739,1,0,0,0,4308,4306,1,0,0,0,4309,4310,3,828,414,0,
        4310,4311,5,1,0,0,4311,4312,3,742,371,0,4312,741,1,0,0,0,4313,4314,
        3,14,7,0,4314,743,1,0,0,0,4315,4316,3,854,427,0,4316,4317,5,23,0,
        0,4317,4319,1,0,0,0,4318,4315,1,0,0,0,4318,4319,1,0,0,0,4319,4320,
        1,0,0,0,4320,4321,3,828,414,0,4321,745,1,0,0,0,4322,4323,3,846,423,
        0,4323,747,1,0,0,0,4324,4325,5,250,0,0,4325,4329,5,202,0,0,4326,
        4327,5,154,0,0,4327,4329,5,202,0,0,4328,4324,1,0,0,0,4328,4326,1,
        0,0,0,4329,749,1,0,0,0,4330,4331,5,134,0,0,4331,4332,5,25,0,0,4332,
        4333,5,321,0,0,4333,4334,3,14,7,0,4334,4335,5,26,0,0,4335,751,1,
        0,0,0,4336,4339,3,754,377,0,4337,4339,3,764,382,0,4338,4336,1,0,
        0,0,4338,4337,1,0,0,0,4339,753,1,0,0,0,4340,4341,3,838,419,0,4341,
        755,1,0,0,0,4342,4343,5,322,0,0,4343,4344,3,758,379,0,4344,757,1,
        0,0,0,4345,4350,3,760,380,0,4346,4347,5,24,0,0,4347,4349,3,760,380,
        0,4348,4346,1,0,0,0,4349,4352,1,0,0,0,4350,4348,1,0,0,0,4350,4351,
        1,0,0,0,4351,759,1,0,0,0,4352,4350,1,0,0,0,4353,4354,3,762,381,0,
        4354,4355,5,49,0,0,4355,4356,3,764,382,0,4356,761,1,0,0,0,4357,4358,
        3,754,377,0,4358,763,1,0,0,0,4359,4360,5,25,0,0,4360,4361,3,766,
        383,0,4361,4362,5,26,0,0,4362,765,1,0,0,0,4363,4365,3,768,384,0,
        4364,4363,1,0,0,0,4364,4365,1,0,0,0,4365,4367,1,0,0,0,4366,4368,
        3,770,385,0,4367,4366,1,0,0,0,4367,4368,1,0,0,0,4368,4370,1,0,0,
        0,4369,4371,3,772,386,0,4370,4369,1,0,0,0,4370,4371,1,0,0,0,4371,
        4373,1,0,0,0,4372,4374,3,774,387,0,4373,4372,1,0,0,0,4373,4374,1,
        0,0,0,4374,767,1,0,0,0,4375,4376,3,754,377,0,4376,769,1,0,0,0,4377,
        4379,5,219,0,0,4378,4380,5,79,0,0,4379,4378,1,0,0,0,4379,4380,1,
        0,0,0,4380,4381,1,0,0,0,4381,4382,5,67,0,0,4382,4383,3,130,65,0,
        4383,771,1,0,0,0,4384,4385,3,314,157,0,4385,773,1,0,0,0,4386,4387,
        3,776,388,0,4387,4389,3,778,389,0,4388,4390,3,784,392,0,4389,4388,
        1,0,0,0,4389,4390,1,0,0,0,4390,775,1,0,0,0,4391,4392,7,30,0,0,4392,
        777,1,0,0,0,4393,4396,3,782,391,0,4394,4396,3,780,390,0,4395,4393,
        1,0,0,0,4395,4394,1,0,0,0,4396,779,1,0,0,0,4397,4398,5,65,0,0,4398,
        4399,3,782,391,0,4399,4400,5,45,0,0,4400,4401,3,782,391,0,4401,781,
        1,0,0,0,4402,4403,5,89,0,0,4403,4410,5,263,0,0,4404,4407,3,14,7,
        0,4405,4407,5,304,0,0,4406,4404,1,0,0,0,4406,4405,1,0,0,0,4407,4408,
        1,0,0,0,4408,4410,7,31,0,0,4409,4402,1,0,0,0,4409,4406,1,0,0,0,4410,
        783,1,0,0,0,4411,4412,5,124,0,0,4412,4413,5,89,0,0,4413,4422,5,263,
        0,0,4414,4415,5,124,0,0,4415,4422,5,147,0,0,4416,4417,5,124,0,0,
        4417,4422,5,295,0,0,4418,4419,5,124,0,0,4419,4420,5,197,0,0,4420,
        4422,5,214,0,0,4421,4411,1,0,0,0,4421,4414,1,0,0,0,4421,4416,1,0,
        0,0,4421,4418,1,0,0,0,4422,785,1,0,0,0,4423,4424,5,312,0,0,4424,
        4425,3,854,427,0,4425,787,1,0,0,0,4426,4427,5,25,0,0,4427,4428,3,
        232,116,0,4428,4429,5,26,0,0,4429,4432,1,0,0,0,4430,4432,3,234,117,
        0,4431,4426,1,0,0,0,4431,4430,1,0,0,0,4432,789,1,0,0,0,4433,4434,
        3,148,74,0,4434,4437,5,1,0,0,4435,4438,3,14,7,0,4436,4438,3,788,
        394,0,4437,4435,1,0,0,0,4437,4436,1,0,0,0,4438,791,1,0,0,0,4439,
        4440,5,78,0,0,4440,793,1,0,0,0,4441,4442,5,261,0,0,4442,795,1,0,
        0,0,4443,4448,3,678,339,0,4444,4445,5,25,0,0,4445,4446,3,124,62,
        0,4446,4447,5,26,0,0,4447,4449,1,0,0,0,4448,4444,1,0,0,0,4448,4449,
        1,0,0,0,4449,797,1,0,0,0,4450,4455,3,796,398,0,4451,4452,5,24,0,
        0,4452,4454,3,796,398,0,4453,4451,1,0,0,0,4454,4457,1,0,0,0,4455,
        4453,1,0,0,0,4455,4456,1,0,0,0,4456,4459,1,0,0,0,4457,4455,1,0,0,
        0,4458,4460,5,24,0,0,4459,4458,1,0,0,0,4459,4460,1,0,0,0,4460,799,
        1,0,0,0,4461,4462,5,44,0,0,4462,4463,3,798,399,0,4463,801,1,0,0,
        0,4464,4465,5,43,0,0,4465,4468,5,276,0,0,4466,4467,5,153,0,0,4467,
        4469,5,127,0,0,4468,4466,1,0,0,0,4468,4469,1,0,0,0,4469,4470,1,0,
        0,0,4470,4472,3,674,337,0,4471,4473,3,804,402,0,4472,4471,1,0,0,
        0,4473,4474,1,0,0,0,4474,4472,1,0,0,0,4474,4475,1,0,0,0,4475,803,
        1,0,0,0,4476,4478,5,278,0,0,4477,4479,5,323,0,0,4478,4477,1,0,0,
        0,4478,4479,1,0,0,0,4479,4480,1,0,0,0,4480,4493,3,892,446,0,4481,
        4483,5,251,0,0,4482,4484,5,323,0,0,4483,4482,1,0,0,0,4483,4484,1,
        0,0,0,4484,4485,1,0,0,0,4485,4493,3,892,446,0,4486,4493,5,251,0,
        0,4487,4489,5,159,0,0,4488,4490,5,67,0,0,4489,4488,1,0,0,0,4489,
        4490,1,0,0,0,4490,4491,1,0,0,0,4491,4493,3,892,446,0,4492,4476,1,
        0,0,0,4492,4481,1,0,0,0,4492,4486,1,0,0,0,4492,4487,1,0,0,0,4493,
        805,1,0,0,0,4494,4495,5,274,0,0,4495,4496,5,86,0,0,4496,4497,5,287,
        0,0,4497,4498,3,678,339,0,4498,807,1,0,0,0,4499,4500,7,32,0,0,4500,
        809,1,0,0,0,4501,4504,3,808,404,0,4502,4504,3,866,433,0,4503,4501,
        1,0,0,0,4503,4502,1,0,0,0,4504,811,1,0,0,0,4505,4513,3,808,404,0,
        4506,4513,3,884,442,0,4507,4513,3,868,434,0,4508,4513,3,872,436,
        0,4509,4513,3,876,438,0,4510,4513,3,878,439,0,4511,4513,3,880,440,
        0,4512,4505,1,0,0,0,4512,4506,1,0,0,0,4512,4507,1,0,0,0,4512,4508,
        1,0,0,0,4512,4509,1,0,0,0,4512,4510,1,0,0,0,4512,4511,1,0,0,0,4513,
        813,1,0,0,0,4514,4521,3,808,404,0,4515,4521,3,884,442,0,4516,4521,
        3,874,437,0,4517,4521,3,876,438,0,4518,4521,3,878,439,0,4519,4521,
        3,880,440,0,4520,4514,1,0,0,0,4520,4515,1,0,0,0,4520,4516,1,0,0,
        0,4520,4517,1,0,0,0,4520,4518,1,0,0,0,4520,4519,1,0,0,0,4521,815,
        1,0,0,0,4522,4528,3,808,404,0,4523,4528,3,884,442,0,4524,4528,3,
        874,437,0,4525,4528,3,878,439,0,4526,4528,3,880,440,0,4527,4522,
        1,0,0,0,4527,4523,1,0,0,0,4527,4524,1,0,0,0,4527,4525,1,0,0,0,4527,
        4526,1,0,0,0,4528,817,1,0,0,0,4529,4538,3,808,404,0,4530,4538,3,
        884,442,0,4531,4538,3,868,434,0,4532,4538,3,870,435,0,4533,4538,
        3,872,436,0,4534,4538,3,874,437,0,4535,4538,3,876,438,0,4536,4538,
        3,880,440,0,4537,4529,1,0,0,0,4537,4530,1,0,0,0,4537,4531,1,0,0,
        0,4537,4532,1,0,0,0,4537,4533,1,0,0,0,4537,4534,1,0,0,0,4537,4535,
        1,0,0,0,4537,4536,1,0,0,0,4538,819,1,0,0,0,4539,4547,3,808,404,0,
        4540,4547,3,884,442,0,4541,4547,3,868,434,0,4542,4547,3,872,436,
        0,4543,4547,3,876,438,0,4544,4547,3,878,439,0,4545,4547,3,880,440,
        0,4546,4539,1,0,0,0,4546,4540,1,0,0,0,4546,4541,1,0,0,0,4546,4542,
        1,0,0,0,4546,4543,1,0,0,0,4546,4544,1,0,0,0,4546,4545,1,0,0,0,4547,
        821,1,0,0,0,4548,4556,3,808,404,0,4549,4556,3,884,442,0,4550,4556,
        3,870,435,0,4551,4556,3,874,437,0,4552,4556,3,876,438,0,4553,4556,
        3,878,439,0,4554,4556,3,880,440,0,4555,4548,1,0,0,0,4555,4549,1,
        0,0,0,4555,4550,1,0,0,0,4555,4551,1,0,0,0,4555,4552,1,0,0,0,4555,
        4553,1,0,0,0,4555,4554,1,0,0,0,4556,823,1,0,0,0,4557,4566,3,808,
        404,0,4558,4566,3,884,442,0,4559,4566,3,868,434,0,4560,4566,3,870,
        435,0,4561,4566,3,872,436,0,4562,4566,3,874,437,0,4563,4566,3,876,
        438,0,4564,4566,3,878,439,0,4565,4557,1,0,0,0,4565,4558,1,0,0,0,
        4565,4559,1,0,0,0,4565,4560,1,0,0,0,4565,4561,1,0,0,0,4565,4562,
        1,0,0,0,4565,4563,1,0,0,0,4565,4564,1,0,0,0,4566,825,1,0,0,0,4567,
        4570,3,808,404,0,4568,4570,3,882,441,0,4569,4567,1,0,0,0,4569,4568,
        1,0,0,0,4570,827,1,0,0,0,4571,4574,3,810,405,0,4572,4574,5,327,0,
        0,4573,4571,1,0,0,0,4573,4572,1,0,0,0,4574,829,1,0,0,0,4575,4578,
        3,856,428,0,4576,4578,5,327,0,0,4577,4575,1,0,0,0,4577,4576,1,0,
        0,0,4578,831,1,0,0,0,4579,4582,3,812,406,0,4580,4582,5,327,0,0,4581,
        4579,1,0,0,0,4581,4580,1,0,0,0,4582,833,1,0,0,0,4583,4586,3,814,
        407,0,4584,4586,5,327,0,0,4585,4583,1,0,0,0,4585,4584,1,0,0,0,4586,
        835,1,0,0,0,4587,4590,3,816,408,0,4588,4590,5,327,0,0,4589,4587,
        1,0,0,0,4589,4588,1,0,0,0,4590,837,1,0,0,0,4591,4594,3,818,409,0,
        4592,4594,5,327,0,0,4593,4591,1,0,0,0,4593,4592,1,0,0,0,4594,839,
        1,0,0,0,4595,4598,3,820,410,0,4596,4598,5,327,0,0,4597,4595,1,0,
        0,0,4597,4596,1,0,0,0,4598,841,1,0,0,0,4599,4602,3,822,411,0,4600,
        4602,5,327,0,0,4601,4599,1,0,0,0,4601,4600,1,0,0,0,4602,843,1,0,
        0,0,4603,4606,3,824,412,0,4604,4606,5,327,0,0,4605,4603,1,0,0,0,
        4605,4604,1,0,0,0,4606,845,1,0,0,0,4607,4610,3,808,404,0,4608,4610,
        5,327,0,0,4609,4607,1,0,0,0,4609,4608,1,0,0,0,4610,847,1,0,0,0,4611,
        4614,3,826,413,0,4612,4614,5,327,0,0,4613,4611,1,0,0,0,4613,4612,
        1,0,0,0,4614,849,1,0,0,0,4615,4619,3,828,414,0,4616,4617,5,231,0,
        0,4617,4619,5,177,0,0,4618,4615,1,0,0,0,4618,4616,1,0,0,0,4619,851,
        1,0,0,0,4620,4621,3,828,414,0,4621,4622,5,23,0,0,4622,4624,1,0,0,
        0,4623,4620,1,0,0,0,4623,4624,1,0,0,0,4624,853,1,0,0,0,4625,4626,
        3,828,414,0,4626,4627,5,28,0,0,4627,4629,1,0,0,0,4628,4625,1,0,0,
        0,4628,4629,1,0,0,0,4629,4632,1,0,0,0,4630,4633,3,116,58,0,4631,
        4633,5,19,0,0,4632,4630,1,0,0,0,4632,4631,1,0,0,0,4633,855,1,0,0,
        0,4634,4637,3,810,405,0,4635,4637,3,886,443,0,4636,4634,1,0,0,0,
        4636,4635,1,0,0,0,4637,857,1,0,0,0,4638,4639,3,830,415,0,4639,4640,
        5,23,0,0,4640,4642,1,0,0,0,4641,4638,1,0,0,0,4641,4642,1,0,0,0,4642,
        859,1,0,0,0,4643,4645,5,29,0,0,4644,4643,1,0,0,0,4644,4645,1,0,0,
        0,4645,4646,1,0,0,0,4646,4647,3,830,415,0,4647,861,1,0,0,0,4648,
        4651,3,840,420,0,4649,4651,3,886,443,0,4650,4648,1,0,0,0,4650,4649,
        1,0,0,0,4651,863,1,0,0,0,4652,4654,5,29,0,0,4653,4652,1,0,0,0,4653,
        4654,1,0,0,0,4654,4655,1,0,0,0,4655,4656,3,862,431,0,4656,865,1,
        0,0,0,4657,4666,3,884,442,0,4658,4666,3,868,434,0,4659,4666,3,870,
        435,0,4660,4666,3,872,436,0,4661,4666,3,874,437,0,4662,4666,3,876,
        438,0,4663,4666,3,878,439,0,4664,4666,3,880,440,0,4665,4657,1,0,
        0,0,4665,4658,1,0,0,0,4665,4659,1,0,0,0,4665,4660,1,0,0,0,4665,4661,
        1,0,0,0,4665,4662,1,0,0,0,4665,4663,1,0,0,0,4665,4664,1,0,0,0,4666,
        867,1,0,0,0,4667,4668,7,33,0,0,4668,869,1,0,0,0,4669,4670,7,34,0,
        0,4670,871,1,0,0,0,4671,4672,7,35,0,0,4672,873,1,0,0,0,4673,4674,
        5,76,0,0,4674,875,1,0,0,0,4675,4676,5,79,0,0,4676,877,1,0,0,0,4677,
        4678,7,30,0,0,4678,879,1,0,0,0,4679,4680,7,29,0,0,4680,881,1,0,0,
        0,4681,4682,7,36,0,0,4682,883,1,0,0,0,4683,4684,7,37,0,0,4684,885,
        1,0,0,0,4685,4686,7,38,0,0,4686,887,1,0,0,0,4687,4688,7,39,0,0,4688,
        889,1,0,0,0,4689,4690,5,332,0,0,4690,891,1,0,0,0,4691,4692,7,40,
        0,0,4692,893,1,0,0,0,515,899,904,911,916,922,930,938,945,949,957,
        962,967,969,1035,1042,1046,1053,1061,1066,1070,1076,1082,1085,1089,
        1097,1101,1104,1108,1119,1124,1126,1135,1156,1161,1170,1172,1179,
        1187,1195,1202,1212,1214,1218,1223,1227,1233,1239,1243,1247,1250,
        1257,1263,1267,1272,1275,1289,1294,1297,1311,1318,1329,1340,1360,
        1366,1371,1375,1389,1391,1398,1404,1415,1423,1429,1436,1444,1457,
        1463,1467,1470,1472,1480,1488,1494,1500,1506,1509,1518,1527,1534,
        1542,1555,1562,1566,1573,1577,1582,1589,1596,1599,1606,1610,1620,
        1643,1649,1653,1660,1666,1673,1677,1681,1687,1692,1701,1704,1710,
        1715,1723,1730,1752,1756,1758,1762,1771,1775,1777,1781,1790,1794,
        1832,1836,1856,1859,1865,1885,1890,1896,1901,1904,1908,1935,1943,
        1946,1953,1966,1970,1982,1995,2000,2007,2011,2018,2027,2036,2044,
        2048,2052,2059,2061,2064,2069,2074,2078,2085,2092,2096,2100,2104,
        2108,2110,2121,2130,2135,2141,2146,2150,2154,2158,2161,2165,2169,
        2177,2181,2186,2189,2193,2197,2200,2204,2207,2210,2215,2218,2221,
        2224,2238,2240,2251,2261,2271,2274,2281,2305,2316,2322,2326,2330,
        2334,2338,2342,2346,2350,2356,2363,2373,2384,2397,2413,2423,2443,
        2449,2456,2463,2471,2480,2517,2519,2522,2527,2531,2535,2541,2547,
        2551,2556,2561,2563,2567,2572,2575,2577,2581,2592,2603,2614,2618,
        2622,2626,2629,2633,2636,2642,2651,2654,2668,2674,2677,2682,2689,
        2696,2705,2710,2718,2733,2739,2747,2756,2760,2769,2781,2788,2796,
        2817,2825,2834,2844,2853,2858,2865,2875,2880,2889,2893,2897,2900,
        2903,2906,2909,2917,2922,2933,2940,2953,2961,2966,2973,2986,2997,
        3007,3013,3029,3046,3069,3089,3100,3108,3118,3123,3127,3133,3171,
        3183,3225,3233,3236,3240,3244,3254,3267,3280,3285,3297,3308,3313,
        3316,3320,3324,3328,3331,3344,3348,3360,3374,3389,3404,3407,3417,
        3420,3428,3440,3443,3453,3461,3467,3475,3483,3490,3494,3504,3511,
        3516,3521,3533,3537,3539,3551,3555,3560,3566,3573,3577,3581,3585,
        3589,3592,3612,3621,3625,3630,3636,3645,3654,3671,3675,3679,3681,
        3685,3692,3696,3700,3702,3719,3724,3748,3753,3771,3788,3804,3819,
        3823,3834,3846,3861,3866,3881,3888,3896,3907,3914,3919,3925,3928,
        3931,3938,3941,3944,3953,3958,3961,3971,3975,3977,3984,3987,3991,
        3993,3996,4001,4004,4009,4019,4024,4035,4039,4043,4045,4049,4054,
        4062,4065,4068,4071,4076,4082,4085,4089,4095,4098,4107,4110,4113,
        4121,4125,4128,4132,4139,4160,4170,4174,4177,4185,4201,4209,4217,
        4225,4234,4252,4269,4278,4287,4306,4318,4328,4338,4350,4364,4367,
        4370,4373,4379,4389,4395,4406,4409,4421,4431,4437,4448,4455,4459,
        4468,4474,4478,4483,4489,4492,4503,4512,4520,4527,4537,4546,4555,
        4565,4569,4573,4577,4581,4585,4589,4593,4597,4601,4605,4609,4613,
        4618,4623,4628,4632,4636,4641,4644,4650,4653,4665
    ]

class YQLParser ( Parser ):

    grammarFileName = "YQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'='", "'=='", "'!='", "'<>'", "'<'", 
                     "'<='", "'>'", "'>='", "'<<'", "'|<<'", "'&'", "'|'", 
                     "'||'", "'<|'", "'|>'", "'+'", "'-'", "'~'", "'*'", 
                     "'/'", "'%'", "';'", "'.'", "','", "'('", "')'", "'?'", 
                     "':'", "'@'", "'$'", "'{'", "'}'", "'^'", "'::'", "'->'", 
                     "']'", "'['" ]

    symbolicNames = [ "<INVALID>", "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", 
                      "LESS", "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", 
                      "SHIFT_LEFT", "ROT_LEFT", "AMPERSAND", "PIPE", "DOUBLE_PIPE", 
                      "STRUCT_OPEN", "STRUCT_CLOSE", "PLUS", "MINUS", "TILDA", 
                      "ASTERISK", "SLASH", "PERCENT", "SEMICOLON", "DOT", 
                      "COMMA", "LPAREN", "RPAREN", "QUESTION", "COLON", 
                      "COMMAT", "DOLLAR", "LBRACE_CURLY", "RBRACE_CURLY", 
                      "CARET", "NAMESPACE", "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", 
                      "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
                      "ANALYZE", "AND", "ANSI", "ANY", "ARRAY", "AS", "ASC", 
                      "ASSUME", "ASYMMETRIC", "ASYNC", "AT", "ATTACH", "ATTRIBUTES", 
                      "AUTOINCREMENT", "AUTOMAP", "BACKUP", "BATCH", "COLLECTION", 
                      "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", 
                      "BY", "CALLABLE", "CASCADE", "CASE", "CAST", "CHANGEFEED", 
                      "CHECK", "CLASSIFIER", "COLLATE", "COLUMN", "COLUMNS", 
                      "COMMIT", "COMPACT", "CONDITIONAL", "CONFLICT", "CONNECT", 
                      "CONSTRAINT", "CONSUMER", "COVER", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "DATA", "DATABASE", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DEFINE", 
                      "DELETE", "DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", 
                      "DISABLE", "DISCARD", "DISTINCT", "DO", "DROP", "EACH", 
                      "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", "END", 
                      "ENUM", "ERASE", "ERROR", "ESCAPE", "EVALUATE", "EXCEPT", 
                      "EXCLUDE", "EXCLUSION", "EXCLUSIVE", "EXISTS", "EXPLAIN", 
                      "EXPORT", "EXTERNAL", "FAIL", "FALSE", "FAMILY", "FILTER", 
                      "FIRST", "FLATTEN", "FLOW", "FOLLOWING", "FOR", "FOREIGN", 
                      "FROM", "FULL", "FUNCTION", "GLOB", "GLOBAL", "GRANT", 
                      "GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HOP", 
                      "IF", "IGNORE", "ILIKE", "IMMEDIATE", "IMPORT", "IN", 
                      "INCREMENT", "INCREMENTAL", "INDEX", "INDEXED", "INHERITS", 
                      "INITIAL", "INITIALLY", "INNER", "INSERT", "INSTEAD", 
                      "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "JSON_EXISTS", 
                      "JSON_QUERY", "JSON_VALUE", "KEY", "LAST", "LEFT", 
                      "LEGACY", "LIKE", "LIMIT", "LIST", "LOCAL", "LOGIN", 
                      "MANAGE", "MATCH", "MATCHES", "MATCH_RECOGNIZE", "MEASURES", 
                      "MICROSECONDS", "MILLISECONDS", "MODIFY", "NANOSECONDS", 
                      "NATURAL", "NEXT", "NO", "NOLOGIN", "NOT", "NOTNULL", 
                      "NULL", "NULLS", "OBJECT", "OF", "OFFSET", "OMIT", 
                      "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", "OR", "ORDER", 
                      "OTHERS", "OUTER", "OVER", "OWNER", "PARALLEL", "PARTITION", 
                      "PASSING", "PASSWORD", "PAST", "PATTERN", "PER", "PERMUTE", 
                      "PLAN", "POOL", "PRAGMA", "PRECEDING", "PRESORT", 
                      "PRIMARY", "PRIVILEGES", "PROCESS", "QUERY", "QUEUE", 
                      "RAISE", "RANGE", "REDUCE", "REFERENCES", "REGEXP", 
                      "REINDEX", "RELEASE", "REMOVE", "RENAME", "REPEATABLE", 
                      "REPLACE", "REPLICATION", "RESET", "RESOURCE", "RESPECT", 
                      "RESTART", "RESTORE", "RESTRICT", "RESULT", "RETURN", 
                      "RETURNING", "REVERT", "REVOKE", "RIGHT", "RLIKE", 
                      "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SAVEPOINT", 
                      "SCHEMA", "SECONDS", "SEEK", "SELECT", "SEMI", "SET", 
                      "SETS", "SHOW", "TSKIP", "SEQUENCE", "SOURCE", "START", 
                      "STREAM", "STRUCT", "SUBQUERY", "SUBSET", "SYMBOLS", 
                      "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", "TABLES", 
                      "TABLESAMPLE", "TABLESTORE", "TAGGED", "TEMP", "TEMPORARY", 
                      "THEN", "TIES", "TO", "TOPIC", "TRANSACTION", "TRANSFER", 
                      "TRIGGER", "TRUE", "TUPLE", "TYPE", "UNBOUNDED", "UNCONDITIONAL", 
                      "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UPDATE", 
                      "UPSERT", "USE", "USER", "USING", "VACUUM", "VALUES", 
                      "VARIANT", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", 
                      "WITH", "WITHOUT", "WRAPPER", "XOR", "STRING_VALUE", 
                      "ID_PLAIN", "ID_QUOTED", "DIGITS", "INTEGER_VALUE", 
                      "REAL", "BLOB", "WS", "COMMENT" ]

    RULE_sql_query = 0
    RULE_sql_stmt_list = 1
    RULE_ansi_sql_stmt_list = 2
    RULE_lambda_body = 3
    RULE_lambda_stmt = 4
    RULE_sql_stmt = 5
    RULE_sql_stmt_core = 6
    RULE_expr = 7
    RULE_or_subexpr = 8
    RULE_and_subexpr = 9
    RULE_xor_subexpr = 10
    RULE_distinct_from_op = 11
    RULE_cond_expr = 12
    RULE_match_op = 13
    RULE_eq_subexpr = 14
    RULE_shift_right = 15
    RULE_rot_right = 16
    RULE_double_question = 17
    RULE_neq_subexpr = 18
    RULE_bit_subexpr = 19
    RULE_add_subexpr = 20
    RULE_mul_subexpr = 21
    RULE_con_subexpr = 22
    RULE_unary_op = 23
    RULE_unary_subexpr_suffix = 24
    RULE_unary_casual_subexpr = 25
    RULE_in_unary_casual_subexpr = 26
    RULE_unary_subexpr = 27
    RULE_in_unary_subexpr = 28
    RULE_list_literal = 29
    RULE_expr_dict_list = 30
    RULE_dict_literal = 31
    RULE_expr_struct_list = 32
    RULE_struct_literal = 33
    RULE_atom_expr = 34
    RULE_in_atom_expr = 35
    RULE_cast_expr = 36
    RULE_bitcast_expr = 37
    RULE_exists_expr = 38
    RULE_case_expr = 39
    RULE_lambda = 40
    RULE_in_expr = 41
    RULE_json_api_expr = 42
    RULE_jsonpath_spec = 43
    RULE_json_variable_name = 44
    RULE_json_variable = 45
    RULE_json_variables = 46
    RULE_json_common_args = 47
    RULE_json_case_handler = 48
    RULE_json_value = 49
    RULE_json_exists_handler = 50
    RULE_json_exists = 51
    RULE_json_query_wrapper = 52
    RULE_json_query_handler = 53
    RULE_json_query = 54
    RULE_smart_parenthesis = 55
    RULE_expr_list = 56
    RULE_pure_column_list = 57
    RULE_pure_column_or_named = 58
    RULE_pure_column_or_named_list = 59
    RULE_column_name = 60
    RULE_without_column_name = 61
    RULE_column_list = 62
    RULE_without_column_list = 63
    RULE_named_expr = 64
    RULE_named_expr_list = 65
    RULE_invoke_expr = 66
    RULE_invoke_expr_tail = 67
    RULE_using_call_expr = 68
    RULE_key_expr = 69
    RULE_when_expr = 70
    RULE_literal_value = 71
    RULE_bind_parameter = 72
    RULE_opt_bind_parameter = 73
    RULE_bind_parameter_list = 74
    RULE_named_bind_parameter = 75
    RULE_named_bind_parameter_list = 76
    RULE_signed_number = 77
    RULE_type_name_simple = 78
    RULE_integer_or_bind = 79
    RULE_type_name_tag = 80
    RULE_struct_arg = 81
    RULE_struct_arg_positional = 82
    RULE_variant_arg = 83
    RULE_callable_arg = 84
    RULE_callable_arg_list = 85
    RULE_type_name_decimal = 86
    RULE_type_name_optional = 87
    RULE_type_name_tuple = 88
    RULE_type_name_struct = 89
    RULE_type_name_variant = 90
    RULE_type_name_list = 91
    RULE_type_name_stream = 92
    RULE_type_name_flow = 93
    RULE_type_name_dict = 94
    RULE_type_name_set = 95
    RULE_type_name_enum = 96
    RULE_type_name_resource = 97
    RULE_type_name_tagged = 98
    RULE_type_name_callable = 99
    RULE_type_name_composite = 100
    RULE_type_name = 101
    RULE_type_name_or_bind = 102
    RULE_value_constructor_literal = 103
    RULE_value_constructor = 104
    RULE_declare_stmt = 105
    RULE_module_path = 106
    RULE_import_stmt = 107
    RULE_export_stmt = 108
    RULE_call_action = 109
    RULE_inline_action = 110
    RULE_do_stmt = 111
    RULE_pragma_stmt = 112
    RULE_pragma_value = 113
    RULE_sort_specification = 114
    RULE_sort_specification_list = 115
    RULE_select_stmt = 116
    RULE_select_unparenthesized_stmt = 117
    RULE_select_kind_parenthesis = 118
    RULE_select_op = 119
    RULE_select_kind_partial = 120
    RULE_select_kind = 121
    RULE_process_core = 122
    RULE_external_call_param = 123
    RULE_external_call_settings = 124
    RULE_reduce_core = 125
    RULE_opt_set_quantifier = 126
    RULE_select_core = 127
    RULE_row_pattern_recognition_clause = 128
    RULE_row_pattern_rows_per_match = 129
    RULE_row_pattern_empty_match_handling = 130
    RULE_row_pattern_measures = 131
    RULE_row_pattern_measure_list = 132
    RULE_row_pattern_measure_definition = 133
    RULE_row_pattern_common_syntax = 134
    RULE_row_pattern_skip_to = 135
    RULE_row_pattern_skip_to_variable_name = 136
    RULE_row_pattern_initial_or_seek = 137
    RULE_row_pattern = 138
    RULE_row_pattern_term = 139
    RULE_row_pattern_factor = 140
    RULE_row_pattern_quantifier = 141
    RULE_row_pattern_primary = 142
    RULE_row_pattern_primary_variable_name = 143
    RULE_row_pattern_permute = 144
    RULE_row_pattern_subset_clause = 145
    RULE_row_pattern_subset_list = 146
    RULE_row_pattern_subset_item = 147
    RULE_row_pattern_subset_item_variable_name = 148
    RULE_row_pattern_subset_rhs = 149
    RULE_row_pattern_subset_rhs_variable_name = 150
    RULE_row_pattern_definition_list = 151
    RULE_row_pattern_definition = 152
    RULE_row_pattern_definition_variable_name = 153
    RULE_row_pattern_definition_search_condition = 154
    RULE_search_condition = 155
    RULE_row_pattern_variable_name = 156
    RULE_order_by_clause = 157
    RULE_ext_order_by_clause = 158
    RULE_group_by_clause = 159
    RULE_grouping_element_list = 160
    RULE_grouping_element = 161
    RULE_ordinary_grouping_set = 162
    RULE_ordinary_grouping_set_list = 163
    RULE_rollup_list = 164
    RULE_cube_list = 165
    RULE_grouping_sets_specification = 166
    RULE_hopping_window_specification = 167
    RULE_result_column = 168
    RULE_join_source = 169
    RULE_named_column = 170
    RULE_flatten_by_arg = 171
    RULE_flatten_source = 172
    RULE_named_single_source = 173
    RULE_single_source = 174
    RULE_sample_clause = 175
    RULE_tablesample_clause = 176
    RULE_sampling_mode = 177
    RULE_repeatable_clause = 178
    RULE_join_op = 179
    RULE_join_constraint = 180
    RULE_returning_columns_list = 181
    RULE_into_table_stmt = 182
    RULE_into_values_source = 183
    RULE_values_stmt = 184
    RULE_values_source = 185
    RULE_values_source_row_list = 186
    RULE_values_source_row = 187
    RULE_simple_values_source = 188
    RULE_create_external_data_source_stmt = 189
    RULE_alter_external_data_source_stmt = 190
    RULE_alter_external_data_source_action = 191
    RULE_drop_external_data_source_stmt = 192
    RULE_create_view_stmt = 193
    RULE_drop_view_stmt = 194
    RULE_upsert_object_stmt = 195
    RULE_create_object_stmt = 196
    RULE_create_object_features = 197
    RULE_alter_object_stmt = 198
    RULE_alter_object_features = 199
    RULE_drop_object_stmt = 200
    RULE_drop_object_features = 201
    RULE_object_feature_value = 202
    RULE_object_feature_kv = 203
    RULE_object_feature_flag = 204
    RULE_object_feature = 205
    RULE_object_features = 206
    RULE_object_type_ref = 207
    RULE_create_table_stmt = 208
    RULE_create_table_entry = 209
    RULE_create_backup_collection_stmt = 210
    RULE_alter_backup_collection_stmt = 211
    RULE_drop_backup_collection_stmt = 212
    RULE_create_backup_collection_entries = 213
    RULE_create_backup_collection_entries_many = 214
    RULE_table_list = 215
    RULE_alter_backup_collection_actions = 216
    RULE_alter_backup_collection_action = 217
    RULE_alter_backup_collection_entries = 218
    RULE_alter_backup_collection_entry = 219
    RULE_backup_collection = 220
    RULE_backup_collection_settings = 221
    RULE_backup_collection_settings_entry = 222
    RULE_backup_stmt = 223
    RULE_restore_stmt = 224
    RULE_alter_database_stmt = 225
    RULE_table_inherits = 226
    RULE_table_partition_by = 227
    RULE_with_table_settings = 228
    RULE_table_tablestore = 229
    RULE_table_settings_entry = 230
    RULE_table_as_source = 231
    RULE_alter_table_stmt = 232
    RULE_alter_table_action = 233
    RULE_alter_external_table_stmt = 234
    RULE_alter_external_table_action = 235
    RULE_alter_table_store_stmt = 236
    RULE_alter_table_store_action = 237
    RULE_alter_table_add_column = 238
    RULE_alter_table_drop_column = 239
    RULE_alter_table_alter_column = 240
    RULE_alter_table_alter_column_drop_not_null = 241
    RULE_alter_table_add_column_family = 242
    RULE_alter_table_alter_column_family = 243
    RULE_alter_table_set_table_setting_uncompat = 244
    RULE_alter_table_set_table_setting_compat = 245
    RULE_alter_table_reset_table_setting = 246
    RULE_alter_table_add_index = 247
    RULE_alter_table_drop_index = 248
    RULE_alter_table_rename_to = 249
    RULE_alter_table_rename_index_to = 250
    RULE_alter_table_add_changefeed = 251
    RULE_alter_table_alter_changefeed = 252
    RULE_alter_table_drop_changefeed = 253
    RULE_alter_table_alter_index = 254
    RULE_column_schema = 255
    RULE_family_relation = 256
    RULE_opt_column_constraints = 257
    RULE_column_order_by_specification = 258
    RULE_table_constraint = 259
    RULE_table_index = 260
    RULE_table_index_type = 261
    RULE_global_index = 262
    RULE_local_index = 263
    RULE_index_subtype = 264
    RULE_with_index_settings = 265
    RULE_index_setting_entry = 266
    RULE_index_setting_value = 267
    RULE_changefeed = 268
    RULE_changefeed_settings = 269
    RULE_changefeed_settings_entry = 270
    RULE_changefeed_setting_value = 271
    RULE_changefeed_alter_settings = 272
    RULE_alter_table_setting_entry = 273
    RULE_table_setting_value = 274
    RULE_ttl_tier_list = 275
    RULE_ttl_tier_action = 276
    RULE_family_entry = 277
    RULE_family_settings = 278
    RULE_family_settings_entry = 279
    RULE_family_setting_value = 280
    RULE_split_boundaries = 281
    RULE_literal_value_list = 282
    RULE_alter_table_alter_index_action = 283
    RULE_drop_table_stmt = 284
    RULE_create_user_stmt = 285
    RULE_alter_user_stmt = 286
    RULE_create_group_stmt = 287
    RULE_alter_group_stmt = 288
    RULE_drop_role_stmt = 289
    RULE_role_name = 290
    RULE_user_option = 291
    RULE_authentication_option = 292
    RULE_password_option = 293
    RULE_password_value = 294
    RULE_hash_option = 295
    RULE_login_option = 296
    RULE_grant_permissions_stmt = 297
    RULE_revoke_permissions_stmt = 298
    RULE_permission_id = 299
    RULE_permission_name = 300
    RULE_permission_name_target = 301
    RULE_create_resource_pool_stmt = 302
    RULE_alter_resource_pool_stmt = 303
    RULE_alter_resource_pool_action = 304
    RULE_drop_resource_pool_stmt = 305
    RULE_create_resource_pool_classifier_stmt = 306
    RULE_alter_resource_pool_classifier_stmt = 307
    RULE_alter_resource_pool_classifier_action = 308
    RULE_drop_resource_pool_classifier_stmt = 309
    RULE_create_replication_stmt = 310
    RULE_replication_target = 311
    RULE_replication_settings = 312
    RULE_replication_settings_entry = 313
    RULE_alter_replication_stmt = 314
    RULE_alter_replication_action = 315
    RULE_alter_replication_set_setting = 316
    RULE_drop_replication_stmt = 317
    RULE_lambda_or_parameter = 318
    RULE_create_transfer_stmt = 319
    RULE_transfer_settings = 320
    RULE_transfer_settings_entry = 321
    RULE_alter_transfer_stmt = 322
    RULE_alter_transfer_action = 323
    RULE_alter_transfer_set_setting = 324
    RULE_alter_transfer_set_using = 325
    RULE_drop_transfer_stmt = 326
    RULE_action_or_subquery_args = 327
    RULE_define_action_or_subquery_stmt = 328
    RULE_define_action_or_subquery_body = 329
    RULE_if_stmt = 330
    RULE_for_stmt = 331
    RULE_table_ref = 332
    RULE_table_key = 333
    RULE_table_arg = 334
    RULE_table_hints = 335
    RULE_table_hint = 336
    RULE_object_ref = 337
    RULE_simple_table_ref_core = 338
    RULE_simple_table_ref = 339
    RULE_into_simple_table_ref = 340
    RULE_delete_stmt = 341
    RULE_update_stmt = 342
    RULE_set_clause_choice = 343
    RULE_set_clause_list = 344
    RULE_set_clause = 345
    RULE_set_target = 346
    RULE_multiple_column_assignment = 347
    RULE_set_target_list = 348
    RULE_create_topic_stmt = 349
    RULE_create_topic_entries = 350
    RULE_create_topic_entry = 351
    RULE_with_topic_settings = 352
    RULE_alter_topic_stmt = 353
    RULE_alter_topic_action = 354
    RULE_alter_topic_add_consumer = 355
    RULE_topic_create_consumer_entry = 356
    RULE_alter_topic_alter_consumer = 357
    RULE_alter_topic_alter_consumer_entry = 358
    RULE_alter_topic_drop_consumer = 359
    RULE_topic_alter_consumer_set = 360
    RULE_topic_alter_consumer_reset = 361
    RULE_alter_topic_set_settings = 362
    RULE_alter_topic_reset_settings = 363
    RULE_drop_topic_stmt = 364
    RULE_topic_settings = 365
    RULE_topic_settings_entry = 366
    RULE_topic_setting_value = 367
    RULE_topic_consumer_with_settings = 368
    RULE_topic_consumer_settings = 369
    RULE_topic_consumer_settings_entry = 370
    RULE_topic_consumer_setting_value = 371
    RULE_topic_ref = 372
    RULE_topic_consumer_ref = 373
    RULE_null_treatment = 374
    RULE_filter_clause = 375
    RULE_window_name_or_specification = 376
    RULE_window_name = 377
    RULE_window_clause = 378
    RULE_window_definition_list = 379
    RULE_window_definition = 380
    RULE_new_window_name = 381
    RULE_window_specification = 382
    RULE_window_specification_details = 383
    RULE_existing_window_name = 384
    RULE_window_partition_clause = 385
    RULE_window_order_clause = 386
    RULE_window_frame_clause = 387
    RULE_window_frame_units = 388
    RULE_window_frame_extent = 389
    RULE_window_frame_between = 390
    RULE_window_frame_bound = 391
    RULE_window_frame_exclusion = 392
    RULE_use_stmt = 393
    RULE_subselect_stmt = 394
    RULE_named_nodes_stmt = 395
    RULE_commit_stmt = 396
    RULE_rollback_stmt = 397
    RULE_analyze_table = 398
    RULE_analyze_table_list = 399
    RULE_analyze_stmt = 400
    RULE_alter_sequence_stmt = 401
    RULE_alter_sequence_action = 402
    RULE_show_create_table_stmt = 403
    RULE_identifier = 404
    RULE_id = 405
    RULE_id_schema = 406
    RULE_id_expr = 407
    RULE_id_expr_in = 408
    RULE_id_window = 409
    RULE_id_table = 410
    RULE_id_without = 411
    RULE_id_hint = 412
    RULE_id_as_compat = 413
    RULE_an_id = 414
    RULE_an_id_or_type = 415
    RULE_an_id_schema = 416
    RULE_an_id_expr = 417
    RULE_an_id_expr_in = 418
    RULE_an_id_window = 419
    RULE_an_id_table = 420
    RULE_an_id_without = 421
    RULE_an_id_hint = 422
    RULE_an_id_pure = 423
    RULE_an_id_as_compat = 424
    RULE_view_name = 425
    RULE_opt_id_prefix = 426
    RULE_cluster_expr = 427
    RULE_id_or_type = 428
    RULE_opt_id_prefix_or_type = 429
    RULE_id_or_at = 430
    RULE_id_table_or_type = 431
    RULE_id_table_or_at = 432
    RULE_keyword = 433
    RULE_keyword_expr_uncompat = 434
    RULE_keyword_table_uncompat = 435
    RULE_keyword_select_uncompat = 436
    RULE_keyword_alter_uncompat = 437
    RULE_keyword_in_uncompat = 438
    RULE_keyword_window_uncompat = 439
    RULE_keyword_hint_uncompat = 440
    RULE_keyword_as_compat = 441
    RULE_keyword_compat = 442
    RULE_type_id = 443
    RULE_bool_value = 444
    RULE_real = 445
    RULE_integer = 446

    ruleNames =  [ "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", "lambda_body", 
                   "lambda_stmt", "sql_stmt", "sql_stmt_core", "expr", "or_subexpr", 
                   "and_subexpr", "xor_subexpr", "distinct_from_op", "cond_expr", 
                   "match_op", "eq_subexpr", "shift_right", "rot_right", 
                   "double_question", "neq_subexpr", "bit_subexpr", "add_subexpr", 
                   "mul_subexpr", "con_subexpr", "unary_op", "unary_subexpr_suffix", 
                   "unary_casual_subexpr", "in_unary_casual_subexpr", "unary_subexpr", 
                   "in_unary_subexpr", "list_literal", "expr_dict_list", 
                   "dict_literal", "expr_struct_list", "struct_literal", 
                   "atom_expr", "in_atom_expr", "cast_expr", "bitcast_expr", 
                   "exists_expr", "case_expr", "lambda", "in_expr", "json_api_expr", 
                   "jsonpath_spec", "json_variable_name", "json_variable", 
                   "json_variables", "json_common_args", "json_case_handler", 
                   "json_value", "json_exists_handler", "json_exists", "json_query_wrapper", 
                   "json_query_handler", "json_query", "smart_parenthesis", 
                   "expr_list", "pure_column_list", "pure_column_or_named", 
                   "pure_column_or_named_list", "column_name", "without_column_name", 
                   "column_list", "without_column_list", "named_expr", "named_expr_list", 
                   "invoke_expr", "invoke_expr_tail", "using_call_expr", 
                   "key_expr", "when_expr", "literal_value", "bind_parameter", 
                   "opt_bind_parameter", "bind_parameter_list", "named_bind_parameter", 
                   "named_bind_parameter_list", "signed_number", "type_name_simple", 
                   "integer_or_bind", "type_name_tag", "struct_arg", "struct_arg_positional", 
                   "variant_arg", "callable_arg", "callable_arg_list", "type_name_decimal", 
                   "type_name_optional", "type_name_tuple", "type_name_struct", 
                   "type_name_variant", "type_name_list", "type_name_stream", 
                   "type_name_flow", "type_name_dict", "type_name_set", 
                   "type_name_enum", "type_name_resource", "type_name_tagged", 
                   "type_name_callable", "type_name_composite", "type_name", 
                   "type_name_or_bind", "value_constructor_literal", "value_constructor", 
                   "declare_stmt", "module_path", "import_stmt", "export_stmt", 
                   "call_action", "inline_action", "do_stmt", "pragma_stmt", 
                   "pragma_value", "sort_specification", "sort_specification_list", 
                   "select_stmt", "select_unparenthesized_stmt", "select_kind_parenthesis", 
                   "select_op", "select_kind_partial", "select_kind", "process_core", 
                   "external_call_param", "external_call_settings", "reduce_core", 
                   "opt_set_quantifier", "select_core", "row_pattern_recognition_clause", 
                   "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
                   "row_pattern_measures", "row_pattern_measure_list", "row_pattern_measure_definition", 
                   "row_pattern_common_syntax", "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
                   "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
                   "row_pattern_factor", "row_pattern_quantifier", "row_pattern_primary", 
                   "row_pattern_primary_variable_name", "row_pattern_permute", 
                   "row_pattern_subset_clause", "row_pattern_subset_list", 
                   "row_pattern_subset_item", "row_pattern_subset_item_variable_name", 
                   "row_pattern_subset_rhs", "row_pattern_subset_rhs_variable_name", 
                   "row_pattern_definition_list", "row_pattern_definition", 
                   "row_pattern_definition_variable_name", "row_pattern_definition_search_condition", 
                   "search_condition", "row_pattern_variable_name", "order_by_clause", 
                   "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
                   "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
                   "rollup_list", "cube_list", "grouping_sets_specification", 
                   "hopping_window_specification", "result_column", "join_source", 
                   "named_column", "flatten_by_arg", "flatten_source", "named_single_source", 
                   "single_source", "sample_clause", "tablesample_clause", 
                   "sampling_mode", "repeatable_clause", "join_op", "join_constraint", 
                   "returning_columns_list", "into_table_stmt", "into_values_source", 
                   "values_stmt", "values_source", "values_source_row_list", 
                   "values_source_row", "simple_values_source", "create_external_data_source_stmt", 
                   "alter_external_data_source_stmt", "alter_external_data_source_action", 
                   "drop_external_data_source_stmt", "create_view_stmt", 
                   "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
                   "create_object_features", "alter_object_stmt", "alter_object_features", 
                   "drop_object_stmt", "drop_object_features", "object_feature_value", 
                   "object_feature_kv", "object_feature_flag", "object_feature", 
                   "object_features", "object_type_ref", "create_table_stmt", 
                   "create_table_entry", "create_backup_collection_stmt", 
                   "alter_backup_collection_stmt", "drop_backup_collection_stmt", 
                   "create_backup_collection_entries", "create_backup_collection_entries_many", 
                   "table_list", "alter_backup_collection_actions", "alter_backup_collection_action", 
                   "alter_backup_collection_entries", "alter_backup_collection_entry", 
                   "backup_collection", "backup_collection_settings", "backup_collection_settings_entry", 
                   "backup_stmt", "restore_stmt", "alter_database_stmt", 
                   "table_inherits", "table_partition_by", "with_table_settings", 
                   "table_tablestore", "table_settings_entry", "table_as_source", 
                   "alter_table_stmt", "alter_table_action", "alter_external_table_stmt", 
                   "alter_external_table_action", "alter_table_store_stmt", 
                   "alter_table_store_action", "alter_table_add_column", 
                   "alter_table_drop_column", "alter_table_alter_column", 
                   "alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
                   "alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
                   "alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
                   "alter_table_add_index", "alter_table_drop_index", "alter_table_rename_to", 
                   "alter_table_rename_index_to", "alter_table_add_changefeed", 
                   "alter_table_alter_changefeed", "alter_table_drop_changefeed", 
                   "alter_table_alter_index", "column_schema", "family_relation", 
                   "opt_column_constraints", "column_order_by_specification", 
                   "table_constraint", "table_index", "table_index_type", 
                   "global_index", "local_index", "index_subtype", "with_index_settings", 
                   "index_setting_entry", "index_setting_value", "changefeed", 
                   "changefeed_settings", "changefeed_settings_entry", "changefeed_setting_value", 
                   "changefeed_alter_settings", "alter_table_setting_entry", 
                   "table_setting_value", "ttl_tier_list", "ttl_tier_action", 
                   "family_entry", "family_settings", "family_settings_entry", 
                   "family_setting_value", "split_boundaries", "literal_value_list", 
                   "alter_table_alter_index_action", "drop_table_stmt", 
                   "create_user_stmt", "alter_user_stmt", "create_group_stmt", 
                   "alter_group_stmt", "drop_role_stmt", "role_name", "user_option", 
                   "authentication_option", "password_option", "password_value", 
                   "hash_option", "login_option", "grant_permissions_stmt", 
                   "revoke_permissions_stmt", "permission_id", "permission_name", 
                   "permission_name_target", "create_resource_pool_stmt", 
                   "alter_resource_pool_stmt", "alter_resource_pool_action", 
                   "drop_resource_pool_stmt", "create_resource_pool_classifier_stmt", 
                   "alter_resource_pool_classifier_stmt", "alter_resource_pool_classifier_action", 
                   "drop_resource_pool_classifier_stmt", "create_replication_stmt", 
                   "replication_target", "replication_settings", "replication_settings_entry", 
                   "alter_replication_stmt", "alter_replication_action", 
                   "alter_replication_set_setting", "drop_replication_stmt", 
                   "lambda_or_parameter", "create_transfer_stmt", "transfer_settings", 
                   "transfer_settings_entry", "alter_transfer_stmt", "alter_transfer_action", 
                   "alter_transfer_set_setting", "alter_transfer_set_using", 
                   "drop_transfer_stmt", "action_or_subquery_args", "define_action_or_subquery_stmt", 
                   "define_action_or_subquery_body", "if_stmt", "for_stmt", 
                   "table_ref", "table_key", "table_arg", "table_hints", 
                   "table_hint", "object_ref", "simple_table_ref_core", 
                   "simple_table_ref", "into_simple_table_ref", "delete_stmt", 
                   "update_stmt", "set_clause_choice", "set_clause_list", 
                   "set_clause", "set_target", "multiple_column_assignment", 
                   "set_target_list", "create_topic_stmt", "create_topic_entries", 
                   "create_topic_entry", "with_topic_settings", "alter_topic_stmt", 
                   "alter_topic_action", "alter_topic_add_consumer", "topic_create_consumer_entry", 
                   "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
                   "alter_topic_drop_consumer", "topic_alter_consumer_set", 
                   "topic_alter_consumer_reset", "alter_topic_set_settings", 
                   "alter_topic_reset_settings", "drop_topic_stmt", "topic_settings", 
                   "topic_settings_entry", "topic_setting_value", "topic_consumer_with_settings", 
                   "topic_consumer_settings", "topic_consumer_settings_entry", 
                   "topic_consumer_setting_value", "topic_ref", "topic_consumer_ref", 
                   "null_treatment", "filter_clause", "window_name_or_specification", 
                   "window_name", "window_clause", "window_definition_list", 
                   "window_definition", "new_window_name", "window_specification", 
                   "window_specification_details", "existing_window_name", 
                   "window_partition_clause", "window_order_clause", "window_frame_clause", 
                   "window_frame_units", "window_frame_extent", "window_frame_between", 
                   "window_frame_bound", "window_frame_exclusion", "use_stmt", 
                   "subselect_stmt", "named_nodes_stmt", "commit_stmt", 
                   "rollback_stmt", "analyze_table", "analyze_table_list", 
                   "analyze_stmt", "alter_sequence_stmt", "alter_sequence_action", 
                   "show_create_table_stmt", "identifier", "id", "id_schema", 
                   "id_expr", "id_expr_in", "id_window", "id_table", "id_without", 
                   "id_hint", "id_as_compat", "an_id", "an_id_or_type", 
                   "an_id_schema", "an_id_expr", "an_id_expr_in", "an_id_window", 
                   "an_id_table", "an_id_without", "an_id_hint", "an_id_pure", 
                   "an_id_as_compat", "view_name", "opt_id_prefix", "cluster_expr", 
                   "id_or_type", "opt_id_prefix_or_type", "id_or_at", "id_table_or_type", 
                   "id_table_or_at", "keyword", "keyword_expr_uncompat", 
                   "keyword_table_uncompat", "keyword_select_uncompat", 
                   "keyword_alter_uncompat", "keyword_in_uncompat", "keyword_window_uncompat", 
                   "keyword_hint_uncompat", "keyword_as_compat", "keyword_compat", 
                   "type_id", "bool_value", "real", "integer" ]

    EOF = Token.EOF
    EQUALS=1
    EQUALS2=2
    NOT_EQUALS=3
    NOT_EQUALS2=4
    LESS=5
    LESS_OR_EQ=6
    GREATER=7
    GREATER_OR_EQ=8
    SHIFT_LEFT=9
    ROT_LEFT=10
    AMPERSAND=11
    PIPE=12
    DOUBLE_PIPE=13
    STRUCT_OPEN=14
    STRUCT_CLOSE=15
    PLUS=16
    MINUS=17
    TILDA=18
    ASTERISK=19
    SLASH=20
    PERCENT=21
    SEMICOLON=22
    DOT=23
    COMMA=24
    LPAREN=25
    RPAREN=26
    QUESTION=27
    COLON=28
    COMMAT=29
    DOLLAR=30
    LBRACE_CURLY=31
    RBRACE_CURLY=32
    CARET=33
    NAMESPACE=34
    ARROW=35
    RBRACE_SQUARE=36
    LBRACE_SQUARE=37
    ABORT=38
    ACTION=39
    ADD=40
    AFTER=41
    ALL=42
    ALTER=43
    ANALYZE=44
    AND=45
    ANSI=46
    ANY=47
    ARRAY=48
    AS=49
    ASC=50
    ASSUME=51
    ASYMMETRIC=52
    ASYNC=53
    AT=54
    ATTACH=55
    ATTRIBUTES=56
    AUTOINCREMENT=57
    AUTOMAP=58
    BACKUP=59
    BATCH=60
    COLLECTION=61
    BEFORE=62
    BEGIN=63
    BERNOULLI=64
    BETWEEN=65
    BITCAST=66
    BY=67
    CALLABLE=68
    CASCADE=69
    CASE=70
    CAST=71
    CHANGEFEED=72
    CHECK=73
    CLASSIFIER=74
    COLLATE=75
    COLUMN=76
    COLUMNS=77
    COMMIT=78
    COMPACT=79
    CONDITIONAL=80
    CONFLICT=81
    CONNECT=82
    CONSTRAINT=83
    CONSUMER=84
    COVER=85
    CREATE=86
    CROSS=87
    CUBE=88
    CURRENT=89
    CURRENT_DATE=90
    CURRENT_TIME=91
    CURRENT_TIMESTAMP=92
    DATA=93
    DATABASE=94
    DECIMAL=95
    DECLARE=96
    DEFAULT=97
    DEFERRABLE=98
    DEFERRED=99
    DEFINE=100
    DELETE=101
    DESC=102
    DESCRIBE=103
    DETACH=104
    DICT=105
    DIRECTORY=106
    DISABLE=107
    DISCARD=108
    DISTINCT=109
    DO=110
    DROP=111
    EACH=112
    ELSE=113
    EMPTY=114
    EMPTY_ACTION=115
    ENCRYPTED=116
    END=117
    ENUM=118
    ERASE=119
    ERROR=120
    ESCAPE=121
    EVALUATE=122
    EXCEPT=123
    EXCLUDE=124
    EXCLUSION=125
    EXCLUSIVE=126
    EXISTS=127
    EXPLAIN=128
    EXPORT=129
    EXTERNAL=130
    FAIL=131
    FALSE=132
    FAMILY=133
    FILTER=134
    FIRST=135
    FLATTEN=136
    FLOW=137
    FOLLOWING=138
    FOR=139
    FOREIGN=140
    FROM=141
    FULL=142
    FUNCTION=143
    GLOB=144
    GLOBAL=145
    GRANT=146
    GROUP=147
    GROUPING=148
    GROUPS=149
    HASH=150
    HAVING=151
    HOP=152
    IF=153
    IGNORE=154
    ILIKE=155
    IMMEDIATE=156
    IMPORT=157
    IN=158
    INCREMENT=159
    INCREMENTAL=160
    INDEX=161
    INDEXED=162
    INHERITS=163
    INITIAL=164
    INITIALLY=165
    INNER=166
    INSERT=167
    INSTEAD=168
    INTERSECT=169
    INTO=170
    IS=171
    ISNULL=172
    JOIN=173
    JSON_EXISTS=174
    JSON_QUERY=175
    JSON_VALUE=176
    KEY=177
    LAST=178
    LEFT=179
    LEGACY=180
    LIKE=181
    LIMIT=182
    LIST=183
    LOCAL=184
    LOGIN=185
    MANAGE=186
    MATCH=187
    MATCHES=188
    MATCH_RECOGNIZE=189
    MEASURES=190
    MICROSECONDS=191
    MILLISECONDS=192
    MODIFY=193
    NANOSECONDS=194
    NATURAL=195
    NEXT=196
    NO=197
    NOLOGIN=198
    NOT=199
    NOTNULL=200
    NULL=201
    NULLS=202
    OBJECT=203
    OF=204
    OFFSET=205
    OMIT=206
    ON=207
    ONE=208
    ONLY=209
    OPTION=210
    OPTIONAL=211
    OR=212
    ORDER=213
    OTHERS=214
    OUTER=215
    OVER=216
    OWNER=217
    PARALLEL=218
    PARTITION=219
    PASSING=220
    PASSWORD=221
    PAST=222
    PATTERN=223
    PER=224
    PERMUTE=225
    PLAN=226
    POOL=227
    PRAGMA=228
    PRECEDING=229
    PRESORT=230
    PRIMARY=231
    PRIVILEGES=232
    PROCESS=233
    QUERY=234
    QUEUE=235
    RAISE=236
    RANGE=237
    REDUCE=238
    REFERENCES=239
    REGEXP=240
    REINDEX=241
    RELEASE=242
    REMOVE=243
    RENAME=244
    REPEATABLE=245
    REPLACE=246
    REPLICATION=247
    RESET=248
    RESOURCE=249
    RESPECT=250
    RESTART=251
    RESTORE=252
    RESTRICT=253
    RESULT=254
    RETURN=255
    RETURNING=256
    REVERT=257
    REVOKE=258
    RIGHT=259
    RLIKE=260
    ROLLBACK=261
    ROLLUP=262
    ROW=263
    ROWS=264
    SAMPLE=265
    SAVEPOINT=266
    SCHEMA=267
    SECONDS=268
    SEEK=269
    SELECT=270
    SEMI=271
    SET=272
    SETS=273
    SHOW=274
    TSKIP=275
    SEQUENCE=276
    SOURCE=277
    START=278
    STREAM=279
    STRUCT=280
    SUBQUERY=281
    SUBSET=282
    SYMBOLS=283
    SYMMETRIC=284
    SYNC=285
    SYSTEM=286
    TABLE=287
    TABLES=288
    TABLESAMPLE=289
    TABLESTORE=290
    TAGGED=291
    TEMP=292
    TEMPORARY=293
    THEN=294
    TIES=295
    TO=296
    TOPIC=297
    TRANSACTION=298
    TRANSFER=299
    TRIGGER=300
    TRUE=301
    TUPLE=302
    TYPE=303
    UNBOUNDED=304
    UNCONDITIONAL=305
    UNION=306
    UNIQUE=307
    UNKNOWN=308
    UNMATCHED=309
    UPDATE=310
    UPSERT=311
    USE=312
    USER=313
    USING=314
    VACUUM=315
    VALUES=316
    VARIANT=317
    VIEW=318
    VIRTUAL=319
    WHEN=320
    WHERE=321
    WINDOW=322
    WITH=323
    WITHOUT=324
    WRAPPER=325
    XOR=326
    STRING_VALUE=327
    ID_PLAIN=328
    ID_QUOTED=329
    DIGITS=330
    INTEGER_VALUE=331
    REAL=332
    BLOB=333
    WS=334
    COMMENT=335

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Sql_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt_list(self):
            return self.getTypedRuleContext(YQLParser.Sql_stmt_listContext,0)


        def PRAGMA(self):
            return self.getToken(YQLParser.PRAGMA, 0)

        def ANSI(self):
            return self.getToken(YQLParser.ANSI, 0)

        def DIGITS(self):
            return self.getToken(YQLParser.DIGITS, 0)

        def ansi_sql_stmt_list(self):
            return self.getTypedRuleContext(YQLParser.Ansi_sql_stmt_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_sql_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_query" ):
                listener.enterSql_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_query" ):
                listener.exitSql_query(self)




    def sql_query(self):

        localctx = YQLParser.Sql_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sql_query)
        try:
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.sql_stmt_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(YQLParser.PRAGMA)
                self.state = 896
                self.match(YQLParser.ANSI)
                self.state = 897
                self.match(YQLParser.DIGITS)
                self.state = 898
                self.ansi_sql_stmt_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(YQLParser.Sql_stmtContext,i)


        def EOF(self):
            return self.getToken(YQLParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SEMICOLON)
            else:
                return self.getToken(YQLParser.SEMICOLON, i)

        def getRuleIndex(self):
            return YQLParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = YQLParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 901
                self.match(YQLParser.SEMICOLON)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self.sql_stmt()
            self.state = 916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 909 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 908
                        self.match(YQLParser.SEMICOLON)
                        self.state = 911 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==22):
                            break

                    self.state = 913
                    self.sql_stmt() 
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 919
                self.match(YQLParser.SEMICOLON)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 925
            self.match(YQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ansi_sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(YQLParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SEMICOLON)
            else:
                return self.getToken(YQLParser.SEMICOLON, i)

        def getRuleIndex(self):
            return YQLParser.RULE_ansi_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsi_sql_stmt_list" ):
                listener.enterAnsi_sql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsi_sql_stmt_list" ):
                listener.exitAnsi_sql_stmt_list(self)




    def ansi_sql_stmt_list(self):

        localctx = YQLParser.Ansi_sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ansi_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 927
                self.match(YQLParser.SEMICOLON)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self.match(YQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(YQLParser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SEMICOLON)
            else:
                return self.getToken(YQLParser.SEMICOLON, i)

        def lambda_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Lambda_stmtContext)
            else:
                return self.getTypedRuleContext(YQLParser.Lambda_stmtContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_lambda_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_body" ):
                listener.enterLambda_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_body" ):
                listener.exitLambda_body(self)




    def lambda_body(self):

        localctx = YQLParser.Lambda_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_lambda_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 935
                self.match(YQLParser.SEMICOLON)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30 or _la==157:
                self.state = 941
                self.lambda_stmt()
                self.state = 943 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 942
                    self.match(YQLParser.SEMICOLON)
                    self.state = 945 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==22):
                        break

                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 952
            self.match(YQLParser.RETURN)
            self.state = 953
            self.expr()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 954
                self.match(YQLParser.SEMICOLON)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_nodes_stmt(self):
            return self.getTypedRuleContext(YQLParser.Named_nodes_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(YQLParser.Import_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_lambda_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_stmt" ):
                listener.enterLambda_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_stmt" ):
                listener.exitLambda_stmt(self)




    def lambda_stmt(self):

        localctx = YQLParser.Lambda_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_lambda_stmt)
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.named_nodes_stmt()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.import_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt_core(self):
            return self.getTypedRuleContext(YQLParser.Sql_stmt_coreContext,0)


        def EXPLAIN(self):
            return self.getToken(YQLParser.EXPLAIN, 0)

        def QUERY(self):
            return self.getToken(YQLParser.QUERY, 0)

        def PLAN(self):
            return self.getToken(YQLParser.PLAN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = YQLParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 964
                self.match(YQLParser.EXPLAIN)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==234:
                    self.state = 965
                    self.match(YQLParser.QUERY)
                    self.state = 966
                    self.match(YQLParser.PLAN)




            self.state = 971
            self.sql_stmt_core()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma_stmt(self):
            return self.getTypedRuleContext(YQLParser.Pragma_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def named_nodes_stmt(self):
            return self.getTypedRuleContext(YQLParser.Named_nodes_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_table_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_table_stmtContext,0)


        def use_stmt(self):
            return self.getTypedRuleContext(YQLParser.Use_stmtContext,0)


        def into_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Into_table_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(YQLParser.Commit_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(YQLParser.Update_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(YQLParser.Delete_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(YQLParser.Rollback_stmtContext,0)


        def declare_stmt(self):
            return self.getTypedRuleContext(YQLParser.Declare_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(YQLParser.Import_stmtContext,0)


        def export_stmt(self):
            return self.getTypedRuleContext(YQLParser.Export_stmtContext,0)


        def alter_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_stmtContext,0)


        def alter_external_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_external_table_stmtContext,0)


        def do_stmt(self):
            return self.getTypedRuleContext(YQLParser.Do_stmtContext,0)


        def define_action_or_subquery_stmt(self):
            return self.getTypedRuleContext(YQLParser.Define_action_or_subquery_stmtContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(YQLParser.If_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(YQLParser.For_stmtContext,0)


        def values_stmt(self):
            return self.getTypedRuleContext(YQLParser.Values_stmtContext,0)


        def create_user_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_user_stmtContext,0)


        def alter_user_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_user_stmtContext,0)


        def create_group_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_group_stmtContext,0)


        def alter_group_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_group_stmtContext,0)


        def drop_role_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_role_stmtContext,0)


        def create_object_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_object_stmtContext,0)


        def alter_object_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_object_stmtContext,0)


        def drop_object_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_object_stmtContext,0)


        def create_external_data_source_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_external_data_source_stmtContext,0)


        def alter_external_data_source_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_external_data_source_stmtContext,0)


        def drop_external_data_source_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_external_data_source_stmtContext,0)


        def create_replication_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_replication_stmtContext,0)


        def drop_replication_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_replication_stmtContext,0)


        def create_topic_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_topic_stmtContext,0)


        def alter_topic_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_stmtContext,0)


        def drop_topic_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_topic_stmtContext,0)


        def grant_permissions_stmt(self):
            return self.getTypedRuleContext(YQLParser.Grant_permissions_stmtContext,0)


        def revoke_permissions_stmt(self):
            return self.getTypedRuleContext(YQLParser.Revoke_permissions_stmtContext,0)


        def alter_table_store_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_store_stmtContext,0)


        def upsert_object_stmt(self):
            return self.getTypedRuleContext(YQLParser.Upsert_object_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_view_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_view_stmtContext,0)


        def alter_replication_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_replication_stmtContext,0)


        def create_resource_pool_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_resource_pool_stmtContext,0)


        def alter_resource_pool_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_resource_pool_stmtContext,0)


        def drop_resource_pool_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_resource_pool_stmtContext,0)


        def create_backup_collection_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_backup_collection_stmtContext,0)


        def alter_backup_collection_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_backup_collection_stmtContext,0)


        def drop_backup_collection_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_backup_collection_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(YQLParser.Analyze_stmtContext,0)


        def create_resource_pool_classifier_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_resource_pool_classifier_stmtContext,0)


        def alter_resource_pool_classifier_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_resource_pool_classifier_stmtContext,0)


        def drop_resource_pool_classifier_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_resource_pool_classifier_stmtContext,0)


        def backup_stmt(self):
            return self.getTypedRuleContext(YQLParser.Backup_stmtContext,0)


        def restore_stmt(self):
            return self.getTypedRuleContext(YQLParser.Restore_stmtContext,0)


        def alter_sequence_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_sequence_stmtContext,0)


        def create_transfer_stmt(self):
            return self.getTypedRuleContext(YQLParser.Create_transfer_stmtContext,0)


        def alter_transfer_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_transfer_stmtContext,0)


        def drop_transfer_stmt(self):
            return self.getTypedRuleContext(YQLParser.Drop_transfer_stmtContext,0)


        def alter_database_stmt(self):
            return self.getTypedRuleContext(YQLParser.Alter_database_stmtContext,0)


        def show_create_table_stmt(self):
            return self.getTypedRuleContext(YQLParser.Show_create_table_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_sql_stmt_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_core" ):
                listener.enterSql_stmt_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_core" ):
                listener.exitSql_stmt_core(self)




    def sql_stmt_core(self):

        localctx = YQLParser.Sql_stmt_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_sql_stmt_core)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.pragma_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.select_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 975
                self.named_nodes_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 976
                self.create_table_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 977
                self.drop_table_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 978
                self.use_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 979
                self.into_table_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 980
                self.commit_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 981
                self.update_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 982
                self.delete_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 983
                self.rollback_stmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 984
                self.declare_stmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 985
                self.import_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 986
                self.export_stmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 987
                self.alter_table_stmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 988
                self.alter_external_table_stmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 989
                self.do_stmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 990
                self.define_action_or_subquery_stmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 991
                self.if_stmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 992
                self.for_stmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 993
                self.values_stmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 994
                self.create_user_stmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 995
                self.alter_user_stmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 996
                self.create_group_stmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 997
                self.alter_group_stmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 998
                self.drop_role_stmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 999
                self.create_object_stmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1000
                self.alter_object_stmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1001
                self.drop_object_stmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1002
                self.create_external_data_source_stmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1003
                self.alter_external_data_source_stmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1004
                self.drop_external_data_source_stmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1005
                self.create_replication_stmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1006
                self.drop_replication_stmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1007
                self.create_topic_stmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1008
                self.alter_topic_stmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1009
                self.drop_topic_stmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1010
                self.grant_permissions_stmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1011
                self.revoke_permissions_stmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1012
                self.alter_table_store_stmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1013
                self.upsert_object_stmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1014
                self.create_view_stmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1015
                self.drop_view_stmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1016
                self.alter_replication_stmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1017
                self.create_resource_pool_stmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1018
                self.alter_resource_pool_stmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1019
                self.drop_resource_pool_stmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1020
                self.create_backup_collection_stmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1021
                self.alter_backup_collection_stmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1022
                self.drop_backup_collection_stmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1023
                self.analyze_stmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1024
                self.create_resource_pool_classifier_stmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1025
                self.alter_resource_pool_classifier_stmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1026
                self.drop_resource_pool_classifier_stmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1027
                self.backup_stmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1028
                self.restore_stmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1029
                self.alter_sequence_stmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1030
                self.create_transfer_stmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1031
                self.alter_transfer_stmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1032
                self.drop_transfer_stmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1033
                self.alter_database_stmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1034
                self.show_create_table_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Or_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Or_subexprContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.OR)
            else:
                return self.getToken(YQLParser.OR, i)

        def type_name_composite(self):
            return self.getTypedRuleContext(YQLParser.Type_name_compositeContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = YQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_expr)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.or_subexpr()
                self.state = 1042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1038
                        self.match(YQLParser.OR)
                        self.state = 1039
                        self.or_subexpr() 
                    self.state = 1044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.type_name_composite()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.And_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.And_subexprContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.AND)
            else:
                return self.getToken(YQLParser.AND, i)

        def getRuleIndex(self):
            return YQLParser.RULE_or_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_subexpr" ):
                listener.enterOr_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_subexpr" ):
                listener.exitOr_subexpr(self)




    def or_subexpr(self):

        localctx = YQLParser.Or_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_or_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.and_subexpr()
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1049
                    self.match(YQLParser.AND)
                    self.state = 1050
                    self.and_subexpr() 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Xor_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Xor_subexprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.XOR)
            else:
                return self.getToken(YQLParser.XOR, i)

        def getRuleIndex(self):
            return YQLParser.RULE_and_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_subexpr" ):
                listener.enterAnd_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_subexpr" ):
                listener.exitAnd_subexpr(self)




    def and_subexpr(self):

        localctx = YQLParser.And_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_and_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.xor_subexpr()
            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1057
                    self.match(YQLParser.XOR)
                    self.state = 1058
                    self.xor_subexpr() 
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_subexpr(self):
            return self.getTypedRuleContext(YQLParser.Eq_subexprContext,0)


        def cond_expr(self):
            return self.getTypedRuleContext(YQLParser.Cond_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_xor_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_subexpr" ):
                listener.enterXor_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_subexpr" ):
                listener.exitXor_subexpr(self)




    def xor_subexpr(self):

        localctx = YQLParser.Xor_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_xor_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.eq_subexpr()
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.cond_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distinct_from_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(YQLParser.IS, 0)

        def DISTINCT(self):
            return self.getToken(YQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(YQLParser.FROM, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_distinct_from_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct_from_op" ):
                listener.enterDistinct_from_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct_from_op" ):
                listener.exitDistinct_from_op(self)




    def distinct_from_op(self):

        localctx = YQLParser.Distinct_from_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_distinct_from_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(YQLParser.IS)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199:
                self.state = 1069
                self.match(YQLParser.NOT)


            self.state = 1072
            self.match(YQLParser.DISTINCT)
            self.state = 1073
            self.match(YQLParser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cond_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def match_op(self):
            return self.getTypedRuleContext(YQLParser.Match_opContext,0)


        def eq_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Eq_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Eq_subexprContext,i)


        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def ESCAPE(self):
            return self.getToken(YQLParser.ESCAPE, 0)

        def IN(self):
            return self.getToken(YQLParser.IN, 0)

        def in_expr(self):
            return self.getTypedRuleContext(YQLParser.In_exprContext,0)


        def COMPACT(self):
            return self.getToken(YQLParser.COMPACT, 0)

        def ISNULL(self):
            return self.getToken(YQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(YQLParser.NOTNULL, 0)

        def IS(self):
            return self.getToken(YQLParser.IS, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def BETWEEN(self):
            return self.getToken(YQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(YQLParser.AND, 0)

        def SYMMETRIC(self):
            return self.getToken(YQLParser.SYMMETRIC, 0)

        def ASYMMETRIC(self):
            return self.getToken(YQLParser.ASYMMETRIC, 0)

        def EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.EQUALS)
            else:
                return self.getToken(YQLParser.EQUALS, i)

        def EQUALS2(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.EQUALS2)
            else:
                return self.getToken(YQLParser.EQUALS2, i)

        def NOT_EQUALS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.NOT_EQUALS)
            else:
                return self.getToken(YQLParser.NOT_EQUALS, i)

        def NOT_EQUALS2(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.NOT_EQUALS2)
            else:
                return self.getToken(YQLParser.NOT_EQUALS2, i)

        def distinct_from_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Distinct_from_opContext)
            else:
                return self.getTypedRuleContext(YQLParser.Distinct_from_opContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_cond_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expr" ):
                listener.enterCond_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expr" ):
                listener.exitCond_expr(self)




    def cond_expr(self):

        localctx = YQLParser.Cond_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_cond_expr)
        self._la = 0 # Token type
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 1075
                    self.match(YQLParser.NOT)


                self.state = 1078
                self.match_op()
                self.state = 1079
                self.eq_subexpr()
                self.state = 1082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 1080
                    self.match(YQLParser.ESCAPE)
                    self.state = 1081
                    self.eq_subexpr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 1084
                    self.match(YQLParser.NOT)


                self.state = 1087
                self.match(YQLParser.IN)
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 1088
                    self.match(YQLParser.COMPACT)


                self.state = 1091
                self.in_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 1092
                    self.match(YQLParser.ISNULL)
                    pass

                elif la_ == 2:
                    self.state = 1093
                    self.match(YQLParser.NOTNULL)
                    pass

                elif la_ == 3:
                    self.state = 1094
                    self.match(YQLParser.IS)
                    self.state = 1095
                    self.match(YQLParser.NULL)
                    pass

                elif la_ == 4:
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==171:
                        self.state = 1096
                        self.match(YQLParser.IS)


                    self.state = 1099
                    self.match(YQLParser.NOT)
                    self.state = 1100
                    self.match(YQLParser.NULL)
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 1103
                    self.match(YQLParser.NOT)


                self.state = 1106
                self.match(YQLParser.BETWEEN)
                self.state = 1108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1107
                    _la = self._input.LA(1)
                    if not(_la==52 or _la==284):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1110
                self.eq_subexpr()
                self.state = 1111
                self.match(YQLParser.AND)
                self.state = 1112
                self.eq_subexpr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1122 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1119
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1]:
                            self.state = 1114
                            self.match(YQLParser.EQUALS)
                            pass
                        elif token in [2]:
                            self.state = 1115
                            self.match(YQLParser.EQUALS2)
                            pass
                        elif token in [3]:
                            self.state = 1116
                            self.match(YQLParser.NOT_EQUALS)
                            pass
                        elif token in [4]:
                            self.state = 1117
                            self.match(YQLParser.NOT_EQUALS2)
                            pass
                        elif token in [171]:
                            self.state = 1118
                            self.distinct_from_op()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1121
                        self.eq_subexpr()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1124 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(YQLParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(YQLParser.ILIKE, 0)

        def GLOB(self):
            return self.getToken(YQLParser.GLOB, 0)

        def REGEXP(self):
            return self.getToken(YQLParser.REGEXP, 0)

        def RLIKE(self):
            return self.getToken(YQLParser.RLIKE, 0)

        def MATCH(self):
            return self.getToken(YQLParser.MATCH, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_match_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_op" ):
                listener.enterMatch_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_op" ):
                listener.exitMatch_op(self)




    def match_op(self):

        localctx = YQLParser.Match_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_match_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            _la = self._input.LA(1)
            if not(((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 8933531977729) != 0) or _la==240 or _la==260):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eq_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def neq_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Neq_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Neq_subexprContext,i)


        def LESS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.LESS)
            else:
                return self.getToken(YQLParser.LESS, i)

        def LESS_OR_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.LESS_OR_EQ)
            else:
                return self.getToken(YQLParser.LESS_OR_EQ, i)

        def GREATER(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.GREATER)
            else:
                return self.getToken(YQLParser.GREATER, i)

        def GREATER_OR_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.GREATER_OR_EQ)
            else:
                return self.getToken(YQLParser.GREATER_OR_EQ, i)

        def getRuleIndex(self):
            return YQLParser.RULE_eq_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEq_subexpr" ):
                listener.enterEq_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEq_subexpr" ):
                listener.exitEq_subexpr(self)




    def eq_subexpr(self):

        localctx = YQLParser.Eq_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_eq_subexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.neq_subexpr()
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0):
                self.state = 1131
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1132
                self.neq_subexpr()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.GREATER)
            else:
                return self.getToken(YQLParser.GREATER, i)

        def getRuleIndex(self):
            return YQLParser.RULE_shift_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_right" ):
                listener.enterShift_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_right" ):
                listener.exitShift_right(self)




    def shift_right(self):

        localctx = YQLParser.Shift_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shift_right)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(YQLParser.GREATER)
            self.state = 1139
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rot_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.GREATER)
            else:
                return self.getToken(YQLParser.GREATER, i)

        def PIPE(self):
            return self.getToken(YQLParser.PIPE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_rot_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRot_right" ):
                listener.enterRot_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRot_right" ):
                listener.exitRot_right(self)




    def rot_right(self):

        localctx = YQLParser.Rot_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rot_right)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(YQLParser.GREATER)
            self.state = 1142
            self.match(YQLParser.GREATER)
            self.state = 1143
            self.match(YQLParser.PIPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_questionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.QUESTION)
            else:
                return self.getToken(YQLParser.QUESTION, i)

        def getRuleIndex(self):
            return YQLParser.RULE_double_question

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_question" ):
                listener.enterDouble_question(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_question" ):
                listener.exitDouble_question(self)




    def double_question(self):

        localctx = YQLParser.Double_questionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_double_question)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(YQLParser.QUESTION)
            self.state = 1146
            self.match(YQLParser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Neq_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Bit_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Bit_subexprContext,i)


        def double_question(self):
            return self.getTypedRuleContext(YQLParser.Double_questionContext,0)


        def neq_subexpr(self):
            return self.getTypedRuleContext(YQLParser.Neq_subexprContext,0)


        def SHIFT_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SHIFT_LEFT)
            else:
                return self.getToken(YQLParser.SHIFT_LEFT, i)

        def shift_right(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Shift_rightContext)
            else:
                return self.getTypedRuleContext(YQLParser.Shift_rightContext,i)


        def ROT_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ROT_LEFT)
            else:
                return self.getToken(YQLParser.ROT_LEFT, i)

        def rot_right(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Rot_rightContext)
            else:
                return self.getTypedRuleContext(YQLParser.Rot_rightContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.AMPERSAND)
            else:
                return self.getToken(YQLParser.AMPERSAND, i)

        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.PIPE)
            else:
                return self.getToken(YQLParser.PIPE, i)

        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.CARET)
            else:
                return self.getToken(YQLParser.CARET, i)

        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.QUESTION)
            else:
                return self.getToken(YQLParser.QUESTION, i)

        def getRuleIndex(self):
            return YQLParser.RULE_neq_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq_subexpr" ):
                listener.enterNeq_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq_subexpr" ):
                listener.exitNeq_subexpr(self)




    def neq_subexpr(self):

        localctx = YQLParser.Neq_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_neq_subexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.bit_subexpr()
            self.state = 1161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1156
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                    if la_ == 1:
                        self.state = 1149
                        self.match(YQLParser.SHIFT_LEFT)
                        pass

                    elif la_ == 2:
                        self.state = 1150
                        self.shift_right()
                        pass

                    elif la_ == 3:
                        self.state = 1151
                        self.match(YQLParser.ROT_LEFT)
                        pass

                    elif la_ == 4:
                        self.state = 1152
                        self.rot_right()
                        pass

                    elif la_ == 5:
                        self.state = 1153
                        self.match(YQLParser.AMPERSAND)
                        pass

                    elif la_ == 6:
                        self.state = 1154
                        self.match(YQLParser.PIPE)
                        pass

                    elif la_ == 7:
                        self.state = 1155
                        self.match(YQLParser.CARET)
                        pass


                    self.state = 1158
                    self.bit_subexpr() 
                self.state = 1163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 1172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1164
                self.double_question()
                self.state = 1165
                self.neq_subexpr()

            elif la_ == 2:
                self.state = 1168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1167
                    self.match(YQLParser.QUESTION)
                    self.state = 1170 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==27):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Add_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Add_subexprContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.PLUS)
            else:
                return self.getToken(YQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.MINUS)
            else:
                return self.getToken(YQLParser.MINUS, i)

        def getRuleIndex(self):
            return YQLParser.RULE_bit_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_subexpr" ):
                listener.enterBit_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_subexpr" ):
                listener.exitBit_subexpr(self)




    def bit_subexpr(self):

        localctx = YQLParser.Bit_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bit_subexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.add_subexpr()
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==17:
                self.state = 1175
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1176
                self.add_subexpr()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mul_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Mul_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Mul_subexprContext,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ASTERISK)
            else:
                return self.getToken(YQLParser.ASTERISK, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SLASH)
            else:
                return self.getToken(YQLParser.SLASH, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.PERCENT)
            else:
                return self.getToken(YQLParser.PERCENT, i)

        def getRuleIndex(self):
            return YQLParser.RULE_add_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_subexpr" ):
                listener.enterAdd_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_subexpr" ):
                listener.exitAdd_subexpr(self)




    def add_subexpr(self):

        localctx = YQLParser.Add_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_add_subexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.mul_subexpr()
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0):
                self.state = 1183
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1184
                self.mul_subexpr()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def con_subexpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Con_subexprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Con_subexprContext,i)


        def DOUBLE_PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.DOUBLE_PIPE)
            else:
                return self.getToken(YQLParser.DOUBLE_PIPE, i)

        def getRuleIndex(self):
            return YQLParser.RULE_mul_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_subexpr" ):
                listener.enterMul_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_subexpr" ):
                listener.exitMul_subexpr(self)




    def mul_subexpr(self):

        localctx = YQLParser.Mul_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_mul_subexpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.con_subexpr()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1191
                self.match(YQLParser.DOUBLE_PIPE)
                self.state = 1192
                self.con_subexpr()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Con_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_subexpr(self):
            return self.getTypedRuleContext(YQLParser.Unary_subexprContext,0)


        def unary_op(self):
            return self.getTypedRuleContext(YQLParser.Unary_opContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_con_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCon_subexpr" ):
                listener.enterCon_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCon_subexpr" ):
                listener.exitCon_subexpr(self)




    def con_subexpr(self):

        localctx = YQLParser.Con_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_con_subexpr)
        try:
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.unary_subexpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.unary_op()
                self.state = 1200
                self.unary_subexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(YQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(YQLParser.MINUS, 0)

        def TILDA(self):
            return self.getToken(YQLParser.TILDA, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_unary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op" ):
                listener.enterUnary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op" ):
                listener.exitUnary_op(self)




    def unary_op(self):

        localctx = YQLParser.Unary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unary_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 458752) != 0) or _la==199):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_subexpr_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(YQLParser.COLLATE, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def key_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Key_exprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Key_exprContext,i)


        def invoke_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Invoke_exprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Invoke_exprContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.DOT)
            else:
                return self.getToken(YQLParser.DOT, i)

        def bind_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Bind_parameterContext)
            else:
                return self.getTypedRuleContext(YQLParser.Bind_parameterContext,i)


        def DIGITS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.DIGITS)
            else:
                return self.getToken(YQLParser.DIGITS, i)

        def an_id_or_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_or_typeContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_unary_subexpr_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_subexpr_suffix" ):
                listener.enterUnary_subexpr_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_subexpr_suffix" ):
                listener.exitUnary_subexpr_suffix(self)




    def unary_subexpr_suffix(self):

        localctx = YQLParser.Unary_subexpr_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unary_subexpr_suffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 137480896512) != 0):
                self.state = 1214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37]:
                    self.state = 1206
                    self.key_expr()
                    pass
                elif token in [25]:
                    self.state = 1207
                    self.invoke_expr()
                    pass
                elif token in [23]:
                    self.state = 1208
                    self.match(YQLParser.DOT)
                    self.state = 1212
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 1209
                        self.bind_parameter()
                        pass
                    elif token in [330]:
                        self.state = 1210
                        self.match(YQLParser.DIGITS)
                        pass
                    elif token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                        self.state = 1211
                        self.an_id_or_type()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1221
                self.match(YQLParser.COLLATE)
                self.state = 1222
                self.an_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_casual_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_subexpr_suffix(self):
            return self.getTypedRuleContext(YQLParser.Unary_subexpr_suffixContext,0)


        def id_expr(self):
            return self.getTypedRuleContext(YQLParser.Id_exprContext,0)


        def atom_expr(self):
            return self.getTypedRuleContext(YQLParser.Atom_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_unary_casual_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_casual_subexpr" ):
                listener.enterUnary_casual_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_casual_subexpr" ):
                listener.exitUnary_casual_subexpr(self)




    def unary_casual_subexpr(self):

        localctx = YQLParser.Unary_casual_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_unary_casual_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 1225
                self.id_expr()
                pass

            elif la_ == 2:
                self.state = 1226
                self.atom_expr()
                pass


            self.state = 1229
            self.unary_subexpr_suffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_unary_casual_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_subexpr_suffix(self):
            return self.getTypedRuleContext(YQLParser.Unary_subexpr_suffixContext,0)


        def id_expr_in(self):
            return self.getTypedRuleContext(YQLParser.Id_expr_inContext,0)


        def in_atom_expr(self):
            return self.getTypedRuleContext(YQLParser.In_atom_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_in_unary_casual_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_unary_casual_subexpr" ):
                listener.enterIn_unary_casual_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_unary_casual_subexpr" ):
                listener.exitIn_unary_casual_subexpr(self)




    def in_unary_casual_subexpr(self):

        localctx = YQLParser.In_unary_casual_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_in_unary_casual_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 1231
                self.id_expr_in()
                pass

            elif la_ == 2:
                self.state = 1232
                self.in_atom_expr()
                pass


            self.state = 1235
            self.unary_subexpr_suffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_casual_subexpr(self):
            return self.getTypedRuleContext(YQLParser.Unary_casual_subexprContext,0)


        def json_api_expr(self):
            return self.getTypedRuleContext(YQLParser.Json_api_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_unary_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_subexpr" ):
                listener.enterUnary_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_subexpr" ):
                listener.exitUnary_subexpr(self)




    def unary_subexpr(self):

        localctx = YQLParser.Unary_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unary_subexpr)
        try:
            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.unary_casual_subexpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.json_api_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_unary_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def in_unary_casual_subexpr(self):
            return self.getTypedRuleContext(YQLParser.In_unary_casual_subexprContext,0)


        def json_api_expr(self):
            return self.getTypedRuleContext(YQLParser.Json_api_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_in_unary_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_unary_subexpr" ):
                listener.enterIn_unary_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_unary_subexpr" ):
                listener.exitIn_unary_subexpr(self)




    def in_unary_subexpr(self):

        localctx = YQLParser.In_unary_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_in_unary_subexpr)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1241
                self.in_unary_casual_subexpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1242
                self.json_api_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE_SQUARE(self):
            return self.getToken(YQLParser.LBRACE_SQUARE, 0)

        def RBRACE_SQUARE(self):
            return self.getToken(YQLParser.RBRACE_SQUARE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_literal" ):
                listener.enterList_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_literal" ):
                listener.exitList_literal(self)




    def list_literal(self):

        localctx = YQLParser.List_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(YQLParser.LBRACE_SQUARE)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                self.state = 1246
                self.expr_list()


            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1249
                self.match(YQLParser.COMMA)


            self.state = 1252
            self.match(YQLParser.RBRACE_SQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_dict_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COLON)
            else:
                return self.getToken(YQLParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_expr_dict_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_dict_list" ):
                listener.enterExpr_dict_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_dict_list" ):
                listener.exitExpr_dict_list(self)




    def expr_dict_list(self):

        localctx = YQLParser.Expr_dict_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_expr_dict_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.expr()
            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 1255
                self.match(YQLParser.COLON)
                self.state = 1256
                self.expr()


            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1259
                    self.match(YQLParser.COMMA)
                    self.state = 1260
                    self.expr()
                    self.state = 1263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1261
                        self.match(YQLParser.COLON)
                        self.state = 1262
                        self.expr()

             
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dict_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE_CURLY(self):
            return self.getToken(YQLParser.LBRACE_CURLY, 0)

        def RBRACE_CURLY(self):
            return self.getToken(YQLParser.RBRACE_CURLY, 0)

        def expr_dict_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_dict_listContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_dict_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_literal" ):
                listener.enterDict_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_literal" ):
                listener.exitDict_literal(self)




    def dict_literal(self):

        localctx = YQLParser.Dict_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dict_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(YQLParser.LBRACE_CURLY)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                self.state = 1271
                self.expr_dict_list()


            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1274
                self.match(YQLParser.COMMA)


            self.state = 1277
            self.match(YQLParser.RBRACE_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_struct_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COLON)
            else:
                return self.getToken(YQLParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_expr_struct_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_struct_list" ):
                listener.enterExpr_struct_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_struct_list" ):
                listener.exitExpr_struct_list(self)




    def expr_struct_list(self):

        localctx = YQLParser.Expr_struct_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_expr_struct_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.expr()
            self.state = 1280
            self.match(YQLParser.COLON)
            self.state = 1281
            self.expr()
            self.state = 1289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1282
                    self.match(YQLParser.COMMA)
                    self.state = 1283
                    self.expr()
                    self.state = 1284
                    self.match(YQLParser.COLON)
                    self.state = 1285
                    self.expr() 
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT_OPEN(self):
            return self.getToken(YQLParser.STRUCT_OPEN, 0)

        def STRUCT_CLOSE(self):
            return self.getToken(YQLParser.STRUCT_CLOSE, 0)

        def expr_struct_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_struct_listContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_struct_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_literal" ):
                listener.enterStruct_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_literal" ):
                listener.exitStruct_literal(self)




    def struct_literal(self):

        localctx = YQLParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_struct_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(YQLParser.STRUCT_OPEN)
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                self.state = 1293
                self.expr_struct_list()


            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1296
                self.match(YQLParser.COMMA)


            self.state = 1299
            self.match(YQLParser.STRUCT_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(YQLParser.Literal_valueContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def lambda_(self):
            return self.getTypedRuleContext(YQLParser.LambdaContext,0)


        def cast_expr(self):
            return self.getTypedRuleContext(YQLParser.Cast_exprContext,0)


        def exists_expr(self):
            return self.getTypedRuleContext(YQLParser.Exists_exprContext,0)


        def case_expr(self):
            return self.getTypedRuleContext(YQLParser.Case_exprContext,0)


        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def NAMESPACE(self):
            return self.getToken(YQLParser.NAMESPACE, 0)

        def id_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_or_typeContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def value_constructor(self):
            return self.getTypedRuleContext(YQLParser.Value_constructorContext,0)


        def bitcast_expr(self):
            return self.getTypedRuleContext(YQLParser.Bitcast_exprContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(YQLParser.List_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(YQLParser.Dict_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(YQLParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = YQLParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_atom_expr)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.bind_parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self.lambda_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1304
                self.cast_expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1305
                self.exists_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1306
                self.case_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1307
                self.an_id_or_type()
                self.state = 1308
                self.match(YQLParser.NAMESPACE)
                self.state = 1311
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                    self.state = 1309
                    self.id_or_type()
                    pass
                elif token in [327]:
                    self.state = 1310
                    self.match(YQLParser.STRING_VALUE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1313
                self.value_constructor()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1314
                self.bitcast_expr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1315
                self.list_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1316
                self.dict_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1317
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(YQLParser.Literal_valueContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def lambda_(self):
            return self.getTypedRuleContext(YQLParser.LambdaContext,0)


        def cast_expr(self):
            return self.getTypedRuleContext(YQLParser.Cast_exprContext,0)


        def case_expr(self):
            return self.getTypedRuleContext(YQLParser.Case_exprContext,0)


        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def NAMESPACE(self):
            return self.getToken(YQLParser.NAMESPACE, 0)

        def id_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_or_typeContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def value_constructor(self):
            return self.getTypedRuleContext(YQLParser.Value_constructorContext,0)


        def bitcast_expr(self):
            return self.getTypedRuleContext(YQLParser.Bitcast_exprContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(YQLParser.List_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(YQLParser.Dict_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(YQLParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_in_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_atom_expr" ):
                listener.enterIn_atom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_atom_expr" ):
                listener.exitIn_atom_expr(self)




    def in_atom_expr(self):

        localctx = YQLParser.In_atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_in_atom_expr)
        try:
            self.state = 1340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.bind_parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.lambda_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1323
                self.cast_expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1324
                self.case_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1325
                self.an_id_or_type()
                self.state = 1326
                self.match(YQLParser.NAMESPACE)
                self.state = 1329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                    self.state = 1327
                    self.id_or_type()
                    pass
                elif token in [327]:
                    self.state = 1328
                    self.match(YQLParser.STRING_VALUE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1331
                self.match(YQLParser.LPAREN)
                self.state = 1332
                self.select_stmt()
                self.state = 1333
                self.match(YQLParser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1335
                self.value_constructor()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1336
                self.bitcast_expr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1337
                self.list_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1338
                self.dict_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1339
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(YQLParser.CAST, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_cast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expr" ):
                listener.enterCast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expr" ):
                listener.exitCast_expr(self)




    def cast_expr(self):

        localctx = YQLParser.Cast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_cast_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(YQLParser.CAST)
            self.state = 1343
            self.match(YQLParser.LPAREN)
            self.state = 1344
            self.expr()
            self.state = 1345
            self.match(YQLParser.AS)
            self.state = 1346
            self.type_name_or_bind()
            self.state = 1347
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitcast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITCAST(self):
            return self.getToken(YQLParser.BITCAST, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def type_name_simple(self):
            return self.getTypedRuleContext(YQLParser.Type_name_simpleContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_bitcast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitcast_expr" ):
                listener.enterBitcast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitcast_expr" ):
                listener.exitBitcast_expr(self)




    def bitcast_expr(self):

        localctx = YQLParser.Bitcast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_bitcast_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(YQLParser.BITCAST)
            self.state = 1350
            self.match(YQLParser.LPAREN)
            self.state = 1351
            self.expr()
            self.state = 1352
            self.match(YQLParser.AS)
            self.state = 1353
            self.type_name_simple()
            self.state = 1354
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exists_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def values_stmt(self):
            return self.getTypedRuleContext(YQLParser.Values_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_exists_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists_expr" ):
                listener.enterExists_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists_expr" ):
                listener.exitExists_expr(self)




    def exists_expr(self):

        localctx = YQLParser.Exists_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exists_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(YQLParser.EXISTS)
            self.state = 1357
            self.match(YQLParser.LPAREN)
            self.state = 1360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 108, 141, 233, 238, 270]:
                self.state = 1358
                self.select_stmt()
                pass
            elif token in [316]:
                self.state = 1359
                self.values_stmt()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1362
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(YQLParser.CASE, 0)

        def END(self):
            return self.getToken(YQLParser.END, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def when_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.When_exprContext)
            else:
                return self.getTypedRuleContext(YQLParser.When_exprContext,i)


        def ELSE(self):
            return self.getToken(YQLParser.ELSE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = YQLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(YQLParser.CASE)
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1365
                self.expr()


            self.state = 1369 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1368
                self.when_expr()
                self.state = 1371 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==320):
                    break

            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 1373
                self.match(YQLParser.ELSE)
                self.state = 1374
                self.expr()


            self.state = 1377
            self.match(YQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def smart_parenthesis(self):
            return self.getTypedRuleContext(YQLParser.Smart_parenthesisContext,0)


        def ARROW(self):
            return self.getToken(YQLParser.ARROW, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def LBRACE_CURLY(self):
            return self.getToken(YQLParser.LBRACE_CURLY, 0)

        def lambda_body(self):
            return self.getTypedRuleContext(YQLParser.Lambda_bodyContext,0)


        def RBRACE_CURLY(self):
            return self.getToken(YQLParser.RBRACE_CURLY, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_lambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)




    def lambda_(self):

        localctx = YQLParser.LambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_lambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.smart_parenthesis()
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 1380
                self.match(YQLParser.ARROW)
                self.state = 1389
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 1381
                    self.match(YQLParser.LPAREN)
                    self.state = 1382
                    self.expr()
                    self.state = 1383
                    self.match(YQLParser.RPAREN)
                    pass
                elif token in [31]:
                    self.state = 1385
                    self.match(YQLParser.LBRACE_CURLY)
                    self.state = 1386
                    self.lambda_body()
                    self.state = 1387
                    self.match(YQLParser.RBRACE_CURLY)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def in_unary_subexpr(self):
            return self.getTypedRuleContext(YQLParser.In_unary_subexprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_in_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_expr" ):
                listener.enterIn_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_expr" ):
                listener.exitIn_expr(self)




    def in_expr(self):

        localctx = YQLParser.In_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_in_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.in_unary_subexpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_api_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_value(self):
            return self.getTypedRuleContext(YQLParser.Json_valueContext,0)


        def json_exists(self):
            return self.getTypedRuleContext(YQLParser.Json_existsContext,0)


        def json_query(self):
            return self.getTypedRuleContext(YQLParser.Json_queryContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_json_api_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_api_expr" ):
                listener.enterJson_api_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_api_expr" ):
                listener.exitJson_api_expr(self)




    def json_api_expr(self):

        localctx = YQLParser.Json_api_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_json_api_expr)
        try:
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1395
                self.json_value()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1396
                self.json_exists()
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.json_query()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jsonpath_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_jsonpath_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonpath_spec" ):
                listener.enterJsonpath_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonpath_spec" ):
                listener.exitJsonpath_spec(self)




    def jsonpath_spec(self):

        localctx = YQLParser.Jsonpath_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_jsonpath_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(YQLParser.STRING_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expr(self):
            return self.getTypedRuleContext(YQLParser.Id_exprContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_json_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_variable_name" ):
                listener.enterJson_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_variable_name" ):
                listener.exitJson_variable_name(self)




    def json_variable_name(self):

        localctx = YQLParser.Json_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_json_variable_name)
        try:
            self.state = 1404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1402
                self.id_expr()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1403
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def json_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Json_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_json_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_variable" ):
                listener.enterJson_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_variable" ):
                listener.exitJson_variable(self)




    def json_variable(self):

        localctx = YQLParser.Json_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_json_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.expr()
            self.state = 1407
            self.match(YQLParser.AS)
            self.state = 1408
            self.json_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_variablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Json_variableContext)
            else:
                return self.getTypedRuleContext(YQLParser.Json_variableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_json_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_variables" ):
                listener.enterJson_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_variables" ):
                listener.exitJson_variables(self)




    def json_variables(self):

        localctx = YQLParser.Json_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_json_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.json_variable()
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1411
                self.match(YQLParser.COMMA)
                self.state = 1412
                self.json_variable()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_common_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def jsonpath_spec(self):
            return self.getTypedRuleContext(YQLParser.Jsonpath_specContext,0)


        def PASSING(self):
            return self.getToken(YQLParser.PASSING, 0)

        def json_variables(self):
            return self.getTypedRuleContext(YQLParser.Json_variablesContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_json_common_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_common_args" ):
                listener.enterJson_common_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_common_args" ):
                listener.exitJson_common_args(self)




    def json_common_args(self):

        localctx = YQLParser.Json_common_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_json_common_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.expr()
            self.state = 1419
            self.match(YQLParser.COMMA)
            self.state = 1420
            self.jsonpath_spec()
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==220:
                self.state = 1421
                self.match(YQLParser.PASSING)
                self.state = 1422
                self.json_variables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_case_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(YQLParser.ERROR, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(YQLParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_json_case_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_case_handler" ):
                listener.enterJson_case_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_case_handler" ):
                listener.exitJson_case_handler(self)




    def json_case_handler(self):

        localctx = YQLParser.Json_case_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_json_case_handler)
        try:
            self.state = 1429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [120]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1425
                self.match(YQLParser.ERROR)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1426
                self.match(YQLParser.NULL)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1427
                self.match(YQLParser.DEFAULT)
                self.state = 1428
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_VALUE(self):
            return self.getToken(YQLParser.JSON_VALUE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def json_common_args(self):
            return self.getTypedRuleContext(YQLParser.Json_common_argsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def RETURNING(self):
            return self.getToken(YQLParser.RETURNING, 0)

        def type_name_simple(self):
            return self.getTypedRuleContext(YQLParser.Type_name_simpleContext,0)


        def json_case_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Json_case_handlerContext)
            else:
                return self.getTypedRuleContext(YQLParser.Json_case_handlerContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ON)
            else:
                return self.getToken(YQLParser.ON, i)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.EMPTY)
            else:
                return self.getToken(YQLParser.EMPTY, i)

        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ERROR)
            else:
                return self.getToken(YQLParser.ERROR, i)

        def getRuleIndex(self):
            return YQLParser.RULE_json_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_value" ):
                listener.enterJson_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_value" ):
                listener.exitJson_value(self)




    def json_value(self):

        localctx = YQLParser.Json_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_json_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(YQLParser.JSON_VALUE)
            self.state = 1432
            self.match(YQLParser.LPAREN)
            self.state = 1433
            self.json_common_args()
            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 1434
                self.match(YQLParser.RETURNING)
                self.state = 1435
                self.type_name_simple()


            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97 or _la==120 or _la==201:
                self.state = 1438
                self.json_case_handler()
                self.state = 1439
                self.match(YQLParser.ON)
                self.state = 1440
                _la = self._input.LA(1)
                if not(_la==114 or _la==120):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1447
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_exists_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ERROR)
            else:
                return self.getToken(YQLParser.ERROR, i)

        def TRUE(self):
            return self.getToken(YQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(YQLParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(YQLParser.UNKNOWN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_json_exists_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_exists_handler" ):
                listener.enterJson_exists_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_exists_handler" ):
                listener.exitJson_exists_handler(self)




    def json_exists_handler(self):

        localctx = YQLParser.Json_exists_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_json_exists_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            _la = self._input.LA(1)
            if not(_la==120 or _la==132 or _la==301 or _la==308):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1450
            self.match(YQLParser.ON)
            self.state = 1451
            self.match(YQLParser.ERROR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_EXISTS(self):
            return self.getToken(YQLParser.JSON_EXISTS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def json_common_args(self):
            return self.getTypedRuleContext(YQLParser.Json_common_argsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def json_exists_handler(self):
            return self.getTypedRuleContext(YQLParser.Json_exists_handlerContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_json_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_exists" ):
                listener.enterJson_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_exists" ):
                listener.exitJson_exists(self)




    def json_exists(self):

        localctx = YQLParser.Json_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_json_exists)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(YQLParser.JSON_EXISTS)
            self.state = 1454
            self.match(YQLParser.LPAREN)
            self.state = 1455
            self.json_common_args()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120 or _la==132 or _la==301 or _la==308:
                self.state = 1456
                self.json_exists_handler()


            self.state = 1459
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_query_wrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT(self):
            return self.getToken(YQLParser.WITHOUT, 0)

        def ARRAY(self):
            return self.getToken(YQLParser.ARRAY, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def CONDITIONAL(self):
            return self.getToken(YQLParser.CONDITIONAL, 0)

        def UNCONDITIONAL(self):
            return self.getToken(YQLParser.UNCONDITIONAL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_json_query_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_query_wrapper" ):
                listener.enterJson_query_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_query_wrapper" ):
                listener.exitJson_query_wrapper(self)




    def json_query_wrapper(self):

        localctx = YQLParser.Json_query_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_json_query_wrapper)
        self._la = 0 # Token type
        try:
            self.state = 1472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [324]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1461
                self.match(YQLParser.WITHOUT)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1462
                    self.match(YQLParser.ARRAY)


                pass
            elif token in [323]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.match(YQLParser.WITH)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==305:
                    self.state = 1466
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==305):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1469
                    self.match(YQLParser.ARRAY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_query_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(YQLParser.ERROR, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def EMPTY(self):
            return self.getToken(YQLParser.EMPTY, 0)

        def ARRAY(self):
            return self.getToken(YQLParser.ARRAY, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_json_query_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_query_handler" ):
                listener.enterJson_query_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_query_handler" ):
                listener.exitJson_query_handler(self)




    def json_query_handler(self):

        localctx = YQLParser.Json_query_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_json_query_handler)
        try:
            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1474
                self.match(YQLParser.ERROR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                self.match(YQLParser.NULL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1476
                self.match(YQLParser.EMPTY)
                self.state = 1477
                self.match(YQLParser.ARRAY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1478
                self.match(YQLParser.EMPTY)
                self.state = 1479
                self.match(YQLParser.OBJECT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_QUERY(self):
            return self.getToken(YQLParser.JSON_QUERY, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def json_common_args(self):
            return self.getTypedRuleContext(YQLParser.Json_common_argsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def json_query_wrapper(self):
            return self.getTypedRuleContext(YQLParser.Json_query_wrapperContext,0)


        def WRAPPER(self):
            return self.getToken(YQLParser.WRAPPER, 0)

        def json_query_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Json_query_handlerContext)
            else:
                return self.getTypedRuleContext(YQLParser.Json_query_handlerContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ON)
            else:
                return self.getToken(YQLParser.ON, i)

        def EMPTY(self):
            return self.getToken(YQLParser.EMPTY, 0)

        def ERROR(self):
            return self.getToken(YQLParser.ERROR, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_json_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_query" ):
                listener.enterJson_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_query" ):
                listener.exitJson_query(self)




    def json_query(self):

        localctx = YQLParser.Json_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_json_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(YQLParser.JSON_QUERY)
            self.state = 1483
            self.match(YQLParser.LPAREN)
            self.state = 1484
            self.json_common_args()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323 or _la==324:
                self.state = 1485
                self.json_query_wrapper()
                self.state = 1486
                self.match(YQLParser.WRAPPER)


            self.state = 1494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1490
                self.json_query_handler()
                self.state = 1491
                self.match(YQLParser.ON)
                self.state = 1492
                self.match(YQLParser.EMPTY)


            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==120 or _la==201:
                self.state = 1496
                self.json_query_handler()
                self.state = 1497
                self.match(YQLParser.ON)
                self.state = 1498
                self.match(YQLParser.ERROR)


            self.state = 1502
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Smart_parenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def named_expr_list(self):
            return self.getTypedRuleContext(YQLParser.Named_expr_listContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_smart_parenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmart_parenthesis" ):
                listener.enterSmart_parenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmart_parenthesis" ):
                listener.exitSmart_parenthesis(self)




    def smart_parenthesis(self):

        localctx = YQLParser.Smart_parenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_smart_parenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(YQLParser.LPAREN)
            self.state = 1506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                self.state = 1505
                self.named_expr_list()


            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1508
                self.match(YQLParser.COMMA)


            self.state = 1511
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = YQLParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.expr()
            self.state = 1518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1514
                    self.match(YQLParser.COMMA)
                    self.state = 1515
                    self.expr() 
                self.state = 1520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pure_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_pure_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPure_column_list" ):
                listener.enterPure_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPure_column_list" ):
                listener.exitPure_column_list(self)




    def pure_column_list(self):

        localctx = YQLParser.Pure_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pure_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(YQLParser.LPAREN)
            self.state = 1522
            self.an_id()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1523
                self.match(YQLParser.COMMA)
                self.state = 1524
                self.an_id()
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1530
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pure_column_or_namedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_pure_column_or_named

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPure_column_or_named" ):
                listener.enterPure_column_or_named(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPure_column_or_named" ):
                listener.exitPure_column_or_named(self)




    def pure_column_or_named(self):

        localctx = YQLParser.Pure_column_or_namedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pure_column_or_named)
        try:
            self.state = 1534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.bind_parameter()
                pass
            elif token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.an_id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pure_column_or_named_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def pure_column_or_named(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Pure_column_or_namedContext)
            else:
                return self.getTypedRuleContext(YQLParser.Pure_column_or_namedContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_pure_column_or_named_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPure_column_or_named_list" ):
                listener.enterPure_column_or_named_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPure_column_or_named_list" ):
                listener.exitPure_column_or_named_list(self)




    def pure_column_or_named_list(self):

        localctx = YQLParser.Pure_column_or_named_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_pure_column_or_named_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(YQLParser.LPAREN)
            self.state = 1537
            self.pure_column_or_named()
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1538
                self.match(YQLParser.COMMA)
                self.state = 1539
                self.pure_column_or_named()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1545
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_id_prefix(self):
            return self.getTypedRuleContext(YQLParser.Opt_id_prefixContext,0)


        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = YQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.opt_id_prefix()
            self.state = 1548
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Without_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def an_id_without(self):
            return self.getTypedRuleContext(YQLParser.An_id_withoutContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_without_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithout_column_name" ):
                listener.enterWithout_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithout_column_name" ):
                listener.exitWithout_column_name(self)




    def without_column_name(self):

        localctx = YQLParser.Without_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_without_column_name)
        try:
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1550
                self.an_id()
                self.state = 1551
                self.match(YQLParser.DOT)
                self.state = 1552
                self.an_id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.an_id_without()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = YQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.column_name()
            self.state = 1562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1558
                    self.match(YQLParser.COMMA)
                    self.state = 1559
                    self.column_name() 
                self.state = 1564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1565
                self.match(YQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Without_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def without_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Without_column_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Without_column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_without_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithout_column_list" ):
                listener.enterWithout_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithout_column_list" ):
                listener.exitWithout_column_list(self)




    def without_column_list(self):

        localctx = YQLParser.Without_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_without_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self.without_column_name()
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1569
                    self.match(YQLParser.COMMA)
                    self.state = 1570
                    self.without_column_name() 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1576
                self.match(YQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_named_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_expr" ):
                listener.enterNamed_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_expr" ):
                listener.exitNamed_expr(self)




    def named_expr(self):

        localctx = YQLParser.Named_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_named_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.expr()
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1580
                self.match(YQLParser.AS)
                self.state = 1581
                self.an_id_or_type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Named_exprContext)
            else:
                return self.getTypedRuleContext(YQLParser.Named_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_named_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_expr_list" ):
                listener.enterNamed_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_expr_list" ):
                listener.exitNamed_expr_list(self)




    def named_expr_list(self):

        localctx = YQLParser.Named_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_named_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.named_expr()
            self.state = 1589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1585
                    self.match(YQLParser.COMMA)
                    self.state = 1586
                    self.named_expr() 
                self.state = 1591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invoke_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def invoke_expr_tail(self):
            return self.getTypedRuleContext(YQLParser.Invoke_expr_tailContext,0)


        def opt_set_quantifier(self):
            return self.getTypedRuleContext(YQLParser.Opt_set_quantifierContext,0)


        def named_expr_list(self):
            return self.getTypedRuleContext(YQLParser.Named_expr_listContext,0)


        def ASTERISK(self):
            return self.getToken(YQLParser.ASTERISK, 0)

        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_invoke_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoke_expr" ):
                listener.enterInvoke_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoke_expr" ):
                listener.exitInvoke_expr(self)




    def invoke_expr(self):

        localctx = YQLParser.Invoke_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_invoke_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(YQLParser.LPAREN)
            self.state = 1599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 16, 17, 18, 25, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333]:
                self.state = 1593
                self.opt_set_quantifier()
                self.state = 1594
                self.named_expr_list()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 1595
                    self.match(YQLParser.COMMA)


                pass
            elif token in [19]:
                self.state = 1598
                self.match(YQLParser.ASTERISK)
                pass
            elif token in [26]:
                pass
            else:
                pass
            self.state = 1601
            self.match(YQLParser.RPAREN)
            self.state = 1602
            self.invoke_expr_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invoke_expr_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_treatment(self):
            return self.getTypedRuleContext(YQLParser.Null_treatmentContext,0)


        def filter_clause(self):
            return self.getTypedRuleContext(YQLParser.Filter_clauseContext,0)


        def OVER(self):
            return self.getToken(YQLParser.OVER, 0)

        def window_name_or_specification(self):
            return self.getTypedRuleContext(YQLParser.Window_name_or_specificationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_invoke_expr_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoke_expr_tail" ):
                listener.enterInvoke_expr_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoke_expr_tail" ):
                listener.exitInvoke_expr_tail(self)




    def invoke_expr_tail(self):

        localctx = YQLParser.Invoke_expr_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_invoke_expr_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1604
                self.null_treatment()

            elif la_ == 2:
                self.state = 1605
                self.filter_clause()


            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 1608
                self.match(YQLParser.OVER)
                self.state = 1609
                self.window_name_or_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_call_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def invoke_expr(self):
            return self.getTypedRuleContext(YQLParser.Invoke_exprContext,0)


        def an_id_or_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_or_typeContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,i)


        def NAMESPACE(self):
            return self.getToken(YQLParser.NAMESPACE, 0)

        def an_id_expr(self):
            return self.getTypedRuleContext(YQLParser.An_id_exprContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def FUNCTION(self):
            return self.getToken(YQLParser.FUNCTION, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_using_call_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_call_expr" ):
                listener.enterUsing_call_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_call_expr" ):
                listener.exitUsing_call_expr(self)




    def using_call_expr(self):

        localctx = YQLParser.Using_call_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_using_call_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1612
                self.an_id_or_type()
                self.state = 1613
                self.match(YQLParser.NAMESPACE)
                self.state = 1614
                self.an_id_or_type()
                pass

            elif la_ == 2:
                self.state = 1616
                self.an_id_expr()
                pass

            elif la_ == 3:
                self.state = 1617
                self.bind_parameter()
                pass

            elif la_ == 4:
                self.state = 1618
                self.match(YQLParser.EXTERNAL)
                self.state = 1619
                self.match(YQLParser.FUNCTION)
                pass


            self.state = 1622
            self.invoke_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE_SQUARE(self):
            return self.getToken(YQLParser.LBRACE_SQUARE, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def RBRACE_SQUARE(self):
            return self.getToken(YQLParser.RBRACE_SQUARE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_key_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_expr" ):
                listener.enterKey_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_expr" ):
                listener.exitKey_expr(self)




    def key_expr(self):

        localctx = YQLParser.Key_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_key_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.match(YQLParser.LBRACE_SQUARE)
            self.state = 1625
            self.expr()
            self.state = 1626
            self.match(YQLParser.RBRACE_SQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(YQLParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def THEN(self):
            return self.getToken(YQLParser.THEN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_when_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_expr" ):
                listener.enterWhen_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_expr" ):
                listener.exitWhen_expr(self)




    def when_expr(self):

        localctx = YQLParser.When_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_when_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(YQLParser.WHEN)
            self.state = 1629
            self.expr()
            self.state = 1630
            self.match(YQLParser.THEN)
            self.state = 1631
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def real(self):
            return self.getTypedRuleContext(YQLParser.RealContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def BLOB(self):
            return self.getToken(YQLParser.BLOB, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def CURRENT_TIME(self):
            return self.getToken(YQLParser.CURRENT_TIME, 0)

        def CURRENT_DATE(self):
            return self.getToken(YQLParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(YQLParser.CURRENT_TIMESTAMP, 0)

        def bool_value(self):
            return self.getTypedRuleContext(YQLParser.Bool_valueContext,0)


        def EMPTY_ACTION(self):
            return self.getToken(YQLParser.EMPTY_ACTION, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = YQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal_value)
        try:
            self.state = 1643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330, 331]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1633
                self.integer()
                pass
            elif token in [332]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1634
                self.real()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1635
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [333]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1636
                self.match(YQLParser.BLOB)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1637
                self.match(YQLParser.NULL)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1638
                self.match(YQLParser.CURRENT_TIME)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1639
                self.match(YQLParser.CURRENT_DATE)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1640
                self.match(YQLParser.CURRENT_TIMESTAMP)
                pass
            elif token in [132, 301]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1641
                self.bool_value()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1642
                self.match(YQLParser.EMPTY_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(YQLParser.DOLLAR, 0)

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def TRUE(self):
            return self.getToken(YQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(YQLParser.FALSE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_bind_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_parameter" ):
                listener.enterBind_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_parameter" ):
                listener.exitBind_parameter(self)




    def bind_parameter(self):

        localctx = YQLParser.Bind_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_bind_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(YQLParser.DOLLAR)
            self.state = 1649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.state = 1646
                self.an_id_or_type()
                pass
            elif token in [301]:
                self.state = 1647
                self.match(YQLParser.TRUE)
                pass
            elif token in [132]:
                self.state = 1648
                self.match(YQLParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_bind_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def QUESTION(self):
            return self.getToken(YQLParser.QUESTION, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_opt_bind_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_bind_parameter" ):
                listener.enterOpt_bind_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_bind_parameter" ):
                listener.exitOpt_bind_parameter(self)




    def opt_bind_parameter(self):

        localctx = YQLParser.Opt_bind_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_opt_bind_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.bind_parameter()
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1652
                self.match(YQLParser.QUESTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bind_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Bind_parameterContext)
            else:
                return self.getTypedRuleContext(YQLParser.Bind_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_bind_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_parameter_list" ):
                listener.enterBind_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_parameter_list" ):
                listener.exitBind_parameter_list(self)




    def bind_parameter_list(self):

        localctx = YQLParser.Bind_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_bind_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.bind_parameter()
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1656
                self.match(YQLParser.COMMA)
                self.state = 1657
                self.bind_parameter()
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_bind_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bind_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Bind_parameterContext)
            else:
                return self.getTypedRuleContext(YQLParser.Bind_parameterContext,i)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_named_bind_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_bind_parameter" ):
                listener.enterNamed_bind_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_bind_parameter" ):
                listener.exitNamed_bind_parameter(self)




    def named_bind_parameter(self):

        localctx = YQLParser.Named_bind_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_named_bind_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.bind_parameter()
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1664
                self.match(YQLParser.AS)
                self.state = 1665
                self.bind_parameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_bind_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_bind_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Named_bind_parameterContext)
            else:
                return self.getTypedRuleContext(YQLParser.Named_bind_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_named_bind_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_bind_parameter_list" ):
                listener.enterNamed_bind_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_bind_parameter_list" ):
                listener.exitNamed_bind_parameter_list(self)




    def named_bind_parameter_list(self):

        localctx = YQLParser.Named_bind_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_named_bind_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.named_bind_parameter()
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1669
                self.match(YQLParser.COMMA)
                self.state = 1670
                self.named_bind_parameter()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def real(self):
            return self.getTypedRuleContext(YQLParser.RealContext,0)


        def PLUS(self):
            return self.getToken(YQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(YQLParser.MINUS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = YQLParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16 or _la==17:
                self.state = 1676
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330, 331]:
                self.state = 1679
                self.integer()
                pass
            elif token in [332]:
                self.state = 1680
                self.real()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_simpleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_pure(self):
            return self.getTypedRuleContext(YQLParser.An_id_pureContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_type_name_simple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_simple" ):
                listener.enterType_name_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_simple" ):
                listener.exitType_name_simple(self)




    def type_name_simple(self):

        localctx = YQLParser.Type_name_simpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_type_name_simple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.an_id_pure()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_or_bindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_integer_or_bind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_or_bind" ):
                listener.enterInteger_or_bind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_or_bind" ):
                listener.exitInteger_or_bind(self)




    def integer_or_bind(self):

        localctx = YQLParser.Integer_or_bindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_integer_or_bind)
        try:
            self.state = 1687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330, 331]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1685
                self.integer()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1686
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(YQLParser.IdContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_type_name_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_tag" ):
                listener.enterType_name_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_tag" ):
                listener.exitType_name_tag(self)




    def type_name_tag(self):

        localctx = YQLParser.Type_name_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_type_name_tag)
        try:
            self.state = 1692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1689
                self.id_()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1691
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name_tag(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tagContext,0)


        def COLON(self):
            return self.getToken(YQLParser.COLON, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_struct_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_arg" ):
                listener.enterStruct_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_arg" ):
                listener.exitStruct_arg(self)




    def struct_arg(self):

        localctx = YQLParser.Struct_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_struct_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.type_name_tag()
            self.state = 1695
            self.match(YQLParser.COLON)
            self.state = 1696
            self.type_name_or_bind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_arg_positionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name_tag(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tagContext,0)


        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_struct_arg_positional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_arg_positional" ):
                listener.enterStruct_arg_positional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_arg_positional" ):
                listener.exitStruct_arg_positional(self)




    def struct_arg_positional(self):

        localctx = YQLParser.Struct_arg_positionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_struct_arg_positional)
        self._la = 0 # Token type
        try:
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.type_name_tag()
                self.state = 1699
                self.type_name_or_bind()
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199 or _la==201:
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==199:
                        self.state = 1700
                        self.match(YQLParser.NOT)


                    self.state = 1703
                    self.match(YQLParser.NULL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.type_name_or_bind()
                self.state = 1707
                self.match(YQLParser.AS)
                self.state = 1708
                self.type_name_tag()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variant_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def type_name_tag(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tagContext,0)


        def COLON(self):
            return self.getToken(YQLParser.COLON, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_variant_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_arg" ):
                listener.enterVariant_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_arg" ):
                listener.exitVariant_arg(self)




    def variant_arg(self):

        localctx = YQLParser.Variant_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_variant_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1712
                self.type_name_tag()
                self.state = 1713
                self.match(YQLParser.COLON)


            self.state = 1717
            self.type_name_or_bind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Callable_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variant_arg(self):
            return self.getTypedRuleContext(YQLParser.Variant_argContext,0)


        def LBRACE_CURLY(self):
            return self.getToken(YQLParser.LBRACE_CURLY, 0)

        def AUTOMAP(self):
            return self.getToken(YQLParser.AUTOMAP, 0)

        def RBRACE_CURLY(self):
            return self.getToken(YQLParser.RBRACE_CURLY, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_callable_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallable_arg" ):
                listener.enterCallable_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallable_arg" ):
                listener.exitCallable_arg(self)




    def callable_arg(self):

        localctx = YQLParser.Callable_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_callable_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.variant_arg()
            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 1720
                self.match(YQLParser.LBRACE_CURLY)
                self.state = 1721
                self.match(YQLParser.AUTOMAP)
                self.state = 1722
                self.match(YQLParser.RBRACE_CURLY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Callable_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callable_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Callable_argContext)
            else:
                return self.getTypedRuleContext(YQLParser.Callable_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_callable_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallable_arg_list" ):
                listener.enterCallable_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallable_arg_list" ):
                listener.exitCallable_arg_list(self)




    def callable_arg_list(self):

        localctx = YQLParser.Callable_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_callable_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.callable_arg()
            self.state = 1730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1726
                    self.match(YQLParser.COMMA)
                    self.state = 1727
                    self.callable_arg() 
                self.state = 1732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_decimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(YQLParser.DECIMAL, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def integer_or_bind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Integer_or_bindContext)
            else:
                return self.getTypedRuleContext(YQLParser.Integer_or_bindContext,i)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_decimal" ):
                listener.enterType_name_decimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_decimal" ):
                listener.exitType_name_decimal(self)




    def type_name_decimal(self):

        localctx = YQLParser.Type_name_decimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_type_name_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(YQLParser.DECIMAL)
            self.state = 1734
            self.match(YQLParser.LPAREN)
            self.state = 1735
            self.integer_or_bind()
            self.state = 1736
            self.match(YQLParser.COMMA)
            self.state = 1737
            self.integer_or_bind()
            self.state = 1738
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_optionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(YQLParser.OPTIONAL, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_optional" ):
                listener.enterType_name_optional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_optional" ):
                listener.exitType_name_optional(self)




    def type_name_optional(self):

        localctx = YQLParser.Type_name_optionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_type_name_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(YQLParser.OPTIONAL)
            self.state = 1741
            self.match(YQLParser.LESS)
            self.state = 1742
            self.type_name_or_bind()
            self.state = 1743
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TUPLE(self):
            return self.getToken(YQLParser.TUPLE, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def NOT_EQUALS2(self):
            return self.getToken(YQLParser.NOT_EQUALS2, 0)

        def type_name_or_bind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Type_name_or_bindContext)
            else:
                return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_tuple" ):
                listener.enterType_name_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_tuple" ):
                listener.exitType_name_tuple(self)




    def type_name_tuple(self):

        localctx = YQLParser.Type_name_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_type_name_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(YQLParser.TUPLE)
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.state = 1746
                self.match(YQLParser.LESS)
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 1126037480013825) != 0) or _la==137 or _la==183 or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & 2305843284091600897) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & 1970599723274243) != 0):
                    self.state = 1747
                    self.type_name_or_bind()
                    self.state = 1752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1748
                            self.match(YQLParser.COMMA)
                            self.state = 1749
                            self.type_name_or_bind() 
                        self.state = 1754
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                    self.state = 1756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==24:
                        self.state = 1755
                        self.match(YQLParser.COMMA)




                self.state = 1760
                self.match(YQLParser.GREATER)
                pass
            elif token in [4]:
                self.state = 1761
                self.match(YQLParser.NOT_EQUALS2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_structContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(YQLParser.STRUCT, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def NOT_EQUALS2(self):
            return self.getToken(YQLParser.NOT_EQUALS2, 0)

        def struct_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Struct_argContext)
            else:
                return self.getTypedRuleContext(YQLParser.Struct_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_struct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_struct" ):
                listener.enterType_name_struct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_struct" ):
                listener.exitType_name_struct(self)




    def type_name_struct(self):

        localctx = YQLParser.Type_name_structContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_type_name_struct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(YQLParser.STRUCT)
            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.state = 1765
                self.match(YQLParser.LESS)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & -275146342655) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & -9070987708417) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & -9007199288295425) != 0) or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & -289356276201160705) != 0) or ((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & 17590038462431) != 0):
                    self.state = 1766
                    self.struct_arg()
                    self.state = 1771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1767
                            self.match(YQLParser.COMMA)
                            self.state = 1768
                            self.struct_arg() 
                        self.state = 1773
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==24:
                        self.state = 1774
                        self.match(YQLParser.COMMA)




                self.state = 1779
                self.match(YQLParser.GREATER)
                pass
            elif token in [4]:
                self.state = 1780
                self.match(YQLParser.NOT_EQUALS2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_variantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIANT(self):
            return self.getToken(YQLParser.VARIANT, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def variant_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Variant_argContext)
            else:
                return self.getTypedRuleContext(YQLParser.Variant_argContext,i)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_variant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_variant" ):
                listener.enterType_name_variant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_variant" ):
                listener.exitType_name_variant(self)




    def type_name_variant(self):

        localctx = YQLParser.Type_name_variantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_type_name_variant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.match(YQLParser.VARIANT)
            self.state = 1784
            self.match(YQLParser.LESS)
            self.state = 1785
            self.variant_arg()
            self.state = 1790
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1786
                    self.match(YQLParser.COMMA)
                    self.state = 1787
                    self.variant_arg() 
                self.state = 1792
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1793
                self.match(YQLParser.COMMA)


            self.state = 1796
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(YQLParser.LIST, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_list" ):
                listener.enterType_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_list" ):
                listener.exitType_name_list(self)




    def type_name_list(self):

        localctx = YQLParser.Type_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_type_name_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.match(YQLParser.LIST)
            self.state = 1799
            self.match(YQLParser.LESS)
            self.state = 1800
            self.type_name_or_bind()
            self.state = 1801
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_streamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STREAM(self):
            return self.getToken(YQLParser.STREAM, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_stream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_stream" ):
                listener.enterType_name_stream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_stream" ):
                listener.exitType_name_stream(self)




    def type_name_stream(self):

        localctx = YQLParser.Type_name_streamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_type_name_stream)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(YQLParser.STREAM)
            self.state = 1804
            self.match(YQLParser.LESS)
            self.state = 1805
            self.type_name_or_bind()
            self.state = 1806
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_flowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOW(self):
            return self.getToken(YQLParser.FLOW, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_flow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_flow" ):
                listener.enterType_name_flow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_flow" ):
                listener.exitType_name_flow(self)




    def type_name_flow(self):

        localctx = YQLParser.Type_name_flowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_type_name_flow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.match(YQLParser.FLOW)
            self.state = 1809
            self.match(YQLParser.LESS)
            self.state = 1810
            self.type_name_or_bind()
            self.state = 1811
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_dictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DICT(self):
            return self.getToken(YQLParser.DICT, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Type_name_or_bindContext)
            else:
                return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,i)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_dict" ):
                listener.enterType_name_dict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_dict" ):
                listener.exitType_name_dict(self)




    def type_name_dict(self):

        localctx = YQLParser.Type_name_dictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_type_name_dict)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(YQLParser.DICT)
            self.state = 1814
            self.match(YQLParser.LESS)
            self.state = 1815
            self.type_name_or_bind()
            self.state = 1816
            self.match(YQLParser.COMMA)
            self.state = 1817
            self.type_name_or_bind()
            self.state = 1818
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_set" ):
                listener.enterType_name_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_set" ):
                listener.exitType_name_set(self)




    def type_name_set(self):

        localctx = YQLParser.Type_name_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_type_name_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(YQLParser.SET)
            self.state = 1821
            self.match(YQLParser.LESS)
            self.state = 1822
            self.type_name_or_bind()
            self.state = 1823
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_enumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(YQLParser.ENUM, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Type_name_tagContext)
            else:
                return self.getTypedRuleContext(YQLParser.Type_name_tagContext,i)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_enum" ):
                listener.enterType_name_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_enum" ):
                listener.exitType_name_enum(self)




    def type_name_enum(self):

        localctx = YQLParser.Type_name_enumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_type_name_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(YQLParser.ENUM)
            self.state = 1826
            self.match(YQLParser.LESS)
            self.state = 1827
            self.type_name_tag()
            self.state = 1832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1828
                    self.match(YQLParser.COMMA)
                    self.state = 1829
                    self.type_name_tag() 
                self.state = 1834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1835
                self.match(YQLParser.COMMA)


            self.state = 1838
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_resourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_tag(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tagContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_resource" ):
                listener.enterType_name_resource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_resource" ):
                listener.exitType_name_resource(self)




    def type_name_resource(self):

        localctx = YQLParser.Type_name_resourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_type_name_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(YQLParser.RESOURCE)
            self.state = 1841
            self.match(YQLParser.LESS)
            self.state = 1842
            self.type_name_tag()
            self.state = 1843
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_taggedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGGED(self):
            return self.getToken(YQLParser.TAGGED, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def type_name_tag(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tagContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_tagged

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_tagged" ):
                listener.enterType_name_tagged(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_tagged" ):
                listener.exitType_name_tagged(self)




    def type_name_tagged(self):

        localctx = YQLParser.Type_name_taggedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_type_name_tagged)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(YQLParser.TAGGED)
            self.state = 1846
            self.match(YQLParser.LESS)
            self.state = 1847
            self.type_name_or_bind()
            self.state = 1848
            self.match(YQLParser.COMMA)
            self.state = 1849
            self.type_name_tag()
            self.state = 1850
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_callableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLABLE(self):
            return self.getToken(YQLParser.CALLABLE, 0)

        def LESS(self):
            return self.getToken(YQLParser.LESS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def ARROW(self):
            return self.getToken(YQLParser.ARROW, 0)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def GREATER(self):
            return self.getToken(YQLParser.GREATER, 0)

        def callable_arg_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Callable_arg_listContext)
            else:
                return self.getTypedRuleContext(YQLParser.Callable_arg_listContext,i)


        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def LBRACE_SQUARE(self):
            return self.getToken(YQLParser.LBRACE_SQUARE, 0)

        def RBRACE_SQUARE(self):
            return self.getToken(YQLParser.RBRACE_SQUARE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_callable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_callable" ):
                listener.enterType_name_callable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_callable" ):
                listener.exitType_name_callable(self)




    def type_name_callable(self):

        localctx = YQLParser.Type_name_callableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_type_name_callable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(YQLParser.CALLABLE)
            self.state = 1853
            self.match(YQLParser.LESS)
            self.state = 1854
            self.match(YQLParser.LPAREN)
            self.state = 1856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & -268435711) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & -274877906945) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & -1) != 0) or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & -8388609) != 0) or ((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & 17592186011647) != 0):
                self.state = 1855
                self.callable_arg_list()


            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1858
                self.match(YQLParser.COMMA)


            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1861
                self.match(YQLParser.LBRACE_SQUARE)
                self.state = 1862
                self.callable_arg_list()
                self.state = 1863
                self.match(YQLParser.RBRACE_SQUARE)


            self.state = 1867
            self.match(YQLParser.RPAREN)
            self.state = 1868
            self.match(YQLParser.ARROW)
            self.state = 1869
            self.type_name_or_bind()
            self.state = 1870
            self.match(YQLParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_compositeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name_optional(self):
            return self.getTypedRuleContext(YQLParser.Type_name_optionalContext,0)


        def type_name_tuple(self):
            return self.getTypedRuleContext(YQLParser.Type_name_tupleContext,0)


        def type_name_struct(self):
            return self.getTypedRuleContext(YQLParser.Type_name_structContext,0)


        def type_name_variant(self):
            return self.getTypedRuleContext(YQLParser.Type_name_variantContext,0)


        def type_name_list(self):
            return self.getTypedRuleContext(YQLParser.Type_name_listContext,0)


        def type_name_stream(self):
            return self.getTypedRuleContext(YQLParser.Type_name_streamContext,0)


        def type_name_flow(self):
            return self.getTypedRuleContext(YQLParser.Type_name_flowContext,0)


        def type_name_dict(self):
            return self.getTypedRuleContext(YQLParser.Type_name_dictContext,0)


        def type_name_set(self):
            return self.getTypedRuleContext(YQLParser.Type_name_setContext,0)


        def type_name_enum(self):
            return self.getTypedRuleContext(YQLParser.Type_name_enumContext,0)


        def type_name_resource(self):
            return self.getTypedRuleContext(YQLParser.Type_name_resourceContext,0)


        def type_name_tagged(self):
            return self.getTypedRuleContext(YQLParser.Type_name_taggedContext,0)


        def type_name_callable(self):
            return self.getTypedRuleContext(YQLParser.Type_name_callableContext,0)


        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.QUESTION)
            else:
                return self.getToken(YQLParser.QUESTION, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name_composite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_composite" ):
                listener.enterType_name_composite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_composite" ):
                listener.exitType_name_composite(self)




    def type_name_composite(self):

        localctx = YQLParser.Type_name_compositeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_type_name_composite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 1872
                self.type_name_optional()
                pass
            elif token in [302]:
                self.state = 1873
                self.type_name_tuple()
                pass
            elif token in [280]:
                self.state = 1874
                self.type_name_struct()
                pass
            elif token in [317]:
                self.state = 1875
                self.type_name_variant()
                pass
            elif token in [183]:
                self.state = 1876
                self.type_name_list()
                pass
            elif token in [279]:
                self.state = 1877
                self.type_name_stream()
                pass
            elif token in [137]:
                self.state = 1878
                self.type_name_flow()
                pass
            elif token in [105]:
                self.state = 1879
                self.type_name_dict()
                pass
            elif token in [272]:
                self.state = 1880
                self.type_name_set()
                pass
            elif token in [118]:
                self.state = 1881
                self.type_name_enum()
                pass
            elif token in [249]:
                self.state = 1882
                self.type_name_resource()
                pass
            elif token in [291]:
                self.state = 1883
                self.type_name_tagged()
                pass
            elif token in [68]:
                self.state = 1884
                self.type_name_callable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 1887
                self.match(YQLParser.QUESTION)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name_composite(self):
            return self.getTypedRuleContext(YQLParser.Type_name_compositeContext,0)


        def type_name_decimal(self):
            return self.getTypedRuleContext(YQLParser.Type_name_decimalContext,0)


        def type_name_simple(self):
            return self.getTypedRuleContext(YQLParser.Type_name_simpleContext,0)


        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.QUESTION)
            else:
                return self.getToken(YQLParser.QUESTION, i)

        def getRuleIndex(self):
            return YQLParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = YQLParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.state = 1904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 105, 118, 137, 183, 211, 249, 272, 279, 280, 291, 302, 317]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1893
                self.type_name_composite()
                pass
            elif token in [95, 327, 328, 329]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [95]:
                    self.state = 1894
                    self.type_name_decimal()
                    pass
                elif token in [327, 328, 329]:
                    self.state = 1895
                    self.type_name_simple()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 1898
                    self.match(YQLParser.QUESTION)
                    self.state = 1903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_or_bindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(YQLParser.Type_nameContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_type_name_or_bind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_or_bind" ):
                listener.enterType_name_or_bind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_or_bind" ):
                listener.exitType_name_or_bind(self)




    def type_name_or_bind(self):

        localctx = YQLParser.Type_name_or_bindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_name_or_bind)
        try:
            self.state = 1908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 95, 105, 118, 137, 183, 211, 249, 272, 279, 280, 291, 302, 317, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.type_name()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_constructor_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_value_constructor_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_constructor_literal" ):
                listener.enterValue_constructor_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_constructor_literal" ):
                listener.exitValue_constructor_literal(self)




    def value_constructor_literal(self):

        localctx = YQLParser.Value_constructor_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_value_constructor_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.match(YQLParser.STRING_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIANT(self):
            return self.getToken(YQLParser.VARIANT, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def ENUM(self):
            return self.getToken(YQLParser.ENUM, 0)

        def CALLABLE(self):
            return self.getToken(YQLParser.CALLABLE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_constructor" ):
                listener.enterValue_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_constructor" ):
                listener.exitValue_constructor(self)




    def value_constructor(self):

        localctx = YQLParser.Value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_value_constructor)
        try:
            self.state = 1935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [317]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1912
                self.match(YQLParser.VARIANT)
                self.state = 1913
                self.match(YQLParser.LPAREN)
                self.state = 1914
                self.expr()
                self.state = 1915
                self.match(YQLParser.COMMA)
                self.state = 1916
                self.expr()
                self.state = 1917
                self.match(YQLParser.COMMA)
                self.state = 1918
                self.expr()
                self.state = 1919
                self.match(YQLParser.RPAREN)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1921
                self.match(YQLParser.ENUM)
                self.state = 1922
                self.match(YQLParser.LPAREN)
                self.state = 1923
                self.expr()
                self.state = 1924
                self.match(YQLParser.COMMA)
                self.state = 1925
                self.expr()
                self.state = 1926
                self.match(YQLParser.RPAREN)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1928
                self.match(YQLParser.CALLABLE)
                self.state = 1929
                self.match(YQLParser.LPAREN)
                self.state = 1930
                self.expr()
                self.state = 1931
                self.match(YQLParser.COMMA)
                self.state = 1932
                self.expr()
                self.state = 1933
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(YQLParser.DECLARE, 0)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(YQLParser.Type_nameContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def literal_value(self):
            return self.getTypedRuleContext(YQLParser.Literal_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_declare_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_stmt" ):
                listener.enterDeclare_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_stmt" ):
                listener.exitDeclare_stmt(self)




    def declare_stmt(self):

        localctx = YQLParser.Declare_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_declare_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.match(YQLParser.DECLARE)
            self.state = 1938
            self.bind_parameter()
            self.state = 1939
            self.match(YQLParser.AS)
            self.state = 1940
            self.type_name()
            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1941
                self.match(YQLParser.EQUALS)
                self.state = 1942
                self.literal_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.DOT)
            else:
                return self.getToken(YQLParser.DOT, i)

        def getRuleIndex(self):
            return YQLParser.RULE_module_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_path" ):
                listener.enterModule_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_path" ):
                listener.exitModule_path(self)




    def module_path(self):

        localctx = YQLParser.Module_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_module_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1945
                self.match(YQLParser.DOT)


            self.state = 1948
            self.an_id()
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 1949
                self.match(YQLParser.DOT)
                self.state = 1950
                self.an_id()
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(YQLParser.IMPORT, 0)

        def module_path(self):
            return self.getTypedRuleContext(YQLParser.Module_pathContext,0)


        def SYMBOLS(self):
            return self.getToken(YQLParser.SYMBOLS, 0)

        def named_bind_parameter_list(self):
            return self.getTypedRuleContext(YQLParser.Named_bind_parameter_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = YQLParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_import_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self.match(YQLParser.IMPORT)
            self.state = 1957
            self.module_path()
            self.state = 1958
            self.match(YQLParser.SYMBOLS)
            self.state = 1959
            self.named_bind_parameter_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Export_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPORT(self):
            return self.getToken(YQLParser.EXPORT, 0)

        def bind_parameter_list(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameter_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_export_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport_stmt" ):
                listener.enterExport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport_stmt" ):
                listener.exitExport_stmt(self)




    def export_stmt(self):

        localctx = YQLParser.Export_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_export_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.match(YQLParser.EXPORT)
            self.state = 1962
            self.bind_parameter_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def EMPTY_ACTION(self):
            return self.getToken(YQLParser.EMPTY_ACTION, 0)

        def expr_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_call_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_action" ):
                listener.enterCall_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_action" ):
                listener.exitCall_action(self)




    def call_action(self):

        localctx = YQLParser.Call_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_call_action)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.state = 1964
                self.bind_parameter()
                pass
            elif token in [115]:
                self.state = 1965
                self.match(YQLParser.EMPTY_ACTION)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1968
            self.match(YQLParser.LPAREN)
            self.state = 1970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                self.state = 1969
                self.expr_list()


            self.state = 1972
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(YQLParser.BEGIN, 0)

        def define_action_or_subquery_body(self):
            return self.getTypedRuleContext(YQLParser.Define_action_or_subquery_bodyContext,0)


        def END(self):
            return self.getToken(YQLParser.END, 0)

        def DO(self):
            return self.getToken(YQLParser.DO, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_inline_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_action" ):
                listener.enterInline_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_action" ):
                listener.exitInline_action(self)




    def inline_action(self):

        localctx = YQLParser.Inline_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_inline_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(YQLParser.BEGIN)
            self.state = 1975
            self.define_action_or_subquery_body()
            self.state = 1976
            self.match(YQLParser.END)
            self.state = 1977
            self.match(YQLParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(YQLParser.DO, 0)

        def call_action(self):
            return self.getTypedRuleContext(YQLParser.Call_actionContext,0)


        def inline_action(self):
            return self.getTypedRuleContext(YQLParser.Inline_actionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_do_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_stmt" ):
                listener.enterDo_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_stmt" ):
                listener.exitDo_stmt(self)




    def do_stmt(self):

        localctx = YQLParser.Do_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_do_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self.match(YQLParser.DO)
            self.state = 1982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 115]:
                self.state = 1980
                self.call_action()
                pass
            elif token in [63]:
                self.state = 1981
                self.inline_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(YQLParser.PRAGMA, 0)

        def opt_id_prefix_or_type(self):
            return self.getTypedRuleContext(YQLParser.Opt_id_prefix_or_typeContext,0)


        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def pragma_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Pragma_valueContext)
            else:
                return self.getTypedRuleContext(YQLParser.Pragma_valueContext,i)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = YQLParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_pragma_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(YQLParser.PRAGMA)
            self.state = 1985
            self.opt_id_prefix_or_type()
            self.state = 1986
            self.an_id()
            self.state = 2000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 1987
                self.match(YQLParser.EQUALS)
                self.state = 1988
                self.pragma_value()
                pass
            elif token in [25]:
                self.state = 1989
                self.match(YQLParser.LPAREN)
                self.state = 1990
                self.pragma_value()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 1991
                    self.match(YQLParser.COMMA)
                    self.state = 1992
                    self.pragma_value()
                    self.state = 1997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1998
                self.match(YQLParser.RPAREN)
                pass
            elif token in [-1, 22, 117]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(YQLParser.Signed_numberContext,0)


        def id_(self):
            return self.getTypedRuleContext(YQLParser.IdContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def bool_value(self):
            return self.getTypedRuleContext(YQLParser.Bool_valueContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = YQLParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_pragma_value)
        try:
            self.state = 2007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 17, 330, 331, 332]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2002
                self.signed_number()
                pass
            elif token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2003
                self.id_()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2004
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [132, 301]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2005
                self.bool_value()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2006
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def ASC(self):
            return self.getToken(YQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(YQLParser.DESC, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_sort_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification" ):
                listener.enterSort_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification" ):
                listener.exitSort_specification(self)




    def sort_specification(self):

        localctx = YQLParser.Sort_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_sort_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.expr()
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50 or _la==102:
                self.state = 2010
                _la = self._input.LA(1)
                if not(_la==50 or _la==102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specification_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Sort_specificationContext)
            else:
                return self.getTypedRuleContext(YQLParser.Sort_specificationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_sort_specification_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification_list" ):
                listener.enterSort_specification_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification_list" ):
                listener.exitSort_specification_list(self)




    def sort_specification_list(self):

        localctx = YQLParser.Sort_specification_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_sort_specification_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.sort_specification()
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2014
                self.match(YQLParser.COMMA)
                self.state = 2015
                self.sort_specification()
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_kind_parenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Select_kind_parenthesisContext)
            else:
                return self.getTypedRuleContext(YQLParser.Select_kind_parenthesisContext,i)


        def select_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Select_opContext)
            else:
                return self.getTypedRuleContext(YQLParser.Select_opContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = YQLParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.select_kind_parenthesis()
            self.state = 2027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==123 or _la==169 or _la==306:
                self.state = 2022
                self.select_op()
                self.state = 2023
                self.select_kind_parenthesis()
                self.state = 2029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_unparenthesized_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_kind_partial(self):
            return self.getTypedRuleContext(YQLParser.Select_kind_partialContext,0)


        def select_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Select_opContext)
            else:
                return self.getTypedRuleContext(YQLParser.Select_opContext,i)


        def select_kind_parenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Select_kind_parenthesisContext)
            else:
                return self.getTypedRuleContext(YQLParser.Select_kind_parenthesisContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_select_unparenthesized_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_unparenthesized_stmt" ):
                listener.enterSelect_unparenthesized_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_unparenthesized_stmt" ):
                listener.exitSelect_unparenthesized_stmt(self)




    def select_unparenthesized_stmt(self):

        localctx = YQLParser.Select_unparenthesized_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_select_unparenthesized_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.select_kind_partial()
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==123 or _la==169 or _la==306:
                self.state = 2031
                self.select_op()
                self.state = 2032
                self.select_kind_parenthesis()
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_kind_parenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_kind_partial(self):
            return self.getTypedRuleContext(YQLParser.Select_kind_partialContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_select_kind_parenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_kind_parenthesis" ):
                listener.enterSelect_kind_parenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_kind_parenthesis" ):
                listener.exitSelect_kind_parenthesis(self)




    def select_kind_parenthesis(self):

        localctx = YQLParser.Select_kind_parenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_select_kind_parenthesis)
        try:
            self.state = 2044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108, 141, 233, 238, 270]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2039
                self.select_kind_partial()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2040
                self.match(YQLParser.LPAREN)
                self.state = 2041
                self.select_kind_partial()
                self.state = 2042
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(YQLParser.UNION, 0)

        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def INTERSECT(self):
            return self.getToken(YQLParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(YQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_select_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_op" ):
                listener.enterSelect_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_op" ):
                listener.exitSelect_op(self)




    def select_op(self):

        localctx = YQLParser.Select_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_select_op)
        self._la = 0 # Token type
        try:
            self.state = 2052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [306]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2046
                self.match(YQLParser.UNION)
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 2047
                    self.match(YQLParser.ALL)


                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2050
                self.match(YQLParser.INTERSECT)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2051
                self.match(YQLParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_kind_partialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_kind(self):
            return self.getTypedRuleContext(YQLParser.Select_kindContext,0)


        def LIMIT(self):
            return self.getToken(YQLParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def OFFSET(self):
            return self.getToken(YQLParser.OFFSET, 0)

        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_select_kind_partial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_kind_partial" ):
                listener.enterSelect_kind_partial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_kind_partial" ):
                listener.exitSelect_kind_partial(self)




    def select_kind_partial(self):

        localctx = YQLParser.Select_kind_partialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_select_kind_partial)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.select_kind()
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 2055
                self.match(YQLParser.LIMIT)
                self.state = 2056
                self.expr()
                self.state = 2059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==205:
                    self.state = 2057
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==205):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2058
                    self.expr()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def process_core(self):
            return self.getTypedRuleContext(YQLParser.Process_coreContext,0)


        def reduce_core(self):
            return self.getTypedRuleContext(YQLParser.Reduce_coreContext,0)


        def select_core(self):
            return self.getTypedRuleContext(YQLParser.Select_coreContext,0)


        def DISCARD(self):
            return self.getToken(YQLParser.DISCARD, 0)

        def INTO(self):
            return self.getToken(YQLParser.INTO, 0)

        def RESULT(self):
            return self.getToken(YQLParser.RESULT, 0)

        def pure_column_or_named(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_or_namedContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_select_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_kind" ):
                listener.enterSelect_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_kind" ):
                listener.exitSelect_kind(self)




    def select_kind(self):

        localctx = YQLParser.Select_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_select_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 2063
                self.match(YQLParser.DISCARD)


            self.state = 2069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.state = 2066
                self.process_core()
                pass
            elif token in [238]:
                self.state = 2067
                self.reduce_core()
                pass
            elif token in [141, 270]:
                self.state = 2068
                self.select_core()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 2071
                self.match(YQLParser.INTO)
                self.state = 2072
                self.match(YQLParser.RESULT)
                self.state = 2073
                self.pure_column_or_named()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Process_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCESS(self):
            return self.getToken(YQLParser.PROCESS, 0)

        def named_single_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Named_single_sourceContext)
            else:
                return self.getTypedRuleContext(YQLParser.Named_single_sourceContext,i)


        def STREAM(self):
            return self.getToken(YQLParser.STREAM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def using_call_expr(self):
            return self.getTypedRuleContext(YQLParser.Using_call_exprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def external_call_settings(self):
            return self.getTypedRuleContext(YQLParser.External_call_settingsContext,0)


        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def HAVING(self):
            return self.getToken(YQLParser.HAVING, 0)

        def ASSUME(self):
            return self.getToken(YQLParser.ASSUME, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_process_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcess_core" ):
                listener.enterProcess_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcess_core" ):
                listener.exitProcess_core(self)




    def process_core(self):

        localctx = YQLParser.Process_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_process_core)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.match(YQLParser.PROCESS)
            self.state = 2078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 2077
                self.match(YQLParser.STREAM)


            self.state = 2080
            self.named_single_source()
            self.state = 2085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2081
                self.match(YQLParser.COMMA)
                self.state = 2082
                self.named_single_source()
                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 2088
                self.match(YQLParser.USING)
                self.state = 2089
                self.using_call_expr()
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2090
                    self.match(YQLParser.AS)
                    self.state = 2091
                    self.an_id()


                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==323:
                    self.state = 2094
                    self.match(YQLParser.WITH)
                    self.state = 2095
                    self.external_call_settings()


                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==321:
                    self.state = 2098
                    self.match(YQLParser.WHERE)
                    self.state = 2099
                    self.expr()


                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 2102
                    self.match(YQLParser.HAVING)
                    self.state = 2103
                    self.expr()


                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2106
                    self.match(YQLParser.ASSUME)
                    self.state = 2107
                    self.order_by_clause()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_call_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_external_call_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_call_param" ):
                listener.enterExternal_call_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_call_param" ):
                listener.exitExternal_call_param(self)




    def external_call_param(self):

        localctx = YQLParser.External_call_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_external_call_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.an_id()
            self.state = 2113
            self.match(YQLParser.EQUALS)
            self.state = 2114
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_call_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_call_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.External_call_paramContext)
            else:
                return self.getTypedRuleContext(YQLParser.External_call_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_external_call_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_call_settings" ):
                listener.enterExternal_call_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_call_settings" ):
                listener.exitExternal_call_settings(self)




    def external_call_settings(self):

        localctx = YQLParser.External_call_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_external_call_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2116
            self.external_call_param()
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2117
                self.match(YQLParser.COMMA)
                self.state = 2118
                self.external_call_param()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reduce_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDUCE(self):
            return self.getToken(YQLParser.REDUCE, 0)

        def named_single_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Named_single_sourceContext)
            else:
                return self.getTypedRuleContext(YQLParser.Named_single_sourceContext,i)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def column_list(self):
            return self.getTypedRuleContext(YQLParser.Column_listContext,0)


        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def using_call_expr(self):
            return self.getTypedRuleContext(YQLParser.Using_call_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def PRESORT(self):
            return self.getToken(YQLParser.PRESORT, 0)

        def sort_specification_list(self):
            return self.getTypedRuleContext(YQLParser.Sort_specification_listContext,0)


        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def HAVING(self):
            return self.getToken(YQLParser.HAVING, 0)

        def ASSUME(self):
            return self.getToken(YQLParser.ASSUME, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_reduce_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduce_core" ):
                listener.enterReduce_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduce_core" ):
                listener.exitReduce_core(self)




    def reduce_core(self):

        localctx = YQLParser.Reduce_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_reduce_core)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(YQLParser.REDUCE)
            self.state = 2125
            self.named_single_source()
            self.state = 2130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2126
                self.match(YQLParser.COMMA)
                self.state = 2127
                self.named_single_source()
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==230:
                self.state = 2133
                self.match(YQLParser.PRESORT)
                self.state = 2134
                self.sort_specification_list()


            self.state = 2137
            self.match(YQLParser.ON)
            self.state = 2138
            self.column_list()
            self.state = 2139
            self.match(YQLParser.USING)
            self.state = 2141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 2140
                self.match(YQLParser.ALL)


            self.state = 2143
            self.using_call_expr()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2144
                self.match(YQLParser.AS)
                self.state = 2145
                self.an_id()


            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==321:
                self.state = 2148
                self.match(YQLParser.WHERE)
                self.state = 2149
                self.expr()


            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2152
                self.match(YQLParser.HAVING)
                self.state = 2153
                self.expr()


            self.state = 2158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2156
                self.match(YQLParser.ASSUME)
                self.state = 2157
                self.order_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_set_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(YQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_opt_set_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_set_quantifier" ):
                listener.enterOpt_set_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_set_quantifier" ):
                listener.exitOpt_set_quantifier(self)




    def opt_set_quantifier(self):

        localctx = YQLParser.Opt_set_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_opt_set_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 2160
                _la = self._input.LA(1)
                if not(_la==42 or _la==109):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(YQLParser.SELECT, 0)

        def opt_set_quantifier(self):
            return self.getTypedRuleContext(YQLParser.Opt_set_quantifierContext,0)


        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(YQLParser.Result_columnContext,i)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.FROM)
            else:
                return self.getToken(YQLParser.FROM, i)

        def join_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Join_sourceContext)
            else:
                return self.getTypedRuleContext(YQLParser.Join_sourceContext,i)


        def STREAM(self):
            return self.getToken(YQLParser.STREAM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def WITHOUT(self):
            return self.getToken(YQLParser.WITHOUT, 0)

        def without_column_list(self):
            return self.getTypedRuleContext(YQLParser.Without_column_listContext,0)


        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def group_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Group_by_clauseContext,0)


        def HAVING(self):
            return self.getToken(YQLParser.HAVING, 0)

        def window_clause(self):
            return self.getTypedRuleContext(YQLParser.Window_clauseContext,0)


        def ext_order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Ext_order_by_clauseContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = YQLParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 2163
                self.match(YQLParser.FROM)
                self.state = 2164
                self.join_source()


            self.state = 2167
            self.match(YQLParser.SELECT)
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 2168
                self.match(YQLParser.STREAM)


            self.state = 2171
            self.opt_set_quantifier()
            self.state = 2172
            self.result_column()
            self.state = 2177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2173
                    self.match(YQLParser.COMMA)
                    self.state = 2174
                    self.result_column() 
                self.state = 2179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

            self.state = 2181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 2180
                self.match(YQLParser.COMMA)


            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==324:
                self.state = 2183
                self.match(YQLParser.WITHOUT)
                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 2184
                    self.match(YQLParser.IF)
                    self.state = 2185
                    self.match(YQLParser.EXISTS)


                self.state = 2188
                self.without_column_list()


            self.state = 2193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 2191
                self.match(YQLParser.FROM)
                self.state = 2192
                self.join_source()


            self.state = 2197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==321:
                self.state = 2195
                self.match(YQLParser.WHERE)
                self.state = 2196
                self.expr()


            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 2199
                self.group_by_clause()


            self.state = 2204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2202
                self.match(YQLParser.HAVING)
                self.state = 2203
                self.expr()


            self.state = 2207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 2206
                self.window_clause()


            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51 or _la==213:
                self.state = 2209
                self.ext_order_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_recognition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH_RECOGNIZE(self):
            return self.getToken(YQLParser.MATCH_RECOGNIZE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def row_pattern_common_syntax(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_common_syntaxContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def window_partition_clause(self):
            return self.getTypedRuleContext(YQLParser.Window_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Order_by_clauseContext,0)


        def row_pattern_measures(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_measuresContext,0)


        def row_pattern_rows_per_match(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_rows_per_matchContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_recognition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_recognition_clause" ):
                listener.enterRow_pattern_recognition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_recognition_clause" ):
                listener.exitRow_pattern_recognition_clause(self)




    def row_pattern_recognition_clause(self):

        localctx = YQLParser.Row_pattern_recognition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_row_pattern_recognition_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self.match(YQLParser.MATCH_RECOGNIZE)
            self.state = 2213
            self.match(YQLParser.LPAREN)
            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2214
                self.window_partition_clause()


            self.state = 2218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==213:
                self.state = 2217
                self.order_by_clause()


            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 2220
                self.row_pattern_measures()


            self.state = 2224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==208:
                self.state = 2223
                self.row_pattern_rows_per_match()


            self.state = 2226
            self.row_pattern_common_syntax()
            self.state = 2227
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_rows_per_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(YQLParser.ONE, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def PER(self):
            return self.getToken(YQLParser.PER, 0)

        def MATCH(self):
            return self.getToken(YQLParser.MATCH, 0)

        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def ROWS(self):
            return self.getToken(YQLParser.ROWS, 0)

        def row_pattern_empty_match_handling(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_empty_match_handlingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_rows_per_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_rows_per_match" ):
                listener.enterRow_pattern_rows_per_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_rows_per_match" ):
                listener.exitRow_pattern_rows_per_match(self)




    def row_pattern_rows_per_match(self):

        localctx = YQLParser.Row_pattern_rows_per_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_row_pattern_rows_per_match)
        self._la = 0 # Token type
        try:
            self.state = 2240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [208]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                self.match(YQLParser.ONE)
                self.state = 2230
                self.match(YQLParser.ROW)
                self.state = 2231
                self.match(YQLParser.PER)
                self.state = 2232
                self.match(YQLParser.MATCH)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2233
                self.match(YQLParser.ALL)
                self.state = 2234
                self.match(YQLParser.ROWS)
                self.state = 2235
                self.match(YQLParser.PER)
                self.state = 2236
                self.match(YQLParser.MATCH)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206 or _la==274 or _la==323:
                    self.state = 2237
                    self.row_pattern_empty_match_handling()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_empty_match_handlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(YQLParser.SHOW, 0)

        def EMPTY(self):
            return self.getToken(YQLParser.EMPTY, 0)

        def MATCHES(self):
            return self.getToken(YQLParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(YQLParser.OMIT, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(YQLParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(YQLParser.ROWS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_empty_match_handling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_empty_match_handling" ):
                listener.enterRow_pattern_empty_match_handling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_empty_match_handling" ):
                listener.exitRow_pattern_empty_match_handling(self)




    def row_pattern_empty_match_handling(self):

        localctx = YQLParser.Row_pattern_empty_match_handlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_row_pattern_empty_match_handling)
        try:
            self.state = 2251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2242
                self.match(YQLParser.SHOW)
                self.state = 2243
                self.match(YQLParser.EMPTY)
                self.state = 2244
                self.match(YQLParser.MATCHES)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                self.match(YQLParser.OMIT)
                self.state = 2246
                self.match(YQLParser.EMPTY)
                self.state = 2247
                self.match(YQLParser.MATCHES)
                pass
            elif token in [323]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2248
                self.match(YQLParser.WITH)
                self.state = 2249
                self.match(YQLParser.UNMATCHED)
                self.state = 2250
                self.match(YQLParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_measuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURES(self):
            return self.getToken(YQLParser.MEASURES, 0)

        def row_pattern_measure_list(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_measure_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_measures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_measures" ):
                listener.enterRow_pattern_measures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_measures" ):
                listener.exitRow_pattern_measures(self)




    def row_pattern_measures(self):

        localctx = YQLParser.Row_pattern_measuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_row_pattern_measures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.match(YQLParser.MEASURES)
            self.state = 2254
            self.row_pattern_measure_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_measure_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_measure_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_measure_definitionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_measure_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_measure_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_measure_list" ):
                listener.enterRow_pattern_measure_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_measure_list" ):
                listener.exitRow_pattern_measure_list(self)




    def row_pattern_measure_list(self):

        localctx = YQLParser.Row_pattern_measure_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_row_pattern_measure_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self.row_pattern_measure_definition()
            self.state = 2261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2257
                self.match(YQLParser.COMMA)
                self.state = 2258
                self.row_pattern_measure_definition()
                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_measure_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_measure_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_measure_definition" ):
                listener.enterRow_pattern_measure_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_measure_definition" ):
                listener.exitRow_pattern_measure_definition(self)




    def row_pattern_measure_definition(self):

        localctx = YQLParser.Row_pattern_measure_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_row_pattern_measure_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            self.expr()
            self.state = 2265
            self.match(YQLParser.AS)
            self.state = 2266
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_common_syntaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATTERN(self):
            return self.getToken(YQLParser.PATTERN, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def row_pattern(self):
            return self.getTypedRuleContext(YQLParser.Row_patternContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def DEFINE(self):
            return self.getToken(YQLParser.DEFINE, 0)

        def row_pattern_definition_list(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_definition_listContext,0)


        def AFTER(self):
            return self.getToken(YQLParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(YQLParser.MATCH, 0)

        def row_pattern_skip_to(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_skip_toContext,0)


        def row_pattern_initial_or_seek(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_initial_or_seekContext,0)


        def row_pattern_subset_clause(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_subset_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_common_syntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_common_syntax" ):
                listener.enterRow_pattern_common_syntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_common_syntax" ):
                listener.exitRow_pattern_common_syntax(self)




    def row_pattern_common_syntax(self):

        localctx = YQLParser.Row_pattern_common_syntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_row_pattern_common_syntax)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 2268
                self.match(YQLParser.AFTER)
                self.state = 2269
                self.match(YQLParser.MATCH)
                self.state = 2270
                self.row_pattern_skip_to()


            self.state = 2274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164 or _la==269:
                self.state = 2273
                self.row_pattern_initial_or_seek()


            self.state = 2276
            self.match(YQLParser.PATTERN)
            self.state = 2277
            self.match(YQLParser.LPAREN)
            self.state = 2278
            self.row_pattern()
            self.state = 2279
            self.match(YQLParser.RPAREN)
            self.state = 2281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==282:
                self.state = 2280
                self.row_pattern_subset_clause()


            self.state = 2283
            self.match(YQLParser.DEFINE)
            self.state = 2284
            self.row_pattern_definition_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_skip_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TSKIP(self):
            return self.getToken(YQLParser.TSKIP, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def NEXT(self):
            return self.getToken(YQLParser.NEXT, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def PAST(self):
            return self.getToken(YQLParser.PAST, 0)

        def LAST(self):
            return self.getToken(YQLParser.LAST, 0)

        def FIRST(self):
            return self.getToken(YQLParser.FIRST, 0)

        def row_pattern_skip_to_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_skip_to_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_skip_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_skip_to" ):
                listener.enterRow_pattern_skip_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_skip_to" ):
                listener.exitRow_pattern_skip_to(self)




    def row_pattern_skip_to(self):

        localctx = YQLParser.Row_pattern_skip_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_row_pattern_skip_to)
        try:
            self.state = 2305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.match(YQLParser.TSKIP)
                self.state = 2287
                self.match(YQLParser.TO)
                self.state = 2288
                self.match(YQLParser.NEXT)
                self.state = 2289
                self.match(YQLParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2290
                self.match(YQLParser.TSKIP)
                self.state = 2291
                self.match(YQLParser.PAST)
                self.state = 2292
                self.match(YQLParser.LAST)
                self.state = 2293
                self.match(YQLParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2294
                self.match(YQLParser.TSKIP)
                self.state = 2295
                self.match(YQLParser.TO)
                self.state = 2296
                self.match(YQLParser.FIRST)
                self.state = 2297
                self.row_pattern_skip_to_variable_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2298
                self.match(YQLParser.TSKIP)
                self.state = 2299
                self.match(YQLParser.TO)
                self.state = 2300
                self.match(YQLParser.LAST)
                self.state = 2301
                self.row_pattern_skip_to_variable_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2302
                self.match(YQLParser.TSKIP)
                self.state = 2303
                self.match(YQLParser.TO)
                self.state = 2304
                self.row_pattern_skip_to_variable_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_skip_to_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_skip_to_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_skip_to_variable_name" ):
                listener.enterRow_pattern_skip_to_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_skip_to_variable_name" ):
                listener.exitRow_pattern_skip_to_variable_name(self)




    def row_pattern_skip_to_variable_name(self):

        localctx = YQLParser.Row_pattern_skip_to_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_row_pattern_skip_to_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.row_pattern_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_initial_or_seekContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL(self):
            return self.getToken(YQLParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(YQLParser.SEEK, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_initial_or_seek

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_initial_or_seek" ):
                listener.enterRow_pattern_initial_or_seek(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_initial_or_seek" ):
                listener.exitRow_pattern_initial_or_seek(self)




    def row_pattern_initial_or_seek(self):

        localctx = YQLParser.Row_pattern_initial_or_seekContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_row_pattern_initial_or_seek)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            _la = self._input.LA(1)
            if not(_la==164 or _la==269):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_termContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_termContext,i)


        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.PIPE)
            else:
                return self.getToken(YQLParser.PIPE, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern" ):
                listener.enterRow_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern" ):
                listener.exitRow_pattern(self)




    def row_pattern(self):

        localctx = YQLParser.Row_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_row_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.row_pattern_term()
            self.state = 2316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12:
                self.state = 2312
                self.match(YQLParser.PIPE)
                self.state = 2313
                self.row_pattern_term()
                self.state = 2318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_factorContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_factorContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_term" ):
                listener.enterRow_pattern_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_term" ):
                listener.exitRow_pattern_term(self)




    def row_pattern_term(self):

        localctx = YQLParser.Row_pattern_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_row_pattern_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2319
                self.row_pattern_factor()
                self.state = 2322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 11844714496) != 0) or _la==225 or _la==328 or _la==329):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_factorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_primary(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_primaryContext,0)


        def row_pattern_quantifier(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_quantifierContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_factor" ):
                listener.enterRow_pattern_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_factor" ):
                listener.exitRow_pattern_factor(self)




    def row_pattern_factor(self):

        localctx = YQLParser.Row_pattern_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_row_pattern_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.row_pattern_primary()
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 2325
                self.row_pattern_quantifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(YQLParser.ASTERISK, 0)

        def QUESTION(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.QUESTION)
            else:
                return self.getToken(YQLParser.QUESTION, i)

        def PLUS(self):
            return self.getToken(YQLParser.PLUS, 0)

        def LBRACE_CURLY(self):
            return self.getToken(YQLParser.LBRACE_CURLY, 0)

        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def RBRACE_CURLY(self):
            return self.getToken(YQLParser.RBRACE_CURLY, 0)

        def integer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.IntegerContext)
            else:
                return self.getTypedRuleContext(YQLParser.IntegerContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_quantifier" ):
                listener.enterRow_pattern_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_quantifier" ):
                listener.exitRow_pattern_quantifier(self)




    def row_pattern_quantifier(self):

        localctx = YQLParser.Row_pattern_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_row_pattern_quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.match(YQLParser.ASTERISK)
                self.state = 2330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2329
                    self.match(YQLParser.QUESTION)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2332
                self.match(YQLParser.PLUS)
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2333
                    self.match(YQLParser.QUESTION)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2336
                self.match(YQLParser.QUESTION)
                self.state = 2338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2337
                    self.match(YQLParser.QUESTION)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2340
                self.match(YQLParser.LBRACE_CURLY)
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330 or _la==331:
                    self.state = 2341
                    self.integer()


                self.state = 2344
                self.match(YQLParser.COMMA)
                self.state = 2346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330 or _la==331:
                    self.state = 2345
                    self.integer()


                self.state = 2348
                self.match(YQLParser.RBRACE_CURLY)
                self.state = 2350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2349
                    self.match(YQLParser.QUESTION)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2352
                self.match(YQLParser.LBRACE_CURLY)
                self.state = 2353
                self.integer()
                self.state = 2354
                self.match(YQLParser.RBRACE_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_primary_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_primary_variable_nameContext,0)


        def DOLLAR(self):
            return self.getToken(YQLParser.DOLLAR, 0)

        def CARET(self):
            return self.getToken(YQLParser.CARET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def row_pattern(self):
            return self.getTypedRuleContext(YQLParser.Row_patternContext,0)


        def LBRACE_CURLY(self):
            return self.getToken(YQLParser.LBRACE_CURLY, 0)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.MINUS)
            else:
                return self.getToken(YQLParser.MINUS, i)

        def RBRACE_CURLY(self):
            return self.getToken(YQLParser.RBRACE_CURLY, 0)

        def row_pattern_permute(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_permuteContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_primary" ):
                listener.enterRow_pattern_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_primary" ):
                listener.exitRow_pattern_primary(self)




    def row_pattern_primary(self):

        localctx = YQLParser.Row_pattern_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_row_pattern_primary)
        self._la = 0 # Token type
        try:
            self.state = 2373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2358
                self.row_pattern_primary_variable_name()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                self.match(YQLParser.DOLLAR)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2360
                self.match(YQLParser.CARET)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2361
                self.match(YQLParser.LPAREN)
                self.state = 2363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 11844714496) != 0) or _la==225 or _la==328 or _la==329:
                    self.state = 2362
                    self.row_pattern()


                self.state = 2365
                self.match(YQLParser.RPAREN)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2366
                self.match(YQLParser.LBRACE_CURLY)
                self.state = 2367
                self.match(YQLParser.MINUS)
                self.state = 2368
                self.row_pattern()
                self.state = 2369
                self.match(YQLParser.MINUS)
                self.state = 2370
                self.match(YQLParser.RBRACE_CURLY)
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2372
                self.row_pattern_permute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_primary_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_primary_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_primary_variable_name" ):
                listener.enterRow_pattern_primary_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_primary_variable_name" ):
                listener.exitRow_pattern_primary_variable_name(self)




    def row_pattern_primary_variable_name(self):

        localctx = YQLParser.Row_pattern_primary_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_row_pattern_primary_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.row_pattern_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_permuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMUTE(self):
            return self.getToken(YQLParser.PERMUTE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def row_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_patternContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_patternContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_permute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_permute" ):
                listener.enterRow_pattern_permute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_permute" ):
                listener.exitRow_pattern_permute(self)




    def row_pattern_permute(self):

        localctx = YQLParser.Row_pattern_permuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_row_pattern_permute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.match(YQLParser.PERMUTE)
            self.state = 2378
            self.match(YQLParser.LPAREN)
            self.state = 2379
            self.row_pattern()
            self.state = 2384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2380
                self.match(YQLParser.COMMA)
                self.state = 2381
                self.row_pattern()
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2387
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSET(self):
            return self.getToken(YQLParser.SUBSET, 0)

        def row_pattern_subset_list(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_subset_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_clause" ):
                listener.enterRow_pattern_subset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_clause" ):
                listener.exitRow_pattern_subset_clause(self)




    def row_pattern_subset_clause(self):

        localctx = YQLParser.Row_pattern_subset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_row_pattern_subset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(YQLParser.SUBSET)
            self.state = 2390
            self.row_pattern_subset_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_subset_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_subset_itemContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_subset_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_list" ):
                listener.enterRow_pattern_subset_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_list" ):
                listener.exitRow_pattern_subset_list(self)




    def row_pattern_subset_list(self):

        localctx = YQLParser.Row_pattern_subset_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_row_pattern_subset_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.row_pattern_subset_item()
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2393
                self.match(YQLParser.COMMA)
                self.state = 2394
                self.row_pattern_subset_item()
                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_subset_item_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_subset_item_variable_nameContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def row_pattern_subset_rhs(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_subset_rhsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_item" ):
                listener.enterRow_pattern_subset_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_item" ):
                listener.exitRow_pattern_subset_item(self)




    def row_pattern_subset_item(self):

        localctx = YQLParser.Row_pattern_subset_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_row_pattern_subset_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.row_pattern_subset_item_variable_name()
            self.state = 2401
            self.match(YQLParser.EQUALS)
            self.state = 2402
            self.match(YQLParser.LPAREN)
            self.state = 2403
            self.row_pattern_subset_rhs()
            self.state = 2404
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_item_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_item_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_item_variable_name" ):
                listener.enterRow_pattern_subset_item_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_item_variable_name" ):
                listener.exitRow_pattern_subset_item_variable_name(self)




    def row_pattern_subset_item_variable_name(self):

        localctx = YQLParser.Row_pattern_subset_item_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_row_pattern_subset_item_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2406
            self.row_pattern_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_subset_rhs_variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_subset_rhs_variable_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_subset_rhs_variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_rhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_rhs" ):
                listener.enterRow_pattern_subset_rhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_rhs" ):
                listener.exitRow_pattern_subset_rhs(self)




    def row_pattern_subset_rhs(self):

        localctx = YQLParser.Row_pattern_subset_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_row_pattern_subset_rhs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.row_pattern_subset_rhs_variable_name()
            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2409
                self.match(YQLParser.COMMA)
                self.state = 2410
                self.row_pattern_subset_rhs_variable_name()
                self.state = 2415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_subset_rhs_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_subset_rhs_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_subset_rhs_variable_name" ):
                listener.enterRow_pattern_subset_rhs_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_subset_rhs_variable_name" ):
                listener.exitRow_pattern_subset_rhs_variable_name(self)




    def row_pattern_subset_rhs_variable_name(self):

        localctx = YQLParser.Row_pattern_subset_rhs_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_row_pattern_subset_rhs_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.row_pattern_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_definition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Row_pattern_definitionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Row_pattern_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_definition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_definition_list" ):
                listener.enterRow_pattern_definition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_definition_list" ):
                listener.exitRow_pattern_definition_list(self)




    def row_pattern_definition_list(self):

        localctx = YQLParser.Row_pattern_definition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_row_pattern_definition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.row_pattern_definition()
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2419
                self.match(YQLParser.COMMA)
                self.state = 2420
                self.row_pattern_definition()
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_definition_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_definition_variable_nameContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def row_pattern_definition_search_condition(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_definition_search_conditionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_definition" ):
                listener.enterRow_pattern_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_definition" ):
                listener.exitRow_pattern_definition(self)




    def row_pattern_definition(self):

        localctx = YQLParser.Row_pattern_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_row_pattern_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.row_pattern_definition_variable_name()
            self.state = 2427
            self.match(YQLParser.AS)
            self.state = 2428
            self.row_pattern_definition_search_condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_definition_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def row_pattern_variable_name(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_variable_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_definition_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_definition_variable_name" ):
                listener.enterRow_pattern_definition_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_definition_variable_name" ):
                listener.exitRow_pattern_definition_variable_name(self)




    def row_pattern_definition_variable_name(self):

        localctx = YQLParser.Row_pattern_definition_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_row_pattern_definition_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.row_pattern_variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_definition_search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self):
            return self.getTypedRuleContext(YQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_definition_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_definition_search_condition" ):
                listener.enterRow_pattern_definition_search_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_definition_search_condition" ):
                listener.exitRow_pattern_definition_search_condition(self)




    def row_pattern_definition_search_condition(self):

        localctx = YQLParser.Row_pattern_definition_search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_row_pattern_definition_search_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2432
            self.search_condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)




    def search_condition(self):

        localctx = YQLParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_search_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_pattern_variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_row_pattern_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_pattern_variable_name" ):
                listener.enterRow_pattern_variable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_pattern_variable_name" ):
                listener.exitRow_pattern_variable_name(self)




    def row_pattern_variable_name(self):

        localctx = YQLParser.Row_pattern_variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_row_pattern_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(YQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def sort_specification_list(self):
            return self.getTypedRuleContext(YQLParser.Sort_specification_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = YQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(YQLParser.ORDER)
            self.state = 2439
            self.match(YQLParser.BY)
            self.state = 2440
            self.sort_specification_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ext_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Order_by_clauseContext,0)


        def ASSUME(self):
            return self.getToken(YQLParser.ASSUME, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_ext_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExt_order_by_clause" ):
                listener.enterExt_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExt_order_by_clause" ):
                listener.exitExt_order_by_clause(self)




    def ext_order_by_clause(self):

        localctx = YQLParser.Ext_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_ext_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2442
                self.match(YQLParser.ASSUME)


            self.state = 2445
            self.order_by_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def opt_set_quantifier(self):
            return self.getTypedRuleContext(YQLParser.Opt_set_quantifierContext,0)


        def grouping_element_list(self):
            return self.getTypedRuleContext(YQLParser.Grouping_element_listContext,0)


        def COMPACT(self):
            return self.getToken(YQLParser.COMPACT, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = YQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self.match(YQLParser.GROUP)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 2448
                self.match(YQLParser.COMPACT)


            self.state = 2451
            self.match(YQLParser.BY)
            self.state = 2452
            self.opt_set_quantifier()
            self.state = 2453
            self.grouping_element_list()
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2454
                self.match(YQLParser.WITH)
                self.state = 2455
                self.an_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Grouping_elementContext)
            else:
                return self.getTypedRuleContext(YQLParser.Grouping_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_grouping_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_element_list" ):
                listener.enterGrouping_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_element_list" ):
                listener.exitGrouping_element_list(self)




    def grouping_element_list(self):

        localctx = YQLParser.Grouping_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_grouping_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            self.grouping_element()
            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2459
                self.match(YQLParser.COMMA)
                self.state = 2460
                self.grouping_element()
                self.state = 2465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(YQLParser.Ordinary_grouping_setContext,0)


        def rollup_list(self):
            return self.getTypedRuleContext(YQLParser.Rollup_listContext,0)


        def cube_list(self):
            return self.getTypedRuleContext(YQLParser.Cube_listContext,0)


        def grouping_sets_specification(self):
            return self.getTypedRuleContext(YQLParser.Grouping_sets_specificationContext,0)


        def hopping_window_specification(self):
            return self.getTypedRuleContext(YQLParser.Hopping_window_specificationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_grouping_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_element" ):
                listener.enterGrouping_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_element" ):
                listener.exitGrouping_element(self)




    def grouping_element(self):

        localctx = YQLParser.Grouping_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_grouping_element)
        try:
            self.state = 2471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2466
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2467
                self.rollup_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2468
                self.cube_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2469
                self.grouping_sets_specification()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2470
                self.hopping_window_specification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_expr(self):
            return self.getTypedRuleContext(YQLParser.Named_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = YQLParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.named_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Ordinary_grouping_setContext)
            else:
                return self.getTypedRuleContext(YQLParser.Ordinary_grouping_setContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_ordinary_grouping_set_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_list" ):
                listener.enterOrdinary_grouping_set_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_list" ):
                listener.exitOrdinary_grouping_set_list(self)




    def ordinary_grouping_set_list(self):

        localctx = YQLParser.Ordinary_grouping_set_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_ordinary_grouping_set_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            self.ordinary_grouping_set()
            self.state = 2480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2476
                self.match(YQLParser.COMMA)
                self.state = 2477
                self.ordinary_grouping_set()
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(YQLParser.ROLLUP, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def ordinary_grouping_set_list(self):
            return self.getTypedRuleContext(YQLParser.Ordinary_grouping_set_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_rollup_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_list" ):
                listener.enterRollup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_list" ):
                listener.exitRollup_list(self)




    def rollup_list(self):

        localctx = YQLParser.Rollup_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_rollup_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.match(YQLParser.ROLLUP)
            self.state = 2484
            self.match(YQLParser.LPAREN)
            self.state = 2485
            self.ordinary_grouping_set_list()
            self.state = 2486
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(YQLParser.CUBE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def ordinary_grouping_set_list(self):
            return self.getTypedRuleContext(YQLParser.Ordinary_grouping_set_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_cube_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_list" ):
                listener.enterCube_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_list" ):
                listener.exitCube_list(self)




    def cube_list(self):

        localctx = YQLParser.Cube_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_cube_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.match(YQLParser.CUBE)
            self.state = 2489
            self.match(YQLParser.LPAREN)
            self.state = 2490
            self.ordinary_grouping_set_list()
            self.state = 2491
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(YQLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(YQLParser.SETS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def grouping_element_list(self):
            return self.getTypedRuleContext(YQLParser.Grouping_element_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_grouping_sets_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_specification" ):
                listener.enterGrouping_sets_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_specification" ):
                listener.exitGrouping_sets_specification(self)




    def grouping_sets_specification(self):

        localctx = YQLParser.Grouping_sets_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_grouping_sets_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.match(YQLParser.GROUPING)
            self.state = 2494
            self.match(YQLParser.SETS)
            self.state = 2495
            self.match(YQLParser.LPAREN)
            self.state = 2496
            self.grouping_element_list()
            self.state = 2497
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hopping_window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOP(self):
            return self.getToken(YQLParser.HOP, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_hopping_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHopping_window_specification" ):
                listener.enterHopping_window_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHopping_window_specification" ):
                listener.exitHopping_window_specification(self)




    def hopping_window_specification(self):

        localctx = YQLParser.Hopping_window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_hopping_window_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.match(YQLParser.HOP)
            self.state = 2500
            self.match(YQLParser.LPAREN)
            self.state = 2501
            self.expr()
            self.state = 2502
            self.match(YQLParser.COMMA)
            self.state = 2503
            self.expr()
            self.state = 2504
            self.match(YQLParser.COMMA)
            self.state = 2505
            self.expr()
            self.state = 2506
            self.match(YQLParser.COMMA)
            self.state = 2507
            self.expr()
            self.state = 2508
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_id_prefix(self):
            return self.getTypedRuleContext(YQLParser.Opt_id_prefixContext,0)


        def ASTERISK(self):
            return self.getToken(YQLParser.ASTERISK, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def an_id_as_compat(self):
            return self.getTypedRuleContext(YQLParser.An_id_as_compatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = YQLParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_result_column)
        try:
            self.state = 2519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2510
                self.opt_id_prefix()
                self.state = 2511
                self.match(YQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2513
                self.expr()
                self.state = 2517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 2514
                    self.match(YQLParser.AS)
                    self.state = 2515
                    self.an_id_or_type()

                elif la_ == 2:
                    self.state = 2516
                    self.an_id_as_compat()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flatten_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Flatten_sourceContext)
            else:
                return self.getTypedRuleContext(YQLParser.Flatten_sourceContext,i)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.ANY)
            else:
                return self.getToken(YQLParser.ANY, i)

        def join_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Join_opContext)
            else:
                return self.getTypedRuleContext(YQLParser.Join_opContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(YQLParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_join_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source" ):
                listener.enterJoin_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source" ):
                listener.exitJoin_source(self)




    def join_source(self):

        localctx = YQLParser.Join_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_join_source)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 2521
                self.match(YQLParser.ANY)


            self.state = 2524
            self.flatten_source()
            self.state = 2535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 36029071896870913) != 0) or ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 562950490300545) != 0) or _la==259:
                self.state = 2525
                self.join_op()
                self.state = 2527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 2526
                    self.match(YQLParser.ANY)


                self.state = 2529
                self.flatten_source()
                self.state = 2531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207 or _la==314:
                    self.state = 2530
                    self.join_constraint()


                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(YQLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_named_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_column" ):
                listener.enterNamed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_column" ):
                listener.exitNamed_column(self)




    def named_column(self):

        localctx = YQLParser.Named_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_named_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.column_name()
            self.state = 2541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2539
                self.match(YQLParser.AS)
                self.state = 2540
                self.an_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flatten_by_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_column(self):
            return self.getTypedRuleContext(YQLParser.Named_columnContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def named_expr_list(self):
            return self.getTypedRuleContext(YQLParser.Named_expr_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_flatten_by_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlatten_by_arg" ):
                listener.enterFlatten_by_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlatten_by_arg" ):
                listener.exitFlatten_by_arg(self)




    def flatten_by_arg(self):

        localctx = YQLParser.Flatten_by_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_flatten_by_arg)
        self._la = 0 # Token type
        try:
            self.state = 2551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2543
                self.named_column()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2544
                self.match(YQLParser.LPAREN)
                self.state = 2545
                self.named_expr_list()
                self.state = 2547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 2546
                    self.match(YQLParser.COMMA)


                self.state = 2549
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flatten_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_single_source(self):
            return self.getTypedRuleContext(YQLParser.Named_single_sourceContext,0)


        def FLATTEN(self):
            return self.getToken(YQLParser.FLATTEN, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def flatten_by_arg(self):
            return self.getTypedRuleContext(YQLParser.Flatten_by_argContext,0)


        def COLUMNS(self):
            return self.getToken(YQLParser.COLUMNS, 0)

        def OPTIONAL(self):
            return self.getToken(YQLParser.OPTIONAL, 0)

        def LIST(self):
            return self.getToken(YQLParser.LIST, 0)

        def DICT(self):
            return self.getToken(YQLParser.DICT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_flatten_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlatten_source" ):
                listener.enterFlatten_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlatten_source" ):
                listener.exitFlatten_source(self)




    def flatten_source(self):

        localctx = YQLParser.Flatten_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_flatten_source)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2553
            self.named_single_source()
            self.state = 2563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2554
                self.match(YQLParser.FLATTEN)
                self.state = 2561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [67, 105, 183, 211]:
                    self.state = 2556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==105 or _la==183 or _la==211:
                        self.state = 2555
                        _la = self._input.LA(1)
                        if not(_la==105 or _la==183 or _la==211):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2558
                    self.match(YQLParser.BY)
                    self.state = 2559
                    self.flatten_by_arg()
                    pass
                elif token in [77]:
                    self.state = 2560
                    self.match(YQLParser.COLUMNS)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_single_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_source(self):
            return self.getTypedRuleContext(YQLParser.Single_sourceContext,0)


        def row_pattern_recognition_clause(self):
            return self.getTypedRuleContext(YQLParser.Row_pattern_recognition_clauseContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(YQLParser.Sample_clauseContext,0)


        def tablesample_clause(self):
            return self.getTypedRuleContext(YQLParser.Tablesample_clauseContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def an_id_as_compat(self):
            return self.getTypedRuleContext(YQLParser.An_id_as_compatContext,0)


        def pure_column_list(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_named_single_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_single_source" ):
                listener.enterNamed_single_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_single_source" ):
                listener.exitNamed_single_source(self)




    def named_single_source(self):

        localctx = YQLParser.Named_single_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_named_single_source)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self.single_source()
            self.state = 2567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2566
                self.row_pattern_recognition_clause()


            self.state = 2577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2572
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 2569
                    self.match(YQLParser.AS)
                    self.state = 2570
                    self.an_id()
                    pass
                elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 78, 80, 81, 82, 83, 84, 85, 86, 89, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 257, 258, 260, 261, 263, 266, 268, 269, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 325, 326, 327, 328, 329]:
                    self.state = 2571
                    self.an_id_as_compat()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2574
                    self.pure_column_list()




            self.state = 2581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265]:
                self.state = 2579
                self.sample_clause()
                pass
            elif token in [289]:
                self.state = 2580
                self.tablesample_clause()
                pass
            elif token in [-1, 22, 24, 26, 51, 87, 117, 123, 125, 136, 142, 147, 151, 166, 169, 170, 173, 179, 182, 195, 207, 213, 215, 230, 256, 259, 270, 306, 314, 321, 322]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self):
            return self.getTypedRuleContext(YQLParser.Table_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def values_stmt(self):
            return self.getTypedRuleContext(YQLParser.Values_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_single_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_source" ):
                listener.enterSingle_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_source" ):
                listener.exitSingle_source(self)




    def single_source(self):

        localctx = YQLParser.Single_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_single_source)
        try:
            self.state = 2592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2583
                self.table_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2584
                self.match(YQLParser.LPAREN)
                self.state = 2585
                self.select_stmt()
                self.state = 2586
                self.match(YQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2588
                self.match(YQLParser.LPAREN)
                self.state = 2589
                self.values_stmt()
                self.state = 2590
                self.match(YQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(YQLParser.SAMPLE, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = YQLParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_sample_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.match(YQLParser.SAMPLE)
            self.state = 2595
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tablesample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(YQLParser.TABLESAMPLE, 0)

        def sampling_mode(self):
            return self.getTypedRuleContext(YQLParser.Sampling_modeContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def repeatable_clause(self):
            return self.getTypedRuleContext(YQLParser.Repeatable_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_tablesample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablesample_clause" ):
                listener.enterTablesample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablesample_clause" ):
                listener.exitTablesample_clause(self)




    def tablesample_clause(self):

        localctx = YQLParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(YQLParser.TABLESAMPLE)
            self.state = 2598
            self.sampling_mode()
            self.state = 2599
            self.match(YQLParser.LPAREN)
            self.state = 2600
            self.expr()
            self.state = 2601
            self.match(YQLParser.RPAREN)
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==245:
                self.state = 2602
                self.repeatable_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sampling_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(YQLParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(YQLParser.SYSTEM, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_sampling_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampling_mode" ):
                listener.enterSampling_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampling_mode" ):
                listener.exitSampling_mode(self)




    def sampling_mode(self):

        localctx = YQLParser.Sampling_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_sampling_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2605
            _la = self._input.LA(1)
            if not(_la==64 or _la==286):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeatable_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(YQLParser.REPEATABLE, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_repeatable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatable_clause" ):
                listener.enterRepeatable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatable_clause" ):
                listener.exitRepeatable_clause(self)




    def repeatable_clause(self):

        localctx = YQLParser.Repeatable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_repeatable_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607
            self.match(YQLParser.REPEATABLE)
            self.state = 2608
            self.match(YQLParser.LPAREN)
            self.state = 2609
            self.expr()
            self.state = 2610
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(YQLParser.COMMA, 0)

        def JOIN(self):
            return self.getToken(YQLParser.JOIN, 0)

        def INNER(self):
            return self.getToken(YQLParser.INNER, 0)

        def CROSS(self):
            return self.getToken(YQLParser.CROSS, 0)

        def NATURAL(self):
            return self.getToken(YQLParser.NATURAL, 0)

        def LEFT(self):
            return self.getToken(YQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(YQLParser.RIGHT, 0)

        def EXCLUSION(self):
            return self.getToken(YQLParser.EXCLUSION, 0)

        def FULL(self):
            return self.getToken(YQLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(YQLParser.OUTER, 0)

        def ONLY(self):
            return self.getToken(YQLParser.ONLY, 0)

        def SEMI(self):
            return self.getToken(YQLParser.SEMI, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_join_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_op" ):
                listener.enterJoin_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_op" ):
                listener.exitJoin_op(self)




    def join_op(self):

        localctx = YQLParser.Join_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_join_op)
        self._la = 0 # Token type
        try:
            self.state = 2636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2612
                self.match(YQLParser.COMMA)
                pass
            elif token in [87, 125, 142, 166, 173, 179, 195, 215, 259]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 2613
                    self.match(YQLParser.NATURAL)


                self.state = 2633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [125, 142, 173, 179, 215, 259]:
                    self.state = 2626
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [179]:
                        self.state = 2616
                        self.match(YQLParser.LEFT)
                        self.state = 2618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==209 or _la==271:
                            self.state = 2617
                            _la = self._input.LA(1)
                            if not(_la==209 or _la==271):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [259]:
                        self.state = 2620
                        self.match(YQLParser.RIGHT)
                        self.state = 2622
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==209 or _la==271:
                            self.state = 2621
                            _la = self._input.LA(1)
                            if not(_la==209 or _la==271):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass
                    elif token in [125]:
                        self.state = 2624
                        self.match(YQLParser.EXCLUSION)
                        pass
                    elif token in [142]:
                        self.state = 2625
                        self.match(YQLParser.FULL)
                        pass
                    elif token in [173, 215]:
                        pass
                    else:
                        pass
                    self.state = 2629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==215:
                        self.state = 2628
                        self.match(YQLParser.OUTER)


                    pass
                elif token in [166]:
                    self.state = 2631
                    self.match(YQLParser.INNER)
                    pass
                elif token in [87]:
                    self.state = 2632
                    self.match(YQLParser.CROSS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2635
                self.match(YQLParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def pure_column_or_named_list(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_or_named_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = YQLParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_join_constraint)
        try:
            self.state = 2642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [207]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2638
                self.match(YQLParser.ON)
                self.state = 2639
                self.expr()
                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2640
                self.match(YQLParser.USING)
                self.state = 2641
                self.pure_column_or_named_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_columns_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(YQLParser.RETURNING, 0)

        def ASTERISK(self):
            return self.getToken(YQLParser.ASTERISK, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_returning_columns_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_columns_list" ):
                listener.enterReturning_columns_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_columns_list" ):
                listener.exitReturning_columns_list(self)




    def returning_columns_list(self):

        localctx = YQLParser.Returning_columns_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_returning_columns_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2644
            self.match(YQLParser.RETURNING)
            self.state = 2654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 2645
                self.match(YQLParser.ASTERISK)
                pass
            elif token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.state = 2646
                self.an_id()
                self.state = 2651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 2647
                    self.match(YQLParser.COMMA)
                    self.state = 2648
                    self.an_id()
                    self.state = 2653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(YQLParser.INTO, 0)

        def into_simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Into_simple_table_refContext,0)


        def into_values_source(self):
            return self.getTypedRuleContext(YQLParser.Into_values_sourceContext,0)


        def INSERT(self):
            return self.getToken(YQLParser.INSERT, 0)

        def OR(self):
            return self.getToken(YQLParser.OR, 0)

        def ABORT(self):
            return self.getToken(YQLParser.ABORT, 0)

        def REVERT(self):
            return self.getToken(YQLParser.REVERT, 0)

        def IGNORE(self):
            return self.getToken(YQLParser.IGNORE, 0)

        def UPSERT(self):
            return self.getToken(YQLParser.UPSERT, 0)

        def REPLACE(self):
            return self.getToken(YQLParser.REPLACE, 0)

        def returning_columns_list(self):
            return self.getTypedRuleContext(YQLParser.Returning_columns_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_into_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_table_stmt" ):
                listener.enterInto_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_table_stmt" ):
                listener.exitInto_table_stmt(self)




    def into_table_stmt(self):

        localctx = YQLParser.Into_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_into_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2656
                self.match(YQLParser.INSERT)
                pass

            elif la_ == 2:
                self.state = 2657
                self.match(YQLParser.INSERT)
                self.state = 2658
                self.match(YQLParser.OR)
                self.state = 2659
                self.match(YQLParser.ABORT)
                pass

            elif la_ == 3:
                self.state = 2660
                self.match(YQLParser.INSERT)
                self.state = 2661
                self.match(YQLParser.OR)
                self.state = 2662
                self.match(YQLParser.REVERT)
                pass

            elif la_ == 4:
                self.state = 2663
                self.match(YQLParser.INSERT)
                self.state = 2664
                self.match(YQLParser.OR)
                self.state = 2665
                self.match(YQLParser.IGNORE)
                pass

            elif la_ == 5:
                self.state = 2666
                self.match(YQLParser.UPSERT)
                pass

            elif la_ == 6:
                self.state = 2667
                self.match(YQLParser.REPLACE)
                pass


            self.state = 2670
            self.match(YQLParser.INTO)
            self.state = 2671
            self.into_simple_table_ref()
            self.state = 2672
            self.into_values_source()
            self.state = 2674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 2673
                self.returning_columns_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_values_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def values_source(self):
            return self.getTypedRuleContext(YQLParser.Values_sourceContext,0)


        def pure_column_list(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_listContext,0)


        def DEFAULT(self):
            return self.getToken(YQLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(YQLParser.VALUES, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_into_values_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_values_source" ):
                listener.enterInto_values_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_values_source" ):
                listener.exitInto_values_source(self)




    def into_values_source(self):

        localctx = YQLParser.Into_values_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_into_values_source)
        try:
            self.state = 2682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 108, 141, 233, 238, 270, 316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2676
                    self.pure_column_list()


                self.state = 2679
                self.values_source()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2680
                self.match(YQLParser.DEFAULT)
                self.state = 2681
                self.match(YQLParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(YQLParser.VALUES, 0)

        def values_source_row_list(self):
            return self.getTypedRuleContext(YQLParser.Values_source_row_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_values_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_stmt" ):
                listener.enterValues_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_stmt" ):
                listener.exitValues_stmt(self)




    def values_stmt(self):

        localctx = YQLParser.Values_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_values_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.match(YQLParser.VALUES)
            self.state = 2685
            self.values_source_row_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def values_stmt(self):
            return self.getTypedRuleContext(YQLParser.Values_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_values_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_source" ):
                listener.enterValues_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_source" ):
                listener.exitValues_source(self)




    def values_source(self):

        localctx = YQLParser.Values_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_values_source)
        try:
            self.state = 2689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2687
                self.values_stmt()
                pass
            elif token in [25, 108, 141, 233, 238, 270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2688
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_source_row_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def values_source_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Values_source_rowContext)
            else:
                return self.getTypedRuleContext(YQLParser.Values_source_rowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_values_source_row_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_source_row_list" ):
                listener.enterValues_source_row_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_source_row_list" ):
                listener.exitValues_source_row_list(self)




    def values_source_row_list(self):

        localctx = YQLParser.Values_source_row_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_values_source_row_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2691
            self.values_source_row()
            self.state = 2696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2692
                self.match(YQLParser.COMMA)
                self.state = 2693
                self.values_source_row()
                self.state = 2698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_source_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_values_source_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_source_row" ):
                listener.enterValues_source_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_source_row" ):
                listener.exitValues_source_row(self)




    def values_source_row(self):

        localctx = YQLParser.Values_source_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_values_source_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self.match(YQLParser.LPAREN)
            self.state = 2700
            self.expr_list()
            self.state = 2701
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_values_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_listContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_simple_values_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_values_source" ):
                listener.enterSimple_values_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_values_source" ):
                listener.exitSimple_values_source(self)




    def simple_values_source(self):

        localctx = YQLParser.Simple_values_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_simple_values_source)
        try:
            self.state = 2705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2703
                self.expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2704
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_data_source_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def with_table_settings(self):
            return self.getTypedRuleContext(YQLParser.With_table_settingsContext,0)


        def OR(self):
            return self.getToken(YQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(YQLParser.REPLACE, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_create_external_data_source_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_data_source_stmt" ):
                listener.enterCreate_external_data_source_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_data_source_stmt" ):
                listener.exitCreate_external_data_source_stmt(self)




    def create_external_data_source_stmt(self):

        localctx = YQLParser.Create_external_data_source_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_create_external_data_source_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            self.match(YQLParser.CREATE)
            self.state = 2710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 2708
                self.match(YQLParser.OR)
                self.state = 2709
                self.match(YQLParser.REPLACE)


            self.state = 2712
            self.match(YQLParser.EXTERNAL)
            self.state = 2713
            self.match(YQLParser.DATA)
            self.state = 2714
            self.match(YQLParser.SOURCE)
            self.state = 2718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2715
                self.match(YQLParser.IF)
                self.state = 2716
                self.match(YQLParser.NOT)
                self.state = 2717
                self.match(YQLParser.EXISTS)


            self.state = 2720
            self.object_ref()
            self.state = 2721
            self.with_table_settings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_data_source_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_external_data_source_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_external_data_source_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_external_data_source_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_external_data_source_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_data_source_stmt" ):
                listener.enterAlter_external_data_source_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_data_source_stmt" ):
                listener.exitAlter_external_data_source_stmt(self)




    def alter_external_data_source_stmt(self):

        localctx = YQLParser.Alter_external_data_source_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_alter_external_data_source_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2723
            self.match(YQLParser.ALTER)
            self.state = 2724
            self.match(YQLParser.EXTERNAL)
            self.state = 2725
            self.match(YQLParser.DATA)
            self.state = 2726
            self.match(YQLParser.SOURCE)
            self.state = 2727
            self.object_ref()
            self.state = 2728
            self.alter_external_data_source_action()
            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2729
                self.match(YQLParser.COMMA)
                self.state = 2730
                self.alter_external_data_source_action()
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_data_source_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_set_table_setting_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_uncompatContext,0)


        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_external_data_source_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_data_source_action" ):
                listener.enterAlter_external_data_source_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_data_source_action" ):
                listener.exitAlter_external_data_source_action(self)




    def alter_external_data_source_action(self):

        localctx = YQLParser.Alter_external_data_source_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_alter_external_data_source_action)
        try:
            self.state = 2739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2736
                self.alter_table_set_table_setting_uncompat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2737
                self.alter_table_set_table_setting_compat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2738
                self.alter_table_reset_table_setting()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_data_source_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_external_data_source_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_data_source_stmt" ):
                listener.enterDrop_external_data_source_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_data_source_stmt" ):
                listener.exitDrop_external_data_source_stmt(self)




    def drop_external_data_source_stmt(self):

        localctx = YQLParser.Drop_external_data_source_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_drop_external_data_source_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2741
            self.match(YQLParser.DROP)
            self.state = 2742
            self.match(YQLParser.EXTERNAL)
            self.state = 2743
            self.match(YQLParser.DATA)
            self.state = 2744
            self.match(YQLParser.SOURCE)
            self.state = 2747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 2745
                self.match(YQLParser.IF)
                self.state = 2746
                self.match(YQLParser.EXISTS)


            self.state = 2749
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def create_object_features(self):
            return self.getTypedRuleContext(YQLParser.Create_object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = YQLParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            self.match(YQLParser.CREATE)
            self.state = 2752
            self.match(YQLParser.VIEW)
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 2753
                self.match(YQLParser.IF)
                self.state = 2754
                self.match(YQLParser.NOT)
                self.state = 2755
                self.match(YQLParser.EXISTS)


            self.state = 2758
            self.object_ref()
            self.state = 2760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2759
                self.create_object_features()


            self.state = 2762
            self.match(YQLParser.AS)
            self.state = 2763
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view_stmt" ):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view_stmt" ):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = YQLParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(YQLParser.DROP)
            self.state = 2766
            self.match(YQLParser.VIEW)
            self.state = 2769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 2767
                self.match(YQLParser.IF)
                self.state = 2768
                self.match(YQLParser.EXISTS)


            self.state = 2771
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_object_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPSERT(self):
            return self.getToken(YQLParser.UPSERT, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def object_type_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_type_refContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def create_object_features(self):
            return self.getTypedRuleContext(YQLParser.Create_object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_upsert_object_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_object_stmt" ):
                listener.enterUpsert_object_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_object_stmt" ):
                listener.exitUpsert_object_stmt(self)




    def upsert_object_stmt(self):

        localctx = YQLParser.Upsert_object_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_upsert_object_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self.match(YQLParser.UPSERT)
            self.state = 2774
            self.match(YQLParser.OBJECT)
            self.state = 2775
            self.object_ref()
            self.state = 2776
            self.match(YQLParser.LPAREN)
            self.state = 2777
            self.match(YQLParser.TYPE)
            self.state = 2778
            self.object_type_ref()
            self.state = 2779
            self.match(YQLParser.RPAREN)
            self.state = 2781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2780
                self.create_object_features()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_object_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def object_type_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_type_refContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def create_object_features(self):
            return self.getTypedRuleContext(YQLParser.Create_object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_object_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_object_stmt" ):
                listener.enterCreate_object_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_object_stmt" ):
                listener.exitCreate_object_stmt(self)




    def create_object_stmt(self):

        localctx = YQLParser.Create_object_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_create_object_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.match(YQLParser.CREATE)
            self.state = 2784
            self.match(YQLParser.OBJECT)
            self.state = 2788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2785
                self.match(YQLParser.IF)
                self.state = 2786
                self.match(YQLParser.NOT)
                self.state = 2787
                self.match(YQLParser.EXISTS)


            self.state = 2790
            self.object_ref()
            self.state = 2791
            self.match(YQLParser.LPAREN)
            self.state = 2792
            self.match(YQLParser.TYPE)
            self.state = 2793
            self.object_type_ref()
            self.state = 2794
            self.match(YQLParser.RPAREN)
            self.state = 2796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2795
                self.create_object_features()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_object_featuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def object_features(self):
            return self.getTypedRuleContext(YQLParser.Object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_object_features

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_object_features" ):
                listener.enterCreate_object_features(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_object_features" ):
                listener.exitCreate_object_features(self)




    def create_object_features(self):

        localctx = YQLParser.Create_object_featuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_create_object_features)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self.match(YQLParser.WITH)
            self.state = 2799
            self.object_features()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_object_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def object_type_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_type_refContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def alter_object_features(self):
            return self.getTypedRuleContext(YQLParser.Alter_object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_object_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_object_stmt" ):
                listener.enterAlter_object_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_object_stmt" ):
                listener.exitAlter_object_stmt(self)




    def alter_object_stmt(self):

        localctx = YQLParser.Alter_object_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_alter_object_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(YQLParser.ALTER)
            self.state = 2802
            self.match(YQLParser.OBJECT)
            self.state = 2803
            self.object_ref()
            self.state = 2804
            self.match(YQLParser.LPAREN)
            self.state = 2805
            self.match(YQLParser.TYPE)
            self.state = 2806
            self.object_type_ref()
            self.state = 2807
            self.match(YQLParser.RPAREN)
            self.state = 2808
            self.alter_object_features()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_object_featuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def object_features(self):
            return self.getTypedRuleContext(YQLParser.Object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_object_features

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_object_features" ):
                listener.enterAlter_object_features(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_object_features" ):
                listener.exitAlter_object_features(self)




    def alter_object_features(self):

        localctx = YQLParser.Alter_object_featuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_alter_object_features)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self.match(YQLParser.SET)
            self.state = 2811
            self.object_features()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_object_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def object_type_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_type_refContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def drop_object_features(self):
            return self.getTypedRuleContext(YQLParser.Drop_object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_drop_object_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_object_stmt" ):
                listener.enterDrop_object_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_object_stmt" ):
                listener.exitDrop_object_stmt(self)




    def drop_object_stmt(self):

        localctx = YQLParser.Drop_object_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_drop_object_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self.match(YQLParser.DROP)
            self.state = 2814
            self.match(YQLParser.OBJECT)
            self.state = 2817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2815
                self.match(YQLParser.IF)
                self.state = 2816
                self.match(YQLParser.EXISTS)


            self.state = 2819
            self.object_ref()
            self.state = 2820
            self.match(YQLParser.LPAREN)
            self.state = 2821
            self.match(YQLParser.TYPE)
            self.state = 2822
            self.object_type_ref()
            self.state = 2823
            self.match(YQLParser.RPAREN)
            self.state = 2825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2824
                self.drop_object_features()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_object_featuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def object_features(self):
            return self.getTypedRuleContext(YQLParser.Object_featuresContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_drop_object_features

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_object_features" ):
                listener.enterDrop_object_features(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_object_features" ):
                listener.exitDrop_object_features(self)




    def drop_object_features(self):

        localctx = YQLParser.Drop_object_featuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_drop_object_features)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.match(YQLParser.WITH)
            self.state = 2828
            self.object_features()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_feature_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_or_typeContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def bool_value(self):
            return self.getTypedRuleContext(YQLParser.Bool_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_object_feature_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_feature_value" ):
                listener.enterObject_feature_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_feature_value" ):
                listener.exitObject_feature_value(self)




    def object_feature_value(self):

        localctx = YQLParser.Object_feature_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_object_feature_value)
        try:
            self.state = 2834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2830
                self.id_or_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2831
                self.bind_parameter()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2832
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [132, 301]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2833
                self.bool_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_feature_kvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def object_feature_value(self):
            return self.getTypedRuleContext(YQLParser.Object_feature_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_object_feature_kv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_feature_kv" ):
                listener.enterObject_feature_kv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_feature_kv" ):
                listener.exitObject_feature_kv(self)




    def object_feature_kv(self):

        localctx = YQLParser.Object_feature_kvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_object_feature_kv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2836
            self.an_id_or_type()
            self.state = 2837
            self.match(YQLParser.EQUALS)
            self.state = 2838
            self.object_feature_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_feature_flagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_object_feature_flag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_feature_flag" ):
                listener.enterObject_feature_flag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_feature_flag" ):
                listener.exitObject_feature_flag(self)




    def object_feature_flag(self):

        localctx = YQLParser.Object_feature_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_object_feature_flag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2840
            self.an_id_or_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_featureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_feature_kv(self):
            return self.getTypedRuleContext(YQLParser.Object_feature_kvContext,0)


        def object_feature_flag(self):
            return self.getTypedRuleContext(YQLParser.Object_feature_flagContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_object_feature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_feature" ):
                listener.enterObject_feature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_feature" ):
                listener.exitObject_feature(self)




    def object_feature(self):

        localctx = YQLParser.Object_featureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_object_feature)
        try:
            self.state = 2844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2842
                self.object_feature_kv()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2843
                self.object_feature_flag()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_featuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_feature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Object_featureContext)
            else:
                return self.getTypedRuleContext(YQLParser.Object_featureContext,i)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_object_features

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_features" ):
                listener.enterObject_features(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_features" ):
                listener.exitObject_features(self)




    def object_features(self):

        localctx = YQLParser.Object_featuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_object_features)
        self._la = 0 # Token type
        try:
            self.state = 2858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2846
                self.object_feature()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2847
                self.match(YQLParser.LPAREN)
                self.state = 2848
                self.object_feature()
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 2849
                    self.match(YQLParser.COMMA)
                    self.state = 2850
                    self.object_feature()
                    self.state = 2855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2856
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_object_type_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_ref" ):
                listener.enterObject_type_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_ref" ):
                listener.exitObject_type_ref(self)




    def object_type_ref(self):

        localctx = YQLParser.Object_type_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_object_type_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2860
            self.an_id_or_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def create_table_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Create_table_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Create_table_entryContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def TEMP(self):
            return self.getToken(YQLParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(YQLParser.TEMPORARY, 0)

        def OR(self):
            return self.getToken(YQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(YQLParser.REPLACE, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def table_inherits(self):
            return self.getTypedRuleContext(YQLParser.Table_inheritsContext,0)


        def table_partition_by(self):
            return self.getTypedRuleContext(YQLParser.Table_partition_byContext,0)


        def with_table_settings(self):
            return self.getTypedRuleContext(YQLParser.With_table_settingsContext,0)


        def table_tablestore(self):
            return self.getTypedRuleContext(YQLParser.Table_tablestoreContext,0)


        def table_as_source(self):
            return self.getTypedRuleContext(YQLParser.Table_as_sourceContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = YQLParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(YQLParser.CREATE)
            self.state = 2865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 2863
                self.match(YQLParser.OR)
                self.state = 2864
                self.match(YQLParser.REPLACE)


            self.state = 2875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [287]:
                self.state = 2867
                self.match(YQLParser.TABLE)
                pass
            elif token in [290]:
                self.state = 2868
                self.match(YQLParser.TABLESTORE)
                pass
            elif token in [130]:
                self.state = 2869
                self.match(YQLParser.EXTERNAL)
                self.state = 2870
                self.match(YQLParser.TABLE)
                pass
            elif token in [292]:
                self.state = 2871
                self.match(YQLParser.TEMP)
                self.state = 2872
                self.match(YQLParser.TABLE)
                pass
            elif token in [293]:
                self.state = 2873
                self.match(YQLParser.TEMPORARY)
                self.state = 2874
                self.match(YQLParser.TABLE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2877
                self.match(YQLParser.IF)
                self.state = 2878
                self.match(YQLParser.NOT)
                self.state = 2879
                self.match(YQLParser.EXISTS)


            self.state = 2882
            self.simple_table_ref()
            self.state = 2883
            self.match(YQLParser.LPAREN)
            self.state = 2884
            self.create_table_entry()
            self.state = 2889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2885
                    self.match(YQLParser.COMMA)
                    self.state = 2886
                    self.create_table_entry() 
                self.state = 2891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 2892
                self.match(YQLParser.COMMA)


            self.state = 2895
            self.match(YQLParser.RPAREN)
            self.state = 2897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 2896
                self.table_inherits()


            self.state = 2900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 2899
                self.table_partition_by()


            self.state = 2903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 2902
                self.with_table_settings()


            self.state = 2906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2905
                self.table_tablestore()


            self.state = 2909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2908
                self.table_as_source()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_schema(self):
            return self.getTypedRuleContext(YQLParser.Column_schemaContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(YQLParser.Table_constraintContext,0)


        def table_index(self):
            return self.getTypedRuleContext(YQLParser.Table_indexContext,0)


        def family_entry(self):
            return self.getTypedRuleContext(YQLParser.Family_entryContext,0)


        def changefeed(self):
            return self.getTypedRuleContext(YQLParser.ChangefeedContext,0)


        def an_id_schema(self):
            return self.getTypedRuleContext(YQLParser.An_id_schemaContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_table_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_entry" ):
                listener.enterCreate_table_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_entry" ):
                listener.exitCreate_table_entry(self)




    def create_table_entry(self):

        localctx = YQLParser.Create_table_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_create_table_entry)
        try:
            self.state = 2917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2911
                self.column_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2912
                self.table_constraint()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2913
                self.table_index()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2914
                self.family_entry()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2915
                self.changefeed()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2916
                self.an_id_schema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_backup_collection_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def backup_collection(self):
            return self.getTypedRuleContext(YQLParser.Backup_collectionContext,0)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def backup_collection_settings(self):
            return self.getTypedRuleContext(YQLParser.Backup_collection_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def create_backup_collection_entries(self):
            return self.getTypedRuleContext(YQLParser.Create_backup_collection_entriesContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_backup_collection_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_backup_collection_stmt" ):
                listener.enterCreate_backup_collection_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_backup_collection_stmt" ):
                listener.exitCreate_backup_collection_stmt(self)




    def create_backup_collection_stmt(self):

        localctx = YQLParser.Create_backup_collection_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_create_backup_collection_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2919
            self.match(YQLParser.CREATE)
            self.state = 2920
            self.backup_collection()
            self.state = 2922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25 or _la==94:
                self.state = 2921
                self.create_backup_collection_entries()


            self.state = 2924
            self.match(YQLParser.WITH)
            self.state = 2925
            self.match(YQLParser.LPAREN)
            self.state = 2926
            self.backup_collection_settings()
            self.state = 2927
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_backup_collection_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def backup_collection(self):
            return self.getTypedRuleContext(YQLParser.Backup_collectionContext,0)


        def alter_backup_collection_actions(self):
            return self.getTypedRuleContext(YQLParser.Alter_backup_collection_actionsContext,0)


        def alter_backup_collection_entries(self):
            return self.getTypedRuleContext(YQLParser.Alter_backup_collection_entriesContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_backup_collection_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_backup_collection_stmt" ):
                listener.enterAlter_backup_collection_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_backup_collection_stmt" ):
                listener.exitAlter_backup_collection_stmt(self)




    def alter_backup_collection_stmt(self):

        localctx = YQLParser.Alter_backup_collection_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_alter_backup_collection_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(YQLParser.ALTER)
            self.state = 2930
            self.backup_collection()
            self.state = 2933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [248, 272]:
                self.state = 2931
                self.alter_backup_collection_actions()
                pass
            elif token in [40, 111]:
                self.state = 2932
                self.alter_backup_collection_entries()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_backup_collection_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def backup_collection(self):
            return self.getTypedRuleContext(YQLParser.Backup_collectionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_drop_backup_collection_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_backup_collection_stmt" ):
                listener.enterDrop_backup_collection_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_backup_collection_stmt" ):
                listener.exitDrop_backup_collection_stmt(self)




    def drop_backup_collection_stmt(self):

        localctx = YQLParser.Drop_backup_collection_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_drop_backup_collection_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2935
            self.match(YQLParser.DROP)
            self.state = 2936
            self.backup_collection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_backup_collection_entriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(YQLParser.DATABASE, 0)

        def create_backup_collection_entries_many(self):
            return self.getTypedRuleContext(YQLParser.Create_backup_collection_entries_manyContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_backup_collection_entries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_backup_collection_entries" ):
                listener.enterCreate_backup_collection_entries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_backup_collection_entries" ):
                listener.exitCreate_backup_collection_entries(self)




    def create_backup_collection_entries(self):

        localctx = YQLParser.Create_backup_collection_entriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_create_backup_collection_entries)
        try:
            self.state = 2940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2938
                self.match(YQLParser.DATABASE)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2939
                self.create_backup_collection_entries_many()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_backup_collection_entries_manyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def table_list(self):
            return self.getTypedRuleContext(YQLParser.Table_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_create_backup_collection_entries_many

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_backup_collection_entries_many" ):
                listener.enterCreate_backup_collection_entries_many(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_backup_collection_entries_many" ):
                listener.exitCreate_backup_collection_entries_many(self)




    def create_backup_collection_entries_many(self):

        localctx = YQLParser.Create_backup_collection_entries_manyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_create_backup_collection_entries_many)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2942
            self.match(YQLParser.LPAREN)
            self.state = 2943
            self.table_list()
            self.state = 2944
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.TABLE)
            else:
                return self.getToken(YQLParser.TABLE, i)

        def an_id_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_tableContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_tableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_table_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_list" ):
                listener.enterTable_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_list" ):
                listener.exitTable_list(self)




    def table_list(self):

        localctx = YQLParser.Table_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_table_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            self.match(YQLParser.TABLE)
            self.state = 2947
            self.an_id_table()
            self.state = 2953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2948
                self.match(YQLParser.COMMA)
                self.state = 2949
                self.match(YQLParser.TABLE)
                self.state = 2950
                self.an_id_table()
                self.state = 2955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_backup_collection_actionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_backup_collection_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_backup_collection_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_backup_collection_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_backup_collection_actions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_backup_collection_actions" ):
                listener.enterAlter_backup_collection_actions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_backup_collection_actions" ):
                listener.exitAlter_backup_collection_actions(self)




    def alter_backup_collection_actions(self):

        localctx = YQLParser.Alter_backup_collection_actionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_alter_backup_collection_actions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2956
            self.alter_backup_collection_action()
            self.state = 2961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2957
                self.match(YQLParser.COMMA)
                self.state = 2958
                self.alter_backup_collection_action()
                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_backup_collection_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_backup_collection_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_backup_collection_action" ):
                listener.enterAlter_backup_collection_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_backup_collection_action" ):
                listener.exitAlter_backup_collection_action(self)




    def alter_backup_collection_action(self):

        localctx = YQLParser.Alter_backup_collection_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_alter_backup_collection_action)
        try:
            self.state = 2966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2964
                self.alter_table_set_table_setting_compat()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2965
                self.alter_table_reset_table_setting()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_backup_collection_entriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_backup_collection_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_backup_collection_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_backup_collection_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_backup_collection_entries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_backup_collection_entries" ):
                listener.enterAlter_backup_collection_entries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_backup_collection_entries" ):
                listener.exitAlter_backup_collection_entries(self)




    def alter_backup_collection_entries(self):

        localctx = YQLParser.Alter_backup_collection_entriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_alter_backup_collection_entries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2968
            self.alter_backup_collection_entry()
            self.state = 2973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2969
                self.match(YQLParser.COMMA)
                self.state = 2970
                self.alter_backup_collection_entry()
                self.state = 2975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_backup_collection_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def DATABASE(self):
            return self.getToken(YQLParser.DATABASE, 0)

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def an_id_table(self):
            return self.getTypedRuleContext(YQLParser.An_id_tableContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_backup_collection_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_backup_collection_entry" ):
                listener.enterAlter_backup_collection_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_backup_collection_entry" ):
                listener.exitAlter_backup_collection_entry(self)




    def alter_backup_collection_entry(self):

        localctx = YQLParser.Alter_backup_collection_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_alter_backup_collection_entry)
        try:
            self.state = 2986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2976
                self.match(YQLParser.ADD)
                self.state = 2977
                self.match(YQLParser.DATABASE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2978
                self.match(YQLParser.DROP)
                self.state = 2979
                self.match(YQLParser.DATABASE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2980
                self.match(YQLParser.ADD)
                self.state = 2981
                self.match(YQLParser.TABLE)
                self.state = 2982
                self.an_id_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2983
                self.match(YQLParser.DROP)
                self.state = 2984
                self.match(YQLParser.TABLE)
                self.state = 2985
                self.an_id_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_collectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKUP(self):
            return self.getToken(YQLParser.BACKUP, 0)

        def COLLECTION(self):
            return self.getToken(YQLParser.COLLECTION, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_backup_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_collection" ):
                listener.enterBackup_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_collection" ):
                listener.exitBackup_collection(self)




    def backup_collection(self):

        localctx = YQLParser.Backup_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_backup_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2988
            self.match(YQLParser.BACKUP)
            self.state = 2989
            self.match(YQLParser.COLLECTION)
            self.state = 2990
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_collection_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backup_collection_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Backup_collection_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Backup_collection_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_backup_collection_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_collection_settings" ):
                listener.enterBackup_collection_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_collection_settings" ):
                listener.exitBackup_collection_settings(self)




    def backup_collection_settings(self):

        localctx = YQLParser.Backup_collection_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_backup_collection_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.backup_collection_settings_entry()
            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 2993
                self.match(YQLParser.COMMA)
                self.state = 2994
                self.backup_collection_settings_entry()
                self.state = 2999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_collection_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def table_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Table_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_backup_collection_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_collection_settings_entry" ):
                listener.enterBackup_collection_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_collection_settings_entry" ):
                listener.exitBackup_collection_settings_entry(self)




    def backup_collection_settings_entry(self):

        localctx = YQLParser.Backup_collection_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_backup_collection_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3000
            self.an_id()
            self.state = 3001
            self.match(YQLParser.EQUALS)
            self.state = 3002
            self.table_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKUP(self):
            return self.getToken(YQLParser.BACKUP, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def INCREMENTAL(self):
            return self.getToken(YQLParser.INCREMENTAL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_backup_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_stmt" ):
                listener.enterBackup_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_stmt" ):
                listener.exitBackup_stmt(self)




    def backup_stmt(self):

        localctx = YQLParser.Backup_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_backup_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            self.match(YQLParser.BACKUP)
            self.state = 3005
            self.object_ref()
            self.state = 3007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 3006
                self.match(YQLParser.INCREMENTAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restore_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTORE(self):
            return self.getToken(YQLParser.RESTORE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def AT(self):
            return self.getToken(YQLParser.AT, 0)

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_restore_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestore_stmt" ):
                listener.enterRestore_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestore_stmt" ):
                listener.exitRestore_stmt(self)




    def restore_stmt(self):

        localctx = YQLParser.Restore_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_restore_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            self.match(YQLParser.RESTORE)
            self.state = 3010
            self.object_ref()
            self.state = 3013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 3011
                self.match(YQLParser.AT)
                self.state = 3012
                self.match(YQLParser.STRING_VALUE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_database_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(YQLParser.DATABASE, 0)

        def an_id_schema(self):
            return self.getTypedRuleContext(YQLParser.An_id_schemaContext,0)


        def OWNER(self):
            return self.getToken(YQLParser.OWNER, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def role_name(self):
            return self.getTypedRuleContext(YQLParser.Role_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database_stmt" ):
                listener.enterAlter_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database_stmt" ):
                listener.exitAlter_database_stmt(self)




    def alter_database_stmt(self):

        localctx = YQLParser.Alter_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_alter_database_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3015
            self.match(YQLParser.ALTER)
            self.state = 3016
            self.match(YQLParser.DATABASE)
            self.state = 3017
            self.an_id_schema()
            self.state = 3018
            self.match(YQLParser.OWNER)
            self.state = 3019
            self.match(YQLParser.TO)
            self.state = 3020
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_inheritsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERITS(self):
            return self.getToken(YQLParser.INHERITS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def simple_table_ref_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Simple_table_ref_coreContext)
            else:
                return self.getTypedRuleContext(YQLParser.Simple_table_ref_coreContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_table_inherits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_inherits" ):
                listener.enterTable_inherits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_inherits" ):
                listener.exitTable_inherits(self)




    def table_inherits(self):

        localctx = YQLParser.Table_inheritsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_table_inherits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3022
            self.match(YQLParser.INHERITS)
            self.state = 3023
            self.match(YQLParser.LPAREN)
            self.state = 3024
            self.simple_table_ref_core()
            self.state = 3029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3025
                self.match(YQLParser.COMMA)
                self.state = 3026
                self.simple_table_ref_core()
                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3032
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(YQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def HASH(self):
            return self.getToken(YQLParser.HASH, 0)

        def pure_column_list(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_partition_by" ):
                listener.enterTable_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_partition_by" ):
                listener.exitTable_partition_by(self)




    def table_partition_by(self):

        localctx = YQLParser.Table_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_table_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            self.match(YQLParser.PARTITION)
            self.state = 3035
            self.match(YQLParser.BY)
            self.state = 3036
            self.match(YQLParser.HASH)
            self.state = 3037
            self.pure_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def table_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Table_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Table_settings_entryContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_with_table_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_settings" ):
                listener.enterWith_table_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_settings" ):
                listener.exitWith_table_settings(self)




    def with_table_settings(self):

        localctx = YQLParser.With_table_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_with_table_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.match(YQLParser.WITH)
            self.state = 3040
            self.match(YQLParser.LPAREN)
            self.state = 3041
            self.table_settings_entry()
            self.state = 3046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3042
                self.match(YQLParser.COMMA)
                self.state = 3043
                self.table_settings_entry()
                self.state = 3048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3049
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_tablestoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def simple_table_ref_core(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_ref_coreContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_tablestore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_tablestore" ):
                listener.enterTable_tablestore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_tablestore" ):
                listener.exitTable_tablestore(self)




    def table_tablestore(self):

        localctx = YQLParser.Table_tablestoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_table_tablestore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3051
            self.match(YQLParser.TABLESTORE)
            self.state = 3052
            self.simple_table_ref_core()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def table_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Table_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_settings_entry" ):
                listener.enterTable_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_settings_entry" ):
                listener.exitTable_settings_entry(self)




    def table_settings_entry(self):

        localctx = YQLParser.Table_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_table_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3054
            self.an_id()
            self.state = 3055
            self.match(YQLParser.EQUALS)
            self.state = 3056
            self.table_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_as_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def values_source(self):
            return self.getTypedRuleContext(YQLParser.Values_sourceContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_as_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_as_source" ):
                listener.enterTable_as_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_as_source" ):
                listener.exitTable_as_source(self)




    def table_as_source(self):

        localctx = YQLParser.Table_as_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_table_as_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.match(YQLParser.AS)
            self.state = 3059
            self.values_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def alter_table_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_table_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_table_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = YQLParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_alter_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(YQLParser.ALTER)
            self.state = 3062
            self.match(YQLParser.TABLE)
            self.state = 3063
            self.simple_table_ref()
            self.state = 3064
            self.alter_table_action()
            self.state = 3069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3065
                self.match(YQLParser.COMMA)
                self.state = 3066
                self.alter_table_action()
                self.state = 3071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_add_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_columnContext,0)


        def alter_table_drop_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_drop_columnContext,0)


        def alter_table_alter_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_columnContext,0)


        def alter_table_add_column_family(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_column_familyContext,0)


        def alter_table_alter_column_family(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_column_familyContext,0)


        def alter_table_set_table_setting_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_uncompatContext,0)


        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def alter_table_add_index(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_indexContext,0)


        def alter_table_drop_index(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_drop_indexContext,0)


        def alter_table_rename_to(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_rename_toContext,0)


        def alter_table_add_changefeed(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_changefeedContext,0)


        def alter_table_alter_changefeed(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_changefeedContext,0)


        def alter_table_drop_changefeed(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_drop_changefeedContext,0)


        def alter_table_rename_index_to(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_rename_index_toContext,0)


        def alter_table_alter_index(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_indexContext,0)


        def alter_table_alter_column_drop_not_null(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_column_drop_not_nullContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_action" ):
                listener.enterAlter_table_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_action" ):
                listener.exitAlter_table_action(self)




    def alter_table_action(self):

        localctx = YQLParser.Alter_table_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_alter_table_action)
        try:
            self.state = 3089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3072
                self.alter_table_add_column()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3073
                self.alter_table_drop_column()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3074
                self.alter_table_alter_column()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3075
                self.alter_table_add_column_family()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3076
                self.alter_table_alter_column_family()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3077
                self.alter_table_set_table_setting_uncompat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3078
                self.alter_table_set_table_setting_compat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3079
                self.alter_table_reset_table_setting()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3080
                self.alter_table_add_index()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3081
                self.alter_table_drop_index()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3082
                self.alter_table_rename_to()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3083
                self.alter_table_add_changefeed()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3084
                self.alter_table_alter_changefeed()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3085
                self.alter_table_drop_changefeed()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3086
                self.alter_table_rename_index_to()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3087
                self.alter_table_alter_index()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3088
                self.alter_table_alter_column_drop_not_null()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def alter_external_table_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_external_table_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_external_table_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_external_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_table_stmt" ):
                listener.enterAlter_external_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_table_stmt" ):
                listener.exitAlter_external_table_stmt(self)




    def alter_external_table_stmt(self):

        localctx = YQLParser.Alter_external_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_alter_external_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3091
            self.match(YQLParser.ALTER)
            self.state = 3092
            self.match(YQLParser.EXTERNAL)
            self.state = 3093
            self.match(YQLParser.TABLE)
            self.state = 3094
            self.simple_table_ref()
            self.state = 3095
            self.alter_external_table_action()
            self.state = 3100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3096
                self.match(YQLParser.COMMA)
                self.state = 3097
                self.alter_external_table_action()
                self.state = 3102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_table_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_add_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_columnContext,0)


        def alter_table_drop_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_drop_columnContext,0)


        def alter_table_set_table_setting_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_uncompatContext,0)


        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_external_table_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_table_action" ):
                listener.enterAlter_external_table_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_table_action" ):
                listener.exitAlter_external_table_action(self)




    def alter_external_table_action(self):

        localctx = YQLParser.Alter_external_table_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_alter_external_table_action)
        try:
            self.state = 3108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3103
                self.alter_table_add_column()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3104
                self.alter_table_drop_column()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3105
                self.alter_table_set_table_setting_uncompat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3106
                self.alter_table_set_table_setting_compat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3107
                self.alter_table_reset_table_setting()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_store_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_table_store_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_table_store_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_table_store_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_store_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_store_stmt" ):
                listener.enterAlter_table_store_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_store_stmt" ):
                listener.exitAlter_table_store_stmt(self)




    def alter_table_store_stmt(self):

        localctx = YQLParser.Alter_table_store_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_alter_table_store_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3110
            self.match(YQLParser.ALTER)
            self.state = 3111
            self.match(YQLParser.TABLESTORE)
            self.state = 3112
            self.object_ref()
            self.state = 3113
            self.alter_table_store_action()
            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3114
                self.match(YQLParser.COMMA)
                self.state = 3115
                self.alter_table_store_action()
                self.state = 3120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_store_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_add_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_add_columnContext,0)


        def alter_table_drop_column(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_drop_columnContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_store_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_store_action" ):
                listener.enterAlter_table_store_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_store_action" ):
                listener.exitAlter_table_store_action(self)




    def alter_table_store_action(self):

        localctx = YQLParser.Alter_table_store_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_alter_table_store_action)
        try:
            self.state = 3123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3121
                self.alter_table_add_column()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3122
                self.alter_table_drop_column()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def column_schema(self):
            return self.getTypedRuleContext(YQLParser.Column_schemaContext,0)


        def COLUMN(self):
            return self.getToken(YQLParser.COLUMN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_add_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_column" ):
                listener.enterAlter_table_add_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_column" ):
                listener.exitAlter_table_add_column(self)




    def alter_table_add_column(self):

        localctx = YQLParser.Alter_table_add_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_alter_table_add_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3125
            self.match(YQLParser.ADD)
            self.state = 3127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 3126
                self.match(YQLParser.COLUMN)


            self.state = 3129
            self.column_schema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_drop_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def COLUMN(self):
            return self.getToken(YQLParser.COLUMN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_drop_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_drop_column" ):
                listener.enterAlter_table_drop_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_drop_column" ):
                listener.exitAlter_table_drop_column(self)




    def alter_table_drop_column(self):

        localctx = YQLParser.Alter_table_drop_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_alter_table_drop_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            self.match(YQLParser.DROP)
            self.state = 3133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 3132
                self.match(YQLParser.COLUMN)


            self.state = 3135
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(YQLParser.COLUMN, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def family_relation(self):
            return self.getTypedRuleContext(YQLParser.Family_relationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_column" ):
                listener.enterAlter_table_alter_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_column" ):
                listener.exitAlter_table_alter_column(self)




    def alter_table_alter_column(self):

        localctx = YQLParser.Alter_table_alter_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_alter_table_alter_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.match(YQLParser.ALTER)
            self.state = 3138
            self.match(YQLParser.COLUMN)
            self.state = 3139
            self.an_id()
            self.state = 3140
            self.match(YQLParser.SET)
            self.state = 3141
            self.family_relation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_column_drop_not_nullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(YQLParser.COLUMN, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_column_drop_not_null

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_column_drop_not_null" ):
                listener.enterAlter_table_alter_column_drop_not_null(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_column_drop_not_null" ):
                listener.exitAlter_table_alter_column_drop_not_null(self)




    def alter_table_alter_column_drop_not_null(self):

        localctx = YQLParser.Alter_table_alter_column_drop_not_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_alter_table_alter_column_drop_not_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3143
            self.match(YQLParser.ALTER)
            self.state = 3144
            self.match(YQLParser.COLUMN)
            self.state = 3145
            self.an_id()
            self.state = 3146
            self.match(YQLParser.DROP)
            self.state = 3147
            self.match(YQLParser.NOT)
            self.state = 3148
            self.match(YQLParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_column_familyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def family_entry(self):
            return self.getTypedRuleContext(YQLParser.Family_entryContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_add_column_family

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_column_family" ):
                listener.enterAlter_table_add_column_family(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_column_family" ):
                listener.exitAlter_table_add_column_family(self)




    def alter_table_add_column_family(self):

        localctx = YQLParser.Alter_table_add_column_familyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_alter_table_add_column_family)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.match(YQLParser.ADD)
            self.state = 3151
            self.family_entry()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_column_familyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def FAMILY(self):
            return self.getToken(YQLParser.FAMILY, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def family_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Family_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_column_family

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_column_family" ):
                listener.enterAlter_table_alter_column_family(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_column_family" ):
                listener.exitAlter_table_alter_column_family(self)




    def alter_table_alter_column_family(self):

        localctx = YQLParser.Alter_table_alter_column_familyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_alter_table_alter_column_family)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3153
            self.match(YQLParser.ALTER)
            self.state = 3154
            self.match(YQLParser.FAMILY)
            self.state = 3155
            self.an_id()
            self.state = 3156
            self.match(YQLParser.SET)
            self.state = 3157
            self.an_id()
            self.state = 3158
            self.family_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_set_table_setting_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def table_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Table_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_set_table_setting_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_set_table_setting_uncompat" ):
                listener.enterAlter_table_set_table_setting_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_set_table_setting_uncompat" ):
                listener.exitAlter_table_set_table_setting_uncompat(self)




    def alter_table_set_table_setting_uncompat(self):

        localctx = YQLParser.Alter_table_set_table_setting_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_alter_table_set_table_setting_uncompat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            self.match(YQLParser.SET)
            self.state = 3161
            self.an_id()
            self.state = 3162
            self.table_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_set_table_setting_compatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def alter_table_setting_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_table_setting_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_table_setting_entryContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_set_table_setting_compat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_set_table_setting_compat" ):
                listener.enterAlter_table_set_table_setting_compat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_set_table_setting_compat" ):
                listener.exitAlter_table_set_table_setting_compat(self)




    def alter_table_set_table_setting_compat(self):

        localctx = YQLParser.Alter_table_set_table_setting_compatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_alter_table_set_table_setting_compat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3164
            self.match(YQLParser.SET)
            self.state = 3165
            self.match(YQLParser.LPAREN)
            self.state = 3166
            self.alter_table_setting_entry()
            self.state = 3171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3167
                self.match(YQLParser.COMMA)
                self.state = 3168
                self.alter_table_setting_entry()
                self.state = 3173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3174
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_reset_table_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(YQLParser.RESET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_reset_table_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_reset_table_setting" ):
                listener.enterAlter_table_reset_table_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_reset_table_setting" ):
                listener.exitAlter_table_reset_table_setting(self)




    def alter_table_reset_table_setting(self):

        localctx = YQLParser.Alter_table_reset_table_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_alter_table_reset_table_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            self.match(YQLParser.RESET)
            self.state = 3177
            self.match(YQLParser.LPAREN)
            self.state = 3178
            self.an_id()
            self.state = 3183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3179
                self.match(YQLParser.COMMA)
                self.state = 3180
                self.an_id()
                self.state = 3185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3186
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def table_index(self):
            return self.getTypedRuleContext(YQLParser.Table_indexContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_add_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_index" ):
                listener.enterAlter_table_add_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_index" ):
                listener.exitAlter_table_add_index(self)




    def alter_table_add_index(self):

        localctx = YQLParser.Alter_table_add_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_alter_table_add_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.match(YQLParser.ADD)
            self.state = 3189
            self.table_index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_drop_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_drop_index" ):
                listener.enterAlter_table_drop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_drop_index" ):
                listener.exitAlter_table_drop_index(self)




    def alter_table_drop_index(self):

        localctx = YQLParser.Alter_table_drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_alter_table_drop_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3191
            self.match(YQLParser.DROP)
            self.state = 3192
            self.match(YQLParser.INDEX)
            self.state = 3193
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_rename_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def an_id_table(self):
            return self.getTypedRuleContext(YQLParser.An_id_tableContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_rename_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_rename_to" ):
                listener.enterAlter_table_rename_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_rename_to" ):
                listener.exitAlter_table_rename_to(self)




    def alter_table_rename_to(self):

        localctx = YQLParser.Alter_table_rename_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_alter_table_rename_to)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.match(YQLParser.RENAME)
            self.state = 3196
            self.match(YQLParser.TO)
            self.state = 3197
            self.an_id_table()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_rename_index_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_rename_index_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_rename_index_to" ):
                listener.enterAlter_table_rename_index_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_rename_index_to" ):
                listener.exitAlter_table_rename_index_to(self)




    def alter_table_rename_index_to(self):

        localctx = YQLParser.Alter_table_rename_index_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_alter_table_rename_index_to)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self.match(YQLParser.RENAME)
            self.state = 3200
            self.match(YQLParser.INDEX)
            self.state = 3201
            self.an_id()
            self.state = 3202
            self.match(YQLParser.TO)
            self.state = 3203
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_add_changefeedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def changefeed(self):
            return self.getTypedRuleContext(YQLParser.ChangefeedContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_add_changefeed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_changefeed" ):
                listener.enterAlter_table_add_changefeed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_changefeed" ):
                listener.exitAlter_table_add_changefeed(self)




    def alter_table_add_changefeed(self):

        localctx = YQLParser.Alter_table_add_changefeedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_alter_table_add_changefeed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3205
            self.match(YQLParser.ADD)
            self.state = 3206
            self.changefeed()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_changefeedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def CHANGEFEED(self):
            return self.getToken(YQLParser.CHANGEFEED, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def changefeed_alter_settings(self):
            return self.getTypedRuleContext(YQLParser.Changefeed_alter_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_changefeed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_changefeed" ):
                listener.enterAlter_table_alter_changefeed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_changefeed" ):
                listener.exitAlter_table_alter_changefeed(self)




    def alter_table_alter_changefeed(self):

        localctx = YQLParser.Alter_table_alter_changefeedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_alter_table_alter_changefeed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.match(YQLParser.ALTER)
            self.state = 3209
            self.match(YQLParser.CHANGEFEED)
            self.state = 3210
            self.an_id()
            self.state = 3211
            self.changefeed_alter_settings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_drop_changefeedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def CHANGEFEED(self):
            return self.getToken(YQLParser.CHANGEFEED, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_drop_changefeed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_drop_changefeed" ):
                listener.enterAlter_table_drop_changefeed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_drop_changefeed" ):
                listener.exitAlter_table_drop_changefeed(self)




    def alter_table_drop_changefeed(self):

        localctx = YQLParser.Alter_table_drop_changefeedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_alter_table_drop_changefeed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3213
            self.match(YQLParser.DROP)
            self.state = 3214
            self.match(YQLParser.CHANGEFEED)
            self.state = 3215
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def alter_table_alter_index_action(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_alter_index_actionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_index" ):
                listener.enterAlter_table_alter_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_index" ):
                listener.exitAlter_table_alter_index(self)




    def alter_table_alter_index(self):

        localctx = YQLParser.Alter_table_alter_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_alter_table_alter_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            self.match(YQLParser.ALTER)
            self.state = 3218
            self.match(YQLParser.INDEX)
            self.state = 3219
            self.an_id()
            self.state = 3220
            self.alter_table_alter_index_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_schema(self):
            return self.getTypedRuleContext(YQLParser.An_id_schemaContext,0)


        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def opt_column_constraints(self):
            return self.getTypedRuleContext(YQLParser.Opt_column_constraintsContext,0)


        def family_relation(self):
            return self.getTypedRuleContext(YQLParser.Family_relationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_column_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_schema" ):
                listener.enterColumn_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_schema" ):
                listener.exitColumn_schema(self)




    def column_schema(self):

        localctx = YQLParser.Column_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_column_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self.an_id_schema()
            self.state = 3223
            self.type_name_or_bind()
            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 3224
                self.family_relation()


            self.state = 3227
            self.opt_column_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Family_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAMILY(self):
            return self.getToken(YQLParser.FAMILY, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_family_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamily_relation" ):
                listener.enterFamily_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamily_relation" ):
                listener.exitFamily_relation(self)




    def family_relation(self):

        localctx = YQLParser.Family_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_family_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3229
            self.match(YQLParser.FAMILY)
            self.state = 3230
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_column_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(YQLParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_opt_column_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_column_constraints" ):
                listener.enterOpt_column_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_column_constraints" ):
                listener.exitOpt_column_constraints(self)




    def opt_column_constraints(self):

        localctx = YQLParser.Opt_column_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_opt_column_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199 or _la==201:
                self.state = 3233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 3232
                    self.match(YQLParser.NOT)


                self.state = 3235
                self.match(YQLParser.NULL)


            self.state = 3240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 3238
                self.match(YQLParser.DEFAULT)
                self.state = 3239
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_order_by_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def ASC(self):
            return self.getToken(YQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(YQLParser.DESC, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_column_order_by_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_order_by_specification" ):
                listener.enterColumn_order_by_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_order_by_specification" ):
                listener.exitColumn_order_by_specification(self)




    def column_order_by_specification(self):

        localctx = YQLParser.Column_order_by_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_column_order_by_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3242
            self.an_id()
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50 or _la==102:
                self.state = 3243
                _la = self._input.LA(1)
                if not(_la==50 or _la==102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(YQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(YQLParser.KEY, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(YQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def ORDER(self):
            return self.getToken(YQLParser.ORDER, 0)

        def column_order_by_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Column_order_by_specificationContext)
            else:
                return self.getTypedRuleContext(YQLParser.Column_order_by_specificationContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = YQLParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.state = 3285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [231]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3246
                self.match(YQLParser.PRIMARY)
                self.state = 3247
                self.match(YQLParser.KEY)
                self.state = 3248
                self.match(YQLParser.LPAREN)
                self.state = 3249
                self.an_id()
                self.state = 3254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3250
                    self.match(YQLParser.COMMA)
                    self.state = 3251
                    self.an_id()
                    self.state = 3256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3257
                self.match(YQLParser.RPAREN)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3259
                self.match(YQLParser.PARTITION)
                self.state = 3260
                self.match(YQLParser.BY)
                self.state = 3261
                self.match(YQLParser.LPAREN)
                self.state = 3262
                self.an_id()
                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3263
                    self.match(YQLParser.COMMA)
                    self.state = 3264
                    self.an_id()
                    self.state = 3269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3270
                self.match(YQLParser.RPAREN)
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3272
                self.match(YQLParser.ORDER)
                self.state = 3273
                self.match(YQLParser.BY)
                self.state = 3274
                self.match(YQLParser.LPAREN)
                self.state = 3275
                self.column_order_by_specification()
                self.state = 3280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3276
                    self.match(YQLParser.COMMA)
                    self.state = 3277
                    self.column_order_by_specification()
                    self.state = 3282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3283
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def table_index_type(self):
            return self.getTypedRuleContext(YQLParser.Table_index_typeContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.LPAREN)
            else:
                return self.getToken(YQLParser.LPAREN, i)

        def an_id_schema(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_schemaContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_schemaContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.RPAREN)
            else:
                return self.getToken(YQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def COVER(self):
            return self.getToken(YQLParser.COVER, 0)

        def with_index_settings(self):
            return self.getTypedRuleContext(YQLParser.With_index_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_index" ):
                listener.enterTable_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_index" ):
                listener.exitTable_index(self)




    def table_index(self):

        localctx = YQLParser.Table_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_table_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3287
            self.match(YQLParser.INDEX)
            self.state = 3288
            self.an_id()
            self.state = 3289
            self.table_index_type()
            self.state = 3290
            self.match(YQLParser.ON)
            self.state = 3291
            self.match(YQLParser.LPAREN)
            self.state = 3292
            self.an_id_schema()
            self.state = 3297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3293
                self.match(YQLParser.COMMA)
                self.state = 3294
                self.an_id_schema()
                self.state = 3299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3300
            self.match(YQLParser.RPAREN)
            self.state = 3313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 3301
                self.match(YQLParser.COVER)
                self.state = 3302
                self.match(YQLParser.LPAREN)
                self.state = 3303
                self.an_id_schema()
                self.state = 3308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3304
                    self.match(YQLParser.COMMA)
                    self.state = 3305
                    self.an_id_schema()
                    self.state = 3310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3311
                self.match(YQLParser.RPAREN)


            self.state = 3316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 3315
                self.with_index_settings()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_index_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_index(self):
            return self.getTypedRuleContext(YQLParser.Global_indexContext,0)


        def local_index(self):
            return self.getTypedRuleContext(YQLParser.Local_indexContext,0)


        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def index_subtype(self):
            return self.getTypedRuleContext(YQLParser.Index_subtypeContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_index_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_index_type" ):
                listener.enterTable_index_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_index_type" ):
                listener.exitTable_index_type(self)




    def table_index_type(self):

        localctx = YQLParser.Table_index_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_table_index_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 3318
                self.global_index()
                pass
            elif token in [184]:
                self.state = 3319
                self.local_index()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 3322
                self.match(YQLParser.USING)
                self.state = 3323
                self.index_subtype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(YQLParser.GLOBAL, 0)

        def UNIQUE(self):
            return self.getToken(YQLParser.UNIQUE, 0)

        def SYNC(self):
            return self.getToken(YQLParser.SYNC, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_global_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_index" ):
                listener.enterGlobal_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_index" ):
                listener.exitGlobal_index(self)




    def global_index(self):

        localctx = YQLParser.Global_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_global_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self.match(YQLParser.GLOBAL)
            self.state = 3328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==307:
                self.state = 3327
                self.match(YQLParser.UNIQUE)


            self.state = 3331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53 or _la==285:
                self.state = 3330
                _la = self._input.LA(1)
                if not(_la==53 or _la==285):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(YQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_local_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_index" ):
                listener.enterLocal_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_index" ):
                listener.exitLocal_index(self)




    def local_index(self):

        localctx = YQLParser.Local_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_local_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3333
            self.match(YQLParser.LOCAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_subtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_index_subtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_subtype" ):
                listener.enterIndex_subtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_subtype" ):
                listener.exitIndex_subtype(self)




    def index_subtype(self):

        localctx = YQLParser.Index_subtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_index_subtype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3335
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_index_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def index_setting_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Index_setting_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Index_setting_entryContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_with_index_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_index_settings" ):
                listener.enterWith_index_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_index_settings" ):
                listener.exitWith_index_settings(self)




    def with_index_settings(self):

        localctx = YQLParser.With_index_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_with_index_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3337
            self.match(YQLParser.WITH)
            self.state = 3338
            self.match(YQLParser.LPAREN)
            self.state = 3339
            self.index_setting_entry()
            self.state = 3344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3340
                    self.match(YQLParser.COMMA)
                    self.state = 3341
                    self.index_setting_entry() 
                self.state = 3346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

            self.state = 3348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 3347
                self.match(YQLParser.COMMA)


            self.state = 3350
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_setting_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def index_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Index_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_index_setting_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_setting_entry" ):
                listener.enterIndex_setting_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_setting_entry" ):
                listener.exitIndex_setting_entry(self)




    def index_setting_entry(self):

        localctx = YQLParser.Index_setting_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_index_setting_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self.an_id()
            self.state = 3353
            self.match(YQLParser.EQUALS)
            self.state = 3354
            self.index_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_or_typeContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def bool_value(self):
            return self.getTypedRuleContext(YQLParser.Bool_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_index_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_setting_value" ):
                listener.enterIndex_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_setting_value" ):
                listener.exitIndex_setting_value(self)




    def index_setting_value(self):

        localctx = YQLParser.Index_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_index_setting_value)
        try:
            self.state = 3360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3356
                self.id_or_type()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3357
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [330, 331]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3358
                self.integer()
                pass
            elif token in [132, 301]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3359
                self.bool_value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangefeedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGEFEED(self):
            return self.getToken(YQLParser.CHANGEFEED, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def changefeed_settings(self):
            return self.getTypedRuleContext(YQLParser.Changefeed_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_changefeed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangefeed" ):
                listener.enterChangefeed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangefeed" ):
                listener.exitChangefeed(self)




    def changefeed(self):

        localctx = YQLParser.ChangefeedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_changefeed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(YQLParser.CHANGEFEED)
            self.state = 3363
            self.an_id()
            self.state = 3364
            self.match(YQLParser.WITH)
            self.state = 3365
            self.match(YQLParser.LPAREN)
            self.state = 3366
            self.changefeed_settings()
            self.state = 3367
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Changefeed_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changefeed_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Changefeed_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Changefeed_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_changefeed_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangefeed_settings" ):
                listener.enterChangefeed_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangefeed_settings" ):
                listener.exitChangefeed_settings(self)




    def changefeed_settings(self):

        localctx = YQLParser.Changefeed_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_changefeed_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3369
            self.changefeed_settings_entry()
            self.state = 3374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3370
                self.match(YQLParser.COMMA)
                self.state = 3371
                self.changefeed_settings_entry()
                self.state = 3376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Changefeed_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def changefeed_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Changefeed_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_changefeed_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangefeed_settings_entry" ):
                listener.enterChangefeed_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangefeed_settings_entry" ):
                listener.exitChangefeed_settings_entry(self)




    def changefeed_settings_entry(self):

        localctx = YQLParser.Changefeed_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_changefeed_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self.an_id()
            self.state = 3378
            self.match(YQLParser.EQUALS)
            self.state = 3379
            self.changefeed_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Changefeed_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_changefeed_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangefeed_setting_value" ):
                listener.enterChangefeed_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangefeed_setting_value" ):
                listener.exitChangefeed_setting_value(self)




    def changefeed_setting_value(self):

        localctx = YQLParser.Changefeed_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_changefeed_setting_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3381
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Changefeed_alter_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISABLE(self):
            return self.getToken(YQLParser.DISABLE, 0)

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def changefeed_settings(self):
            return self.getTypedRuleContext(YQLParser.Changefeed_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_changefeed_alter_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangefeed_alter_settings" ):
                listener.enterChangefeed_alter_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangefeed_alter_settings" ):
                listener.exitChangefeed_alter_settings(self)




    def changefeed_alter_settings(self):

        localctx = YQLParser.Changefeed_alter_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_changefeed_alter_settings)
        try:
            self.state = 3389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3383
                self.match(YQLParser.DISABLE)
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3384
                self.match(YQLParser.SET)
                self.state = 3385
                self.match(YQLParser.LPAREN)
                self.state = 3386
                self.changefeed_settings()
                self.state = 3387
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_setting_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def table_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Table_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_setting_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_setting_entry" ):
                listener.enterAlter_table_setting_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_setting_entry" ):
                listener.exitAlter_table_setting_entry(self)




    def alter_table_setting_entry(self):

        localctx = YQLParser.Alter_table_setting_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_alter_table_setting_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3391
            self.an_id()
            self.state = 3392
            self.match(YQLParser.EQUALS)
            self.state = 3393
            self.table_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(YQLParser.IdContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def split_boundaries(self):
            return self.getTypedRuleContext(YQLParser.Split_boundariesContext,0)


        def ttl_tier_list(self):
            return self.getTypedRuleContext(YQLParser.Ttl_tier_listContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def SECONDS(self):
            return self.getToken(YQLParser.SECONDS, 0)

        def MILLISECONDS(self):
            return self.getToken(YQLParser.MILLISECONDS, 0)

        def MICROSECONDS(self):
            return self.getToken(YQLParser.MICROSECONDS, 0)

        def NANOSECONDS(self):
            return self.getToken(YQLParser.NANOSECONDS, 0)

        def bool_value(self):
            return self.getTypedRuleContext(YQLParser.Bool_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_setting_value" ):
                listener.enterTable_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_setting_value" ):
                listener.exitTable_setting_value(self)




    def table_setting_value(self):

        localctx = YQLParser.Table_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_table_setting_value)
        self._la = 0 # Token type
        try:
            self.state = 3407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3395
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3396
                self.match(YQLParser.STRING_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3397
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3398
                self.split_boundaries()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3399
                self.ttl_tier_list()
                self.state = 3400
                self.match(YQLParser.ON)
                self.state = 3401
                self.an_id()
                self.state = 3404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 3402
                    self.match(YQLParser.AS)
                    self.state = 3403
                    _la = self._input.LA(1)
                    if not(((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & 11) != 0) or _la==268):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3406
                self.bool_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ttl_tier_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(YQLParser.ExprContext,i)


        def ttl_tier_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Ttl_tier_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Ttl_tier_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_ttl_tier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTtl_tier_list" ):
                listener.enterTtl_tier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTtl_tier_list" ):
                listener.exitTtl_tier_list(self)




    def ttl_tier_list(self):

        localctx = YQLParser.Ttl_tier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_ttl_tier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            self.expr()
            self.state = 3420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101 or _la==296:
                self.state = 3410
                self.ttl_tier_action()
                self.state = 3417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3411
                    self.match(YQLParser.COMMA)
                    self.state = 3412
                    self.expr()
                    self.state = 3413
                    self.ttl_tier_action()
                    self.state = 3419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ttl_tier_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def DELETE(self):
            return self.getToken(YQLParser.DELETE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_ttl_tier_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTtl_tier_action" ):
                listener.enterTtl_tier_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTtl_tier_action" ):
                listener.exitTtl_tier_action(self)




    def ttl_tier_action(self):

        localctx = YQLParser.Ttl_tier_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_ttl_tier_action)
        try:
            self.state = 3428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [296]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3422
                self.match(YQLParser.TO)
                self.state = 3423
                self.match(YQLParser.EXTERNAL)
                self.state = 3424
                self.match(YQLParser.DATA)
                self.state = 3425
                self.match(YQLParser.SOURCE)
                self.state = 3426
                self.an_id()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3427
                self.match(YQLParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Family_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAMILY(self):
            return self.getToken(YQLParser.FAMILY, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def family_settings(self):
            return self.getTypedRuleContext(YQLParser.Family_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_family_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamily_entry" ):
                listener.enterFamily_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamily_entry" ):
                listener.exitFamily_entry(self)




    def family_entry(self):

        localctx = YQLParser.Family_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_family_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self.match(YQLParser.FAMILY)
            self.state = 3431
            self.an_id()
            self.state = 3432
            self.family_settings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Family_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def family_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Family_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Family_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_family_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamily_settings" ):
                listener.enterFamily_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamily_settings" ):
                listener.exitFamily_settings(self)




    def family_settings(self):

        localctx = YQLParser.Family_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_family_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3434
            self.match(YQLParser.LPAREN)
            self.state = 3443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & -1074790401) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & -35433545737) != 0) or ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & -35184372219905) != 0) or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & -2306973307167604737) != 0) or ((((_la - 294)) & ~0x3f) == 0 and ((1 << (_la - 294)) & 68711087743) != 0):
                self.state = 3435
                self.family_settings_entry()
                self.state = 3440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3436
                    self.match(YQLParser.COMMA)
                    self.state = 3437
                    self.family_settings_entry()
                    self.state = 3442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3445
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Family_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def family_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Family_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_family_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamily_settings_entry" ):
                listener.enterFamily_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamily_settings_entry" ):
                listener.exitFamily_settings_entry(self)




    def family_settings_entry(self):

        localctx = YQLParser.Family_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_family_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3447
            self.an_id()
            self.state = 3448
            self.match(YQLParser.EQUALS)
            self.state = 3449
            self.family_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Family_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_family_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamily_setting_value" ):
                listener.enterFamily_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamily_setting_value" ):
                listener.exitFamily_setting_value(self)




    def family_setting_value(self):

        localctx = YQLParser.Family_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_family_setting_value)
        try:
            self.state = 3453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [327]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3451
                self.match(YQLParser.STRING_VALUE)
                pass
            elif token in [330, 331]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3452
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Split_boundariesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def literal_value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Literal_value_listContext)
            else:
                return self.getTypedRuleContext(YQLParser.Literal_value_listContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_split_boundaries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplit_boundaries" ):
                listener.enterSplit_boundaries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplit_boundaries" ):
                listener.exitSplit_boundaries(self)




    def split_boundaries(self):

        localctx = YQLParser.Split_boundariesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_split_boundaries)
        self._la = 0 # Token type
        try:
            self.state = 3467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3455
                self.match(YQLParser.LPAREN)
                self.state = 3456
                self.literal_value_list()
                self.state = 3461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 3457
                    self.match(YQLParser.COMMA)
                    self.state = 3458
                    self.literal_value_list()
                    self.state = 3463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3464
                self.match(YQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3466
                self.literal_value_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def literal_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Literal_valueContext)
            else:
                return self.getTypedRuleContext(YQLParser.Literal_valueContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_literal_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value_list" ):
                listener.enterLiteral_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value_list" ):
                listener.exitLiteral_value_list(self)




    def literal_value_list(self):

        localctx = YQLParser.Literal_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_literal_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3469
            self.match(YQLParser.LPAREN)
            self.state = 3470
            self.literal_value()
            self.state = 3475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3471
                self.match(YQLParser.COMMA)
                self.state = 3472
                self.literal_value()
                self.state = 3477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3478
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_index_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_set_table_setting_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_uncompatContext,0)


        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_table_alter_index_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_index_action" ):
                listener.enterAlter_table_alter_index_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_index_action" ):
                listener.exitAlter_table_alter_index_action(self)




    def alter_table_alter_index_action(self):

        localctx = YQLParser.Alter_table_alter_index_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_alter_table_alter_index_action)
        try:
            self.state = 3483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3480
                self.alter_table_set_table_setting_uncompat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3481
                self.alter_table_set_table_setting_compat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3482
                self.alter_table_reset_table_setting()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stmt" ):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stmt" ):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = YQLParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3485
            self.match(YQLParser.DROP)
            self.state = 3490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [287]:
                self.state = 3486
                self.match(YQLParser.TABLE)
                pass
            elif token in [290]:
                self.state = 3487
                self.match(YQLParser.TABLESTORE)
                pass
            elif token in [130]:
                self.state = 3488
                self.match(YQLParser.EXTERNAL)
                self.state = 3489
                self.match(YQLParser.TABLE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 3492
                self.match(YQLParser.IF)
                self.state = 3493
                self.match(YQLParser.EXISTS)


            self.state = 3496
            self.simple_table_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_user_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def role_name(self):
            return self.getTypedRuleContext(YQLParser.Role_nameContext,0)


        def user_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.User_optionContext)
            else:
                return self.getTypedRuleContext(YQLParser.User_optionContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_create_user_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user_stmt" ):
                listener.enterCreate_user_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user_stmt" ):
                listener.exitCreate_user_stmt(self)




    def create_user_stmt(self):

        localctx = YQLParser.Create_user_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_create_user_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3498
            self.match(YQLParser.CREATE)
            self.state = 3499
            self.match(YQLParser.USER)
            self.state = 3500
            self.role_name()
            self.state = 3504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==116 or _la==150 or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 68719484929) != 0):
                self.state = 3501
                self.user_option()
                self.state = 3506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_user_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def user_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.User_optionContext)
            else:
                return self.getTypedRuleContext(YQLParser.User_optionContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_user_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user_stmt" ):
                listener.enterAlter_user_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user_stmt" ):
                listener.exitAlter_user_stmt(self)




    def alter_user_stmt(self):

        localctx = YQLParser.Alter_user_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_alter_user_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3507
            self.match(YQLParser.ALTER)
            self.state = 3508
            self.match(YQLParser.USER)
            self.state = 3509
            self.role_name()
            self.state = 3521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116, 150, 185, 198, 221, 323]:
                self.state = 3511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==323:
                    self.state = 3510
                    self.match(YQLParser.WITH)


                self.state = 3514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3513
                    self.user_option()
                    self.state = 3516 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==116 or _la==150 or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 68719484929) != 0)):
                        break

                pass
            elif token in [244]:
                self.state = 3518
                self.match(YQLParser.RENAME)
                self.state = 3519
                self.match(YQLParser.TO)
                self.state = 3520
                self.role_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_group_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_create_group_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_group_stmt" ):
                listener.enterCreate_group_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_group_stmt" ):
                listener.exitCreate_group_stmt(self)




    def create_group_stmt(self):

        localctx = YQLParser.Create_group_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_create_group_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self.match(YQLParser.CREATE)
            self.state = 3524
            self.match(YQLParser.GROUP)
            self.state = 3525
            self.role_name()
            self.state = 3539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 3526
                self.match(YQLParser.WITH)
                self.state = 3527
                self.match(YQLParser.USER)
                self.state = 3528
                self.role_name()
                self.state = 3533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3529
                        self.match(YQLParser.COMMA)
                        self.state = 3530
                        self.role_name() 
                    self.state = 3535
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

                self.state = 3537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 3536
                    self.match(YQLParser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_group_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_group_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_group_stmt" ):
                listener.enterAlter_group_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_group_stmt" ):
                listener.exitAlter_group_stmt(self)




    def alter_group_stmt(self):

        localctx = YQLParser.Alter_group_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_alter_group_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3541
            self.match(YQLParser.ALTER)
            self.state = 3542
            self.match(YQLParser.GROUP)
            self.state = 3543
            self.role_name()
            self.state = 3560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 111]:
                self.state = 3544
                _la = self._input.LA(1)
                if not(_la==40 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3545
                self.match(YQLParser.USER)
                self.state = 3546
                self.role_name()
                self.state = 3551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,354,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3547
                        self.match(YQLParser.COMMA)
                        self.state = 3548
                        self.role_name() 
                    self.state = 3553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,354,self._ctx)

                self.state = 3555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 3554
                    self.match(YQLParser.COMMA)


                pass
            elif token in [244]:
                self.state = 3557
                self.match(YQLParser.RENAME)
                self.state = 3558
                self.match(YQLParser.TO)
                self.state = 3559
                self.role_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_role_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_role_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_role_stmt" ):
                listener.enterDrop_role_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_role_stmt" ):
                listener.exitDrop_role_stmt(self)




    def drop_role_stmt(self):

        localctx = YQLParser.Drop_role_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_drop_role_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3562
            self.match(YQLParser.DROP)
            self.state = 3563
            _la = self._input.LA(1)
            if not(_la==147 or _la==313):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 3564
                self.match(YQLParser.IF)
                self.state = 3565
                self.match(YQLParser.EXISTS)


            self.state = 3568
            self.role_name()
            self.state = 3573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3569
                    self.match(YQLParser.COMMA)
                    self.state = 3570
                    self.role_name() 
                self.state = 3575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

            self.state = 3577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 3576
                self.match(YQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = YQLParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_role_name)
        try:
            self.state = 3581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3579
                self.an_id_or_type()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3580
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def authentication_option(self):
            return self.getTypedRuleContext(YQLParser.Authentication_optionContext,0)


        def login_option(self):
            return self.getTypedRuleContext(YQLParser.Login_optionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_user_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_option" ):
                listener.enterUser_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_option" ):
                listener.exitUser_option(self)




    def user_option(self):

        localctx = YQLParser.User_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_user_option)
        try:
            self.state = 3585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116, 150, 221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3583
                self.authentication_option()
                pass
            elif token in [185, 198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3584
                self.login_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Authentication_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def password_option(self):
            return self.getTypedRuleContext(YQLParser.Password_optionContext,0)


        def hash_option(self):
            return self.getTypedRuleContext(YQLParser.Hash_optionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_authentication_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthentication_option" ):
                listener.enterAuthentication_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthentication_option" ):
                listener.exitAuthentication_option(self)




    def authentication_option(self):

        localctx = YQLParser.Authentication_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_authentication_option)
        try:
            self.state = 3589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116, 221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3587
                self.password_option()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3588
                self.hash_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(YQLParser.PASSWORD, 0)

        def password_value(self):
            return self.getTypedRuleContext(YQLParser.Password_valueContext,0)


        def ENCRYPTED(self):
            return self.getToken(YQLParser.ENCRYPTED, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_password_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_option" ):
                listener.enterPassword_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_option" ):
                listener.exitPassword_option(self)




    def password_option(self):

        localctx = YQLParser.Password_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_password_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 3591
                self.match(YQLParser.ENCRYPTED)


            self.state = 3594
            self.match(YQLParser.PASSWORD)
            self.state = 3595
            self.password_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_password_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_value" ):
                listener.enterPassword_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_value" ):
                listener.exitPassword_value(self)




    def password_value(self):

        localctx = YQLParser.Password_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_password_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            _la = self._input.LA(1)
            if not(_la==201 or _la==327):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(YQLParser.HASH, 0)

        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_hash_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_option" ):
                listener.enterHash_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_option" ):
                listener.exitHash_option(self)




    def hash_option(self):

        localctx = YQLParser.Hash_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_hash_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3599
            self.match(YQLParser.HASH)
            self.state = 3600
            self.match(YQLParser.STRING_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Login_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGIN(self):
            return self.getToken(YQLParser.LOGIN, 0)

        def NOLOGIN(self):
            return self.getToken(YQLParser.NOLOGIN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_login_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogin_option" ):
                listener.enterLogin_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogin_option" ):
                listener.exitLogin_option(self)




    def login_option(self):

        localctx = YQLParser.Login_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_login_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3602
            _la = self._input.LA(1)
            if not(_la==185 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissions_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.GRANT)
            else:
                return self.getToken(YQLParser.GRANT, i)

        def permission_name_target(self):
            return self.getTypedRuleContext(YQLParser.Permission_name_targetContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def an_id_schema(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_schemaContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_schemaContext,i)


        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def OPTION(self):
            return self.getToken(YQLParser.OPTION, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_grant_permissions_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permissions_stmt" ):
                listener.enterGrant_permissions_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permissions_stmt" ):
                listener.exitGrant_permissions_stmt(self)




    def grant_permissions_stmt(self):

        localctx = YQLParser.Grant_permissions_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_grant_permissions_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3604
            self.match(YQLParser.GRANT)
            self.state = 3605
            self.permission_name_target()
            self.state = 3606
            self.match(YQLParser.ON)
            self.state = 3607
            self.an_id_schema()
            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3608
                self.match(YQLParser.COMMA)
                self.state = 3609
                self.an_id_schema()
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3615
            self.match(YQLParser.TO)
            self.state = 3616
            self.role_name()
            self.state = 3621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,365,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3617
                    self.match(YQLParser.COMMA)
                    self.state = 3618
                    self.role_name() 
                self.state = 3623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,365,self._ctx)

            self.state = 3625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 3624
                self.match(YQLParser.COMMA)


            self.state = 3630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 3627
                self.match(YQLParser.WITH)
                self.state = 3628
                self.match(YQLParser.GRANT)
                self.state = 3629
                self.match(YQLParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_permissions_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(YQLParser.REVOKE, 0)

        def permission_name_target(self):
            return self.getTypedRuleContext(YQLParser.Permission_name_targetContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def an_id_schema(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_schemaContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_schemaContext,i)


        def FROM(self):
            return self.getToken(YQLParser.FROM, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Role_nameContext,i)


        def GRANT(self):
            return self.getToken(YQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(YQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(YQLParser.FOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_revoke_permissions_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_permissions_stmt" ):
                listener.enterRevoke_permissions_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_permissions_stmt" ):
                listener.exitRevoke_permissions_stmt(self)




    def revoke_permissions_stmt(self):

        localctx = YQLParser.Revoke_permissions_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_revoke_permissions_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3632
            self.match(YQLParser.REVOKE)
            self.state = 3636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 3633
                self.match(YQLParser.GRANT)
                self.state = 3634
                self.match(YQLParser.OPTION)
                self.state = 3635
                self.match(YQLParser.FOR)


            self.state = 3638
            self.permission_name_target()
            self.state = 3639
            self.match(YQLParser.ON)
            self.state = 3640
            self.an_id_schema()
            self.state = 3645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3641
                self.match(YQLParser.COMMA)
                self.state = 3642
                self.an_id_schema()
                self.state = 3647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3648
            self.match(YQLParser.FROM)
            self.state = 3649
            self.role_name()
            self.state = 3654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3650
                self.match(YQLParser.COMMA)
                self.state = 3651
                self.role_name()
                self.state = 3656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Permission_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(YQLParser.CONNECT, 0)

        def LIST(self):
            return self.getToken(YQLParser.LIST, 0)

        def INSERT(self):
            return self.getToken(YQLParser.INSERT, 0)

        def MANAGE(self):
            return self.getToken(YQLParser.MANAGE, 0)

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def GRANT(self):
            return self.getToken(YQLParser.GRANT, 0)

        def MODIFY(self):
            return self.getToken(YQLParser.MODIFY, 0)

        def TABLES(self):
            return self.getToken(YQLParser.TABLES, 0)

        def ATTRIBUTES(self):
            return self.getToken(YQLParser.ATTRIBUTES, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def UPDATE(self):
            return self.getToken(YQLParser.UPDATE, 0)

        def ERASE(self):
            return self.getToken(YQLParser.ERASE, 0)

        def SCHEMA(self):
            return self.getToken(YQLParser.SCHEMA, 0)

        def REMOVE(self):
            return self.getToken(YQLParser.REMOVE, 0)

        def DESCRIBE(self):
            return self.getToken(YQLParser.DESCRIBE, 0)

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def SELECT(self):
            return self.getToken(YQLParser.SELECT, 0)

        def USE(self):
            return self.getToken(YQLParser.USE, 0)

        def FULL(self):
            return self.getToken(YQLParser.FULL, 0)

        def LEGACY(self):
            return self.getToken(YQLParser.LEGACY, 0)

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def DIRECTORY(self):
            return self.getToken(YQLParser.DIRECTORY, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def QUEUE(self):
            return self.getToken(YQLParser.QUEUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_permission_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermission_id" ):
                listener.enterPermission_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermission_id" ):
                listener.exitPermission_id(self)




    def permission_id(self):

        localctx = YQLParser.Permission_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_permission_id)
        self._la = 0 # Token type
        try:
            self.state = 3681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3657
                self.match(YQLParser.CONNECT)
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3658
                self.match(YQLParser.LIST)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3659
                self.match(YQLParser.INSERT)
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3660
                self.match(YQLParser.MANAGE)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3661
                self.match(YQLParser.DROP)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3662
                self.match(YQLParser.GRANT)
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3663
                self.match(YQLParser.MODIFY)
                self.state = 3664
                _la = self._input.LA(1)
                if not(_la==56 or _la==288):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [119, 310]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3665
                _la = self._input.LA(1)
                if not(_la==119 or _la==310):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3666
                self.match(YQLParser.ROW)
                pass
            elif token in [43, 103, 243]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3667
                _la = self._input.LA(1)
                if not(_la==43 or _la==103 or _la==243):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3668
                self.match(YQLParser.SCHEMA)
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3669
                self.match(YQLParser.SELECT)
                self.state = 3671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56 or _la==263 or _la==288:
                    self.state = 3670
                    _la = self._input.LA(1)
                    if not(_la==56 or _la==263 or _la==288):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [142, 312]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3673
                _la = self._input.LA(1)
                if not(_la==142 or _la==312):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 3674
                    self.match(YQLParser.LEGACY)


                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3677
                self.match(YQLParser.CREATE)
                self.state = 3679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106 or _la==235 or _la==287:
                    self.state = 3678
                    _la = self._input.LA(1)
                    if not(_la==106 or _la==235 or _la==287):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Permission_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def permission_id(self):
            return self.getTypedRuleContext(YQLParser.Permission_idContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_permission_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermission_name" ):
                listener.enterPermission_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermission_name" ):
                listener.exitPermission_name(self)




    def permission_name(self):

        localctx = YQLParser.Permission_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_permission_name)
        try:
            self.state = 3685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43, 82, 86, 103, 111, 119, 142, 146, 167, 183, 186, 193, 243, 270, 310, 312]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3683
                self.permission_id()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3684
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Permission_name_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def permission_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Permission_nameContext)
            else:
                return self.getTypedRuleContext(YQLParser.Permission_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(YQLParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_permission_name_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermission_name_target" ):
                listener.enterPermission_name_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermission_name_target" ):
                listener.exitPermission_name_target(self)




    def permission_name_target(self):

        localctx = YQLParser.Permission_name_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_permission_name_target)
        self._la = 0 # Token type
        try:
            self.state = 3702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43, 82, 86, 103, 111, 119, 142, 146, 167, 183, 186, 193, 243, 270, 310, 312, 327]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3687
                self.permission_name()
                self.state = 3692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3688
                        self.match(YQLParser.COMMA)
                        self.state = 3689
                        self.permission_name() 
                    self.state = 3694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

                self.state = 3696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 3695
                    self.match(YQLParser.COMMA)


                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3698
                self.match(YQLParser.ALL)
                self.state = 3700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 3699
                    self.match(YQLParser.PRIVILEGES)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_resource_pool_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def with_table_settings(self):
            return self.getTypedRuleContext(YQLParser.With_table_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_resource_pool_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_resource_pool_stmt" ):
                listener.enterCreate_resource_pool_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_resource_pool_stmt" ):
                listener.exitCreate_resource_pool_stmt(self)




    def create_resource_pool_stmt(self):

        localctx = YQLParser.Create_resource_pool_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_create_resource_pool_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.match(YQLParser.CREATE)
            self.state = 3705
            self.match(YQLParser.RESOURCE)
            self.state = 3706
            self.match(YQLParser.POOL)
            self.state = 3707
            self.object_ref()
            self.state = 3708
            self.with_table_settings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_pool_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_resource_pool_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_resource_pool_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_resource_pool_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_resource_pool_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_pool_stmt" ):
                listener.enterAlter_resource_pool_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_pool_stmt" ):
                listener.exitAlter_resource_pool_stmt(self)




    def alter_resource_pool_stmt(self):

        localctx = YQLParser.Alter_resource_pool_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_alter_resource_pool_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3710
            self.match(YQLParser.ALTER)
            self.state = 3711
            self.match(YQLParser.RESOURCE)
            self.state = 3712
            self.match(YQLParser.POOL)
            self.state = 3713
            self.object_ref()
            self.state = 3714
            self.alter_resource_pool_action()
            self.state = 3719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3715
                self.match(YQLParser.COMMA)
                self.state = 3716
                self.alter_resource_pool_action()
                self.state = 3721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_pool_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_resource_pool_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_pool_action" ):
                listener.enterAlter_resource_pool_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_pool_action" ):
                listener.exitAlter_resource_pool_action(self)




    def alter_resource_pool_action(self):

        localctx = YQLParser.Alter_resource_pool_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_alter_resource_pool_action)
        try:
            self.state = 3724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3722
                self.alter_table_set_table_setting_compat()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3723
                self.alter_table_reset_table_setting()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_resource_pool_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_drop_resource_pool_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_resource_pool_stmt" ):
                listener.enterDrop_resource_pool_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_resource_pool_stmt" ):
                listener.exitDrop_resource_pool_stmt(self)




    def drop_resource_pool_stmt(self):

        localctx = YQLParser.Drop_resource_pool_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_drop_resource_pool_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3726
            self.match(YQLParser.DROP)
            self.state = 3727
            self.match(YQLParser.RESOURCE)
            self.state = 3728
            self.match(YQLParser.POOL)
            self.state = 3729
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_resource_pool_classifier_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def CLASSIFIER(self):
            return self.getToken(YQLParser.CLASSIFIER, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def with_table_settings(self):
            return self.getTypedRuleContext(YQLParser.With_table_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_resource_pool_classifier_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_resource_pool_classifier_stmt" ):
                listener.enterCreate_resource_pool_classifier_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_resource_pool_classifier_stmt" ):
                listener.exitCreate_resource_pool_classifier_stmt(self)




    def create_resource_pool_classifier_stmt(self):

        localctx = YQLParser.Create_resource_pool_classifier_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_create_resource_pool_classifier_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3731
            self.match(YQLParser.CREATE)
            self.state = 3732
            self.match(YQLParser.RESOURCE)
            self.state = 3733
            self.match(YQLParser.POOL)
            self.state = 3734
            self.match(YQLParser.CLASSIFIER)
            self.state = 3735
            self.object_ref()
            self.state = 3736
            self.with_table_settings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_pool_classifier_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def CLASSIFIER(self):
            return self.getToken(YQLParser.CLASSIFIER, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_resource_pool_classifier_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_resource_pool_classifier_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_resource_pool_classifier_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_resource_pool_classifier_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_pool_classifier_stmt" ):
                listener.enterAlter_resource_pool_classifier_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_pool_classifier_stmt" ):
                listener.exitAlter_resource_pool_classifier_stmt(self)




    def alter_resource_pool_classifier_stmt(self):

        localctx = YQLParser.Alter_resource_pool_classifier_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_alter_resource_pool_classifier_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3738
            self.match(YQLParser.ALTER)
            self.state = 3739
            self.match(YQLParser.RESOURCE)
            self.state = 3740
            self.match(YQLParser.POOL)
            self.state = 3741
            self.match(YQLParser.CLASSIFIER)
            self.state = 3742
            self.object_ref()
            self.state = 3743
            self.alter_resource_pool_classifier_action()
            self.state = 3748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3744
                self.match(YQLParser.COMMA)
                self.state = 3745
                self.alter_resource_pool_classifier_action()
                self.state = 3750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_pool_classifier_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_set_table_setting_compat(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_set_table_setting_compatContext,0)


        def alter_table_reset_table_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_table_reset_table_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_resource_pool_classifier_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_pool_classifier_action" ):
                listener.enterAlter_resource_pool_classifier_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_pool_classifier_action" ):
                listener.exitAlter_resource_pool_classifier_action(self)




    def alter_resource_pool_classifier_action(self):

        localctx = YQLParser.Alter_resource_pool_classifier_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_alter_resource_pool_classifier_action)
        try:
            self.state = 3753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3751
                self.alter_table_set_table_setting_compat()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3752
                self.alter_table_reset_table_setting()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_resource_pool_classifier_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def CLASSIFIER(self):
            return self.getToken(YQLParser.CLASSIFIER, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_drop_resource_pool_classifier_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_resource_pool_classifier_stmt" ):
                listener.enterDrop_resource_pool_classifier_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_resource_pool_classifier_stmt" ):
                listener.exitDrop_resource_pool_classifier_stmt(self)




    def drop_resource_pool_classifier_stmt(self):

        localctx = YQLParser.Drop_resource_pool_classifier_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_drop_resource_pool_classifier_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3755
            self.match(YQLParser.DROP)
            self.state = 3756
            self.match(YQLParser.RESOURCE)
            self.state = 3757
            self.match(YQLParser.POOL)
            self.state = 3758
            self.match(YQLParser.CLASSIFIER)
            self.state = 3759
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replication_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def REPLICATION(self):
            return self.getToken(YQLParser.REPLICATION, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def FOR(self):
            return self.getToken(YQLParser.FOR, 0)

        def replication_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Replication_targetContext)
            else:
                return self.getTypedRuleContext(YQLParser.Replication_targetContext,i)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def replication_settings(self):
            return self.getTypedRuleContext(YQLParser.Replication_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_create_replication_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replication_stmt" ):
                listener.enterCreate_replication_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replication_stmt" ):
                listener.exitCreate_replication_stmt(self)




    def create_replication_stmt(self):

        localctx = YQLParser.Create_replication_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_create_replication_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(YQLParser.CREATE)
            self.state = 3762
            self.match(YQLParser.ASYNC)
            self.state = 3763
            self.match(YQLParser.REPLICATION)
            self.state = 3764
            self.object_ref()
            self.state = 3765
            self.match(YQLParser.FOR)
            self.state = 3766
            self.replication_target()
            self.state = 3771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3767
                self.match(YQLParser.COMMA)
                self.state = 3768
                self.replication_target()
                self.state = 3773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3774
            self.match(YQLParser.WITH)
            self.state = 3775
            self.match(YQLParser.LPAREN)
            self.state = 3776
            self.replication_settings()
            self.state = 3777
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replication_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Object_refContext)
            else:
                return self.getTypedRuleContext(YQLParser.Object_refContext,i)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_replication_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplication_target" ):
                listener.enterReplication_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplication_target" ):
                listener.exitReplication_target(self)




    def replication_target(self):

        localctx = YQLParser.Replication_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_replication_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.object_ref()
            self.state = 3780
            self.match(YQLParser.AS)
            self.state = 3781
            self.object_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replication_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replication_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Replication_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Replication_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_replication_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplication_settings" ):
                listener.enterReplication_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplication_settings" ):
                listener.exitReplication_settings(self)




    def replication_settings(self):

        localctx = YQLParser.Replication_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_replication_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3783
            self.replication_settings_entry()
            self.state = 3788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3784
                self.match(YQLParser.COMMA)
                self.state = 3785
                self.replication_settings_entry()
                self.state = 3790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replication_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_replication_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplication_settings_entry" ):
                listener.enterReplication_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplication_settings_entry" ):
                listener.exitReplication_settings_entry(self)




    def replication_settings_entry(self):

        localctx = YQLParser.Replication_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_replication_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.an_id()
            self.state = 3792
            self.match(YQLParser.EQUALS)
            self.state = 3793
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_replication_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def REPLICATION(self):
            return self.getToken(YQLParser.REPLICATION, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_replication_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_replication_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_replication_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_replication_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_replication_stmt" ):
                listener.enterAlter_replication_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_replication_stmt" ):
                listener.exitAlter_replication_stmt(self)




    def alter_replication_stmt(self):

        localctx = YQLParser.Alter_replication_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_alter_replication_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3795
            self.match(YQLParser.ALTER)
            self.state = 3796
            self.match(YQLParser.ASYNC)
            self.state = 3797
            self.match(YQLParser.REPLICATION)
            self.state = 3798
            self.object_ref()
            self.state = 3799
            self.alter_replication_action()
            self.state = 3804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3800
                self.match(YQLParser.COMMA)
                self.state = 3801
                self.alter_replication_action()
                self.state = 3806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_replication_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_replication_set_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_replication_set_settingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_replication_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_replication_action" ):
                listener.enterAlter_replication_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_replication_action" ):
                listener.exitAlter_replication_action(self)




    def alter_replication_action(self):

        localctx = YQLParser.Alter_replication_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_alter_replication_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            self.alter_replication_set_setting()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_replication_set_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def replication_settings(self):
            return self.getTypedRuleContext(YQLParser.Replication_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_replication_set_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_replication_set_setting" ):
                listener.enterAlter_replication_set_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_replication_set_setting" ):
                listener.exitAlter_replication_set_setting(self)




    def alter_replication_set_setting(self):

        localctx = YQLParser.Alter_replication_set_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_alter_replication_set_setting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3809
            self.match(YQLParser.SET)
            self.state = 3810
            self.match(YQLParser.LPAREN)
            self.state = 3811
            self.replication_settings()
            self.state = 3812
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def REPLICATION(self):
            return self.getToken(YQLParser.REPLICATION, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def CASCADE(self):
            return self.getToken(YQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_replication_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_stmt" ):
                listener.enterDrop_replication_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_stmt" ):
                listener.exitDrop_replication_stmt(self)




    def drop_replication_stmt(self):

        localctx = YQLParser.Drop_replication_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_drop_replication_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3814
            self.match(YQLParser.DROP)
            self.state = 3815
            self.match(YQLParser.ASYNC)
            self.state = 3816
            self.match(YQLParser.REPLICATION)
            self.state = 3817
            self.object_ref()
            self.state = 3819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 3818
                self.match(YQLParser.CASCADE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_or_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_(self):
            return self.getTypedRuleContext(YQLParser.LambdaContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_lambda_or_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_or_parameter" ):
                listener.enterLambda_or_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_or_parameter" ):
                listener.exitLambda_or_parameter(self)




    def lambda_or_parameter(self):

        localctx = YQLParser.Lambda_or_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_lambda_or_parameter)
        try:
            self.state = 3823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3821
                self.lambda_()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3822
                self.bind_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_transfer_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def TRANSFER(self):
            return self.getToken(YQLParser.TRANSFER, 0)

        def object_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Object_refContext)
            else:
                return self.getTypedRuleContext(YQLParser.Object_refContext,i)


        def FROM(self):
            return self.getToken(YQLParser.FROM, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def transfer_settings(self):
            return self.getTypedRuleContext(YQLParser.Transfer_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def lambda_or_parameter(self):
            return self.getTypedRuleContext(YQLParser.Lambda_or_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_transfer_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_transfer_stmt" ):
                listener.enterCreate_transfer_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_transfer_stmt" ):
                listener.exitCreate_transfer_stmt(self)




    def create_transfer_stmt(self):

        localctx = YQLParser.Create_transfer_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_create_transfer_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3825
            self.match(YQLParser.CREATE)
            self.state = 3826
            self.match(YQLParser.TRANSFER)
            self.state = 3827
            self.object_ref()
            self.state = 3828
            self.match(YQLParser.FROM)
            self.state = 3829
            self.object_ref()
            self.state = 3830
            self.match(YQLParser.TO)
            self.state = 3831
            self.object_ref()
            self.state = 3834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 3832
                self.match(YQLParser.USING)
                self.state = 3833
                self.lambda_or_parameter()


            self.state = 3836
            self.match(YQLParser.WITH)
            self.state = 3837
            self.match(YQLParser.LPAREN)
            self.state = 3838
            self.transfer_settings()
            self.state = 3839
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transfer_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transfer_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Transfer_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Transfer_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_transfer_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransfer_settings" ):
                listener.enterTransfer_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransfer_settings" ):
                listener.exitTransfer_settings(self)




    def transfer_settings(self):

        localctx = YQLParser.Transfer_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_transfer_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            self.transfer_settings_entry()
            self.state = 3846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3842
                self.match(YQLParser.COMMA)
                self.state = 3843
                self.transfer_settings_entry()
                self.state = 3848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transfer_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_transfer_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransfer_settings_entry" ):
                listener.enterTransfer_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransfer_settings_entry" ):
                listener.exitTransfer_settings_entry(self)




    def transfer_settings_entry(self):

        localctx = YQLParser.Transfer_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_transfer_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3849
            self.an_id()
            self.state = 3850
            self.match(YQLParser.EQUALS)
            self.state = 3851
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_transfer_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def TRANSFER(self):
            return self.getToken(YQLParser.TRANSFER, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def alter_transfer_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_transfer_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_transfer_actionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_transfer_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_transfer_stmt" ):
                listener.enterAlter_transfer_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_transfer_stmt" ):
                listener.exitAlter_transfer_stmt(self)




    def alter_transfer_stmt(self):

        localctx = YQLParser.Alter_transfer_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_alter_transfer_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3853
            self.match(YQLParser.ALTER)
            self.state = 3854
            self.match(YQLParser.TRANSFER)
            self.state = 3855
            self.object_ref()
            self.state = 3856
            self.alter_transfer_action()
            self.state = 3861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3857
                self.match(YQLParser.COMMA)
                self.state = 3858
                self.alter_transfer_action()
                self.state = 3863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_transfer_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_transfer_set_setting(self):
            return self.getTypedRuleContext(YQLParser.Alter_transfer_set_settingContext,0)


        def alter_transfer_set_using(self):
            return self.getTypedRuleContext(YQLParser.Alter_transfer_set_usingContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_transfer_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_transfer_action" ):
                listener.enterAlter_transfer_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_transfer_action" ):
                listener.exitAlter_transfer_action(self)




    def alter_transfer_action(self):

        localctx = YQLParser.Alter_transfer_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_alter_transfer_action)
        try:
            self.state = 3866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3864
                self.alter_transfer_set_setting()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3865
                self.alter_transfer_set_using()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_transfer_set_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def transfer_settings(self):
            return self.getTypedRuleContext(YQLParser.Transfer_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_transfer_set_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_transfer_set_setting" ):
                listener.enterAlter_transfer_set_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_transfer_set_setting" ):
                listener.exitAlter_transfer_set_setting(self)




    def alter_transfer_set_setting(self):

        localctx = YQLParser.Alter_transfer_set_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_alter_transfer_set_setting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3868
            self.match(YQLParser.SET)
            self.state = 3869
            self.match(YQLParser.LPAREN)
            self.state = 3870
            self.transfer_settings()
            self.state = 3871
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_transfer_set_usingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def lambda_or_parameter(self):
            return self.getTypedRuleContext(YQLParser.Lambda_or_parameterContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_transfer_set_using

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_transfer_set_using" ):
                listener.enterAlter_transfer_set_using(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_transfer_set_using" ):
                listener.exitAlter_transfer_set_using(self)




    def alter_transfer_set_using(self):

        localctx = YQLParser.Alter_transfer_set_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_alter_transfer_set_using)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3873
            self.match(YQLParser.SET)
            self.state = 3874
            self.match(YQLParser.USING)
            self.state = 3875
            self.lambda_or_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_transfer_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def TRANSFER(self):
            return self.getToken(YQLParser.TRANSFER, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def CASCADE(self):
            return self.getToken(YQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_transfer_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_transfer_stmt" ):
                listener.enterDrop_transfer_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_transfer_stmt" ):
                listener.exitDrop_transfer_stmt(self)




    def drop_transfer_stmt(self):

        localctx = YQLParser.Drop_transfer_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_drop_transfer_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self.match(YQLParser.DROP)
            self.state = 3878
            self.match(YQLParser.TRANSFER)
            self.state = 3879
            self.object_ref()
            self.state = 3881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 3880
                self.match(YQLParser.CASCADE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Action_or_subquery_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opt_bind_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Opt_bind_parameterContext)
            else:
                return self.getTypedRuleContext(YQLParser.Opt_bind_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_action_or_subquery_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_or_subquery_args" ):
                listener.enterAction_or_subquery_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_or_subquery_args" ):
                listener.exitAction_or_subquery_args(self)




    def action_or_subquery_args(self):

        localctx = YQLParser.Action_or_subquery_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_action_or_subquery_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3883
            self.opt_bind_parameter()
            self.state = 3888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 3884
                self.match(YQLParser.COMMA)
                self.state = 3885
                self.opt_bind_parameter()
                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Define_action_or_subquery_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.DEFINE)
            else:
                return self.getToken(YQLParser.DEFINE, i)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def define_action_or_subquery_body(self):
            return self.getTypedRuleContext(YQLParser.Define_action_or_subquery_bodyContext,0)


        def END(self):
            return self.getToken(YQLParser.END, 0)

        def ACTION(self):
            return self.getToken(YQLParser.ACTION, 0)

        def SUBQUERY(self):
            return self.getToken(YQLParser.SUBQUERY, 0)

        def action_or_subquery_args(self):
            return self.getTypedRuleContext(YQLParser.Action_or_subquery_argsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_define_action_or_subquery_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefine_action_or_subquery_stmt" ):
                listener.enterDefine_action_or_subquery_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefine_action_or_subquery_stmt" ):
                listener.exitDefine_action_or_subquery_stmt(self)




    def define_action_or_subquery_stmt(self):

        localctx = YQLParser.Define_action_or_subquery_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_define_action_or_subquery_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3891
            self.match(YQLParser.DEFINE)
            self.state = 3892
            _la = self._input.LA(1)
            if not(_la==39 or _la==281):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3893
            self.bind_parameter()
            self.state = 3894
            self.match(YQLParser.LPAREN)
            self.state = 3896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 3895
                self.action_or_subquery_args()


            self.state = 3898
            self.match(YQLParser.RPAREN)
            self.state = 3899
            self.match(YQLParser.AS)
            self.state = 3900
            self.define_action_or_subquery_body()
            self.state = 3901
            self.match(YQLParser.END)
            self.state = 3902
            self.match(YQLParser.DEFINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Define_action_or_subquery_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.SEMICOLON)
            else:
                return self.getToken(YQLParser.SEMICOLON, i)

        def sql_stmt_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Sql_stmt_coreContext)
            else:
                return self.getTypedRuleContext(YQLParser.Sql_stmt_coreContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_define_action_or_subquery_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefine_action_or_subquery_body" ):
                listener.enterDefine_action_or_subquery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefine_action_or_subquery_body" ):
                listener.exitDefine_action_or_subquery_body(self)




    def define_action_or_subquery_body(self):

        localctx = YQLParser.Define_action_or_subquery_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_define_action_or_subquery_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 3904
                self.match(YQLParser.SEMICOLON)
                self.state = 3909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729408646296633344) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -6915259621669863167) != 0) or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 2099329) != 0) or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 76571106719335425) != 0) or ((((_la - 310)) & ~0x3f) == 0 and ((1 << (_la - 310)) & 71) != 0):
                self.state = 3910
                self.sql_stmt_core()
                self.state = 3919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3912 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3911
                            self.match(YQLParser.SEMICOLON)
                            self.state = 3914 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==22):
                                break

                        self.state = 3916
                        self.sql_stmt_core() 
                    self.state = 3921
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

                self.state = 3925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 3922
                    self.match(YQLParser.SEMICOLON)
                    self.state = 3927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def do_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Do_stmtContext)
            else:
                return self.getTypedRuleContext(YQLParser.Do_stmtContext,i)


        def EVALUATE(self):
            return self.getToken(YQLParser.EVALUATE, 0)

        def ELSE(self):
            return self.getToken(YQLParser.ELSE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = YQLParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 3930
                self.match(YQLParser.EVALUATE)


            self.state = 3933
            self.match(YQLParser.IF)
            self.state = 3934
            self.expr()
            self.state = 3935
            self.do_stmt()
            self.state = 3938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 3936
                self.match(YQLParser.ELSE)
                self.state = 3937
                self.do_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(YQLParser.FOR, 0)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def IN(self):
            return self.getToken(YQLParser.IN, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def do_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Do_stmtContext)
            else:
                return self.getTypedRuleContext(YQLParser.Do_stmtContext,i)


        def EVALUATE(self):
            return self.getToken(YQLParser.EVALUATE, 0)

        def PARALLEL(self):
            return self.getToken(YQLParser.PARALLEL, 0)

        def ELSE(self):
            return self.getToken(YQLParser.ELSE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = YQLParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 3940
                self.match(YQLParser.EVALUATE)


            self.state = 3944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 3943
                self.match(YQLParser.PARALLEL)


            self.state = 3946
            self.match(YQLParser.FOR)
            self.state = 3947
            self.bind_parameter()
            self.state = 3948
            self.match(YQLParser.IN)
            self.state = 3949
            self.expr()
            self.state = 3950
            self.do_stmt()
            self.state = 3953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 3951
                self.match(YQLParser.ELSE)
                self.state = 3952
                self.do_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_key(self):
            return self.getTypedRuleContext(YQLParser.Table_keyContext,0)


        def an_id_expr(self):
            return self.getTypedRuleContext(YQLParser.An_id_exprContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def cluster_expr(self):
            return self.getTypedRuleContext(YQLParser.Cluster_exprContext,0)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def COMMAT(self):
            return self.getToken(YQLParser.COMMAT, 0)

        def table_hints(self):
            return self.getTypedRuleContext(YQLParser.Table_hintsContext,0)


        def table_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Table_argContext)
            else:
                return self.getTypedRuleContext(YQLParser.Table_argContext,i)


        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(YQLParser.View_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def expr_list(self):
            return self.getTypedRuleContext(YQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)




    def table_ref(self):

        localctx = YQLParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_table_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3955
                self.cluster_expr()
                self.state = 3956
                self.match(YQLParser.DOT)


            self.state = 3961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 3960
                self.match(YQLParser.COMMAT)


            self.state = 3993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 3963
                self.table_key()
                pass

            elif la_ == 2:
                self.state = 3964
                self.an_id_expr()
                self.state = 3965
                self.match(YQLParser.LPAREN)
                self.state = 3977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194201571) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                    self.state = 3966
                    self.table_arg()
                    self.state = 3971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,408,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3967
                            self.match(YQLParser.COMMA)
                            self.state = 3968
                            self.table_arg() 
                        self.state = 3973
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,408,self._ctx)

                    self.state = 3975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==24:
                        self.state = 3974
                        self.match(YQLParser.COMMA)




                self.state = 3979
                self.match(YQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.state = 3981
                self.bind_parameter()
                self.state = 3987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 3982
                    self.match(YQLParser.LPAREN)
                    self.state = 3984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & -17592194234339) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -1) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & -1) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & -549755813889) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & -1) != 0):
                        self.state = 3983
                        self.expr_list()


                    self.state = 3986
                    self.match(YQLParser.RPAREN)


                self.state = 3991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==318:
                    self.state = 3989
                    self.match(YQLParser.VIEW)
                    self.state = 3990
                    self.view_name()


                pass


            self.state = 3996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 3995
                self.table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_table_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_table_or_typeContext,0)


        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(YQLParser.View_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_key" ):
                listener.enterTable_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_key" ):
                listener.exitTable_key(self)




    def table_key(self):

        localctx = YQLParser.Table_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_table_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3998
            self.id_table_or_type()
            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==318:
                self.state = 3999
                self.match(YQLParser.VIEW)
                self.state = 4000
                self.view_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_expr(self):
            return self.getTypedRuleContext(YQLParser.Named_exprContext,0)


        def COMMAT(self):
            return self.getToken(YQLParser.COMMAT, 0)

        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(YQLParser.View_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_table_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_arg" ):
                listener.enterTable_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_arg" ):
                listener.exitTable_arg(self)




    def table_arg(self):

        localctx = YQLParser.Table_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_table_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 4003
                self.match(YQLParser.COMMAT)


            self.state = 4006
            self.named_expr()
            self.state = 4009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==318:
                self.state = 4007
                self.match(YQLParser.VIEW)
                self.state = 4008
                self.view_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(YQLParser.Table_hintContext,i)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hints" ):
                listener.enterTable_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hints" ):
                listener.exitTable_hints(self)




    def table_hints(self):

        localctx = YQLParser.Table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4011
            self.match(YQLParser.WITH)
            self.state = 4024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.state = 4012
                self.table_hint()
                pass
            elif token in [25]:
                self.state = 4013
                self.match(YQLParser.LPAREN)
                self.state = 4014
                self.table_hint()
                self.state = 4019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==24:
                    self.state = 4015
                    self.match(YQLParser.COMMA)
                    self.state = 4016
                    self.table_hint()
                    self.state = 4021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4022
                self.match(YQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_hint(self):
            return self.getTypedRuleContext(YQLParser.An_id_hintContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def type_name_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Type_name_tagContext)
            else:
                return self.getTypedRuleContext(YQLParser.Type_name_tagContext,i)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def type_name_or_bind(self):
            return self.getTypedRuleContext(YQLParser.Type_name_or_bindContext,0)


        def SCHEMA(self):
            return self.getToken(YQLParser.SCHEMA, 0)

        def COLUMNS(self):
            return self.getToken(YQLParser.COLUMNS, 0)

        def struct_arg_positional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Struct_arg_positionalContext)
            else:
                return self.getTypedRuleContext(YQLParser.Struct_arg_positionalContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)




    def table_hint(self):

        localctx = YQLParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.state = 4071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4026
                self.an_id_hint()
                self.state = 4045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 4027
                    self.match(YQLParser.EQUALS)
                    self.state = 4043
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                        self.state = 4028
                        self.type_name_tag()
                        pass
                    elif token in [25]:
                        self.state = 4029
                        self.match(YQLParser.LPAREN)
                        self.state = 4030
                        self.type_name_tag()
                        self.state = 4035
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 4031
                                self.match(YQLParser.COMMA)
                                self.state = 4032
                                self.type_name_tag() 
                            self.state = 4037
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                        self.state = 4039
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==24:
                            self.state = 4038
                            self.match(YQLParser.COMMA)


                        self.state = 4041
                        self.match(YQLParser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4047
                _la = self._input.LA(1)
                if not(_la==77 or _la==267):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 4048
                    self.match(YQLParser.EQUALS)


                self.state = 4051
                self.type_name_or_bind()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4052
                self.match(YQLParser.SCHEMA)
                self.state = 4054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 4053
                    self.match(YQLParser.EQUALS)


                self.state = 4056
                self.match(YQLParser.LPAREN)
                self.state = 4065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & -268435711) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & -274877906945) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & -1) != 0) or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & -8388609) != 0) or ((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & 17592186011647) != 0):
                    self.state = 4057
                    self.struct_arg_positional()
                    self.state = 4062
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,427,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4058
                            self.match(YQLParser.COMMA)
                            self.state = 4059
                            self.struct_arg_positional() 
                        self.state = 4064
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,427,self._ctx)



                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 4067
                    self.match(YQLParser.COMMA)


                self.state = 4070
                self.match(YQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_at(self):
            return self.getTypedRuleContext(YQLParser.Id_or_atContext,0)


        def cluster_expr(self):
            return self.getTypedRuleContext(YQLParser.Cluster_exprContext,0)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_object_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_ref" ):
                listener.enterObject_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_ref" ):
                listener.exitObject_ref(self)




    def object_ref(self):

        localctx = YQLParser.Object_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_object_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.state = 4073
                self.cluster_expr()
                self.state = 4074
                self.match(YQLParser.DOT)


            self.state = 4078
            self.id_or_at()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_table_ref_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def bind_parameter(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameterContext,0)


        def COMMAT(self):
            return self.getToken(YQLParser.COMMAT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_simple_table_ref_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_table_ref_core" ):
                listener.enterSimple_table_ref_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_table_ref_core" ):
                listener.exitSimple_table_ref_core(self)




    def simple_table_ref_core(self):

        localctx = YQLParser.Simple_table_ref_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_simple_table_ref_core)
        self._la = 0 # Token type
        try:
            self.state = 4085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4080
                self.object_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 4081
                    self.match(YQLParser.COMMAT)


                self.state = 4084
                self.bind_parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_table_ref_core(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_ref_coreContext,0)


        def table_hints(self):
            return self.getTypedRuleContext(YQLParser.Table_hintsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_simple_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_table_ref" ):
                listener.enterSimple_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_table_ref" ):
                listener.exitSimple_table_ref(self)




    def simple_table_ref(self):

        localctx = YQLParser.Simple_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_simple_table_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4087
            self.simple_table_ref_core()
            self.state = 4089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 4088
                self.table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_simple_table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def ERASE(self):
            return self.getToken(YQLParser.ERASE, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def pure_column_list(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_into_simple_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_simple_table_ref" ):
                listener.enterInto_simple_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_simple_table_ref" ):
                listener.exitInto_simple_table_ref(self)




    def into_simple_table_ref(self):

        localctx = YQLParser.Into_simple_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_into_simple_table_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4091
            self.simple_table_ref()
            self.state = 4095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 4092
                self.match(YQLParser.ERASE)
                self.state = 4093
                self.match(YQLParser.BY)
                self.state = 4094
                self.pure_column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(YQLParser.DELETE, 0)

        def FROM(self):
            return self.getToken(YQLParser.FROM, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def BATCH(self):
            return self.getToken(YQLParser.BATCH, 0)

        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def into_values_source(self):
            return self.getTypedRuleContext(YQLParser.Into_values_sourceContext,0)


        def returning_columns_list(self):
            return self.getTypedRuleContext(YQLParser.Returning_columns_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = YQLParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 4097
                self.match(YQLParser.BATCH)


            self.state = 4100
            self.match(YQLParser.DELETE)
            self.state = 4101
            self.match(YQLParser.FROM)
            self.state = 4102
            self.simple_table_ref()
            self.state = 4107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.state = 4103
                self.match(YQLParser.WHERE)
                self.state = 4104
                self.expr()
                pass
            elif token in [207]:
                self.state = 4105
                self.match(YQLParser.ON)
                self.state = 4106
                self.into_values_source()
                pass
            elif token in [-1, 22, 117, 256]:
                pass
            else:
                pass
            self.state = 4110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 4109
                self.returning_columns_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(YQLParser.UPDATE, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def set_clause_choice(self):
            return self.getTypedRuleContext(YQLParser.Set_clause_choiceContext,0)


        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def into_values_source(self):
            return self.getTypedRuleContext(YQLParser.Into_values_sourceContext,0)


        def BATCH(self):
            return self.getToken(YQLParser.BATCH, 0)

        def returning_columns_list(self):
            return self.getTypedRuleContext(YQLParser.Returning_columns_listContext,0)


        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = YQLParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 4112
                self.match(YQLParser.BATCH)


            self.state = 4115
            self.match(YQLParser.UPDATE)
            self.state = 4116
            self.simple_table_ref()
            self.state = 4125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.state = 4117
                self.match(YQLParser.SET)
                self.state = 4118
                self.set_clause_choice()
                self.state = 4121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==321:
                    self.state = 4119
                    self.match(YQLParser.WHERE)
                    self.state = 4120
                    self.expr()


                pass
            elif token in [207]:
                self.state = 4123
                self.match(YQLParser.ON)
                self.state = 4124
                self.into_values_source()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 4127
                self.returning_columns_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clause_choiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_clause_list(self):
            return self.getTypedRuleContext(YQLParser.Set_clause_listContext,0)


        def multiple_column_assignment(self):
            return self.getTypedRuleContext(YQLParser.Multiple_column_assignmentContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_set_clause_choice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause_choice" ):
                listener.enterSet_clause_choice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause_choice" ):
                listener.exitSet_clause_choice(self)




    def set_clause_choice(self):

        localctx = YQLParser.Set_clause_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_set_clause_choice)
        try:
            self.state = 4132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4130
                self.set_clause_list()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4131
                self.multiple_column_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clause_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Set_clauseContext)
            else:
                return self.getTypedRuleContext(YQLParser.Set_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_set_clause_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause_list" ):
                listener.enterSet_clause_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause_list" ):
                listener.exitSet_clause_list(self)




    def set_clause_list(self):

        localctx = YQLParser.Set_clause_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_set_clause_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4134
            self.set_clause()
            self.state = 4139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4135
                self.match(YQLParser.COMMA)
                self.state = 4136
                self.set_clause()
                self.state = 4141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(YQLParser.Set_targetContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause" ):
                listener.enterSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause" ):
                listener.exitSet_clause(self)




    def set_clause(self):

        localctx = YQLParser.Set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.set_target()
            self.state = 4143
            self.match(YQLParser.EQUALS)
            self.state = 4144
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(YQLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_set_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target" ):
                listener.enterSet_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target" ):
                listener.exitSet_target(self)




    def set_target(self):

        localctx = YQLParser.Set_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_set_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4146
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_column_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target_list(self):
            return self.getTypedRuleContext(YQLParser.Set_target_listContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def simple_values_source(self):
            return self.getTypedRuleContext(YQLParser.Simple_values_sourceContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_multiple_column_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_column_assignment" ):
                listener.enterMultiple_column_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_column_assignment" ):
                listener.exitMultiple_column_assignment(self)




    def multiple_column_assignment(self):

        localctx = YQLParser.Multiple_column_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_multiple_column_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4148
            self.set_target_list()
            self.state = 4149
            self.match(YQLParser.EQUALS)
            self.state = 4150
            self.match(YQLParser.LPAREN)
            self.state = 4151
            self.simple_values_source()
            self.state = 4152
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_target_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def set_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Set_targetContext)
            else:
                return self.getTypedRuleContext(YQLParser.Set_targetContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_set_target_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target_list" ):
                listener.enterSet_target_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target_list" ):
                listener.exitSet_target_list(self)




    def set_target_list(self):

        localctx = YQLParser.Set_target_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_set_target_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.match(YQLParser.LPAREN)
            self.state = 4155
            self.set_target()
            self.state = 4160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4156
                self.match(YQLParser.COMMA)
                self.state = 4157
                self.set_target()
                self.state = 4162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4163
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_topic_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def TOPIC(self):
            return self.getToken(YQLParser.TOPIC, 0)

        def topic_ref(self):
            return self.getTypedRuleContext(YQLParser.Topic_refContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def create_topic_entries(self):
            return self.getTypedRuleContext(YQLParser.Create_topic_entriesContext,0)


        def with_topic_settings(self):
            return self.getTypedRuleContext(YQLParser.With_topic_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_topic_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_topic_stmt" ):
                listener.enterCreate_topic_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_topic_stmt" ):
                listener.exitCreate_topic_stmt(self)




    def create_topic_stmt(self):

        localctx = YQLParser.Create_topic_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_create_topic_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4165
            self.match(YQLParser.CREATE)
            self.state = 4166
            self.match(YQLParser.TOPIC)
            self.state = 4170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 4167
                self.match(YQLParser.IF)
                self.state = 4168
                self.match(YQLParser.NOT)
                self.state = 4169
                self.match(YQLParser.EXISTS)


            self.state = 4172
            self.topic_ref()
            self.state = 4174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 4173
                self.create_topic_entries()


            self.state = 4177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 4176
                self.with_topic_settings()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_topic_entriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def create_topic_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Create_topic_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Create_topic_entryContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_create_topic_entries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_topic_entries" ):
                listener.enterCreate_topic_entries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_topic_entries" ):
                listener.exitCreate_topic_entries(self)




    def create_topic_entries(self):

        localctx = YQLParser.Create_topic_entriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_create_topic_entries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4179
            self.match(YQLParser.LPAREN)
            self.state = 4180
            self.create_topic_entry()
            self.state = 4185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4181
                self.match(YQLParser.COMMA)
                self.state = 4182
                self.create_topic_entry()
                self.state = 4187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4188
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_topic_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topic_create_consumer_entry(self):
            return self.getTypedRuleContext(YQLParser.Topic_create_consumer_entryContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_create_topic_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_topic_entry" ):
                listener.enterCreate_topic_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_topic_entry" ):
                listener.exitCreate_topic_entry(self)




    def create_topic_entry(self):

        localctx = YQLParser.Create_topic_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_create_topic_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4190
            self.topic_create_consumer_entry()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_topic_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def topic_settings(self):
            return self.getTypedRuleContext(YQLParser.Topic_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_with_topic_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_topic_settings" ):
                listener.enterWith_topic_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_topic_settings" ):
                listener.exitWith_topic_settings(self)




    def with_topic_settings(self):

        localctx = YQLParser.With_topic_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_with_topic_settings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4192
            self.match(YQLParser.WITH)
            self.state = 4193
            self.match(YQLParser.LPAREN)
            self.state = 4194
            self.topic_settings()
            self.state = 4195
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def TOPIC(self):
            return self.getToken(YQLParser.TOPIC, 0)

        def topic_ref(self):
            return self.getTypedRuleContext(YQLParser.Topic_refContext,0)


        def alter_topic_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_topic_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_topic_actionContext,i)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_stmt" ):
                listener.enterAlter_topic_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_stmt" ):
                listener.exitAlter_topic_stmt(self)




    def alter_topic_stmt(self):

        localctx = YQLParser.Alter_topic_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_alter_topic_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4197
            self.match(YQLParser.ALTER)
            self.state = 4198
            self.match(YQLParser.TOPIC)
            self.state = 4201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 4199
                self.match(YQLParser.IF)
                self.state = 4200
                self.match(YQLParser.EXISTS)


            self.state = 4203
            self.topic_ref()
            self.state = 4204
            self.alter_topic_action()
            self.state = 4209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4205
                self.match(YQLParser.COMMA)
                self.state = 4206
                self.alter_topic_action()
                self.state = 4211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_topic_add_consumer(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_add_consumerContext,0)


        def alter_topic_alter_consumer(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_alter_consumerContext,0)


        def alter_topic_drop_consumer(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_drop_consumerContext,0)


        def alter_topic_set_settings(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_set_settingsContext,0)


        def alter_topic_reset_settings(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_reset_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_action" ):
                listener.enterAlter_topic_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_action" ):
                listener.exitAlter_topic_action(self)




    def alter_topic_action(self):

        localctx = YQLParser.Alter_topic_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_alter_topic_action)
        try:
            self.state = 4217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4212
                self.alter_topic_add_consumer()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4213
                self.alter_topic_alter_consumer()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4214
                self.alter_topic_drop_consumer()
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4215
                self.alter_topic_set_settings()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4216
                self.alter_topic_reset_settings()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_add_consumerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def topic_create_consumer_entry(self):
            return self.getTypedRuleContext(YQLParser.Topic_create_consumer_entryContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_add_consumer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_add_consumer" ):
                listener.enterAlter_topic_add_consumer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_add_consumer" ):
                listener.exitAlter_topic_add_consumer(self)




    def alter_topic_add_consumer(self):

        localctx = YQLParser.Alter_topic_add_consumerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_alter_topic_add_consumer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4219
            self.match(YQLParser.ADD)
            self.state = 4220
            self.topic_create_consumer_entry()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_create_consumer_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSUMER(self):
            return self.getToken(YQLParser.CONSUMER, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def topic_consumer_with_settings(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_with_settingsContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_create_consumer_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_create_consumer_entry" ):
                listener.enterTopic_create_consumer_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_create_consumer_entry" ):
                listener.exitTopic_create_consumer_entry(self)




    def topic_create_consumer_entry(self):

        localctx = YQLParser.Topic_create_consumer_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_topic_create_consumer_entry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4222
            self.match(YQLParser.CONSUMER)
            self.state = 4223
            self.an_id()
            self.state = 4225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 4224
                self.topic_consumer_with_settings()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_alter_consumerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def CONSUMER(self):
            return self.getToken(YQLParser.CONSUMER, 0)

        def topic_consumer_ref(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_refContext,0)


        def alter_topic_alter_consumer_entry(self):
            return self.getTypedRuleContext(YQLParser.Alter_topic_alter_consumer_entryContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_alter_consumer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_alter_consumer" ):
                listener.enterAlter_topic_alter_consumer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_alter_consumer" ):
                listener.exitAlter_topic_alter_consumer(self)




    def alter_topic_alter_consumer(self):

        localctx = YQLParser.Alter_topic_alter_consumerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_alter_topic_alter_consumer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4227
            self.match(YQLParser.ALTER)
            self.state = 4228
            self.match(YQLParser.CONSUMER)
            self.state = 4229
            self.topic_consumer_ref()
            self.state = 4230
            self.alter_topic_alter_consumer_entry()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_alter_consumer_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topic_alter_consumer_set(self):
            return self.getTypedRuleContext(YQLParser.Topic_alter_consumer_setContext,0)


        def topic_alter_consumer_reset(self):
            return self.getTypedRuleContext(YQLParser.Topic_alter_consumer_resetContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_alter_consumer_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_alter_consumer_entry" ):
                listener.enterAlter_topic_alter_consumer_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_alter_consumer_entry" ):
                listener.exitAlter_topic_alter_consumer_entry(self)




    def alter_topic_alter_consumer_entry(self):

        localctx = YQLParser.Alter_topic_alter_consumer_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_alter_topic_alter_consumer_entry)
        try:
            self.state = 4234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4232
                self.topic_alter_consumer_set()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4233
                self.topic_alter_consumer_reset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_drop_consumerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def CONSUMER(self):
            return self.getToken(YQLParser.CONSUMER, 0)

        def topic_consumer_ref(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_refContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_drop_consumer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_drop_consumer" ):
                listener.enterAlter_topic_drop_consumer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_drop_consumer" ):
                listener.exitAlter_topic_drop_consumer(self)




    def alter_topic_drop_consumer(self):

        localctx = YQLParser.Alter_topic_drop_consumerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_alter_topic_drop_consumer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4236
            self.match(YQLParser.DROP)
            self.state = 4237
            self.match(YQLParser.CONSUMER)
            self.state = 4238
            self.topic_consumer_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_alter_consumer_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def topic_consumer_settings(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_alter_consumer_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_alter_consumer_set" ):
                listener.enterTopic_alter_consumer_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_alter_consumer_set" ):
                listener.exitTopic_alter_consumer_set(self)




    def topic_alter_consumer_set(self):

        localctx = YQLParser.Topic_alter_consumer_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_topic_alter_consumer_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4240
            self.match(YQLParser.SET)
            self.state = 4241
            self.match(YQLParser.LPAREN)
            self.state = 4242
            self.topic_consumer_settings()
            self.state = 4243
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_alter_consumer_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(YQLParser.RESET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def an_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_idContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_idContext,i)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_alter_consumer_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_alter_consumer_reset" ):
                listener.enterTopic_alter_consumer_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_alter_consumer_reset" ):
                listener.exitTopic_alter_consumer_reset(self)




    def topic_alter_consumer_reset(self):

        localctx = YQLParser.Topic_alter_consumer_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_topic_alter_consumer_reset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4245
            self.match(YQLParser.RESET)
            self.state = 4246
            self.match(YQLParser.LPAREN)
            self.state = 4247
            self.an_id()
            self.state = 4252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4248
                self.match(YQLParser.COMMA)
                self.state = 4249
                self.an_id()
                self.state = 4254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4255
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_set_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def topic_settings(self):
            return self.getTypedRuleContext(YQLParser.Topic_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_set_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_set_settings" ):
                listener.enterAlter_topic_set_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_set_settings" ):
                listener.exitAlter_topic_set_settings(self)




    def alter_topic_set_settings(self):

        localctx = YQLParser.Alter_topic_set_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_alter_topic_set_settings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4257
            self.match(YQLParser.SET)
            self.state = 4258
            self.match(YQLParser.LPAREN)
            self.state = 4259
            self.topic_settings()
            self.state = 4260
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_topic_reset_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(YQLParser.RESET, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def an_id_pure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.An_id_pureContext)
            else:
                return self.getTypedRuleContext(YQLParser.An_id_pureContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_topic_reset_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_topic_reset_settings" ):
                listener.enterAlter_topic_reset_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_topic_reset_settings" ):
                listener.exitAlter_topic_reset_settings(self)




    def alter_topic_reset_settings(self):

        localctx = YQLParser.Alter_topic_reset_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_alter_topic_reset_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            self.match(YQLParser.RESET)
            self.state = 4263
            self.match(YQLParser.LPAREN)
            self.state = 4264
            self.an_id()
            self.state = 4269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4265
                self.match(YQLParser.COMMA)
                self.state = 4266
                self.an_id_pure()
                self.state = 4271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4272
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_topic_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def TOPIC(self):
            return self.getToken(YQLParser.TOPIC, 0)

        def topic_ref(self):
            return self.getTypedRuleContext(YQLParser.Topic_refContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_drop_topic_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_topic_stmt" ):
                listener.enterDrop_topic_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_topic_stmt" ):
                listener.exitDrop_topic_stmt(self)




    def drop_topic_stmt(self):

        localctx = YQLParser.Drop_topic_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_drop_topic_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4274
            self.match(YQLParser.DROP)
            self.state = 4275
            self.match(YQLParser.TOPIC)
            self.state = 4278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 4276
                self.match(YQLParser.IF)
                self.state = 4277
                self.match(YQLParser.EXISTS)


            self.state = 4280
            self.topic_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topic_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Topic_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Topic_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_settings" ):
                listener.enterTopic_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_settings" ):
                listener.exitTopic_settings(self)




    def topic_settings(self):

        localctx = YQLParser.Topic_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_topic_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4282
            self.topic_settings_entry()
            self.state = 4287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4283
                self.match(YQLParser.COMMA)
                self.state = 4284
                self.topic_settings_entry()
                self.state = 4289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def topic_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Topic_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_settings_entry" ):
                listener.enterTopic_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_settings_entry" ):
                listener.exitTopic_settings_entry(self)




    def topic_settings_entry(self):

        localctx = YQLParser.Topic_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_topic_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4290
            self.an_id()
            self.state = 4291
            self.match(YQLParser.EQUALS)
            self.state = 4292
            self.topic_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_setting_value" ):
                listener.enterTopic_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_setting_value" ):
                listener.exitTopic_setting_value(self)




    def topic_setting_value(self):

        localctx = YQLParser.Topic_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_topic_setting_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4294
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_consumer_with_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def topic_consumer_settings(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_settingsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_consumer_with_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_consumer_with_settings" ):
                listener.enterTopic_consumer_with_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_consumer_with_settings" ):
                listener.exitTopic_consumer_with_settings(self)




    def topic_consumer_with_settings(self):

        localctx = YQLParser.Topic_consumer_with_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_topic_consumer_with_settings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4296
            self.match(YQLParser.WITH)
            self.state = 4297
            self.match(YQLParser.LPAREN)
            self.state = 4298
            self.topic_consumer_settings()
            self.state = 4299
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_consumer_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topic_consumer_settings_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Topic_consumer_settings_entryContext)
            else:
                return self.getTypedRuleContext(YQLParser.Topic_consumer_settings_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_consumer_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_consumer_settings" ):
                listener.enterTopic_consumer_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_consumer_settings" ):
                listener.exitTopic_consumer_settings(self)




    def topic_consumer_settings(self):

        localctx = YQLParser.Topic_consumer_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_topic_consumer_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4301
            self.topic_consumer_settings_entry()
            self.state = 4306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4302
                self.match(YQLParser.COMMA)
                self.state = 4303
                self.topic_consumer_settings_entry()
                self.state = 4308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_consumer_settings_entryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def topic_consumer_setting_value(self):
            return self.getTypedRuleContext(YQLParser.Topic_consumer_setting_valueContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_consumer_settings_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_consumer_settings_entry" ):
                listener.enterTopic_consumer_settings_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_consumer_settings_entry" ):
                listener.exitTopic_consumer_settings_entry(self)




    def topic_consumer_settings_entry(self):

        localctx = YQLParser.Topic_consumer_settings_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_topic_consumer_settings_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4309
            self.an_id()
            self.state = 4310
            self.match(YQLParser.EQUALS)
            self.state = 4311
            self.topic_consumer_setting_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_consumer_setting_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_consumer_setting_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_consumer_setting_value" ):
                listener.enterTopic_consumer_setting_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_consumer_setting_value" ):
                listener.exitTopic_consumer_setting_value(self)




    def topic_consumer_setting_value(self):

        localctx = YQLParser.Topic_consumer_setting_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_topic_consumer_setting_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4313
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def cluster_expr(self):
            return self.getTypedRuleContext(YQLParser.Cluster_exprContext,0)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_topic_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_ref" ):
                listener.enterTopic_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_ref" ):
                listener.exitTopic_ref(self)




    def topic_ref(self):

        localctx = YQLParser.Topic_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_topic_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 4315
                self.cluster_expr()
                self.state = 4316
                self.match(YQLParser.DOT)


            self.state = 4320
            self.an_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Topic_consumer_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_pure(self):
            return self.getTypedRuleContext(YQLParser.An_id_pureContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_topic_consumer_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopic_consumer_ref" ):
                listener.enterTopic_consumer_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopic_consumer_ref" ):
                listener.exitTopic_consumer_ref(self)




    def topic_consumer_ref(self):

        localctx = YQLParser.Topic_consumer_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_topic_consumer_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4322
            self.an_id_pure()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_treatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESPECT(self):
            return self.getToken(YQLParser.RESPECT, 0)

        def NULLS(self):
            return self.getToken(YQLParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(YQLParser.IGNORE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_null_treatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_treatment" ):
                listener.enterNull_treatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_treatment" ):
                listener.exitNull_treatment(self)




    def null_treatment(self):

        localctx = YQLParser.Null_treatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_null_treatment)
        try:
            self.state = 4328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [250]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4324
                self.match(YQLParser.RESPECT)
                self.state = 4325
                self.match(YQLParser.NULLS)
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4326
                self.match(YQLParser.IGNORE)
                self.state = 4327
                self.match(YQLParser.NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(YQLParser.FILTER, 0)

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = YQLParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4330
            self.match(YQLParser.FILTER)
            self.state = 4331
            self.match(YQLParser.LPAREN)
            self.state = 4332
            self.match(YQLParser.WHERE)
            self.state = 4333
            self.expr()
            self.state = 4334
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_name_or_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_name(self):
            return self.getTypedRuleContext(YQLParser.Window_nameContext,0)


        def window_specification(self):
            return self.getTypedRuleContext(YQLParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_name_or_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name_or_specification" ):
                listener.enterWindow_name_or_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name_or_specification" ):
                listener.exitWindow_name_or_specification(self)




    def window_name_or_specification(self):

        localctx = YQLParser.Window_name_or_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_window_name_or_specification)
        try:
            self.state = 4338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4336
                self.window_name()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4337
                self.window_specification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_window(self):
            return self.getTypedRuleContext(YQLParser.An_id_windowContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = YQLParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4340
            self.an_id_window()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(YQLParser.WINDOW, 0)

        def window_definition_list(self):
            return self.getTypedRuleContext(YQLParser.Window_definition_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_clause" ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_clause" ):
                listener.exitWindow_clause(self)




    def window_clause(self):

        localctx = YQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_window_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4342
            self.match(YQLParser.WINDOW)
            self.state = 4343
            self.window_definition_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Window_definitionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Window_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_window_definition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition_list" ):
                listener.enterWindow_definition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition_list" ):
                listener.exitWindow_definition_list(self)




    def window_definition_list(self):

        localctx = YQLParser.Window_definition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_window_definition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4345
            self.window_definition()
            self.state = 4350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 4346
                self.match(YQLParser.COMMA)
                self.state = 4347
                self.window_definition()
                self.state = 4352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_window_name(self):
            return self.getTypedRuleContext(YQLParser.New_window_nameContext,0)


        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(YQLParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition" ):
                listener.enterWindow_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition" ):
                listener.exitWindow_definition(self)




    def window_definition(self):

        localctx = YQLParser.Window_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_window_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4353
            self.new_window_name()
            self.state = 4354
            self.match(YQLParser.AS)
            self.state = 4355
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_name(self):
            return self.getTypedRuleContext(YQLParser.Window_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_new_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_window_name" ):
                listener.enterNew_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_window_name" ):
                listener.exitNew_window_name(self)




    def new_window_name(self):

        localctx = YQLParser.New_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_new_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4357
            self.window_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def window_specification_details(self):
            return self.getTypedRuleContext(YQLParser.Window_specification_detailsContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification" ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification" ):
                listener.exitWindow_specification(self)




    def window_specification(self):

        localctx = YQLParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_window_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4359
            self.match(YQLParser.LPAREN)
            self.state = 4360
            self.window_specification_details()
            self.state = 4361
            self.match(YQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specification_detailsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existing_window_name(self):
            return self.getTypedRuleContext(YQLParser.Existing_window_nameContext,0)


        def window_partition_clause(self):
            return self.getTypedRuleContext(YQLParser.Window_partition_clauseContext,0)


        def window_order_clause(self):
            return self.getTypedRuleContext(YQLParser.Window_order_clauseContext,0)


        def window_frame_clause(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_specification_details

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification_details" ):
                listener.enterWindow_specification_details(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification_details" ):
                listener.exitWindow_specification_details(self)




    def window_specification_details(self):

        localctx = YQLParser.Window_specification_detailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_window_specification_details)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 4363
                self.existing_window_name()


            self.state = 4367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 4366
                self.window_partition_clause()


            self.state = 4370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==213:
                self.state = 4369
                self.window_order_clause()


            self.state = 4373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149 or _la==237 or _la==264:
                self.state = 4372
                self.window_frame_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_name(self):
            return self.getTypedRuleContext(YQLParser.Window_nameContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_existing_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_window_name" ):
                listener.enterExisting_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_window_name" ):
                listener.exitExisting_window_name(self)




    def existing_window_name(self):

        localctx = YQLParser.Existing_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_existing_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4375
            self.window_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(YQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def named_expr_list(self):
            return self.getTypedRuleContext(YQLParser.Named_expr_listContext,0)


        def COMPACT(self):
            return self.getToken(YQLParser.COMPACT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_clause" ):
                listener.enterWindow_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_clause" ):
                listener.exitWindow_partition_clause(self)




    def window_partition_clause(self):

        localctx = YQLParser.Window_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_window_partition_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4377
            self.match(YQLParser.PARTITION)
            self.state = 4379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 4378
                self.match(YQLParser.COMPACT)


            self.state = 4381
            self.match(YQLParser.BY)
            self.state = 4382
            self.named_expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by_clause(self):
            return self.getTypedRuleContext(YQLParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_order_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_clause" ):
                listener.enterWindow_order_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_clause" ):
                listener.exitWindow_order_clause(self)




    def window_order_clause(self):

        localctx = YQLParser.Window_order_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_window_order_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4384
            self.order_by_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_units(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_unitsContext,0)


        def window_frame_extent(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_extentContext,0)


        def window_frame_exclusion(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_exclusionContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_clause" ):
                listener.enterWindow_frame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_clause" ):
                listener.exitWindow_frame_clause(self)




    def window_frame_clause(self):

        localctx = YQLParser.Window_frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_window_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4386
            self.window_frame_units()
            self.state = 4387
            self.window_frame_extent()
            self.state = 4389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 4388
                self.window_frame_exclusion()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_unitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(YQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(YQLParser.RANGE, 0)

        def GROUPS(self):
            return self.getToken(YQLParser.GROUPS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_units

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_units" ):
                listener.enterWindow_frame_units(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_units" ):
                listener.exitWindow_frame_units(self)




    def window_frame_units(self):

        localctx = YQLParser.Window_frame_unitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_window_frame_units)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4391
            _la = self._input.LA(1)
            if not(_la==149 or _la==237 or _la==264):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_bound(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_boundContext,0)


        def window_frame_between(self):
            return self.getTypedRuleContext(YQLParser.Window_frame_betweenContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)




    def window_frame_extent(self):

        localctx = YQLParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_window_frame_extent)
        try:
            self.state = 4395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4393
                self.window_frame_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4394
                self.window_frame_between()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_betweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(YQLParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(YQLParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(YQLParser.AND, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_between" ):
                listener.enterWindow_frame_between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_between" ):
                listener.exitWindow_frame_between(self)




    def window_frame_between(self):

        localctx = YQLParser.Window_frame_betweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_window_frame_between)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4397
            self.match(YQLParser.BETWEEN)
            self.state = 4398
            self.window_frame_bound()
            self.state = 4399
            self.match(YQLParser.AND)
            self.state = 4400
            self.window_frame_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(YQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def PRECEDING(self):
            return self.getToken(YQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(YQLParser.FOLLOWING, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def UNBOUNDED(self):
            return self.getToken(YQLParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)




    def window_frame_bound(self):

        localctx = YQLParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_window_frame_bound)
        self._la = 0 # Token type
        try:
            self.state = 4409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4402
                self.match(YQLParser.CURRENT)
                self.state = 4403
                self.match(YQLParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                if la_ == 1:
                    self.state = 4404
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 4405
                    self.match(YQLParser.UNBOUNDED)
                    pass


                self.state = 4408
                _la = self._input.LA(1)
                if not(_la==138 or _la==229):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_exclusionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE(self):
            return self.getToken(YQLParser.EXCLUDE, 0)

        def CURRENT(self):
            return self.getToken(YQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def TIES(self):
            return self.getToken(YQLParser.TIES, 0)

        def NO(self):
            return self.getToken(YQLParser.NO, 0)

        def OTHERS(self):
            return self.getToken(YQLParser.OTHERS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_window_frame_exclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_exclusion" ):
                listener.enterWindow_frame_exclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_exclusion" ):
                listener.exitWindow_frame_exclusion(self)




    def window_frame_exclusion(self):

        localctx = YQLParser.Window_frame_exclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_window_frame_exclusion)
        try:
            self.state = 4421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4411
                self.match(YQLParser.EXCLUDE)
                self.state = 4412
                self.match(YQLParser.CURRENT)
                self.state = 4413
                self.match(YQLParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4414
                self.match(YQLParser.EXCLUDE)
                self.state = 4415
                self.match(YQLParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4416
                self.match(YQLParser.EXCLUDE)
                self.state = 4417
                self.match(YQLParser.TIES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4418
                self.match(YQLParser.EXCLUDE)
                self.state = 4419
                self.match(YQLParser.NO)
                self.state = 4420
                self.match(YQLParser.OTHERS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(YQLParser.USE, 0)

        def cluster_expr(self):
            return self.getTypedRuleContext(YQLParser.Cluster_exprContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_use_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_stmt" ):
                listener.enterUse_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_stmt" ):
                listener.exitUse_stmt(self)




    def use_stmt(self):

        localctx = YQLParser.Use_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_use_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4423
            self.match(YQLParser.USE)
            self.state = 4424
            self.cluster_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subselect_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_stmtContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def select_unparenthesized_stmt(self):
            return self.getTypedRuleContext(YQLParser.Select_unparenthesized_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_subselect_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubselect_stmt" ):
                listener.enterSubselect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubselect_stmt" ):
                listener.exitSubselect_stmt(self)




    def subselect_stmt(self):

        localctx = YQLParser.Subselect_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_subselect_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 4426
                self.match(YQLParser.LPAREN)
                self.state = 4427
                self.select_stmt()
                self.state = 4428
                self.match(YQLParser.RPAREN)
                pass
            elif token in [108, 141, 233, 238, 270]:
                self.state = 4430
                self.select_unparenthesized_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_nodes_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bind_parameter_list(self):
            return self.getTypedRuleContext(YQLParser.Bind_parameter_listContext,0)


        def EQUALS(self):
            return self.getToken(YQLParser.EQUALS, 0)

        def expr(self):
            return self.getTypedRuleContext(YQLParser.ExprContext,0)


        def subselect_stmt(self):
            return self.getTypedRuleContext(YQLParser.Subselect_stmtContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_named_nodes_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_nodes_stmt" ):
                listener.enterNamed_nodes_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_nodes_stmt" ):
                listener.exitNamed_nodes_stmt(self)




    def named_nodes_stmt(self):

        localctx = YQLParser.Named_nodes_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_named_nodes_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4433
            self.bind_parameter_list()
            self.state = 4434
            self.match(YQLParser.EQUALS)
            self.state = 4437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 4435
                self.expr()
                pass

            elif la_ == 2:
                self.state = 4436
                self.subselect_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(YQLParser.COMMIT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = YQLParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_commit_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4439
            self.match(YQLParser.COMMIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(YQLParser.ROLLBACK, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = YQLParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_rollback_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4441
            self.match(YQLParser.ROLLBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def LPAREN(self):
            return self.getToken(YQLParser.LPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(YQLParser.Column_listContext,0)


        def RPAREN(self):
            return self.getToken(YQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_analyze_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_table" ):
                listener.enterAnalyze_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_table" ):
                listener.exitAnalyze_table(self)




    def analyze_table(self):

        localctx = YQLParser.Analyze_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_analyze_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4443
            self.simple_table_ref()
            self.state = 4448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 4444
                self.match(YQLParser.LPAREN)
                self.state = 4445
                self.column_list()
                self.state = 4446
                self.match(YQLParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_table_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Analyze_tableContext)
            else:
                return self.getTypedRuleContext(YQLParser.Analyze_tableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(YQLParser.COMMA)
            else:
                return self.getToken(YQLParser.COMMA, i)

        def getRuleIndex(self):
            return YQLParser.RULE_analyze_table_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_table_list" ):
                listener.enterAnalyze_table_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_table_list" ):
                listener.exitAnalyze_table_list(self)




    def analyze_table_list(self):

        localctx = YQLParser.Analyze_table_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_analyze_table_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4450
            self.analyze_table()
            self.state = 4455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,477,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4451
                    self.match(YQLParser.COMMA)
                    self.state = 4452
                    self.analyze_table() 
                self.state = 4457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

            self.state = 4459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 4458
                self.match(YQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(YQLParser.ANALYZE, 0)

        def analyze_table_list(self):
            return self.getTypedRuleContext(YQLParser.Analyze_table_listContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = YQLParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4461
            self.match(YQLParser.ANALYZE)
            self.state = 4462
            self.analyze_table_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequence_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(YQLParser.SEQUENCE, 0)

        def object_ref(self):
            return self.getTypedRuleContext(YQLParser.Object_refContext,0)


        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def alter_sequence_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(YQLParser.Alter_sequence_actionContext)
            else:
                return self.getTypedRuleContext(YQLParser.Alter_sequence_actionContext,i)


        def getRuleIndex(self):
            return YQLParser.RULE_alter_sequence_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence_stmt" ):
                listener.enterAlter_sequence_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence_stmt" ):
                listener.exitAlter_sequence_stmt(self)




    def alter_sequence_stmt(self):

        localctx = YQLParser.Alter_sequence_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_alter_sequence_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4464
            self.match(YQLParser.ALTER)
            self.state = 4465
            self.match(YQLParser.SEQUENCE)
            self.state = 4468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.state = 4466
                self.match(YQLParser.IF)
                self.state = 4467
                self.match(YQLParser.EXISTS)


            self.state = 4470
            self.object_ref()
            self.state = 4472 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4471
                self.alter_sequence_action()
                self.state = 4474 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==159 or _la==251 or _la==278):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequence_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(YQLParser.START, 0)

        def integer(self):
            return self.getTypedRuleContext(YQLParser.IntegerContext,0)


        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def RESTART(self):
            return self.getToken(YQLParser.RESTART, 0)

        def INCREMENT(self):
            return self.getToken(YQLParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_alter_sequence_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence_action" ):
                listener.enterAlter_sequence_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence_action" ):
                listener.exitAlter_sequence_action(self)




    def alter_sequence_action(self):

        localctx = YQLParser.Alter_sequence_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_alter_sequence_action)
        self._la = 0 # Token type
        try:
            self.state = 4492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4476
                self.match(YQLParser.START)
                self.state = 4478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==323:
                    self.state = 4477
                    self.match(YQLParser.WITH)


                self.state = 4480
                self.integer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4481
                self.match(YQLParser.RESTART)
                self.state = 4483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==323:
                    self.state = 4482
                    self.match(YQLParser.WITH)


                self.state = 4485
                self.integer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4486
                self.match(YQLParser.RESTART)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4487
                self.match(YQLParser.INCREMENT)
                self.state = 4489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 4488
                    self.match(YQLParser.BY)


                self.state = 4491
                self.integer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(YQLParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def simple_table_ref(self):
            return self.getTypedRuleContext(YQLParser.Simple_table_refContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_show_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_create_table_stmt" ):
                listener.enterShow_create_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_create_table_stmt" ):
                listener.exitShow_create_table_stmt(self)




    def show_create_table_stmt(self):

        localctx = YQLParser.Show_create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_show_create_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4494
            self.match(YQLParser.SHOW)
            self.state = 4495
            self.match(YQLParser.CREATE)
            self.state = 4496
            self.match(YQLParser.TABLE)
            self.state = 4497
            self.simple_table_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_PLAIN(self):
            return self.getToken(YQLParser.ID_PLAIN, 0)

        def ID_QUOTED(self):
            return self.getToken(YQLParser.ID_QUOTED, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = YQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4499
            _la = self._input.LA(1)
            if not(_la==328 or _la==329):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(YQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId" ):
                listener.enterId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId" ):
                listener.exitId(self)




    def id_(self):

        localctx = YQLParser.IdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_id)
        try:
            self.state = 4503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4501
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4502
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_expr_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_expr_uncompatContext,0)


        def keyword_select_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_select_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_schema" ):
                listener.enterId_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_schema" ):
                listener.exitId_schema(self)




    def id_schema(self):

        localctx = YQLParser.Id_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_id_schema)
        try:
            self.state = 4512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4505
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4506
                self.keyword_compat()
                pass
            elif token in [52, 65, 66, 70, 71, 88, 90, 91, 92, 115, 127, 141, 142, 152, 174, 175, 176, 199, 201, 233, 238, 255, 256, 262, 270, 284, 304, 320, 321]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4507
                self.keyword_expr_uncompat()
                pass
            elif token in [42, 49, 51, 109, 123, 151, 169, 182, 306, 322, 324]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4508
                self.keyword_select_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4509
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4510
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4511
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expr" ):
                listener.enterId_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expr" ):
                listener.exitId_expr(self)




    def id_expr(self):

        localctx = YQLParser.Id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_id_expr)
        try:
            self.state = 4520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4514
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4515
                self.keyword_compat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4516
                self.keyword_alter_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4517
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4518
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4519
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_expr_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_expr_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expr_in" ):
                listener.enterId_expr_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expr_in" ):
                listener.exitId_expr_in(self)




    def id_expr_in(self):

        localctx = YQLParser.Id_expr_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_id_expr_in)
        try:
            self.state = 4527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4522
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4523
                self.keyword_compat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4524
                self.keyword_alter_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4525
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4526
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_windowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_expr_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_expr_uncompatContext,0)


        def keyword_table_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_table_uncompatContext,0)


        def keyword_select_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_select_uncompatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_window

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_window" ):
                listener.enterId_window(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_window" ):
                listener.exitId_window(self)




    def id_window(self):

        localctx = YQLParser.Id_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_id_window)
        try:
            self.state = 4537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4529
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4530
                self.keyword_compat()
                pass
            elif token in [52, 65, 66, 70, 71, 88, 90, 91, 92, 115, 127, 141, 142, 152, 174, 175, 176, 199, 201, 233, 238, 255, 256, 262, 270, 284, 304, 320, 321]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4531
                self.keyword_expr_uncompat()
                pass
            elif token in [47, 119, 279]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4532
                self.keyword_table_uncompat()
                pass
            elif token in [42, 49, 51, 109, 123, 151, 169, 182, 306, 322, 324]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4533
                self.keyword_select_uncompat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4534
                self.keyword_alter_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4535
                self.keyword_in_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4536
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_expr_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_expr_uncompatContext,0)


        def keyword_select_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_select_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_table" ):
                listener.enterId_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_table" ):
                listener.exitId_table(self)




    def id_table(self):

        localctx = YQLParser.Id_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_id_table)
        try:
            self.state = 4546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4539
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4540
                self.keyword_compat()
                pass
            elif token in [52, 65, 66, 70, 71, 88, 90, 91, 92, 115, 127, 141, 142, 152, 174, 175, 176, 199, 201, 233, 238, 255, 256, 262, 270, 284, 304, 320, 321]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4541
                self.keyword_expr_uncompat()
                pass
            elif token in [42, 49, 51, 109, 123, 151, 169, 182, 306, 322, 324]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4542
                self.keyword_select_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4543
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4544
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4545
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_withoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_table_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_table_uncompatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_without

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_without" ):
                listener.enterId_without(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_without" ):
                listener.exitId_without(self)




    def id_without(self):

        localctx = YQLParser.Id_withoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_id_without)
        try:
            self.state = 4555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4548
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4549
                self.keyword_compat()
                pass
            elif token in [47, 119, 279]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4550
                self.keyword_table_uncompat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4551
                self.keyword_alter_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4552
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4553
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4554
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_expr_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_expr_uncompatContext,0)


        def keyword_table_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_table_uncompatContext,0)


        def keyword_select_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_select_uncompatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_hint" ):
                listener.enterId_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_hint" ):
                listener.exitId_hint(self)




    def id_hint(self):

        localctx = YQLParser.Id_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_id_hint)
        try:
            self.state = 4565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4557
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4558
                self.keyword_compat()
                pass
            elif token in [52, 65, 66, 70, 71, 88, 90, 91, 92, 115, 127, 141, 142, 152, 174, 175, 176, 199, 201, 233, 238, 255, 256, 262, 270, 284, 304, 320, 321]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4559
                self.keyword_expr_uncompat()
                pass
            elif token in [47, 119, 279]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4560
                self.keyword_table_uncompat()
                pass
            elif token in [42, 49, 51, 109, 123, 151, 169, 182, 306, 322, 324]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4561
                self.keyword_select_uncompat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4562
                self.keyword_alter_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4563
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4564
                self.keyword_window_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_as_compatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def keyword_as_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_as_compatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_as_compat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_as_compat" ):
                listener.enterId_as_compat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_as_compat" ):
                listener.exitId_as_compat(self)




    def id_as_compat(self):

        localctx = YQLParser.Id_as_compatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_id_as_compat)
        try:
            self.state = 4569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4567
                self.identifier()
                pass
            elif token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 78, 80, 81, 82, 83, 84, 85, 86, 89, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 257, 258, 260, 261, 263, 266, 268, 269, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 325, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4568
                self.keyword_as_compat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(YQLParser.IdContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id" ):
                listener.enterAn_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id" ):
                listener.exitAn_id(self)




    def an_id(self):

        localctx = YQLParser.An_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_an_id)
        try:
            self.state = 4573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4571
                self.id_()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4572
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_or_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_or_typeContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_or_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_or_type" ):
                listener.enterAn_id_or_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_or_type" ):
                listener.exitAn_id_or_type(self)




    def an_id_or_type(self):

        localctx = YQLParser.An_id_or_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_an_id_or_type)
        try:
            self.state = 4577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4575
                self.id_or_type()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4576
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_schema(self):
            return self.getTypedRuleContext(YQLParser.Id_schemaContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_schema" ):
                listener.enterAn_id_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_schema" ):
                listener.exitAn_id_schema(self)




    def an_id_schema(self):

        localctx = YQLParser.An_id_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_an_id_schema)
        try:
            self.state = 4581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4579
                self.id_schema()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4580
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expr(self):
            return self.getTypedRuleContext(YQLParser.Id_exprContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_expr" ):
                listener.enterAn_id_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_expr" ):
                listener.exitAn_id_expr(self)




    def an_id_expr(self):

        localctx = YQLParser.An_id_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_an_id_expr)
        try:
            self.state = 4585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4583
                self.id_expr()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4584
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_expr_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expr_in(self):
            return self.getTypedRuleContext(YQLParser.Id_expr_inContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_expr_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_expr_in" ):
                listener.enterAn_id_expr_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_expr_in" ):
                listener.exitAn_id_expr_in(self)




    def an_id_expr_in(self):

        localctx = YQLParser.An_id_expr_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_an_id_expr_in)
        try:
            self.state = 4589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4587
                self.id_expr_in()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4588
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_windowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_window(self):
            return self.getTypedRuleContext(YQLParser.Id_windowContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_window

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_window" ):
                listener.enterAn_id_window(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_window" ):
                listener.exitAn_id_window(self)




    def an_id_window(self):

        localctx = YQLParser.An_id_windowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_an_id_window)
        try:
            self.state = 4593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4591
                self.id_window()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4592
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_table(self):
            return self.getTypedRuleContext(YQLParser.Id_tableContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_table" ):
                listener.enterAn_id_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_table" ):
                listener.exitAn_id_table(self)




    def an_id_table(self):

        localctx = YQLParser.An_id_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_an_id_table)
        try:
            self.state = 4597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4595
                self.id_table()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4596
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_withoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_without(self):
            return self.getTypedRuleContext(YQLParser.Id_withoutContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_without

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_without" ):
                listener.enterAn_id_without(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_without" ):
                listener.exitAn_id_without(self)




    def an_id_without(self):

        localctx = YQLParser.An_id_withoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_an_id_without)
        try:
            self.state = 4601
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4599
                self.id_without()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4600
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_hint(self):
            return self.getTypedRuleContext(YQLParser.Id_hintContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_hint" ):
                listener.enterAn_id_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_hint" ):
                listener.exitAn_id_hint(self)




    def an_id_hint(self):

        localctx = YQLParser.An_id_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_an_id_hint)
        try:
            self.state = 4605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4603
                self.id_hint()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4604
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_pureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(YQLParser.IdentifierContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_pure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_pure" ):
                listener.enterAn_id_pure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_pure" ):
                listener.exitAn_id_pure(self)




    def an_id_pure(self):

        localctx = YQLParser.An_id_pureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_an_id_pure)
        try:
            self.state = 4609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4607
                self.identifier()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4608
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class An_id_as_compatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_as_compat(self):
            return self.getTypedRuleContext(YQLParser.Id_as_compatContext,0)


        def STRING_VALUE(self):
            return self.getToken(YQLParser.STRING_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_an_id_as_compat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_id_as_compat" ):
                listener.enterAn_id_as_compat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_id_as_compat" ):
                listener.exitAn_id_as_compat(self)




    def an_id_as_compat(self):

        localctx = YQLParser.An_id_as_compatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_an_id_as_compat)
        try:
            self.state = 4613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 78, 80, 81, 82, 83, 84, 85, 86, 89, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 257, 258, 260, 261, 263, 266, 268, 269, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4611
                self.id_as_compat()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4612
                self.match(YQLParser.STRING_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def PRIMARY(self):
            return self.getToken(YQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(YQLParser.KEY, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = YQLParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_view_name)
        try:
            self.state = 4618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4615
                self.an_id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4616
                self.match(YQLParser.PRIMARY)
                self.state = 4617
                self.match(YQLParser.KEY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_id_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_opt_id_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_id_prefix" ):
                listener.enterOpt_id_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_id_prefix" ):
                listener.exitOpt_id_prefix(self)




    def opt_id_prefix(self):

        localctx = YQLParser.Opt_id_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_opt_id_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
            if la_ == 1:
                self.state = 4620
                self.an_id()
                self.state = 4621
                self.match(YQLParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pure_column_or_named(self):
            return self.getTypedRuleContext(YQLParser.Pure_column_or_namedContext,0)


        def ASTERISK(self):
            return self.getToken(YQLParser.ASTERISK, 0)

        def an_id(self):
            return self.getTypedRuleContext(YQLParser.An_idContext,0)


        def COLON(self):
            return self.getToken(YQLParser.COLON, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_cluster_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_expr" ):
                listener.enterCluster_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_expr" ):
                listener.exitCluster_expr(self)




    def cluster_expr(self):

        localctx = YQLParser.Cluster_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_cluster_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 4625
                self.an_id()
                self.state = 4626
                self.match(YQLParser.COLON)


            self.state = 4632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.state = 4630
                self.pure_column_or_named()
                pass
            elif token in [19]:
                self.state = 4631
                self.match(YQLParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_or_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(YQLParser.IdContext,0)


        def type_id(self):
            return self.getTypedRuleContext(YQLParser.Type_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_or_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_or_type" ):
                listener.enterId_or_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_or_type" ):
                listener.exitId_or_type(self)




    def id_or_type(self):

        localctx = YQLParser.Id_or_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_id_or_type)
        try:
            self.state = 4636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4634
                self.id_()
                pass
            elif token in [68, 105, 118, 137, 183, 211, 249, 272, 280, 291, 302, 317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4635
                self.type_id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_id_prefix_or_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def DOT(self):
            return self.getToken(YQLParser.DOT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_opt_id_prefix_or_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_id_prefix_or_type" ):
                listener.enterOpt_id_prefix_or_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_id_prefix_or_type" ):
                listener.exitOpt_id_prefix_or_type(self)




    def opt_id_prefix_or_type(self):

        localctx = YQLParser.Opt_id_prefix_or_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_opt_id_prefix_or_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.state = 4638
                self.an_id_or_type()
                self.state = 4639
                self.match(YQLParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_or_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_or_type(self):
            return self.getTypedRuleContext(YQLParser.An_id_or_typeContext,0)


        def COMMAT(self):
            return self.getToken(YQLParser.COMMAT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_id_or_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_or_at" ):
                listener.enterId_or_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_or_at" ):
                listener.exitId_or_at(self)




    def id_or_at(self):

        localctx = YQLParser.Id_or_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_id_or_at)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 4643
                self.match(YQLParser.COMMAT)


            self.state = 4646
            self.an_id_or_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_table_or_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_id_table(self):
            return self.getTypedRuleContext(YQLParser.An_id_tableContext,0)


        def type_id(self):
            return self.getTypedRuleContext(YQLParser.Type_idContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_id_table_or_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_table_or_type" ):
                listener.enterId_table_or_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_table_or_type" ):
                listener.exitId_table_or_type(self)




    def id_table_or_type(self):

        localctx = YQLParser.Id_table_or_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_id_table_or_type)
        try:
            self.state = 4650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4648
                self.an_id_table()
                pass
            elif token in [68, 105, 118, 137, 183, 211, 249, 272, 280, 291, 302, 317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4649
                self.type_id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_table_or_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_table_or_type(self):
            return self.getTypedRuleContext(YQLParser.Id_table_or_typeContext,0)


        def COMMAT(self):
            return self.getToken(YQLParser.COMMAT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_id_table_or_at

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_table_or_at" ):
                listener.enterId_table_or_at(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_table_or_at" ):
                listener.exitId_table_or_at(self)




    def id_table_or_at(self):

        localctx = YQLParser.Id_table_or_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_id_table_or_at)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 4652
                self.match(YQLParser.COMMAT)


            self.state = 4655
            self.id_table_or_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_compat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_compatContext,0)


        def keyword_expr_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_expr_uncompatContext,0)


        def keyword_table_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_table_uncompatContext,0)


        def keyword_select_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_select_uncompatContext,0)


        def keyword_alter_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_alter_uncompatContext,0)


        def keyword_in_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_in_uncompatContext,0)


        def keyword_window_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_window_uncompatContext,0)


        def keyword_hint_uncompat(self):
            return self.getTypedRuleContext(YQLParser.Keyword_hint_uncompatContext,0)


        def getRuleIndex(self):
            return YQLParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = YQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_keyword)
        try:
            self.state = 4665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 69, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 263, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4657
                self.keyword_compat()
                pass
            elif token in [52, 65, 66, 70, 71, 88, 90, 91, 92, 115, 127, 141, 142, 152, 174, 175, 176, 199, 201, 233, 238, 255, 256, 262, 270, 284, 304, 320, 321]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4658
                self.keyword_expr_uncompat()
                pass
            elif token in [47, 119, 279]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4659
                self.keyword_table_uncompat()
                pass
            elif token in [42, 49, 51, 109, 123, 151, 169, 182, 306, 322, 324]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4660
                self.keyword_select_uncompat()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4661
                self.keyword_alter_uncompat()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4662
                self.keyword_in_uncompat()
                pass
            elif token in [149, 237, 264]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4663
                self.keyword_window_uncompat()
                pass
            elif token in [77, 267]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4664
                self.keyword_hint_uncompat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_expr_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYMMETRIC(self):
            return self.getToken(YQLParser.ASYMMETRIC, 0)

        def BETWEEN(self):
            return self.getToken(YQLParser.BETWEEN, 0)

        def BITCAST(self):
            return self.getToken(YQLParser.BITCAST, 0)

        def CASE(self):
            return self.getToken(YQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(YQLParser.CAST, 0)

        def CUBE(self):
            return self.getToken(YQLParser.CUBE, 0)

        def CURRENT_DATE(self):
            return self.getToken(YQLParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(YQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(YQLParser.CURRENT_TIMESTAMP, 0)

        def EMPTY_ACTION(self):
            return self.getToken(YQLParser.EMPTY_ACTION, 0)

        def EXISTS(self):
            return self.getToken(YQLParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(YQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(YQLParser.FULL, 0)

        def HOP(self):
            return self.getToken(YQLParser.HOP, 0)

        def JSON_EXISTS(self):
            return self.getToken(YQLParser.JSON_EXISTS, 0)

        def JSON_VALUE(self):
            return self.getToken(YQLParser.JSON_VALUE, 0)

        def JSON_QUERY(self):
            return self.getToken(YQLParser.JSON_QUERY, 0)

        def NOT(self):
            return self.getToken(YQLParser.NOT, 0)

        def NULL(self):
            return self.getToken(YQLParser.NULL, 0)

        def PROCESS(self):
            return self.getToken(YQLParser.PROCESS, 0)

        def REDUCE(self):
            return self.getToken(YQLParser.REDUCE, 0)

        def RETURN(self):
            return self.getToken(YQLParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(YQLParser.RETURNING, 0)

        def ROLLUP(self):
            return self.getToken(YQLParser.ROLLUP, 0)

        def SELECT(self):
            return self.getToken(YQLParser.SELECT, 0)

        def SYMMETRIC(self):
            return self.getToken(YQLParser.SYMMETRIC, 0)

        def UNBOUNDED(self):
            return self.getToken(YQLParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(YQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(YQLParser.WHERE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_expr_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_expr_uncompat" ):
                listener.enterKeyword_expr_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_expr_uncompat" ):
                listener.exitKeyword_expr_uncompat(self)




    def keyword_expr_uncompat(self):

        localctx = YQLParser.Keyword_expr_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_keyword_expr_uncompat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4667
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & -9223370043989139455) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 985162452090881) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & -9007198687805308923) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 3377716900413441) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_table_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(YQLParser.ANY, 0)

        def ERASE(self):
            return self.getToken(YQLParser.ERASE, 0)

        def STREAM(self):
            return self.getToken(YQLParser.STREAM, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_table_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_table_uncompat" ):
                listener.enterKeyword_table_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_table_uncompat" ):
                listener.exitKeyword_table_uncompat(self)




    def keyword_table_uncompat(self):

        localctx = YQLParser.Keyword_table_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_keyword_table_uncompat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4669
            _la = self._input.LA(1)
            if not(_la==47 or _la==119 or _la==279):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_select_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(YQLParser.ALL, 0)

        def AS(self):
            return self.getToken(YQLParser.AS, 0)

        def ASSUME(self):
            return self.getToken(YQLParser.ASSUME, 0)

        def DISTINCT(self):
            return self.getToken(YQLParser.DISTINCT, 0)

        def EXCEPT(self):
            return self.getToken(YQLParser.EXCEPT, 0)

        def HAVING(self):
            return self.getToken(YQLParser.HAVING, 0)

        def INTERSECT(self):
            return self.getToken(YQLParser.INTERSECT, 0)

        def LIMIT(self):
            return self.getToken(YQLParser.LIMIT, 0)

        def UNION(self):
            return self.getToken(YQLParser.UNION, 0)

        def WINDOW(self):
            return self.getToken(YQLParser.WINDOW, 0)

        def WITHOUT(self):
            return self.getToken(YQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_select_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_select_uncompat" ):
                listener.enterKeyword_select_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_select_uncompat" ):
                listener.exitKeyword_select_uncompat(self)




    def keyword_select_uncompat(self):

        localctx = YQLParser.Keyword_select_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_keyword_select_uncompat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4671
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2819147813617664) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 1152925902653374465) != 0) or _la==182 or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & 327681) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_alter_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(YQLParser.COLUMN, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_alter_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_alter_uncompat" ):
                listener.enterKeyword_alter_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_alter_uncompat" ):
                listener.exitKeyword_alter_uncompat(self)




    def keyword_alter_uncompat(self):

        localctx = YQLParser.Keyword_alter_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_keyword_alter_uncompat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4673
            self.match(YQLParser.COLUMN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_in_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPACT(self):
            return self.getToken(YQLParser.COMPACT, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_in_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_in_uncompat" ):
                listener.enterKeyword_in_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_in_uncompat" ):
                listener.exitKeyword_in_uncompat(self)




    def keyword_in_uncompat(self):

        localctx = YQLParser.Keyword_in_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_keyword_in_uncompat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4675
            self.match(YQLParser.COMPACT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_window_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPS(self):
            return self.getToken(YQLParser.GROUPS, 0)

        def RANGE(self):
            return self.getToken(YQLParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(YQLParser.ROWS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_window_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_window_uncompat" ):
                listener.enterKeyword_window_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_window_uncompat" ):
                listener.exitKeyword_window_uncompat(self)




    def keyword_window_uncompat(self):

        localctx = YQLParser.Keyword_window_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_keyword_window_uncompat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4677
            _la = self._input.LA(1)
            if not(_la==149 or _la==237 or _la==264):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_hint_uncompatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(YQLParser.SCHEMA, 0)

        def COLUMNS(self):
            return self.getToken(YQLParser.COLUMNS, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_hint_uncompat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_hint_uncompat" ):
                listener.enterKeyword_hint_uncompat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_hint_uncompat" ):
                listener.exitKeyword_hint_uncompat(self)




    def keyword_hint_uncompat(self):

        localctx = YQLParser.Keyword_hint_uncompatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_keyword_hint_uncompat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4679
            _la = self._input.LA(1)
            if not(_la==77 or _la==267):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_as_compatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(YQLParser.ABORT, 0)

        def ACTION(self):
            return self.getToken(YQLParser.ACTION, 0)

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def AFTER(self):
            return self.getToken(YQLParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(YQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(YQLParser.AND, 0)

        def ANSI(self):
            return self.getToken(YQLParser.ANSI, 0)

        def ARRAY(self):
            return self.getToken(YQLParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(YQLParser.ASC, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def AT(self):
            return self.getToken(YQLParser.AT, 0)

        def ATTACH(self):
            return self.getToken(YQLParser.ATTACH, 0)

        def ATTRIBUTES(self):
            return self.getToken(YQLParser.ATTRIBUTES, 0)

        def AUTOINCREMENT(self):
            return self.getToken(YQLParser.AUTOINCREMENT, 0)

        def BACKUP(self):
            return self.getToken(YQLParser.BACKUP, 0)

        def BATCH(self):
            return self.getToken(YQLParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(YQLParser.BEFORE, 0)

        def BEGIN(self):
            return self.getToken(YQLParser.BEGIN, 0)

        def BERNOULLI(self):
            return self.getToken(YQLParser.BERNOULLI, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def CASCADE(self):
            return self.getToken(YQLParser.CASCADE, 0)

        def CHANGEFEED(self):
            return self.getToken(YQLParser.CHANGEFEED, 0)

        def CHECK(self):
            return self.getToken(YQLParser.CHECK, 0)

        def CLASSIFIER(self):
            return self.getToken(YQLParser.CLASSIFIER, 0)

        def COLLECTION(self):
            return self.getToken(YQLParser.COLLECTION, 0)

        def COMMIT(self):
            return self.getToken(YQLParser.COMMIT, 0)

        def CONDITIONAL(self):
            return self.getToken(YQLParser.CONDITIONAL, 0)

        def CONFLICT(self):
            return self.getToken(YQLParser.CONFLICT, 0)

        def CONNECT(self):
            return self.getToken(YQLParser.CONNECT, 0)

        def CONSTRAINT(self):
            return self.getToken(YQLParser.CONSTRAINT, 0)

        def CONSUMER(self):
            return self.getToken(YQLParser.CONSUMER, 0)

        def COVER(self):
            return self.getToken(YQLParser.COVER, 0)

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def CURRENT(self):
            return self.getToken(YQLParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(YQLParser.DATABASE, 0)

        def DECIMAL(self):
            return self.getToken(YQLParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(YQLParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(YQLParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(YQLParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(YQLParser.DEFERRED, 0)

        def DELETE(self):
            return self.getToken(YQLParser.DELETE, 0)

        def DESC(self):
            return self.getToken(YQLParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(YQLParser.DESCRIBE, 0)

        def DETACH(self):
            return self.getToken(YQLParser.DETACH, 0)

        def DIRECTORY(self):
            return self.getToken(YQLParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(YQLParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(YQLParser.DISCARD, 0)

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(YQLParser.EACH, 0)

        def ELSE(self):
            return self.getToken(YQLParser.ELSE, 0)

        def EMPTY(self):
            return self.getToken(YQLParser.EMPTY, 0)

        def ENCRYPTED(self):
            return self.getToken(YQLParser.ENCRYPTED, 0)

        def END(self):
            return self.getToken(YQLParser.END, 0)

        def ERROR(self):
            return self.getToken(YQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(YQLParser.ESCAPE, 0)

        def EVALUATE(self):
            return self.getToken(YQLParser.EVALUATE, 0)

        def EXCLUDE(self):
            return self.getToken(YQLParser.EXCLUDE, 0)

        def EXCLUSIVE(self):
            return self.getToken(YQLParser.EXCLUSIVE, 0)

        def EXPLAIN(self):
            return self.getToken(YQLParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(YQLParser.EXPORT, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def FAIL(self):
            return self.getToken(YQLParser.FAIL, 0)

        def FAMILY(self):
            return self.getToken(YQLParser.FAMILY, 0)

        def FILTER(self):
            return self.getToken(YQLParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(YQLParser.FIRST, 0)

        def FLATTEN(self):
            return self.getToken(YQLParser.FLATTEN, 0)

        def FOLLOWING(self):
            return self.getToken(YQLParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(YQLParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(YQLParser.FOREIGN, 0)

        def FUNCTION(self):
            return self.getToken(YQLParser.FUNCTION, 0)

        def GLOB(self):
            return self.getToken(YQLParser.GLOB, 0)

        def GLOBAL(self):
            return self.getToken(YQLParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(YQLParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(YQLParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(YQLParser.HASH, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def IGNORE(self):
            return self.getToken(YQLParser.IGNORE, 0)

        def ILIKE(self):
            return self.getToken(YQLParser.ILIKE, 0)

        def IMMEDIATE(self):
            return self.getToken(YQLParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(YQLParser.IMPORT, 0)

        def IN(self):
            return self.getToken(YQLParser.IN, 0)

        def INCREMENT(self):
            return self.getToken(YQLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(YQLParser.INCREMENTAL, 0)

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def INDEXED(self):
            return self.getToken(YQLParser.INDEXED, 0)

        def INHERITS(self):
            return self.getToken(YQLParser.INHERITS, 0)

        def INITIAL(self):
            return self.getToken(YQLParser.INITIAL, 0)

        def INITIALLY(self):
            return self.getToken(YQLParser.INITIALLY, 0)

        def INSERT(self):
            return self.getToken(YQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(YQLParser.INSTEAD, 0)

        def INTO(self):
            return self.getToken(YQLParser.INTO, 0)

        def IS(self):
            return self.getToken(YQLParser.IS, 0)

        def LAST(self):
            return self.getToken(YQLParser.LAST, 0)

        def LEGACY(self):
            return self.getToken(YQLParser.LEGACY, 0)

        def LIKE(self):
            return self.getToken(YQLParser.LIKE, 0)

        def LOCAL(self):
            return self.getToken(YQLParser.LOCAL, 0)

        def LOGIN(self):
            return self.getToken(YQLParser.LOGIN, 0)

        def MANAGE(self):
            return self.getToken(YQLParser.MANAGE, 0)

        def MATCH(self):
            return self.getToken(YQLParser.MATCH, 0)

        def MATCHES(self):
            return self.getToken(YQLParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(YQLParser.MATCH_RECOGNIZE, 0)

        def MEASURES(self):
            return self.getToken(YQLParser.MEASURES, 0)

        def MICROSECONDS(self):
            return self.getToken(YQLParser.MICROSECONDS, 0)

        def MILLISECONDS(self):
            return self.getToken(YQLParser.MILLISECONDS, 0)

        def MODIFY(self):
            return self.getToken(YQLParser.MODIFY, 0)

        def NANOSECONDS(self):
            return self.getToken(YQLParser.NANOSECONDS, 0)

        def NEXT(self):
            return self.getToken(YQLParser.NEXT, 0)

        def NO(self):
            return self.getToken(YQLParser.NO, 0)

        def NOLOGIN(self):
            return self.getToken(YQLParser.NOLOGIN, 0)

        def NULLS(self):
            return self.getToken(YQLParser.NULLS, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def OF(self):
            return self.getToken(YQLParser.OF, 0)

        def OFFSET(self):
            return self.getToken(YQLParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(YQLParser.OMIT, 0)

        def ONE(self):
            return self.getToken(YQLParser.ONE, 0)

        def ONLY(self):
            return self.getToken(YQLParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(YQLParser.OPTION, 0)

        def OR(self):
            return self.getToken(YQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(YQLParser.ORDER, 0)

        def OTHERS(self):
            return self.getToken(YQLParser.OTHERS, 0)

        def OWNER(self):
            return self.getToken(YQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(YQLParser.PARALLEL, 0)

        def PARTITION(self):
            return self.getToken(YQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(YQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(YQLParser.PASSWORD, 0)

        def PAST(self):
            return self.getToken(YQLParser.PAST, 0)

        def PATTERN(self):
            return self.getToken(YQLParser.PATTERN, 0)

        def PER(self):
            return self.getToken(YQLParser.PER, 0)

        def PERMUTE(self):
            return self.getToken(YQLParser.PERMUTE, 0)

        def PLAN(self):
            return self.getToken(YQLParser.PLAN, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def PRAGMA(self):
            return self.getToken(YQLParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(YQLParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(YQLParser.PRIMARY, 0)

        def PRIVILEGES(self):
            return self.getToken(YQLParser.PRIVILEGES, 0)

        def QUERY(self):
            return self.getToken(YQLParser.QUERY, 0)

        def QUEUE(self):
            return self.getToken(YQLParser.QUEUE, 0)

        def RAISE(self):
            return self.getToken(YQLParser.RAISE, 0)

        def REFERENCES(self):
            return self.getToken(YQLParser.REFERENCES, 0)

        def REGEXP(self):
            return self.getToken(YQLParser.REGEXP, 0)

        def REINDEX(self):
            return self.getToken(YQLParser.REINDEX, 0)

        def RELEASE(self):
            return self.getToken(YQLParser.RELEASE, 0)

        def REMOVE(self):
            return self.getToken(YQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(YQLParser.REPLACE, 0)

        def REPLICATION(self):
            return self.getToken(YQLParser.REPLICATION, 0)

        def RESET(self):
            return self.getToken(YQLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(YQLParser.RESPECT, 0)

        def RESTART(self):
            return self.getToken(YQLParser.RESTART, 0)

        def RESTORE(self):
            return self.getToken(YQLParser.RESTORE, 0)

        def RESTRICT(self):
            return self.getToken(YQLParser.RESTRICT, 0)

        def REVERT(self):
            return self.getToken(YQLParser.REVERT, 0)

        def REVOKE(self):
            return self.getToken(YQLParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(YQLParser.RLIKE, 0)

        def ROLLBACK(self):
            return self.getToken(YQLParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def SAVEPOINT(self):
            return self.getToken(YQLParser.SAVEPOINT, 0)

        def SECONDS(self):
            return self.getToken(YQLParser.SECONDS, 0)

        def SEEK(self):
            return self.getToken(YQLParser.SEEK, 0)

        def SETS(self):
            return self.getToken(YQLParser.SETS, 0)

        def SHOW(self):
            return self.getToken(YQLParser.SHOW, 0)

        def TSKIP(self):
            return self.getToken(YQLParser.TSKIP, 0)

        def SEQUENCE(self):
            return self.getToken(YQLParser.SEQUENCE, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(YQLParser.START, 0)

        def SUBQUERY(self):
            return self.getToken(YQLParser.SUBQUERY, 0)

        def SUBSET(self):
            return self.getToken(YQLParser.SUBSET, 0)

        def SYMBOLS(self):
            return self.getToken(YQLParser.SYMBOLS, 0)

        def SYNC(self):
            return self.getToken(YQLParser.SYNC, 0)

        def SYSTEM(self):
            return self.getToken(YQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(YQLParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(YQLParser.TABLESAMPLE, 0)

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def TEMP(self):
            return self.getToken(YQLParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(YQLParser.TEMPORARY, 0)

        def THEN(self):
            return self.getToken(YQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(YQLParser.TIES, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def TOPIC(self):
            return self.getToken(YQLParser.TOPIC, 0)

        def TRANSACTION(self):
            return self.getToken(YQLParser.TRANSACTION, 0)

        def TRANSFER(self):
            return self.getToken(YQLParser.TRANSFER, 0)

        def TRIGGER(self):
            return self.getToken(YQLParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def UNCONDITIONAL(self):
            return self.getToken(YQLParser.UNCONDITIONAL, 0)

        def UNIQUE(self):
            return self.getToken(YQLParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(YQLParser.UNKNOWN, 0)

        def UNMATCHED(self):
            return self.getToken(YQLParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(YQLParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(YQLParser.UPSERT, 0)

        def USE(self):
            return self.getToken(YQLParser.USE, 0)

        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def VACUUM(self):
            return self.getToken(YQLParser.VACUUM, 0)

        def VALUES(self):
            return self.getToken(YQLParser.VALUES, 0)

        def VIRTUAL(self):
            return self.getToken(YQLParser.VIRTUAL, 0)

        def WRAPPER(self):
            return self.getToken(YQLParser.WRAPPER, 0)

        def XOR(self):
            return self.getToken(YQLParser.XOR, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_as_compat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_as_compat" ):
                listener.enterKeyword_as_compat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_as_compat" ):
                listener.exitKeyword_as_compat(self)




    def keyword_as_compat(self):

        localctx = YQLParser.Keyword_as_compatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_keyword_as_compat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4681
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & -4644903241137547793) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & -1831272093786505) != 0) or ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 9222508889893660699) != 0) or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & -1162777074046615749) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & 3241669951) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_compatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(YQLParser.ABORT, 0)

        def ACTION(self):
            return self.getToken(YQLParser.ACTION, 0)

        def ADD(self):
            return self.getToken(YQLParser.ADD, 0)

        def AFTER(self):
            return self.getToken(YQLParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(YQLParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(YQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(YQLParser.AND, 0)

        def ANSI(self):
            return self.getToken(YQLParser.ANSI, 0)

        def ARRAY(self):
            return self.getToken(YQLParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(YQLParser.ASC, 0)

        def ASYNC(self):
            return self.getToken(YQLParser.ASYNC, 0)

        def AT(self):
            return self.getToken(YQLParser.AT, 0)

        def ATTACH(self):
            return self.getToken(YQLParser.ATTACH, 0)

        def ATTRIBUTES(self):
            return self.getToken(YQLParser.ATTRIBUTES, 0)

        def AUTOINCREMENT(self):
            return self.getToken(YQLParser.AUTOINCREMENT, 0)

        def BACKUP(self):
            return self.getToken(YQLParser.BACKUP, 0)

        def BATCH(self):
            return self.getToken(YQLParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(YQLParser.BEFORE, 0)

        def BEGIN(self):
            return self.getToken(YQLParser.BEGIN, 0)

        def BERNOULLI(self):
            return self.getToken(YQLParser.BERNOULLI, 0)

        def BY(self):
            return self.getToken(YQLParser.BY, 0)

        def CASCADE(self):
            return self.getToken(YQLParser.CASCADE, 0)

        def CHANGEFEED(self):
            return self.getToken(YQLParser.CHANGEFEED, 0)

        def CHECK(self):
            return self.getToken(YQLParser.CHECK, 0)

        def CLASSIFIER(self):
            return self.getToken(YQLParser.CLASSIFIER, 0)

        def COLLATE(self):
            return self.getToken(YQLParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(YQLParser.COLLECTION, 0)

        def COMMIT(self):
            return self.getToken(YQLParser.COMMIT, 0)

        def CONDITIONAL(self):
            return self.getToken(YQLParser.CONDITIONAL, 0)

        def CONFLICT(self):
            return self.getToken(YQLParser.CONFLICT, 0)

        def CONNECT(self):
            return self.getToken(YQLParser.CONNECT, 0)

        def CONSTRAINT(self):
            return self.getToken(YQLParser.CONSTRAINT, 0)

        def CONSUMER(self):
            return self.getToken(YQLParser.CONSUMER, 0)

        def COVER(self):
            return self.getToken(YQLParser.COVER, 0)

        def CREATE(self):
            return self.getToken(YQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(YQLParser.CROSS, 0)

        def CURRENT(self):
            return self.getToken(YQLParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(YQLParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(YQLParser.DATABASE, 0)

        def DECIMAL(self):
            return self.getToken(YQLParser.DECIMAL, 0)

        def DECLARE(self):
            return self.getToken(YQLParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(YQLParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(YQLParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(YQLParser.DEFERRED, 0)

        def DEFINE(self):
            return self.getToken(YQLParser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(YQLParser.DELETE, 0)

        def DESC(self):
            return self.getToken(YQLParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(YQLParser.DESCRIBE, 0)

        def DETACH(self):
            return self.getToken(YQLParser.DETACH, 0)

        def DIRECTORY(self):
            return self.getToken(YQLParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(YQLParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(YQLParser.DISCARD, 0)

        def DO(self):
            return self.getToken(YQLParser.DO, 0)

        def DROP(self):
            return self.getToken(YQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(YQLParser.EACH, 0)

        def ELSE(self):
            return self.getToken(YQLParser.ELSE, 0)

        def EMPTY(self):
            return self.getToken(YQLParser.EMPTY, 0)

        def ENCRYPTED(self):
            return self.getToken(YQLParser.ENCRYPTED, 0)

        def END(self):
            return self.getToken(YQLParser.END, 0)

        def ERROR(self):
            return self.getToken(YQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(YQLParser.ESCAPE, 0)

        def EVALUATE(self):
            return self.getToken(YQLParser.EVALUATE, 0)

        def EXCLUDE(self):
            return self.getToken(YQLParser.EXCLUDE, 0)

        def EXCLUSION(self):
            return self.getToken(YQLParser.EXCLUSION, 0)

        def EXCLUSIVE(self):
            return self.getToken(YQLParser.EXCLUSIVE, 0)

        def EXPLAIN(self):
            return self.getToken(YQLParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(YQLParser.EXPORT, 0)

        def EXTERNAL(self):
            return self.getToken(YQLParser.EXTERNAL, 0)

        def FAIL(self):
            return self.getToken(YQLParser.FAIL, 0)

        def FAMILY(self):
            return self.getToken(YQLParser.FAMILY, 0)

        def FILTER(self):
            return self.getToken(YQLParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(YQLParser.FIRST, 0)

        def FLATTEN(self):
            return self.getToken(YQLParser.FLATTEN, 0)

        def FOLLOWING(self):
            return self.getToken(YQLParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(YQLParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(YQLParser.FOREIGN, 0)

        def FUNCTION(self):
            return self.getToken(YQLParser.FUNCTION, 0)

        def GLOB(self):
            return self.getToken(YQLParser.GLOB, 0)

        def GLOBAL(self):
            return self.getToken(YQLParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(YQLParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(YQLParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(YQLParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(YQLParser.HASH, 0)

        def IF(self):
            return self.getToken(YQLParser.IF, 0)

        def IGNORE(self):
            return self.getToken(YQLParser.IGNORE, 0)

        def ILIKE(self):
            return self.getToken(YQLParser.ILIKE, 0)

        def IMMEDIATE(self):
            return self.getToken(YQLParser.IMMEDIATE, 0)

        def IMPORT(self):
            return self.getToken(YQLParser.IMPORT, 0)

        def IN(self):
            return self.getToken(YQLParser.IN, 0)

        def INCREMENT(self):
            return self.getToken(YQLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(YQLParser.INCREMENTAL, 0)

        def INDEX(self):
            return self.getToken(YQLParser.INDEX, 0)

        def INDEXED(self):
            return self.getToken(YQLParser.INDEXED, 0)

        def INHERITS(self):
            return self.getToken(YQLParser.INHERITS, 0)

        def INITIAL(self):
            return self.getToken(YQLParser.INITIAL, 0)

        def INITIALLY(self):
            return self.getToken(YQLParser.INITIALLY, 0)

        def INNER(self):
            return self.getToken(YQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(YQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(YQLParser.INSTEAD, 0)

        def INTO(self):
            return self.getToken(YQLParser.INTO, 0)

        def IS(self):
            return self.getToken(YQLParser.IS, 0)

        def ISNULL(self):
            return self.getToken(YQLParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(YQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(YQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(YQLParser.LAST, 0)

        def LEFT(self):
            return self.getToken(YQLParser.LEFT, 0)

        def LEGACY(self):
            return self.getToken(YQLParser.LEGACY, 0)

        def LIKE(self):
            return self.getToken(YQLParser.LIKE, 0)

        def LOCAL(self):
            return self.getToken(YQLParser.LOCAL, 0)

        def LOGIN(self):
            return self.getToken(YQLParser.LOGIN, 0)

        def MANAGE(self):
            return self.getToken(YQLParser.MANAGE, 0)

        def MATCH(self):
            return self.getToken(YQLParser.MATCH, 0)

        def MATCHES(self):
            return self.getToken(YQLParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(YQLParser.MATCH_RECOGNIZE, 0)

        def MEASURES(self):
            return self.getToken(YQLParser.MEASURES, 0)

        def MICROSECONDS(self):
            return self.getToken(YQLParser.MICROSECONDS, 0)

        def MILLISECONDS(self):
            return self.getToken(YQLParser.MILLISECONDS, 0)

        def MODIFY(self):
            return self.getToken(YQLParser.MODIFY, 0)

        def NANOSECONDS(self):
            return self.getToken(YQLParser.NANOSECONDS, 0)

        def NATURAL(self):
            return self.getToken(YQLParser.NATURAL, 0)

        def NEXT(self):
            return self.getToken(YQLParser.NEXT, 0)

        def NO(self):
            return self.getToken(YQLParser.NO, 0)

        def NOLOGIN(self):
            return self.getToken(YQLParser.NOLOGIN, 0)

        def NOTNULL(self):
            return self.getToken(YQLParser.NOTNULL, 0)

        def NULLS(self):
            return self.getToken(YQLParser.NULLS, 0)

        def OBJECT(self):
            return self.getToken(YQLParser.OBJECT, 0)

        def OF(self):
            return self.getToken(YQLParser.OF, 0)

        def OFFSET(self):
            return self.getToken(YQLParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(YQLParser.OMIT, 0)

        def ON(self):
            return self.getToken(YQLParser.ON, 0)

        def ONE(self):
            return self.getToken(YQLParser.ONE, 0)

        def ONLY(self):
            return self.getToken(YQLParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(YQLParser.OPTION, 0)

        def OR(self):
            return self.getToken(YQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(YQLParser.ORDER, 0)

        def OTHERS(self):
            return self.getToken(YQLParser.OTHERS, 0)

        def OUTER(self):
            return self.getToken(YQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(YQLParser.OVER, 0)

        def OWNER(self):
            return self.getToken(YQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(YQLParser.PARALLEL, 0)

        def PARTITION(self):
            return self.getToken(YQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(YQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(YQLParser.PASSWORD, 0)

        def PAST(self):
            return self.getToken(YQLParser.PAST, 0)

        def PATTERN(self):
            return self.getToken(YQLParser.PATTERN, 0)

        def PER(self):
            return self.getToken(YQLParser.PER, 0)

        def PERMUTE(self):
            return self.getToken(YQLParser.PERMUTE, 0)

        def PLAN(self):
            return self.getToken(YQLParser.PLAN, 0)

        def POOL(self):
            return self.getToken(YQLParser.POOL, 0)

        def PRAGMA(self):
            return self.getToken(YQLParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(YQLParser.PRECEDING, 0)

        def PRESORT(self):
            return self.getToken(YQLParser.PRESORT, 0)

        def PRIMARY(self):
            return self.getToken(YQLParser.PRIMARY, 0)

        def PRIVILEGES(self):
            return self.getToken(YQLParser.PRIVILEGES, 0)

        def QUERY(self):
            return self.getToken(YQLParser.QUERY, 0)

        def QUEUE(self):
            return self.getToken(YQLParser.QUEUE, 0)

        def RAISE(self):
            return self.getToken(YQLParser.RAISE, 0)

        def REFERENCES(self):
            return self.getToken(YQLParser.REFERENCES, 0)

        def REGEXP(self):
            return self.getToken(YQLParser.REGEXP, 0)

        def REINDEX(self):
            return self.getToken(YQLParser.REINDEX, 0)

        def RELEASE(self):
            return self.getToken(YQLParser.RELEASE, 0)

        def REMOVE(self):
            return self.getToken(YQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(YQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(YQLParser.REPLACE, 0)

        def REPLICATION(self):
            return self.getToken(YQLParser.REPLICATION, 0)

        def RESET(self):
            return self.getToken(YQLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(YQLParser.RESPECT, 0)

        def RESTART(self):
            return self.getToken(YQLParser.RESTART, 0)

        def RESTORE(self):
            return self.getToken(YQLParser.RESTORE, 0)

        def RESTRICT(self):
            return self.getToken(YQLParser.RESTRICT, 0)

        def RESULT(self):
            return self.getToken(YQLParser.RESULT, 0)

        def REVERT(self):
            return self.getToken(YQLParser.REVERT, 0)

        def REVOKE(self):
            return self.getToken(YQLParser.REVOKE, 0)

        def RIGHT(self):
            return self.getToken(YQLParser.RIGHT, 0)

        def RLIKE(self):
            return self.getToken(YQLParser.RLIKE, 0)

        def ROLLBACK(self):
            return self.getToken(YQLParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(YQLParser.ROW, 0)

        def SAMPLE(self):
            return self.getToken(YQLParser.SAMPLE, 0)

        def SAVEPOINT(self):
            return self.getToken(YQLParser.SAVEPOINT, 0)

        def SECONDS(self):
            return self.getToken(YQLParser.SECONDS, 0)

        def SEEK(self):
            return self.getToken(YQLParser.SEEK, 0)

        def SEMI(self):
            return self.getToken(YQLParser.SEMI, 0)

        def SETS(self):
            return self.getToken(YQLParser.SETS, 0)

        def SHOW(self):
            return self.getToken(YQLParser.SHOW, 0)

        def TSKIP(self):
            return self.getToken(YQLParser.TSKIP, 0)

        def SEQUENCE(self):
            return self.getToken(YQLParser.SEQUENCE, 0)

        def SOURCE(self):
            return self.getToken(YQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(YQLParser.START, 0)

        def SUBQUERY(self):
            return self.getToken(YQLParser.SUBQUERY, 0)

        def SUBSET(self):
            return self.getToken(YQLParser.SUBSET, 0)

        def SYMBOLS(self):
            return self.getToken(YQLParser.SYMBOLS, 0)

        def SYNC(self):
            return self.getToken(YQLParser.SYNC, 0)

        def SYSTEM(self):
            return self.getToken(YQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(YQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(YQLParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(YQLParser.TABLESAMPLE, 0)

        def TABLESTORE(self):
            return self.getToken(YQLParser.TABLESTORE, 0)

        def TEMP(self):
            return self.getToken(YQLParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(YQLParser.TEMPORARY, 0)

        def THEN(self):
            return self.getToken(YQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(YQLParser.TIES, 0)

        def TO(self):
            return self.getToken(YQLParser.TO, 0)

        def TOPIC(self):
            return self.getToken(YQLParser.TOPIC, 0)

        def TRANSACTION(self):
            return self.getToken(YQLParser.TRANSACTION, 0)

        def TRANSFER(self):
            return self.getToken(YQLParser.TRANSFER, 0)

        def TRIGGER(self):
            return self.getToken(YQLParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(YQLParser.TYPE, 0)

        def UNCONDITIONAL(self):
            return self.getToken(YQLParser.UNCONDITIONAL, 0)

        def UNIQUE(self):
            return self.getToken(YQLParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(YQLParser.UNKNOWN, 0)

        def UNMATCHED(self):
            return self.getToken(YQLParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(YQLParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(YQLParser.UPSERT, 0)

        def USE(self):
            return self.getToken(YQLParser.USE, 0)

        def USER(self):
            return self.getToken(YQLParser.USER, 0)

        def USING(self):
            return self.getToken(YQLParser.USING, 0)

        def VACUUM(self):
            return self.getToken(YQLParser.VACUUM, 0)

        def VALUES(self):
            return self.getToken(YQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(YQLParser.VIEW, 0)

        def VIRTUAL(self):
            return self.getToken(YQLParser.VIRTUAL, 0)

        def WITH(self):
            return self.getToken(YQLParser.WITH, 0)

        def WRAPPER(self):
            return self.getToken(YQLParser.WRAPPER, 0)

        def XOR(self):
            return self.getToken(YQLParser.XOR, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_keyword_compat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_compat" ):
                listener.enterKeyword_compat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_compat" ):
                listener.exitKeyword_compat(self)




    def keyword_compat(self):

        localctx = YQLParser.Keyword_compatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_keyword_compat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4683
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & -32654135317785105) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & -1831272085397641) != 0) or ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & -35227321960201) != 0) or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & -2325551914156589449) != 0) or ((((_la - 294)) & ~0x3f) == 0 and ((1 << (_la - 294)) & 7038036607) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(YQLParser.OPTIONAL, 0)

        def TUPLE(self):
            return self.getToken(YQLParser.TUPLE, 0)

        def STRUCT(self):
            return self.getToken(YQLParser.STRUCT, 0)

        def VARIANT(self):
            return self.getToken(YQLParser.VARIANT, 0)

        def LIST(self):
            return self.getToken(YQLParser.LIST, 0)

        def FLOW(self):
            return self.getToken(YQLParser.FLOW, 0)

        def DICT(self):
            return self.getToken(YQLParser.DICT, 0)

        def SET(self):
            return self.getToken(YQLParser.SET, 0)

        def ENUM(self):
            return self.getToken(YQLParser.ENUM, 0)

        def RESOURCE(self):
            return self.getToken(YQLParser.RESOURCE, 0)

        def TAGGED(self):
            return self.getToken(YQLParser.TAGGED, 0)

        def CALLABLE(self):
            return self.getToken(YQLParser.CALLABLE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_type_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_id" ):
                listener.enterType_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_id" ):
                listener.exitType_id(self)




    def type_id(self):

        localctx = YQLParser.Type_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_type_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4685
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 1126037345796097) != 0) or _la==137 or _la==183 or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & 2305843284091600897) != 0) or ((((_la - 280)) & ~0x3f) == 0 and ((1 << (_la - 280)) & 137443149825) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(YQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(YQLParser.FALSE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_bool_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_value" ):
                listener.enterBool_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_value" ):
                listener.exitBool_value(self)




    def bool_value(self):

        localctx = YQLParser.Bool_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_bool_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4687
            _la = self._input.LA(1)
            if not(_la==132 or _la==301):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REAL(self):
            return self.getToken(YQLParser.REAL, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_real

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal" ):
                listener.enterReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal" ):
                listener.exitReal(self)




    def real(self):

        localctx = YQLParser.RealContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_real)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.match(YQLParser.REAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(YQLParser.DIGITS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(YQLParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return YQLParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = YQLParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4691
            _la = self._input.LA(1)
            if not(_la==330 or _la==331):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





