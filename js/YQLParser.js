// Generated from YQL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import YQLListener from './YQLListener.js';
const serializedATN = [4,1,335,4694,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,1,0,1,0,1,0,
1,0,1,0,3,0,900,8,0,1,1,5,1,903,8,1,10,1,12,1,906,9,1,1,1,1,1,4,1,910,8,
1,11,1,12,1,911,1,1,5,1,915,8,1,10,1,12,1,918,9,1,1,1,5,1,921,8,1,10,1,12,
1,924,9,1,1,1,1,1,1,2,5,2,929,8,2,10,2,12,2,932,9,2,1,2,1,2,1,3,5,3,937,
8,3,10,3,12,3,940,9,3,1,3,1,3,4,3,944,8,3,11,3,12,3,945,5,3,948,8,3,10,3,
12,3,951,9,3,1,3,1,3,1,3,5,3,956,8,3,10,3,12,3,959,9,3,1,4,1,4,3,4,963,8,
4,1,5,1,5,1,5,3,5,968,8,5,3,5,970,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
6,1,6,3,6,1036,8,6,1,7,1,7,1,7,5,7,1041,8,7,10,7,12,7,1044,9,7,1,7,3,7,1047,
8,7,1,8,1,8,1,8,5,8,1052,8,8,10,8,12,8,1055,9,8,1,9,1,9,1,9,5,9,1060,8,9,
10,9,12,9,1063,9,9,1,10,1,10,3,10,1067,8,10,1,11,1,11,3,11,1071,8,11,1,11,
1,11,1,11,1,12,3,12,1077,8,12,1,12,1,12,1,12,1,12,3,12,1083,8,12,1,12,3,
12,1086,8,12,1,12,1,12,3,12,1090,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
1098,8,12,1,12,1,12,3,12,1102,8,12,1,12,3,12,1105,8,12,1,12,1,12,3,12,1109,
8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1120,8,12,1,12,4,
12,1123,8,12,11,12,12,12,1124,3,12,1127,8,12,1,13,1,13,1,14,1,14,1,14,5,
14,1134,8,14,10,14,12,14,1137,9,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1157,8,18,1,18,
5,18,1160,8,18,10,18,12,18,1163,9,18,1,18,1,18,1,18,1,18,4,18,1169,8,18,
11,18,12,18,1170,3,18,1173,8,18,1,19,1,19,1,19,5,19,1178,8,19,10,19,12,19,
1181,9,19,1,20,1,20,1,20,5,20,1186,8,20,10,20,12,20,1189,9,20,1,21,1,21,
1,21,5,21,1194,8,21,10,21,12,21,1197,9,21,1,22,1,22,1,22,1,22,3,22,1203,
8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1213,8,24,3,24,1215,8,
24,5,24,1217,8,24,10,24,12,24,1220,9,24,1,24,1,24,3,24,1224,8,24,1,25,1,
25,3,25,1228,8,25,1,25,1,25,1,26,1,26,3,26,1234,8,26,1,26,1,26,1,27,1,27,
3,27,1240,8,27,1,28,1,28,3,28,1244,8,28,1,29,1,29,3,29,1248,8,29,1,29,3,
29,1251,8,29,1,29,1,29,1,30,1,30,1,30,3,30,1258,8,30,1,30,1,30,1,30,1,30,
3,30,1264,8,30,5,30,1266,8,30,10,30,12,30,1269,9,30,1,31,1,31,3,31,1273,
8,31,1,31,3,31,1276,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
32,5,32,1288,8,32,10,32,12,32,1291,9,32,1,33,1,33,3,33,1295,8,33,1,33,3,
33,1298,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
3,34,1312,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1319,8,34,1,35,1,35,1,35,1,
35,1,35,1,35,1,35,1,35,1,35,3,35,1330,8,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,3,35,1341,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,
37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,1361,8,38,1,38,1,38,
1,39,1,39,3,39,1367,8,39,1,39,4,39,1370,8,39,11,39,12,39,1371,1,39,1,39,
3,39,1376,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
40,3,40,1390,8,40,3,40,1392,8,40,1,41,1,41,1,42,1,42,1,42,3,42,1399,8,42,
1,43,1,43,1,44,1,44,3,44,1405,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,
46,1414,8,46,10,46,12,46,1417,9,46,1,47,1,47,1,47,1,47,1,47,3,47,1424,8,
47,1,48,1,48,1,48,1,48,3,48,1430,8,48,1,49,1,49,1,49,1,49,1,49,3,49,1437,
8,49,1,49,1,49,1,49,1,49,5,49,1443,8,49,10,49,12,49,1446,9,49,1,49,1,49,
1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1458,8,51,1,51,1,51,1,52,1,
52,3,52,1464,8,52,1,52,1,52,3,52,1468,8,52,1,52,3,52,1471,8,52,3,52,1473,
8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1481,8,53,1,54,1,54,1,54,1,54,1,
54,1,54,3,54,1489,8,54,1,54,1,54,1,54,1,54,3,54,1495,8,54,1,54,1,54,1,54,
1,54,3,54,1501,8,54,1,54,1,54,1,55,1,55,3,55,1507,8,55,1,55,3,55,1510,8,
55,1,55,1,55,1,56,1,56,1,56,5,56,1517,8,56,10,56,12,56,1520,9,56,1,57,1,
57,1,57,1,57,5,57,1526,8,57,10,57,12,57,1529,9,57,1,57,1,57,1,58,1,58,3,
58,1535,8,58,1,59,1,59,1,59,1,59,5,59,1541,8,59,10,59,12,59,1544,9,59,1,
59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1556,8,61,1,62,1,62,
1,62,5,62,1561,8,62,10,62,12,62,1564,9,62,1,62,3,62,1567,8,62,1,63,1,63,
1,63,5,63,1572,8,63,10,63,12,63,1575,9,63,1,63,3,63,1578,8,63,1,64,1,64,
1,64,3,64,1583,8,64,1,65,1,65,1,65,5,65,1588,8,65,10,65,12,65,1591,9,65,
1,66,1,66,1,66,1,66,3,66,1597,8,66,1,66,3,66,1600,8,66,1,66,1,66,1,66,1,
67,1,67,3,67,1607,8,67,1,67,1,67,3,67,1611,8,67,1,68,1,68,1,68,1,68,1,68,
1,68,1,68,1,68,3,68,1621,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,
70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1644,
8,71,1,72,1,72,1,72,1,72,3,72,1650,8,72,1,73,1,73,3,73,1654,8,73,1,74,1,
74,1,74,5,74,1659,8,74,10,74,12,74,1662,9,74,1,75,1,75,1,75,3,75,1667,8,
75,1,76,1,76,1,76,5,76,1672,8,76,10,76,12,76,1675,9,76,1,77,3,77,1678,8,
77,1,77,1,77,3,77,1682,8,77,1,78,1,78,1,79,1,79,3,79,1688,8,79,1,80,1,80,
1,80,3,80,1693,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,1702,8,82,1,
82,3,82,1705,8,82,1,82,1,82,1,82,1,82,3,82,1711,8,82,1,83,1,83,1,83,3,83,
1716,8,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1724,8,84,1,85,1,85,1,85,5,
85,1729,8,85,10,85,12,85,1732,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,1751,8,88,10,88,12,
88,1754,9,88,1,88,3,88,1757,8,88,3,88,1759,8,88,1,88,1,88,3,88,1763,8,88,
1,89,1,89,1,89,1,89,1,89,5,89,1770,8,89,10,89,12,89,1773,9,89,1,89,3,89,
1776,8,89,3,89,1778,8,89,1,89,1,89,3,89,1782,8,89,1,90,1,90,1,90,1,90,1,
90,5,90,1789,8,90,10,90,12,90,1792,9,90,1,90,3,90,1795,8,90,1,90,1,90,1,
91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,
1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,
96,1,96,1,96,5,96,1831,8,96,10,96,12,96,1834,9,96,1,96,3,96,1837,8,96,1,
96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,
1,99,1,99,1,99,3,99,1857,8,99,1,99,3,99,1860,8,99,1,99,1,99,1,99,1,99,3,
99,1866,8,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1886,8,100,1,100,5,100,1889,
8,100,10,100,12,100,1892,9,100,1,101,1,101,1,101,3,101,1897,8,101,1,101,
5,101,1900,8,101,10,101,12,101,1903,9,101,3,101,1905,8,101,1,102,1,102,3,
102,1909,8,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
1,104,1,104,1,104,3,104,1936,8,104,1,105,1,105,1,105,1,105,1,105,1,105,3,
105,1944,8,105,1,106,3,106,1947,8,106,1,106,1,106,1,106,5,106,1952,8,106,
10,106,12,106,1955,9,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
1,109,1,109,3,109,1967,8,109,1,109,1,109,3,109,1971,8,109,1,109,1,109,1,
110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,3,111,1983,8,111,1,112,1,112,
1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,1994,8,112,10,112,12,112,
1997,9,112,1,112,1,112,3,112,2001,8,112,1,113,1,113,1,113,1,113,1,113,3,
113,2008,8,113,1,114,1,114,3,114,2012,8,114,1,115,1,115,1,115,5,115,2017,
8,115,10,115,12,115,2020,9,115,1,116,1,116,1,116,1,116,5,116,2026,8,116,
10,116,12,116,2029,9,116,1,117,1,117,1,117,1,117,5,117,2035,8,117,10,117,
12,117,2038,9,117,1,118,1,118,1,118,1,118,1,118,3,118,2045,8,118,1,119,1,
119,3,119,2049,8,119,1,119,1,119,3,119,2053,8,119,1,120,1,120,1,120,1,120,
1,120,3,120,2060,8,120,3,120,2062,8,120,1,121,3,121,2065,8,121,1,121,1,121,
1,121,3,121,2070,8,121,1,121,1,121,1,121,3,121,2075,8,121,1,122,1,122,3,
122,2079,8,122,1,122,1,122,1,122,5,122,2084,8,122,10,122,12,122,2087,9,122,
1,122,1,122,1,122,1,122,3,122,2093,8,122,1,122,1,122,3,122,2097,8,122,1,
122,1,122,3,122,2101,8,122,1,122,1,122,3,122,2105,8,122,1,122,1,122,3,122,
2109,8,122,3,122,2111,8,122,1,123,1,123,1,123,1,123,1,124,1,124,1,124,5,
124,2120,8,124,10,124,12,124,2123,9,124,1,125,1,125,1,125,1,125,5,125,2129,
8,125,10,125,12,125,2132,9,125,1,125,1,125,3,125,2136,8,125,1,125,1,125,
1,125,1,125,3,125,2142,8,125,1,125,1,125,1,125,3,125,2147,8,125,1,125,1,
125,3,125,2151,8,125,1,125,1,125,3,125,2155,8,125,1,125,1,125,3,125,2159,
8,125,1,126,3,126,2162,8,126,1,127,1,127,3,127,2166,8,127,1,127,1,127,3,
127,2170,8,127,1,127,1,127,1,127,1,127,5,127,2176,8,127,10,127,12,127,2179,
9,127,1,127,3,127,2182,8,127,1,127,1,127,1,127,3,127,2187,8,127,1,127,3,
127,2190,8,127,1,127,1,127,3,127,2194,8,127,1,127,1,127,3,127,2198,8,127,
1,127,3,127,2201,8,127,1,127,1,127,3,127,2205,8,127,1,127,3,127,2208,8,127,
1,127,3,127,2211,8,127,1,128,1,128,1,128,3,128,2216,8,128,1,128,3,128,2219,
8,128,1,128,3,128,2222,8,128,1,128,3,128,2225,8,128,1,128,1,128,1,128,1,
129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,2239,8,129,3,129,
2241,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2252,
8,130,1,131,1,131,1,131,1,132,1,132,1,132,5,132,2260,8,132,10,132,12,132,
2263,9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,2272,8,134,1,
134,3,134,2275,8,134,1,134,1,134,1,134,1,134,1,134,3,134,2282,8,134,1,134,
1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2306,8,135,1,
136,1,136,1,137,1,137,1,138,1,138,1,138,5,138,2315,8,138,10,138,12,138,2318,
9,138,1,139,4,139,2321,8,139,11,139,12,139,2322,1,140,1,140,3,140,2327,8,
140,1,141,1,141,3,141,2331,8,141,1,141,1,141,3,141,2335,8,141,1,141,1,141,
3,141,2339,8,141,1,141,1,141,3,141,2343,8,141,1,141,1,141,3,141,2347,8,141,
1,141,1,141,3,141,2351,8,141,1,141,1,141,1,141,1,141,3,141,2357,8,141,1,
142,1,142,1,142,1,142,1,142,3,142,2364,8,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,1,142,3,142,2374,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,
144,5,144,2383,8,144,10,144,12,144,2386,9,144,1,144,1,144,1,145,1,145,1,
145,1,146,1,146,1,146,5,146,2396,8,146,10,146,12,146,2399,9,146,1,147,1,
147,1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,149,5,149,2412,8,149,
10,149,12,149,2415,9,149,1,150,1,150,1,151,1,151,1,151,5,151,2422,8,151,
10,151,12,151,2425,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,
1,155,1,155,1,156,1,156,1,157,1,157,1,157,1,157,1,158,3,158,2444,8,158,1,
158,1,158,1,159,1,159,3,159,2450,8,159,1,159,1,159,1,159,1,159,1,159,3,159,
2457,8,159,1,160,1,160,1,160,5,160,2462,8,160,10,160,12,160,2465,9,160,1,
161,1,161,1,161,1,161,1,161,3,161,2472,8,161,1,162,1,162,1,163,1,163,1,163,
5,163,2479,8,163,10,163,12,163,2482,9,163,1,164,1,164,1,164,1,164,1,164,
1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,
1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
1,168,1,168,1,168,1,168,1,168,3,168,2518,8,168,3,168,2520,8,168,1,169,3,
169,2523,8,169,1,169,1,169,1,169,3,169,2528,8,169,1,169,1,169,3,169,2532,
8,169,5,169,2534,8,169,10,169,12,169,2537,9,169,1,170,1,170,1,170,3,170,
2542,8,170,1,171,1,171,1,171,1,171,3,171,2548,8,171,1,171,1,171,3,171,2552,
8,171,1,172,1,172,1,172,3,172,2557,8,172,1,172,1,172,1,172,3,172,2562,8,
172,3,172,2564,8,172,1,173,1,173,3,173,2568,8,173,1,173,1,173,1,173,3,173,
2573,8,173,1,173,3,173,2576,8,173,3,173,2578,8,173,1,173,1,173,3,173,2582,
8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2593,8,
174,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2604,8,176,
1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,2615,8,179,1,
179,1,179,3,179,2619,8,179,1,179,1,179,3,179,2623,8,179,1,179,1,179,3,179,
2627,8,179,1,179,3,179,2630,8,179,1,179,1,179,3,179,2634,8,179,1,179,3,179,
2637,8,179,1,180,1,180,1,180,1,180,3,180,2643,8,180,1,181,1,181,1,181,1,
181,1,181,5,181,2650,8,181,10,181,12,181,2653,9,181,3,181,2655,8,181,1,182,
1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,
2669,8,182,1,182,1,182,1,182,1,182,3,182,2675,8,182,1,183,3,183,2678,8,183,
1,183,1,183,1,183,3,183,2683,8,183,1,184,1,184,1,184,1,185,1,185,3,185,2690,
8,185,1,186,1,186,1,186,5,186,2695,8,186,10,186,12,186,2698,9,186,1,187,
1,187,1,187,1,187,1,188,1,188,3,188,2706,8,188,1,189,1,189,1,189,3,189,2711,
8,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,2719,8,189,1,189,1,189,1,
189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,2732,8,190,10,
190,12,190,2735,9,190,1,191,1,191,1,191,3,191,2740,8,191,1,192,1,192,1,192,
1,192,1,192,1,192,3,192,2748,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,
193,3,193,2757,8,193,1,193,1,193,3,193,2761,8,193,1,193,1,193,1,193,1,194,
1,194,1,194,1,194,3,194,2770,8,194,1,194,1,194,1,195,1,195,1,195,1,195,1,
195,1,195,1,195,1,195,3,195,2782,8,195,1,196,1,196,1,196,1,196,1,196,3,196,
2789,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2797,8,196,1,197,1,
197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,1,
199,1,199,1,200,1,200,1,200,1,200,3,200,2818,8,200,1,200,1,200,1,200,1,200,
1,200,1,200,3,200,2826,8,200,1,201,1,201,1,201,1,202,1,202,1,202,1,202,3,
202,2835,8,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,3,205,2845,
8,205,1,206,1,206,1,206,1,206,1,206,5,206,2852,8,206,10,206,12,206,2855,
9,206,1,206,1,206,3,206,2859,8,206,1,207,1,207,1,208,1,208,1,208,3,208,2866,
8,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2876,8,208,1,
208,1,208,1,208,3,208,2881,8,208,1,208,1,208,1,208,1,208,1,208,5,208,2888,
8,208,10,208,12,208,2891,9,208,1,208,3,208,2894,8,208,1,208,1,208,3,208,
2898,8,208,1,208,3,208,2901,8,208,1,208,3,208,2904,8,208,1,208,3,208,2907,
8,208,1,208,3,208,2910,8,208,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2918,
8,209,1,210,1,210,1,210,3,210,2923,8,210,1,210,1,210,1,210,1,210,1,210,1,
211,1,211,1,211,1,211,3,211,2934,8,211,1,212,1,212,1,212,1,213,1,213,3,213,
2941,8,213,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,5,215,2952,
8,215,10,215,12,215,2955,9,215,1,216,1,216,1,216,5,216,2960,8,216,10,216,
12,216,2963,9,216,1,217,1,217,3,217,2967,8,217,1,218,1,218,1,218,5,218,2972,
8,218,10,218,12,218,2975,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
1,219,1,219,1,219,3,219,2987,8,219,1,220,1,220,1,220,1,220,1,221,1,221,1,
221,5,221,2996,8,221,10,221,12,221,2999,9,221,1,222,1,222,1,222,1,222,1,
223,1,223,1,223,3,223,3008,8,223,1,224,1,224,1,224,1,224,3,224,3014,8,224,
1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,
5,226,3028,8,226,10,226,12,226,3031,9,226,1,226,1,226,1,227,1,227,1,227,
1,227,1,227,1,228,1,228,1,228,1,228,1,228,5,228,3045,8,228,10,228,12,228,
3048,9,228,1,228,1,228,1,229,1,229,1,229,1,230,1,230,1,230,1,230,1,231,1,
231,1,231,1,232,1,232,1,232,1,232,1,232,1,232,5,232,3068,8,232,10,232,12,
232,3071,9,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3090,8,233,1,234,1,234,1,
234,1,234,1,234,1,234,1,234,5,234,3099,8,234,10,234,12,234,3102,9,234,1,
235,1,235,1,235,1,235,1,235,3,235,3109,8,235,1,236,1,236,1,236,1,236,1,236,
1,236,5,236,3117,8,236,10,236,12,236,3120,9,236,1,237,1,237,3,237,3124,8,
237,1,238,1,238,3,238,3128,8,238,1,238,1,238,1,239,1,239,3,239,3134,8,239,
1,239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,241,1,241,1,241,1,241,
1,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,243,1,243,
1,243,1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,245,5,245,3170,8,
245,10,245,12,245,3173,9,245,1,245,1,245,1,246,1,246,1,246,1,246,1,246,5,
246,3182,8,246,10,246,12,246,3185,9,246,1,246,1,246,1,247,1,247,1,247,1,
248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,1,250,1,250,1,250,1,
250,1,250,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,253,1,253,1,
253,1,253,1,254,1,254,1,254,1,254,1,254,1,255,1,255,1,255,3,255,3226,8,255,
1,255,1,255,1,256,1,256,1,256,1,257,3,257,3234,8,257,1,257,3,257,3237,8,
257,1,257,1,257,3,257,3241,8,257,1,258,1,258,3,258,3245,8,258,1,259,1,259,
1,259,1,259,1,259,1,259,5,259,3253,8,259,10,259,12,259,3256,9,259,1,259,
1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,3266,8,259,10,259,12,259,
3269,9,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,3279,8,
259,10,259,12,259,3282,9,259,1,259,1,259,3,259,3286,8,259,1,260,1,260,1,
260,1,260,1,260,1,260,1,260,1,260,5,260,3296,8,260,10,260,12,260,3299,9,
260,1,260,1,260,1,260,1,260,1,260,1,260,5,260,3307,8,260,10,260,12,260,3310,
9,260,1,260,1,260,3,260,3314,8,260,1,260,3,260,3317,8,260,1,261,1,261,3,
261,3321,8,261,1,261,1,261,3,261,3325,8,261,1,262,1,262,3,262,3329,8,262,
1,262,3,262,3332,8,262,1,263,1,263,1,264,1,264,1,265,1,265,1,265,1,265,1,
265,5,265,3343,8,265,10,265,12,265,3346,9,265,1,265,3,265,3349,8,265,1,265,
1,265,1,266,1,266,1,266,1,266,1,267,1,267,1,267,1,267,3,267,3361,8,267,1,
268,1,268,1,268,1,268,1,268,1,268,1,268,1,269,1,269,1,269,5,269,3373,8,269,
10,269,12,269,3376,9,269,1,270,1,270,1,270,1,270,1,271,1,271,1,272,1,272,
1,272,1,272,1,272,1,272,3,272,3390,8,272,1,273,1,273,1,273,1,273,1,274,1,
274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,3405,8,274,1,274,3,274,
3408,8,274,1,275,1,275,1,275,1,275,1,275,1,275,5,275,3416,8,275,10,275,12,
275,3419,9,275,3,275,3421,8,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,
3429,8,276,1,277,1,277,1,277,1,277,1,278,1,278,1,278,1,278,5,278,3439,8,
278,10,278,12,278,3442,9,278,3,278,3444,8,278,1,278,1,278,1,279,1,279,1,
279,1,279,1,280,1,280,3,280,3454,8,280,1,281,1,281,1,281,1,281,5,281,3460,
8,281,10,281,12,281,3463,9,281,1,281,1,281,1,281,3,281,3468,8,281,1,282,
1,282,1,282,1,282,5,282,3474,8,282,10,282,12,282,3477,9,282,1,282,1,282,
1,283,1,283,1,283,3,283,3484,8,283,1,284,1,284,1,284,1,284,1,284,3,284,3491,
8,284,1,284,1,284,3,284,3495,8,284,1,284,1,284,1,285,1,285,1,285,1,285,5,
285,3503,8,285,10,285,12,285,3506,9,285,1,286,1,286,1,286,1,286,3,286,3512,
8,286,1,286,4,286,3515,8,286,11,286,12,286,3516,1,286,1,286,1,286,3,286,
3522,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,5,287,3532,8,
287,10,287,12,287,3535,9,287,1,287,3,287,3538,8,287,3,287,3540,8,287,1,288,
1,288,1,288,1,288,1,288,1,288,1,288,1,288,5,288,3550,8,288,10,288,12,288,
3553,9,288,1,288,3,288,3556,8,288,1,288,1,288,1,288,3,288,3561,8,288,1,289,
1,289,1,289,1,289,3,289,3567,8,289,1,289,1,289,1,289,5,289,3572,8,289,10,
289,12,289,3575,9,289,1,289,3,289,3578,8,289,1,290,1,290,3,290,3582,8,290,
1,291,1,291,3,291,3586,8,291,1,292,1,292,3,292,3590,8,292,1,293,3,293,3593,
8,293,1,293,1,293,1,293,1,294,1,294,1,295,1,295,1,295,1,296,1,296,1,297,
1,297,1,297,1,297,1,297,1,297,5,297,3611,8,297,10,297,12,297,3614,9,297,
1,297,1,297,1,297,1,297,5,297,3620,8,297,10,297,12,297,3623,9,297,1,297,
3,297,3626,8,297,1,297,1,297,1,297,3,297,3631,8,297,1,298,1,298,1,298,1,
298,3,298,3637,8,298,1,298,1,298,1,298,1,298,1,298,5,298,3644,8,298,10,298,
12,298,3647,9,298,1,298,1,298,1,298,1,298,5,298,3653,8,298,10,298,12,298,
3656,9,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,
299,1,299,1,299,1,299,3,299,3672,8,299,1,299,1,299,3,299,3676,8,299,1,299,
1,299,3,299,3680,8,299,3,299,3682,8,299,1,300,1,300,3,300,3686,8,300,1,301,
1,301,1,301,5,301,3691,8,301,10,301,12,301,3694,9,301,1,301,3,301,3697,8,
301,1,301,1,301,3,301,3701,8,301,3,301,3703,8,301,1,302,1,302,1,302,1,302,
1,302,1,302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,5,303,3718,8,303,10,
303,12,303,3721,9,303,1,304,1,304,3,304,3725,8,304,1,305,1,305,1,305,1,305,
1,305,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,
1,307,1,307,1,307,1,307,5,307,3747,8,307,10,307,12,307,3750,9,307,1,308,
1,308,3,308,3754,8,308,1,309,1,309,1,309,1,309,1,309,1,309,1,310,1,310,1,
310,1,310,1,310,1,310,1,310,1,310,5,310,3770,8,310,10,310,12,310,3773,9,
310,1,310,1,310,1,310,1,310,1,310,1,311,1,311,1,311,1,311,1,312,1,312,1,
312,5,312,3787,8,312,10,312,12,312,3790,9,312,1,313,1,313,1,313,1,313,1,
314,1,314,1,314,1,314,1,314,1,314,1,314,5,314,3803,8,314,10,314,12,314,3806,
9,314,1,315,1,315,1,316,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,317,
1,317,3,317,3820,8,317,1,318,1,318,3,318,3824,8,318,1,319,1,319,1,319,1,
319,1,319,1,319,1,319,1,319,1,319,3,319,3835,8,319,1,319,1,319,1,319,1,319,
1,319,1,320,1,320,1,320,5,320,3845,8,320,10,320,12,320,3848,9,320,1,321,
1,321,1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,5,322,3860,8,322,10,
322,12,322,3863,9,322,1,323,1,323,3,323,3867,8,323,1,324,1,324,1,324,1,324,
1,324,1,325,1,325,1,325,1,325,1,326,1,326,1,326,1,326,3,326,3882,8,326,1,
327,1,327,1,327,5,327,3887,8,327,10,327,12,327,3890,9,327,1,328,1,328,1,
328,1,328,1,328,3,328,3897,8,328,1,328,1,328,1,328,1,328,1,328,1,328,1,329,
5,329,3906,8,329,10,329,12,329,3909,9,329,1,329,1,329,4,329,3913,8,329,11,
329,12,329,3914,1,329,5,329,3918,8,329,10,329,12,329,3921,9,329,1,329,5,
329,3924,8,329,10,329,12,329,3927,9,329,3,329,3929,8,329,1,330,3,330,3932,
8,330,1,330,1,330,1,330,1,330,1,330,3,330,3939,8,330,1,331,3,331,3942,8,
331,1,331,3,331,3945,8,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,
3954,8,331,1,332,1,332,1,332,3,332,3959,8,332,1,332,3,332,3962,8,332,1,332,
1,332,1,332,1,332,1,332,1,332,5,332,3970,8,332,10,332,12,332,3973,9,332,
1,332,3,332,3976,8,332,3,332,3978,8,332,1,332,1,332,1,332,1,332,1,332,3,
332,3985,8,332,1,332,3,332,3988,8,332,1,332,1,332,3,332,3992,8,332,3,332,
3994,8,332,1,332,3,332,3997,8,332,1,333,1,333,1,333,3,333,4002,8,333,1,334,
3,334,4005,8,334,1,334,1,334,1,334,3,334,4010,8,334,1,335,1,335,1,335,1,
335,1,335,1,335,5,335,4018,8,335,10,335,12,335,4021,9,335,1,335,1,335,3,
335,4025,8,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,5,336,4034,8,336,
10,336,12,336,4037,9,336,1,336,3,336,4040,8,336,1,336,1,336,3,336,4044,8,
336,3,336,4046,8,336,1,336,1,336,3,336,4050,8,336,1,336,1,336,1,336,3,336,
4055,8,336,1,336,1,336,1,336,1,336,5,336,4061,8,336,10,336,12,336,4064,9,
336,3,336,4066,8,336,1,336,3,336,4069,8,336,1,336,3,336,4072,8,336,1,337,
1,337,1,337,3,337,4077,8,337,1,337,1,337,1,338,1,338,3,338,4083,8,338,1,
338,3,338,4086,8,338,1,339,1,339,3,339,4090,8,339,1,340,1,340,1,340,1,340,
3,340,4096,8,340,1,341,3,341,4099,8,341,1,341,1,341,1,341,1,341,1,341,1,
341,1,341,3,341,4108,8,341,1,341,3,341,4111,8,341,1,342,3,342,4114,8,342,
1,342,1,342,1,342,1,342,1,342,1,342,3,342,4122,8,342,1,342,1,342,3,342,4126,
8,342,1,342,3,342,4129,8,342,1,343,1,343,3,343,4133,8,343,1,344,1,344,1,
344,5,344,4138,8,344,10,344,12,344,4141,9,344,1,345,1,345,1,345,1,345,1,
346,1,346,1,347,1,347,1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,5,
348,4159,8,348,10,348,12,348,4162,9,348,1,348,1,348,1,349,1,349,1,349,1,
349,1,349,3,349,4171,8,349,1,349,1,349,3,349,4175,8,349,1,349,3,349,4178,
8,349,1,350,1,350,1,350,1,350,5,350,4184,8,350,10,350,12,350,4187,9,350,
1,350,1,350,1,351,1,351,1,352,1,352,1,352,1,352,1,352,1,353,1,353,1,353,
1,353,3,353,4202,8,353,1,353,1,353,1,353,1,353,5,353,4208,8,353,10,353,12,
353,4211,9,353,1,354,1,354,1,354,1,354,1,354,3,354,4218,8,354,1,355,1,355,
1,355,1,356,1,356,1,356,3,356,4226,8,356,1,357,1,357,1,357,1,357,1,357,1,
358,1,358,3,358,4235,8,358,1,359,1,359,1,359,1,359,1,360,1,360,1,360,1,360,
1,360,1,361,1,361,1,361,1,361,1,361,5,361,4251,8,361,10,361,12,361,4254,
9,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,363,1,363,1,363,1,363,
1,363,5,363,4268,8,363,10,363,12,363,4271,9,363,1,363,1,363,1,364,1,364,
1,364,1,364,3,364,4279,8,364,1,364,1,364,1,365,1,365,1,365,5,365,4286,8,
365,10,365,12,365,4289,9,365,1,366,1,366,1,366,1,366,1,367,1,367,1,368,1,
368,1,368,1,368,1,368,1,369,1,369,1,369,5,369,4305,8,369,10,369,12,369,4308,
9,369,1,370,1,370,1,370,1,370,1,371,1,371,1,372,1,372,1,372,3,372,4319,8,
372,1,372,1,372,1,373,1,373,1,374,1,374,1,374,1,374,3,374,4329,8,374,1,375,
1,375,1,375,1,375,1,375,1,375,1,376,1,376,3,376,4339,8,376,1,377,1,377,1,
378,1,378,1,378,1,379,1,379,1,379,5,379,4349,8,379,10,379,12,379,4352,9,
379,1,380,1,380,1,380,1,380,1,381,1,381,1,382,1,382,1,382,1,382,1,383,3,
383,4365,8,383,1,383,3,383,4368,8,383,1,383,3,383,4371,8,383,1,383,3,383,
4374,8,383,1,384,1,384,1,385,1,385,3,385,4380,8,385,1,385,1,385,1,385,1,
386,1,386,1,387,1,387,1,387,3,387,4390,8,387,1,388,1,388,1,389,1,389,3,389,
4396,8,389,1,390,1,390,1,390,1,390,1,390,1,391,1,391,1,391,1,391,3,391,4407,
8,391,1,391,3,391,4410,8,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,
392,1,392,1,392,3,392,4422,8,392,1,393,1,393,1,393,1,394,1,394,1,394,1,394,
1,394,3,394,4432,8,394,1,395,1,395,1,395,1,395,3,395,4438,8,395,1,396,1,
396,1,397,1,397,1,398,1,398,1,398,1,398,1,398,3,398,4449,8,398,1,399,1,399,
1,399,5,399,4454,8,399,10,399,12,399,4457,9,399,1,399,3,399,4460,8,399,1,
400,1,400,1,400,1,401,1,401,1,401,1,401,3,401,4469,8,401,1,401,1,401,4,401,
4473,8,401,11,401,12,401,4474,1,402,1,402,3,402,4479,8,402,1,402,1,402,1,
402,3,402,4484,8,402,1,402,1,402,1,402,1,402,3,402,4490,8,402,1,402,3,402,
4493,8,402,1,403,1,403,1,403,1,403,1,403,1,404,1,404,1,405,1,405,3,405,4504,
8,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,3,406,4513,8,406,1,407,1,
407,1,407,1,407,1,407,1,407,3,407,4521,8,407,1,408,1,408,1,408,1,408,1,408,
3,408,4528,8,408,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,3,409,4538,
8,409,1,410,1,410,1,410,1,410,1,410,1,410,1,410,3,410,4547,8,410,1,411,1,
411,1,411,1,411,1,411,1,411,1,411,3,411,4556,8,411,1,412,1,412,1,412,1,412,
1,412,1,412,1,412,1,412,3,412,4566,8,412,1,413,1,413,3,413,4570,8,413,1,
414,1,414,3,414,4574,8,414,1,415,1,415,3,415,4578,8,415,1,416,1,416,3,416,
4582,8,416,1,417,1,417,3,417,4586,8,417,1,418,1,418,3,418,4590,8,418,1,419,
1,419,3,419,4594,8,419,1,420,1,420,3,420,4598,8,420,1,421,1,421,3,421,4602,
8,421,1,422,1,422,3,422,4606,8,422,1,423,1,423,3,423,4610,8,423,1,424,1,
424,3,424,4614,8,424,1,425,1,425,1,425,3,425,4619,8,425,1,426,1,426,1,426,
3,426,4624,8,426,1,427,1,427,1,427,3,427,4629,8,427,1,427,1,427,3,427,4633,
8,427,1,428,1,428,3,428,4637,8,428,1,429,1,429,1,429,3,429,4642,8,429,1,
430,3,430,4645,8,430,1,430,1,430,1,431,1,431,3,431,4651,8,431,1,432,3,432,
4654,8,432,1,432,1,432,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,3,
433,4666,8,433,1,434,1,434,1,435,1,435,1,436,1,436,1,437,1,437,1,438,1,438,
1,439,1,439,1,440,1,440,1,441,1,441,1,442,1,442,1,443,1,443,1,444,1,444,
1,445,1,445,1,446,1,446,1,446,0,0,447,0,2,4,6,8,10,12,14,16,18,20,22,24,
26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,
478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,
586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,
622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,
658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,
694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,
766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,
802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,
838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,
874,876,878,880,882,884,886,888,890,892,0,41,2,0,52,52,284,284,6,0,144,144,
155,155,181,181,187,187,240,240,260,260,1,0,5,8,1,0,16,17,1,0,19,21,2,0,
16,18,199,199,2,0,114,114,120,120,4,0,120,120,132,132,301,301,308,308,2,
0,80,80,305,305,2,0,50,50,102,102,2,0,24,24,205,205,2,0,42,42,109,109,2,
0,164,164,269,269,3,0,105,105,183,183,211,211,2,0,64,64,286,286,2,0,209,
209,271,271,2,0,53,53,285,285,3,0,191,192,194,194,268,268,2,0,40,40,111,
111,2,0,147,147,313,313,2,0,201,201,327,327,2,0,185,185,198,198,2,0,56,56,
288,288,2,0,119,119,310,310,3,0,43,43,103,103,243,243,3,0,56,56,263,263,
288,288,2,0,142,142,312,312,3,0,106,106,235,235,287,287,2,0,39,39,281,281,
2,0,77,77,267,267,3,0,149,149,237,237,264,264,2,0,138,138,229,229,1,0,328,
329,20,0,52,52,65,66,70,71,88,88,90,92,115,115,127,127,141,142,152,152,174,
176,199,199,201,201,233,233,238,238,255,256,262,262,270,270,284,284,304,
304,320,321,3,0,47,47,119,119,279,279,11,0,42,42,49,49,51,51,109,109,123,
123,151,151,169,169,182,182,306,306,322,322,324,324,56,0,38,41,43,46,48,
48,50,50,53,57,59,64,67,67,69,69,72,74,78,78,80,86,89,89,93,99,101,104,106,
108,111,114,116,117,120,122,124,124,126,126,128,131,133,136,138,140,143,
148,150,150,153,165,167,168,170,171,178,178,180,181,184,194,196,198,202,
206,208,210,212,214,217,229,231,232,234,236,239,244,246,248,250,253,257,
258,260,261,263,263,266,266,268,269,273,278,281,283,285,290,292,300,303,
303,305,305,307,313,315,316,319,319,325,326,49,0,38,41,43,46,48,48,50,50,
53,57,59,64,67,67,69,69,72,75,78,78,80,87,89,89,93,104,106,108,110,114,116,
117,120,122,124,126,128,131,133,136,138,140,143,148,150,150,153,168,170,
173,177,181,184,198,200,200,202,210,212,232,234,236,239,244,246,248,250,
254,257,261,263,263,265,266,268,269,271,271,273,278,281,283,285,290,292,
300,303,303,305,305,307,316,318,319,323,323,325,326,12,0,68,68,105,105,118,
118,137,137,183,183,211,211,249,249,272,272,280,280,291,291,302,302,317,
317,2,0,132,132,301,301,1,0,330,331,5017,0,899,1,0,0,0,2,904,1,0,0,0,4,930,
1,0,0,0,6,938,1,0,0,0,8,962,1,0,0,0,10,969,1,0,0,0,12,1035,1,0,0,0,14,1046,
1,0,0,0,16,1048,1,0,0,0,18,1056,1,0,0,0,20,1064,1,0,0,0,22,1068,1,0,0,0,
24,1126,1,0,0,0,26,1128,1,0,0,0,28,1130,1,0,0,0,30,1138,1,0,0,0,32,1141,
1,0,0,0,34,1145,1,0,0,0,36,1148,1,0,0,0,38,1174,1,0,0,0,40,1182,1,0,0,0,
42,1190,1,0,0,0,44,1202,1,0,0,0,46,1204,1,0,0,0,48,1218,1,0,0,0,50,1227,
1,0,0,0,52,1233,1,0,0,0,54,1239,1,0,0,0,56,1243,1,0,0,0,58,1245,1,0,0,0,
60,1254,1,0,0,0,62,1270,1,0,0,0,64,1279,1,0,0,0,66,1292,1,0,0,0,68,1318,
1,0,0,0,70,1340,1,0,0,0,72,1342,1,0,0,0,74,1349,1,0,0,0,76,1356,1,0,0,0,
78,1364,1,0,0,0,80,1379,1,0,0,0,82,1393,1,0,0,0,84,1398,1,0,0,0,86,1400,
1,0,0,0,88,1404,1,0,0,0,90,1406,1,0,0,0,92,1410,1,0,0,0,94,1418,1,0,0,0,
96,1429,1,0,0,0,98,1431,1,0,0,0,100,1449,1,0,0,0,102,1453,1,0,0,0,104,1472,
1,0,0,0,106,1480,1,0,0,0,108,1482,1,0,0,0,110,1504,1,0,0,0,112,1513,1,0,
0,0,114,1521,1,0,0,0,116,1534,1,0,0,0,118,1536,1,0,0,0,120,1547,1,0,0,0,
122,1555,1,0,0,0,124,1557,1,0,0,0,126,1568,1,0,0,0,128,1579,1,0,0,0,130,
1584,1,0,0,0,132,1592,1,0,0,0,134,1606,1,0,0,0,136,1620,1,0,0,0,138,1624,
1,0,0,0,140,1628,1,0,0,0,142,1643,1,0,0,0,144,1645,1,0,0,0,146,1651,1,0,
0,0,148,1655,1,0,0,0,150,1663,1,0,0,0,152,1668,1,0,0,0,154,1677,1,0,0,0,
156,1683,1,0,0,0,158,1687,1,0,0,0,160,1692,1,0,0,0,162,1694,1,0,0,0,164,
1710,1,0,0,0,166,1715,1,0,0,0,168,1719,1,0,0,0,170,1725,1,0,0,0,172,1733,
1,0,0,0,174,1740,1,0,0,0,176,1745,1,0,0,0,178,1764,1,0,0,0,180,1783,1,0,
0,0,182,1798,1,0,0,0,184,1803,1,0,0,0,186,1808,1,0,0,0,188,1813,1,0,0,0,
190,1820,1,0,0,0,192,1825,1,0,0,0,194,1840,1,0,0,0,196,1845,1,0,0,0,198,
1852,1,0,0,0,200,1885,1,0,0,0,202,1904,1,0,0,0,204,1908,1,0,0,0,206,1910,
1,0,0,0,208,1935,1,0,0,0,210,1937,1,0,0,0,212,1946,1,0,0,0,214,1956,1,0,
0,0,216,1961,1,0,0,0,218,1966,1,0,0,0,220,1974,1,0,0,0,222,1979,1,0,0,0,
224,1984,1,0,0,0,226,2007,1,0,0,0,228,2009,1,0,0,0,230,2013,1,0,0,0,232,
2021,1,0,0,0,234,2030,1,0,0,0,236,2044,1,0,0,0,238,2052,1,0,0,0,240,2054,
1,0,0,0,242,2064,1,0,0,0,244,2076,1,0,0,0,246,2112,1,0,0,0,248,2116,1,0,
0,0,250,2124,1,0,0,0,252,2161,1,0,0,0,254,2165,1,0,0,0,256,2212,1,0,0,0,
258,2240,1,0,0,0,260,2251,1,0,0,0,262,2253,1,0,0,0,264,2256,1,0,0,0,266,
2264,1,0,0,0,268,2271,1,0,0,0,270,2305,1,0,0,0,272,2307,1,0,0,0,274,2309,
1,0,0,0,276,2311,1,0,0,0,278,2320,1,0,0,0,280,2324,1,0,0,0,282,2356,1,0,
0,0,284,2373,1,0,0,0,286,2375,1,0,0,0,288,2377,1,0,0,0,290,2389,1,0,0,0,
292,2392,1,0,0,0,294,2400,1,0,0,0,296,2406,1,0,0,0,298,2408,1,0,0,0,300,
2416,1,0,0,0,302,2418,1,0,0,0,304,2426,1,0,0,0,306,2430,1,0,0,0,308,2432,
1,0,0,0,310,2434,1,0,0,0,312,2436,1,0,0,0,314,2438,1,0,0,0,316,2443,1,0,
0,0,318,2447,1,0,0,0,320,2458,1,0,0,0,322,2471,1,0,0,0,324,2473,1,0,0,0,
326,2475,1,0,0,0,328,2483,1,0,0,0,330,2488,1,0,0,0,332,2493,1,0,0,0,334,
2499,1,0,0,0,336,2519,1,0,0,0,338,2522,1,0,0,0,340,2538,1,0,0,0,342,2551,
1,0,0,0,344,2553,1,0,0,0,346,2565,1,0,0,0,348,2592,1,0,0,0,350,2594,1,0,
0,0,352,2597,1,0,0,0,354,2605,1,0,0,0,356,2607,1,0,0,0,358,2636,1,0,0,0,
360,2642,1,0,0,0,362,2644,1,0,0,0,364,2668,1,0,0,0,366,2682,1,0,0,0,368,
2684,1,0,0,0,370,2689,1,0,0,0,372,2691,1,0,0,0,374,2699,1,0,0,0,376,2705,
1,0,0,0,378,2707,1,0,0,0,380,2723,1,0,0,0,382,2739,1,0,0,0,384,2741,1,0,
0,0,386,2751,1,0,0,0,388,2765,1,0,0,0,390,2773,1,0,0,0,392,2783,1,0,0,0,
394,2798,1,0,0,0,396,2801,1,0,0,0,398,2810,1,0,0,0,400,2813,1,0,0,0,402,
2827,1,0,0,0,404,2834,1,0,0,0,406,2836,1,0,0,0,408,2840,1,0,0,0,410,2844,
1,0,0,0,412,2858,1,0,0,0,414,2860,1,0,0,0,416,2862,1,0,0,0,418,2917,1,0,
0,0,420,2919,1,0,0,0,422,2929,1,0,0,0,424,2935,1,0,0,0,426,2940,1,0,0,0,
428,2942,1,0,0,0,430,2946,1,0,0,0,432,2956,1,0,0,0,434,2966,1,0,0,0,436,
2968,1,0,0,0,438,2986,1,0,0,0,440,2988,1,0,0,0,442,2992,1,0,0,0,444,3000,
1,0,0,0,446,3004,1,0,0,0,448,3009,1,0,0,0,450,3015,1,0,0,0,452,3022,1,0,
0,0,454,3034,1,0,0,0,456,3039,1,0,0,0,458,3051,1,0,0,0,460,3054,1,0,0,0,
462,3058,1,0,0,0,464,3061,1,0,0,0,466,3089,1,0,0,0,468,3091,1,0,0,0,470,
3108,1,0,0,0,472,3110,1,0,0,0,474,3123,1,0,0,0,476,3125,1,0,0,0,478,3131,
1,0,0,0,480,3137,1,0,0,0,482,3143,1,0,0,0,484,3150,1,0,0,0,486,3153,1,0,
0,0,488,3160,1,0,0,0,490,3164,1,0,0,0,492,3176,1,0,0,0,494,3188,1,0,0,0,
496,3191,1,0,0,0,498,3195,1,0,0,0,500,3199,1,0,0,0,502,3205,1,0,0,0,504,
3208,1,0,0,0,506,3213,1,0,0,0,508,3217,1,0,0,0,510,3222,1,0,0,0,512,3229,
1,0,0,0,514,3236,1,0,0,0,516,3242,1,0,0,0,518,3285,1,0,0,0,520,3287,1,0,
0,0,522,3320,1,0,0,0,524,3326,1,0,0,0,526,3333,1,0,0,0,528,3335,1,0,0,0,
530,3337,1,0,0,0,532,3352,1,0,0,0,534,3360,1,0,0,0,536,3362,1,0,0,0,538,
3369,1,0,0,0,540,3377,1,0,0,0,542,3381,1,0,0,0,544,3389,1,0,0,0,546,3391,
1,0,0,0,548,3407,1,0,0,0,550,3409,1,0,0,0,552,3428,1,0,0,0,554,3430,1,0,
0,0,556,3434,1,0,0,0,558,3447,1,0,0,0,560,3453,1,0,0,0,562,3467,1,0,0,0,
564,3469,1,0,0,0,566,3483,1,0,0,0,568,3485,1,0,0,0,570,3498,1,0,0,0,572,
3507,1,0,0,0,574,3523,1,0,0,0,576,3541,1,0,0,0,578,3562,1,0,0,0,580,3581,
1,0,0,0,582,3585,1,0,0,0,584,3589,1,0,0,0,586,3592,1,0,0,0,588,3597,1,0,
0,0,590,3599,1,0,0,0,592,3602,1,0,0,0,594,3604,1,0,0,0,596,3632,1,0,0,0,
598,3681,1,0,0,0,600,3685,1,0,0,0,602,3702,1,0,0,0,604,3704,1,0,0,0,606,
3710,1,0,0,0,608,3724,1,0,0,0,610,3726,1,0,0,0,612,3731,1,0,0,0,614,3738,
1,0,0,0,616,3753,1,0,0,0,618,3755,1,0,0,0,620,3761,1,0,0,0,622,3779,1,0,
0,0,624,3783,1,0,0,0,626,3791,1,0,0,0,628,3795,1,0,0,0,630,3807,1,0,0,0,
632,3809,1,0,0,0,634,3814,1,0,0,0,636,3823,1,0,0,0,638,3825,1,0,0,0,640,
3841,1,0,0,0,642,3849,1,0,0,0,644,3853,1,0,0,0,646,3866,1,0,0,0,648,3868,
1,0,0,0,650,3873,1,0,0,0,652,3877,1,0,0,0,654,3883,1,0,0,0,656,3891,1,0,
0,0,658,3907,1,0,0,0,660,3931,1,0,0,0,662,3941,1,0,0,0,664,3958,1,0,0,0,
666,3998,1,0,0,0,668,4004,1,0,0,0,670,4011,1,0,0,0,672,4071,1,0,0,0,674,
4076,1,0,0,0,676,4085,1,0,0,0,678,4087,1,0,0,0,680,4091,1,0,0,0,682,4098,
1,0,0,0,684,4113,1,0,0,0,686,4132,1,0,0,0,688,4134,1,0,0,0,690,4142,1,0,
0,0,692,4146,1,0,0,0,694,4148,1,0,0,0,696,4154,1,0,0,0,698,4165,1,0,0,0,
700,4179,1,0,0,0,702,4190,1,0,0,0,704,4192,1,0,0,0,706,4197,1,0,0,0,708,
4217,1,0,0,0,710,4219,1,0,0,0,712,4222,1,0,0,0,714,4227,1,0,0,0,716,4234,
1,0,0,0,718,4236,1,0,0,0,720,4240,1,0,0,0,722,4245,1,0,0,0,724,4257,1,0,
0,0,726,4262,1,0,0,0,728,4274,1,0,0,0,730,4282,1,0,0,0,732,4290,1,0,0,0,
734,4294,1,0,0,0,736,4296,1,0,0,0,738,4301,1,0,0,0,740,4309,1,0,0,0,742,
4313,1,0,0,0,744,4318,1,0,0,0,746,4322,1,0,0,0,748,4328,1,0,0,0,750,4330,
1,0,0,0,752,4338,1,0,0,0,754,4340,1,0,0,0,756,4342,1,0,0,0,758,4345,1,0,
0,0,760,4353,1,0,0,0,762,4357,1,0,0,0,764,4359,1,0,0,0,766,4364,1,0,0,0,
768,4375,1,0,0,0,770,4377,1,0,0,0,772,4384,1,0,0,0,774,4386,1,0,0,0,776,
4391,1,0,0,0,778,4395,1,0,0,0,780,4397,1,0,0,0,782,4409,1,0,0,0,784,4421,
1,0,0,0,786,4423,1,0,0,0,788,4431,1,0,0,0,790,4433,1,0,0,0,792,4439,1,0,
0,0,794,4441,1,0,0,0,796,4443,1,0,0,0,798,4450,1,0,0,0,800,4461,1,0,0,0,
802,4464,1,0,0,0,804,4492,1,0,0,0,806,4494,1,0,0,0,808,4499,1,0,0,0,810,
4503,1,0,0,0,812,4512,1,0,0,0,814,4520,1,0,0,0,816,4527,1,0,0,0,818,4537,
1,0,0,0,820,4546,1,0,0,0,822,4555,1,0,0,0,824,4565,1,0,0,0,826,4569,1,0,
0,0,828,4573,1,0,0,0,830,4577,1,0,0,0,832,4581,1,0,0,0,834,4585,1,0,0,0,
836,4589,1,0,0,0,838,4593,1,0,0,0,840,4597,1,0,0,0,842,4601,1,0,0,0,844,
4605,1,0,0,0,846,4609,1,0,0,0,848,4613,1,0,0,0,850,4618,1,0,0,0,852,4623,
1,0,0,0,854,4628,1,0,0,0,856,4636,1,0,0,0,858,4641,1,0,0,0,860,4644,1,0,
0,0,862,4650,1,0,0,0,864,4653,1,0,0,0,866,4665,1,0,0,0,868,4667,1,0,0,0,
870,4669,1,0,0,0,872,4671,1,0,0,0,874,4673,1,0,0,0,876,4675,1,0,0,0,878,
4677,1,0,0,0,880,4679,1,0,0,0,882,4681,1,0,0,0,884,4683,1,0,0,0,886,4685,
1,0,0,0,888,4687,1,0,0,0,890,4689,1,0,0,0,892,4691,1,0,0,0,894,900,3,2,1,
0,895,896,5,228,0,0,896,897,5,46,0,0,897,898,5,330,0,0,898,900,3,4,2,0,899,
894,1,0,0,0,899,895,1,0,0,0,900,1,1,0,0,0,901,903,5,22,0,0,902,901,1,0,0,
0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,
1,0,0,0,907,916,3,10,5,0,908,910,5,22,0,0,909,908,1,0,0,0,910,911,1,0,0,
0,911,909,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,915,3,10,5,0,914,909,
1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,922,1,0,0,0,
918,916,1,0,0,0,919,921,5,22,0,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,
1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,926,5,0,0,1,
926,3,1,0,0,0,927,929,5,22,0,0,928,927,1,0,0,0,929,932,1,0,0,0,930,928,1,
0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,930,1,0,0,0,933,934,5,0,0,1,934,
5,1,0,0,0,935,937,5,22,0,0,936,935,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,
0,938,939,1,0,0,0,939,949,1,0,0,0,940,938,1,0,0,0,941,943,3,8,4,0,942,944,
5,22,0,0,943,942,1,0,0,0,944,945,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,
946,948,1,0,0,0,947,941,1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,
1,0,0,0,950,952,1,0,0,0,951,949,1,0,0,0,952,953,5,255,0,0,953,957,3,14,7,
0,954,956,5,22,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,
1,0,0,0,958,7,1,0,0,0,959,957,1,0,0,0,960,963,3,790,395,0,961,963,3,214,
107,0,962,960,1,0,0,0,962,961,1,0,0,0,963,9,1,0,0,0,964,967,5,128,0,0,965,
966,5,234,0,0,966,968,5,226,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,970,
1,0,0,0,969,964,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,972,3,12,6,0,
972,11,1,0,0,0,973,1036,3,224,112,0,974,1036,3,232,116,0,975,1036,3,790,
395,0,976,1036,3,416,208,0,977,1036,3,568,284,0,978,1036,3,786,393,0,979,
1036,3,364,182,0,980,1036,3,792,396,0,981,1036,3,684,342,0,982,1036,3,682,
341,0,983,1036,3,794,397,0,984,1036,3,210,105,0,985,1036,3,214,107,0,986,
1036,3,216,108,0,987,1036,3,464,232,0,988,1036,3,468,234,0,989,1036,3,222,
111,0,990,1036,3,656,328,0,991,1036,3,660,330,0,992,1036,3,662,331,0,993,
1036,3,368,184,0,994,1036,3,570,285,0,995,1036,3,572,286,0,996,1036,3,574,
287,0,997,1036,3,576,288,0,998,1036,3,578,289,0,999,1036,3,392,196,0,1000,
1036,3,396,198,0,1001,1036,3,400,200,0,1002,1036,3,378,189,0,1003,1036,3,
380,190,0,1004,1036,3,384,192,0,1005,1036,3,620,310,0,1006,1036,3,634,317,
0,1007,1036,3,698,349,0,1008,1036,3,706,353,0,1009,1036,3,728,364,0,1010,
1036,3,594,297,0,1011,1036,3,596,298,0,1012,1036,3,472,236,0,1013,1036,3,
390,195,0,1014,1036,3,386,193,0,1015,1036,3,388,194,0,1016,1036,3,628,314,
0,1017,1036,3,604,302,0,1018,1036,3,606,303,0,1019,1036,3,610,305,0,1020,
1036,3,420,210,0,1021,1036,3,422,211,0,1022,1036,3,424,212,0,1023,1036,3,
800,400,0,1024,1036,3,612,306,0,1025,1036,3,614,307,0,1026,1036,3,618,309,
0,1027,1036,3,446,223,0,1028,1036,3,448,224,0,1029,1036,3,802,401,0,1030,
1036,3,638,319,0,1031,1036,3,644,322,0,1032,1036,3,652,326,0,1033,1036,3,
450,225,0,1034,1036,3,806,403,0,1035,973,1,0,0,0,1035,974,1,0,0,0,1035,975,
1,0,0,0,1035,976,1,0,0,0,1035,977,1,0,0,0,1035,978,1,0,0,0,1035,979,1,0,
0,0,1035,980,1,0,0,0,1035,981,1,0,0,0,1035,982,1,0,0,0,1035,983,1,0,0,0,
1035,984,1,0,0,0,1035,985,1,0,0,0,1035,986,1,0,0,0,1035,987,1,0,0,0,1035,
988,1,0,0,0,1035,989,1,0,0,0,1035,990,1,0,0,0,1035,991,1,0,0,0,1035,992,
1,0,0,0,1035,993,1,0,0,0,1035,994,1,0,0,0,1035,995,1,0,0,0,1035,996,1,0,
0,0,1035,997,1,0,0,0,1035,998,1,0,0,0,1035,999,1,0,0,0,1035,1000,1,0,0,0,
1035,1001,1,0,0,0,1035,1002,1,0,0,0,1035,1003,1,0,0,0,1035,1004,1,0,0,0,
1035,1005,1,0,0,0,1035,1006,1,0,0,0,1035,1007,1,0,0,0,1035,1008,1,0,0,0,
1035,1009,1,0,0,0,1035,1010,1,0,0,0,1035,1011,1,0,0,0,1035,1012,1,0,0,0,
1035,1013,1,0,0,0,1035,1014,1,0,0,0,1035,1015,1,0,0,0,1035,1016,1,0,0,0,
1035,1017,1,0,0,0,1035,1018,1,0,0,0,1035,1019,1,0,0,0,1035,1020,1,0,0,0,
1035,1021,1,0,0,0,1035,1022,1,0,0,0,1035,1023,1,0,0,0,1035,1024,1,0,0,0,
1035,1025,1,0,0,0,1035,1026,1,0,0,0,1035,1027,1,0,0,0,1035,1028,1,0,0,0,
1035,1029,1,0,0,0,1035,1030,1,0,0,0,1035,1031,1,0,0,0,1035,1032,1,0,0,0,
1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,13,1,0,0,0,1037,1042,3,16,8,0,1038,
1039,5,212,0,0,1039,1041,3,16,8,0,1040,1038,1,0,0,0,1041,1044,1,0,0,0,1042,
1040,1,0,0,0,1042,1043,1,0,0,0,1043,1047,1,0,0,0,1044,1042,1,0,0,0,1045,
1047,3,200,100,0,1046,1037,1,0,0,0,1046,1045,1,0,0,0,1047,15,1,0,0,0,1048,
1053,3,18,9,0,1049,1050,5,45,0,0,1050,1052,3,18,9,0,1051,1049,1,0,0,0,1052,
1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,17,1,0,0,0,1055,1053,
1,0,0,0,1056,1061,3,20,10,0,1057,1058,5,326,0,0,1058,1060,3,20,10,0,1059,
1057,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,
19,1,0,0,0,1063,1061,1,0,0,0,1064,1066,3,28,14,0,1065,1067,3,24,12,0,1066,
1065,1,0,0,0,1066,1067,1,0,0,0,1067,21,1,0,0,0,1068,1070,5,171,0,0,1069,
1071,5,199,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,
1073,5,109,0,0,1073,1074,5,141,0,0,1074,23,1,0,0,0,1075,1077,5,199,0,0,1076,
1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1079,3,26,13,0,1079,
1082,3,28,14,0,1080,1081,5,121,0,0,1081,1083,3,28,14,0,1082,1080,1,0,0,0,
1082,1083,1,0,0,0,1083,1127,1,0,0,0,1084,1086,5,199,0,0,1085,1084,1,0,0,
0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,5,158,0,0,1088,1090,5,79,
0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1127,3,82,
41,0,1092,1102,5,172,0,0,1093,1102,5,200,0,0,1094,1095,5,171,0,0,1095,1102,
5,201,0,0,1096,1098,5,171,0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,
1,0,0,0,1099,1100,5,199,0,0,1100,1102,5,201,0,0,1101,1092,1,0,0,0,1101,1093,
1,0,0,0,1101,1094,1,0,0,0,1101,1097,1,0,0,0,1102,1127,1,0,0,0,1103,1105,
5,199,0,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1108,
5,65,0,0,1107,1109,7,0,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,
1,0,0,0,1110,1111,3,28,14,0,1111,1112,5,45,0,0,1112,1113,3,28,14,0,1113,
1127,1,0,0,0,1114,1120,5,1,0,0,1115,1120,5,2,0,0,1116,1120,5,3,0,0,1117,
1120,5,4,0,0,1118,1120,3,22,11,0,1119,1114,1,0,0,0,1119,1115,1,0,0,0,1119,
1116,1,0,0,0,1119,1117,1,0,0,0,1119,1118,1,0,0,0,1120,1121,1,0,0,0,1121,
1123,3,28,14,0,1122,1119,1,0,0,0,1123,1124,1,0,0,0,1124,1122,1,0,0,0,1124,
1125,1,0,0,0,1125,1127,1,0,0,0,1126,1076,1,0,0,0,1126,1085,1,0,0,0,1126,
1101,1,0,0,0,1126,1104,1,0,0,0,1126,1122,1,0,0,0,1127,25,1,0,0,0,1128,1129,
7,1,0,0,1129,27,1,0,0,0,1130,1135,3,36,18,0,1131,1132,7,2,0,0,1132,1134,
3,36,18,0,1133,1131,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,
1,0,0,0,1136,29,1,0,0,0,1137,1135,1,0,0,0,1138,1139,5,7,0,0,1139,1140,5,
7,0,0,1140,31,1,0,0,0,1141,1142,5,7,0,0,1142,1143,5,7,0,0,1143,1144,5,12,
0,0,1144,33,1,0,0,0,1145,1146,5,27,0,0,1146,1147,5,27,0,0,1147,35,1,0,0,
0,1148,1161,3,38,19,0,1149,1157,5,9,0,0,1150,1157,3,30,15,0,1151,1157,5,
10,0,0,1152,1157,3,32,16,0,1153,1157,5,11,0,0,1154,1157,5,12,0,0,1155,1157,
5,33,0,0,1156,1149,1,0,0,0,1156,1150,1,0,0,0,1156,1151,1,0,0,0,1156,1152,
1,0,0,0,1156,1153,1,0,0,0,1156,1154,1,0,0,0,1156,1155,1,0,0,0,1157,1158,
1,0,0,0,1158,1160,3,38,19,0,1159,1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,
1,0,0,0,1161,1162,1,0,0,0,1162,1172,1,0,0,0,1163,1161,1,0,0,0,1164,1165,
3,34,17,0,1165,1166,3,36,18,0,1166,1173,1,0,0,0,1167,1169,5,27,0,0,1168,
1167,1,0,0,0,1169,1170,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,
1173,1,0,0,0,1172,1164,1,0,0,0,1172,1168,1,0,0,0,1172,1173,1,0,0,0,1173,
37,1,0,0,0,1174,1179,3,40,20,0,1175,1176,7,3,0,0,1176,1178,3,40,20,0,1177,
1175,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,
39,1,0,0,0,1181,1179,1,0,0,0,1182,1187,3,42,21,0,1183,1184,7,4,0,0,1184,
1186,3,42,21,0,1185,1183,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,
1188,1,0,0,0,1188,41,1,0,0,0,1189,1187,1,0,0,0,1190,1195,3,44,22,0,1191,
1192,5,13,0,0,1192,1194,3,44,22,0,1193,1191,1,0,0,0,1194,1197,1,0,0,0,1195,
1193,1,0,0,0,1195,1196,1,0,0,0,1196,43,1,0,0,0,1197,1195,1,0,0,0,1198,1203,
3,54,27,0,1199,1200,3,46,23,0,1200,1201,3,54,27,0,1201,1203,1,0,0,0,1202,
1198,1,0,0,0,1202,1199,1,0,0,0,1203,45,1,0,0,0,1204,1205,7,5,0,0,1205,47,
1,0,0,0,1206,1215,3,138,69,0,1207,1215,3,132,66,0,1208,1212,5,23,0,0,1209,
1213,3,144,72,0,1210,1213,5,330,0,0,1211,1213,3,830,415,0,1212,1209,1,0,
0,0,1212,1210,1,0,0,0,1212,1211,1,0,0,0,1213,1215,1,0,0,0,1214,1206,1,0,
0,0,1214,1207,1,0,0,0,1214,1208,1,0,0,0,1215,1217,1,0,0,0,1216,1214,1,0,
0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1223,1,0,
0,0,1220,1218,1,0,0,0,1221,1222,5,75,0,0,1222,1224,3,828,414,0,1223,1221,
1,0,0,0,1223,1224,1,0,0,0,1224,49,1,0,0,0,1225,1228,3,814,407,0,1226,1228,
3,68,34,0,1227,1225,1,0,0,0,1227,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1230,
3,48,24,0,1230,51,1,0,0,0,1231,1234,3,816,408,0,1232,1234,3,70,35,0,1233,
1231,1,0,0,0,1233,1232,1,0,0,0,1234,1235,1,0,0,0,1235,1236,3,48,24,0,1236,
53,1,0,0,0,1237,1240,3,50,25,0,1238,1240,3,84,42,0,1239,1237,1,0,0,0,1239,
1238,1,0,0,0,1240,55,1,0,0,0,1241,1244,3,52,26,0,1242,1244,3,84,42,0,1243,
1241,1,0,0,0,1243,1242,1,0,0,0,1244,57,1,0,0,0,1245,1247,5,37,0,0,1246,1248,
3,112,56,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,
5,24,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
5,36,0,0,1253,59,1,0,0,0,1254,1257,3,14,7,0,1255,1256,5,28,0,0,1256,1258,
3,14,7,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,1267,1,0,0,0,1259,1260,
5,24,0,0,1260,1263,3,14,7,0,1261,1262,5,28,0,0,1262,1264,3,14,7,0,1263,1261,
1,0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,0,0,1265,1259,1,0,0,0,1266,1269,
1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,61,1,0,0,0,1269,1267,1,
0,0,0,1270,1272,5,31,0,0,1271,1273,3,60,30,0,1272,1271,1,0,0,0,1272,1273,
1,0,0,0,1273,1275,1,0,0,0,1274,1276,5,24,0,0,1275,1274,1,0,0,0,1275,1276,
1,0,0,0,1276,1277,1,0,0,0,1277,1278,5,32,0,0,1278,63,1,0,0,0,1279,1280,3,
14,7,0,1280,1281,5,28,0,0,1281,1289,3,14,7,0,1282,1283,5,24,0,0,1283,1284,
3,14,7,0,1284,1285,5,28,0,0,1285,1286,3,14,7,0,1286,1288,1,0,0,0,1287,1282,
1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,65,1,
0,0,0,1291,1289,1,0,0,0,1292,1294,5,14,0,0,1293,1295,3,64,32,0,1294,1293,
1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,5,24,0,0,1297,1296,
1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1300,5,15,0,0,1300,67,1,
0,0,0,1301,1319,3,142,71,0,1302,1319,3,144,72,0,1303,1319,3,80,40,0,1304,
1319,3,72,36,0,1305,1319,3,76,38,0,1306,1319,3,78,39,0,1307,1308,3,830,415,
0,1308,1311,5,34,0,0,1309,1312,3,856,428,0,1310,1312,5,327,0,0,1311,1309,
1,0,0,0,1311,1310,1,0,0,0,1312,1319,1,0,0,0,1313,1319,3,208,104,0,1314,1319,
3,74,37,0,1315,1319,3,58,29,0,1316,1319,3,62,31,0,1317,1319,3,66,33,0,1318,
1301,1,0,0,0,1318,1302,1,0,0,0,1318,1303,1,0,0,0,1318,1304,1,0,0,0,1318,
1305,1,0,0,0,1318,1306,1,0,0,0,1318,1307,1,0,0,0,1318,1313,1,0,0,0,1318,
1314,1,0,0,0,1318,1315,1,0,0,0,1318,1316,1,0,0,0,1318,1317,1,0,0,0,1319,
69,1,0,0,0,1320,1341,3,142,71,0,1321,1341,3,144,72,0,1322,1341,3,80,40,0,
1323,1341,3,72,36,0,1324,1341,3,78,39,0,1325,1326,3,830,415,0,1326,1329,
5,34,0,0,1327,1330,3,856,428,0,1328,1330,5,327,0,0,1329,1327,1,0,0,0,1329,
1328,1,0,0,0,1330,1341,1,0,0,0,1331,1332,5,25,0,0,1332,1333,3,232,116,0,
1333,1334,5,26,0,0,1334,1341,1,0,0,0,1335,1341,3,208,104,0,1336,1341,3,74,
37,0,1337,1341,3,58,29,0,1338,1341,3,62,31,0,1339,1341,3,66,33,0,1340,1320,
1,0,0,0,1340,1321,1,0,0,0,1340,1322,1,0,0,0,1340,1323,1,0,0,0,1340,1324,
1,0,0,0,1340,1325,1,0,0,0,1340,1331,1,0,0,0,1340,1335,1,0,0,0,1340,1336,
1,0,0,0,1340,1337,1,0,0,0,1340,1338,1,0,0,0,1340,1339,1,0,0,0,1341,71,1,
0,0,0,1342,1343,5,71,0,0,1343,1344,5,25,0,0,1344,1345,3,14,7,0,1345,1346,
5,49,0,0,1346,1347,3,204,102,0,1347,1348,5,26,0,0,1348,73,1,0,0,0,1349,1350,
5,66,0,0,1350,1351,5,25,0,0,1351,1352,3,14,7,0,1352,1353,5,49,0,0,1353,1354,
3,156,78,0,1354,1355,5,26,0,0,1355,75,1,0,0,0,1356,1357,5,127,0,0,1357,1360,
5,25,0,0,1358,1361,3,232,116,0,1359,1361,3,368,184,0,1360,1358,1,0,0,0,1360,
1359,1,0,0,0,1361,1362,1,0,0,0,1362,1363,5,26,0,0,1363,77,1,0,0,0,1364,1366,
5,70,0,0,1365,1367,3,14,7,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1369,
1,0,0,0,1368,1370,3,140,70,0,1369,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1369,
1,0,0,0,1371,1372,1,0,0,0,1372,1375,1,0,0,0,1373,1374,5,113,0,0,1374,1376,
3,14,7,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1378,
5,117,0,0,1378,79,1,0,0,0,1379,1391,3,110,55,0,1380,1389,5,35,0,0,1381,1382,
5,25,0,0,1382,1383,3,14,7,0,1383,1384,5,26,0,0,1384,1390,1,0,0,0,1385,1386,
5,31,0,0,1386,1387,3,6,3,0,1387,1388,5,32,0,0,1388,1390,1,0,0,0,1389,1381,
1,0,0,0,1389,1385,1,0,0,0,1390,1392,1,0,0,0,1391,1380,1,0,0,0,1391,1392,
1,0,0,0,1392,81,1,0,0,0,1393,1394,3,56,28,0,1394,83,1,0,0,0,1395,1399,3,
98,49,0,1396,1399,3,102,51,0,1397,1399,3,108,54,0,1398,1395,1,0,0,0,1398,
1396,1,0,0,0,1398,1397,1,0,0,0,1399,85,1,0,0,0,1400,1401,5,327,0,0,1401,
87,1,0,0,0,1402,1405,3,814,407,0,1403,1405,5,327,0,0,1404,1402,1,0,0,0,1404,
1403,1,0,0,0,1405,89,1,0,0,0,1406,1407,3,14,7,0,1407,1408,5,49,0,0,1408,
1409,3,88,44,0,1409,91,1,0,0,0,1410,1415,3,90,45,0,1411,1412,5,24,0,0,1412,
1414,3,90,45,0,1413,1411,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,1415,
1416,1,0,0,0,1416,93,1,0,0,0,1417,1415,1,0,0,0,1418,1419,3,14,7,0,1419,1420,
5,24,0,0,1420,1423,3,86,43,0,1421,1422,5,220,0,0,1422,1424,3,92,46,0,1423,
1421,1,0,0,0,1423,1424,1,0,0,0,1424,95,1,0,0,0,1425,1430,5,120,0,0,1426,
1430,5,201,0,0,1427,1428,5,97,0,0,1428,1430,3,14,7,0,1429,1425,1,0,0,0,1429,
1426,1,0,0,0,1429,1427,1,0,0,0,1430,97,1,0,0,0,1431,1432,5,176,0,0,1432,
1433,5,25,0,0,1433,1436,3,94,47,0,1434,1435,5,256,0,0,1435,1437,3,156,78,
0,1436,1434,1,0,0,0,1436,1437,1,0,0,0,1437,1444,1,0,0,0,1438,1439,3,96,48,
0,1439,1440,5,207,0,0,1440,1441,7,6,0,0,1441,1443,1,0,0,0,1442,1438,1,0,
0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,0,
0,0,1446,1444,1,0,0,0,1447,1448,5,26,0,0,1448,99,1,0,0,0,1449,1450,7,7,0,
0,1450,1451,5,207,0,0,1451,1452,5,120,0,0,1452,101,1,0,0,0,1453,1454,5,174,
0,0,1454,1455,5,25,0,0,1455,1457,3,94,47,0,1456,1458,3,100,50,0,1457,1456,
1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1460,5,26,0,0,1460,103,
1,0,0,0,1461,1463,5,324,0,0,1462,1464,5,48,0,0,1463,1462,1,0,0,0,1463,1464,
1,0,0,0,1464,1473,1,0,0,0,1465,1467,5,323,0,0,1466,1468,7,8,0,0,1467,1466,
1,0,0,0,1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1471,5,48,0,0,1470,1469,
1,0,0,0,1470,1471,1,0,0,0,1471,1473,1,0,0,0,1472,1461,1,0,0,0,1472,1465,
1,0,0,0,1473,105,1,0,0,0,1474,1481,5,120,0,0,1475,1481,5,201,0,0,1476,1477,
5,114,0,0,1477,1481,5,48,0,0,1478,1479,5,114,0,0,1479,1481,5,203,0,0,1480,
1474,1,0,0,0,1480,1475,1,0,0,0,1480,1476,1,0,0,0,1480,1478,1,0,0,0,1481,
107,1,0,0,0,1482,1483,5,175,0,0,1483,1484,5,25,0,0,1484,1488,3,94,47,0,1485,
1486,3,104,52,0,1486,1487,5,325,0,0,1487,1489,1,0,0,0,1488,1485,1,0,0,0,
1488,1489,1,0,0,0,1489,1494,1,0,0,0,1490,1491,3,106,53,0,1491,1492,5,207,
0,0,1492,1493,5,114,0,0,1493,1495,1,0,0,0,1494,1490,1,0,0,0,1494,1495,1,
0,0,0,1495,1500,1,0,0,0,1496,1497,3,106,53,0,1497,1498,5,207,0,0,1498,1499,
5,120,0,0,1499,1501,1,0,0,0,1500,1496,1,0,0,0,1500,1501,1,0,0,0,1501,1502,
1,0,0,0,1502,1503,5,26,0,0,1503,109,1,0,0,0,1504,1506,5,25,0,0,1505,1507,
3,130,65,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,1508,1510,
5,24,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,0,1511,1512,
5,26,0,0,1512,111,1,0,0,0,1513,1518,3,14,7,0,1514,1515,5,24,0,0,1515,1517,
3,14,7,0,1516,1514,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,
1,0,0,0,1519,113,1,0,0,0,1520,1518,1,0,0,0,1521,1522,5,25,0,0,1522,1527,
3,828,414,0,1523,1524,5,24,0,0,1524,1526,3,828,414,0,1525,1523,1,0,0,0,1526,
1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,
1527,1,0,0,0,1530,1531,5,26,0,0,1531,115,1,0,0,0,1532,1535,3,144,72,0,1533,
1535,3,828,414,0,1534,1532,1,0,0,0,1534,1533,1,0,0,0,1535,117,1,0,0,0,1536,
1537,5,25,0,0,1537,1542,3,116,58,0,1538,1539,5,24,0,0,1539,1541,3,116,58,
0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,
0,1543,1545,1,0,0,0,1544,1542,1,0,0,0,1545,1546,5,26,0,0,1546,119,1,0,0,
0,1547,1548,3,852,426,0,1548,1549,3,828,414,0,1549,121,1,0,0,0,1550,1551,
3,828,414,0,1551,1552,5,23,0,0,1552,1553,3,828,414,0,1553,1556,1,0,0,0,1554,
1556,3,842,421,0,1555,1550,1,0,0,0,1555,1554,1,0,0,0,1556,123,1,0,0,0,1557,
1562,3,120,60,0,1558,1559,5,24,0,0,1559,1561,3,120,60,0,1560,1558,1,0,0,
0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1566,1,0,0,
0,1564,1562,1,0,0,0,1565,1567,5,24,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,
0,1567,125,1,0,0,0,1568,1573,3,122,61,0,1569,1570,5,24,0,0,1570,1572,3,122,
61,0,1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,
0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1576,1578,5,24,0,0,1577,1576,1,0,
0,0,1577,1578,1,0,0,0,1578,127,1,0,0,0,1579,1582,3,14,7,0,1580,1581,5,49,
0,0,1581,1583,3,830,415,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,129,1,
0,0,0,1584,1589,3,128,64,0,1585,1586,5,24,0,0,1586,1588,3,128,64,0,1587,
1585,1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,
131,1,0,0,0,1591,1589,1,0,0,0,1592,1599,5,25,0,0,1593,1594,3,252,126,0,1594,
1596,3,130,65,0,1595,1597,5,24,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
1600,1,0,0,0,1598,1600,5,19,0,0,1599,1593,1,0,0,0,1599,1598,1,0,0,0,1599,
1600,1,0,0,0,1600,1601,1,0,0,0,1601,1602,5,26,0,0,1602,1603,3,134,67,0,1603,
133,1,0,0,0,1604,1607,3,748,374,0,1605,1607,3,750,375,0,1606,1604,1,0,0,
0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1610,1,0,0,0,1608,1609,5,216,
0,0,1609,1611,3,752,376,0,1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,135,1,
0,0,0,1612,1613,3,830,415,0,1613,1614,5,34,0,0,1614,1615,3,830,415,0,1615,
1621,1,0,0,0,1616,1621,3,834,417,0,1617,1621,3,144,72,0,1618,1619,5,130,
0,0,1619,1621,5,143,0,0,1620,1612,1,0,0,0,1620,1616,1,0,0,0,1620,1617,1,
0,0,0,1620,1618,1,0,0,0,1621,1622,1,0,0,0,1622,1623,3,132,66,0,1623,137,
1,0,0,0,1624,1625,5,37,0,0,1625,1626,3,14,7,0,1626,1627,5,36,0,0,1627,139,
1,0,0,0,1628,1629,5,320,0,0,1629,1630,3,14,7,0,1630,1631,5,294,0,0,1631,
1632,3,14,7,0,1632,141,1,0,0,0,1633,1644,3,892,446,0,1634,1644,3,890,445,
0,1635,1644,5,327,0,0,1636,1644,5,333,0,0,1637,1644,5,201,0,0,1638,1644,
5,91,0,0,1639,1644,5,90,0,0,1640,1644,5,92,0,0,1641,1644,3,888,444,0,1642,
1644,5,115,0,0,1643,1633,1,0,0,0,1643,1634,1,0,0,0,1643,1635,1,0,0,0,1643,
1636,1,0,0,0,1643,1637,1,0,0,0,1643,1638,1,0,0,0,1643,1639,1,0,0,0,1643,
1640,1,0,0,0,1643,1641,1,0,0,0,1643,1642,1,0,0,0,1644,143,1,0,0,0,1645,1649,
5,30,0,0,1646,1650,3,830,415,0,1647,1650,5,301,0,0,1648,1650,5,132,0,0,1649,
1646,1,0,0,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,145,1,0,0,0,1651,1653,
3,144,72,0,1652,1654,5,27,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,147,
1,0,0,0,1655,1660,3,144,72,0,1656,1657,5,24,0,0,1657,1659,3,144,72,0,1658,
1656,1,0,0,0,1659,1662,1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,0,1661,
149,1,0,0,0,1662,1660,1,0,0,0,1663,1666,3,144,72,0,1664,1665,5,49,0,0,1665,
1667,3,144,72,0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,151,1,0,0,0,1668,
1673,3,150,75,0,1669,1670,5,24,0,0,1670,1672,3,150,75,0,1671,1669,1,0,0,
0,1672,1675,1,0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,153,1,0,0,0,
1675,1673,1,0,0,0,1676,1678,7,3,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,
1678,1681,1,0,0,0,1679,1682,3,892,446,0,1680,1682,3,890,445,0,1681,1679,
1,0,0,0,1681,1680,1,0,0,0,1682,155,1,0,0,0,1683,1684,3,846,423,0,1684,157,
1,0,0,0,1685,1688,3,892,446,0,1686,1688,3,144,72,0,1687,1685,1,0,0,0,1687,
1686,1,0,0,0,1688,159,1,0,0,0,1689,1693,3,810,405,0,1690,1693,5,327,0,0,
1691,1693,3,144,72,0,1692,1689,1,0,0,0,1692,1690,1,0,0,0,1692,1691,1,0,0,
0,1693,161,1,0,0,0,1694,1695,3,160,80,0,1695,1696,5,28,0,0,1696,1697,3,204,
102,0,1697,163,1,0,0,0,1698,1699,3,160,80,0,1699,1704,3,204,102,0,1700,1702,
5,199,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1705,
5,201,0,0,1704,1701,1,0,0,0,1704,1705,1,0,0,0,1705,1711,1,0,0,0,1706,1707,
3,204,102,0,1707,1708,5,49,0,0,1708,1709,3,160,80,0,1709,1711,1,0,0,0,1710,
1698,1,0,0,0,1710,1706,1,0,0,0,1711,165,1,0,0,0,1712,1713,3,160,80,0,1713,
1714,5,28,0,0,1714,1716,1,0,0,0,1715,1712,1,0,0,0,1715,1716,1,0,0,0,1716,
1717,1,0,0,0,1717,1718,3,204,102,0,1718,167,1,0,0,0,1719,1723,3,166,83,0,
1720,1721,5,31,0,0,1721,1722,5,58,0,0,1722,1724,5,32,0,0,1723,1720,1,0,0,
0,1723,1724,1,0,0,0,1724,169,1,0,0,0,1725,1730,3,168,84,0,1726,1727,5,24,
0,0,1727,1729,3,168,84,0,1728,1726,1,0,0,0,1729,1732,1,0,0,0,1730,1728,1,
0,0,0,1730,1731,1,0,0,0,1731,171,1,0,0,0,1732,1730,1,0,0,0,1733,1734,5,95,
0,0,1734,1735,5,25,0,0,1735,1736,3,158,79,0,1736,1737,5,24,0,0,1737,1738,
3,158,79,0,1738,1739,5,26,0,0,1739,173,1,0,0,0,1740,1741,5,211,0,0,1741,
1742,5,5,0,0,1742,1743,3,204,102,0,1743,1744,5,7,0,0,1744,175,1,0,0,0,1745,
1762,5,302,0,0,1746,1758,5,5,0,0,1747,1752,3,204,102,0,1748,1749,5,24,0,
0,1749,1751,3,204,102,0,1750,1748,1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,
0,0,0,1752,1753,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1755,1757,5,
24,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,1758,1747,1,
0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1763,5,7,0,0,1761,1763,5,
4,0,0,1762,1746,1,0,0,0,1762,1761,1,0,0,0,1763,177,1,0,0,0,1764,1781,5,280,
0,0,1765,1777,5,5,0,0,1766,1771,3,162,81,0,1767,1768,5,24,0,0,1768,1770,
3,162,81,0,1769,1767,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,
1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1774,1776,5,24,0,0,1775,1774,
1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,0,0,1777,1766,1,0,0,0,1777,1778,
1,0,0,0,1778,1779,1,0,0,0,1779,1782,5,7,0,0,1780,1782,5,4,0,0,1781,1765,
1,0,0,0,1781,1780,1,0,0,0,1782,179,1,0,0,0,1783,1784,5,317,0,0,1784,1785,
5,5,0,0,1785,1790,3,166,83,0,1786,1787,5,24,0,0,1787,1789,3,166,83,0,1788,
1786,1,0,0,0,1789,1792,1,0,0,0,1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,
1794,1,0,0,0,1792,1790,1,0,0,0,1793,1795,5,24,0,0,1794,1793,1,0,0,0,1794,
1795,1,0,0,0,1795,1796,1,0,0,0,1796,1797,5,7,0,0,1797,181,1,0,0,0,1798,1799,
5,183,0,0,1799,1800,5,5,0,0,1800,1801,3,204,102,0,1801,1802,5,7,0,0,1802,
183,1,0,0,0,1803,1804,5,279,0,0,1804,1805,5,5,0,0,1805,1806,3,204,102,0,
1806,1807,5,7,0,0,1807,185,1,0,0,0,1808,1809,5,137,0,0,1809,1810,5,5,0,0,
1810,1811,3,204,102,0,1811,1812,5,7,0,0,1812,187,1,0,0,0,1813,1814,5,105,
0,0,1814,1815,5,5,0,0,1815,1816,3,204,102,0,1816,1817,5,24,0,0,1817,1818,
3,204,102,0,1818,1819,5,7,0,0,1819,189,1,0,0,0,1820,1821,5,272,0,0,1821,
1822,5,5,0,0,1822,1823,3,204,102,0,1823,1824,5,7,0,0,1824,191,1,0,0,0,1825,
1826,5,118,0,0,1826,1827,5,5,0,0,1827,1832,3,160,80,0,1828,1829,5,24,0,0,
1829,1831,3,160,80,0,1830,1828,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,
0,1832,1833,1,0,0,0,1833,1836,1,0,0,0,1834,1832,1,0,0,0,1835,1837,5,24,0,
0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,5,7,0,
0,1839,193,1,0,0,0,1840,1841,5,249,0,0,1841,1842,5,5,0,0,1842,1843,3,160,
80,0,1843,1844,5,7,0,0,1844,195,1,0,0,0,1845,1846,5,291,0,0,1846,1847,5,
5,0,0,1847,1848,3,204,102,0,1848,1849,5,24,0,0,1849,1850,3,160,80,0,1850,
1851,5,7,0,0,1851,197,1,0,0,0,1852,1853,5,68,0,0,1853,1854,5,5,0,0,1854,
1856,5,25,0,0,1855,1857,3,170,85,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,
1859,1,0,0,0,1858,1860,5,24,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,
1865,1,0,0,0,1861,1862,5,37,0,0,1862,1863,3,170,85,0,1863,1864,5,36,0,0,
1864,1866,1,0,0,0,1865,1861,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,
1867,1868,5,26,0,0,1868,1869,5,35,0,0,1869,1870,3,204,102,0,1870,1871,5,
7,0,0,1871,199,1,0,0,0,1872,1886,3,174,87,0,1873,1886,3,176,88,0,1874,1886,
3,178,89,0,1875,1886,3,180,90,0,1876,1886,3,182,91,0,1877,1886,3,184,92,
0,1878,1886,3,186,93,0,1879,1886,3,188,94,0,1880,1886,3,190,95,0,1881,1886,
3,192,96,0,1882,1886,3,194,97,0,1883,1886,3,196,98,0,1884,1886,3,198,99,
0,1885,1872,1,0,0,0,1885,1873,1,0,0,0,1885,1874,1,0,0,0,1885,1875,1,0,0,
0,1885,1876,1,0,0,0,1885,1877,1,0,0,0,1885,1878,1,0,0,0,1885,1879,1,0,0,
0,1885,1880,1,0,0,0,1885,1881,1,0,0,0,1885,1882,1,0,0,0,1885,1883,1,0,0,
0,1885,1884,1,0,0,0,1886,1890,1,0,0,0,1887,1889,5,27,0,0,1888,1887,1,0,0,
0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,1,0,0,0,1891,201,1,0,0,0,
1892,1890,1,0,0,0,1893,1905,3,200,100,0,1894,1897,3,172,86,0,1895,1897,3,
156,78,0,1896,1894,1,0,0,0,1896,1895,1,0,0,0,1897,1901,1,0,0,0,1898,1900,
5,27,0,0,1899,1898,1,0,0,0,1900,1903,1,0,0,0,1901,1899,1,0,0,0,1901,1902,
1,0,0,0,1902,1905,1,0,0,0,1903,1901,1,0,0,0,1904,1893,1,0,0,0,1904,1896,
1,0,0,0,1905,203,1,0,0,0,1906,1909,3,202,101,0,1907,1909,3,144,72,0,1908,
1906,1,0,0,0,1908,1907,1,0,0,0,1909,205,1,0,0,0,1910,1911,5,327,0,0,1911,
207,1,0,0,0,1912,1913,5,317,0,0,1913,1914,5,25,0,0,1914,1915,3,14,7,0,1915,
1916,5,24,0,0,1916,1917,3,14,7,0,1917,1918,5,24,0,0,1918,1919,3,14,7,0,1919,
1920,5,26,0,0,1920,1936,1,0,0,0,1921,1922,5,118,0,0,1922,1923,5,25,0,0,1923,
1924,3,14,7,0,1924,1925,5,24,0,0,1925,1926,3,14,7,0,1926,1927,5,26,0,0,1927,
1936,1,0,0,0,1928,1929,5,68,0,0,1929,1930,5,25,0,0,1930,1931,3,14,7,0,1931,
1932,5,24,0,0,1932,1933,3,14,7,0,1933,1934,5,26,0,0,1934,1936,1,0,0,0,1935,
1912,1,0,0,0,1935,1921,1,0,0,0,1935,1928,1,0,0,0,1936,209,1,0,0,0,1937,1938,
5,96,0,0,1938,1939,3,144,72,0,1939,1940,5,49,0,0,1940,1943,3,202,101,0,1941,
1942,5,1,0,0,1942,1944,3,142,71,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,
211,1,0,0,0,1945,1947,5,23,0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,
1948,1,0,0,0,1948,1953,3,828,414,0,1949,1950,5,23,0,0,1950,1952,3,828,414,
0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,1953,1951,1,0,0,0,1953,1954,1,0,0,
0,1954,213,1,0,0,0,1955,1953,1,0,0,0,1956,1957,5,157,0,0,1957,1958,3,212,
106,0,1958,1959,5,283,0,0,1959,1960,3,152,76,0,1960,215,1,0,0,0,1961,1962,
5,129,0,0,1962,1963,3,148,74,0,1963,217,1,0,0,0,1964,1967,3,144,72,0,1965,
1967,5,115,0,0,1966,1964,1,0,0,0,1966,1965,1,0,0,0,1967,1968,1,0,0,0,1968,
1970,5,25,0,0,1969,1971,3,112,56,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,
1972,1,0,0,0,1972,1973,5,26,0,0,1973,219,1,0,0,0,1974,1975,5,63,0,0,1975,
1976,3,658,329,0,1976,1977,5,117,0,0,1977,1978,5,110,0,0,1978,221,1,0,0,
0,1979,1982,5,110,0,0,1980,1983,3,218,109,0,1981,1983,3,220,110,0,1982,1980,
1,0,0,0,1982,1981,1,0,0,0,1983,223,1,0,0,0,1984,1985,5,228,0,0,1985,1986,
3,858,429,0,1986,2000,3,828,414,0,1987,1988,5,1,0,0,1988,2001,3,226,113,
0,1989,1990,5,25,0,0,1990,1995,3,226,113,0,1991,1992,5,24,0,0,1992,1994,
3,226,113,0,1993,1991,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,0,0,0,1995,1996,
1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,1999,5,26,0,0,1999,2001,
1,0,0,0,2000,1987,1,0,0,0,2000,1989,1,0,0,0,2000,2001,1,0,0,0,2001,225,1,
0,0,0,2002,2008,3,154,77,0,2003,2008,3,810,405,0,2004,2008,5,327,0,0,2005,
2008,3,888,444,0,2006,2008,3,144,72,0,2007,2002,1,0,0,0,2007,2003,1,0,0,
0,2007,2004,1,0,0,0,2007,2005,1,0,0,0,2007,2006,1,0,0,0,2008,227,1,0,0,0,
2009,2011,3,14,7,0,2010,2012,7,9,0,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,
2012,229,1,0,0,0,2013,2018,3,228,114,0,2014,2015,5,24,0,0,2015,2017,3,228,
114,0,2016,2014,1,0,0,0,2017,2020,1,0,0,0,2018,2016,1,0,0,0,2018,2019,1,
0,0,0,2019,231,1,0,0,0,2020,2018,1,0,0,0,2021,2027,3,236,118,0,2022,2023,
3,238,119,0,2023,2024,3,236,118,0,2024,2026,1,0,0,0,2025,2022,1,0,0,0,2026,
2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,233,1,0,0,0,2029,2027,
1,0,0,0,2030,2036,3,240,120,0,2031,2032,3,238,119,0,2032,2033,3,236,118,
0,2033,2035,1,0,0,0,2034,2031,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,
0,2036,2037,1,0,0,0,2037,235,1,0,0,0,2038,2036,1,0,0,0,2039,2045,3,240,120,
0,2040,2041,5,25,0,0,2041,2042,3,240,120,0,2042,2043,5,26,0,0,2043,2045,
1,0,0,0,2044,2039,1,0,0,0,2044,2040,1,0,0,0,2045,237,1,0,0,0,2046,2048,5,
306,0,0,2047,2049,5,42,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2053,
1,0,0,0,2050,2053,5,169,0,0,2051,2053,5,123,0,0,2052,2046,1,0,0,0,2052,2050,
1,0,0,0,2052,2051,1,0,0,0,2053,239,1,0,0,0,2054,2061,3,242,121,0,2055,2056,
5,182,0,0,2056,2059,3,14,7,0,2057,2058,7,10,0,0,2058,2060,3,14,7,0,2059,
2057,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,0,0,0,2061,2055,1,0,0,0,2061,
2062,1,0,0,0,2062,241,1,0,0,0,2063,2065,5,108,0,0,2064,2063,1,0,0,0,2064,
2065,1,0,0,0,2065,2069,1,0,0,0,2066,2070,3,244,122,0,2067,2070,3,250,125,
0,2068,2070,3,254,127,0,2069,2066,1,0,0,0,2069,2067,1,0,0,0,2069,2068,1,
0,0,0,2070,2074,1,0,0,0,2071,2072,5,170,0,0,2072,2073,5,254,0,0,2073,2075,
3,116,58,0,2074,2071,1,0,0,0,2074,2075,1,0,0,0,2075,243,1,0,0,0,2076,2078,
5,233,0,0,2077,2079,5,279,0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,
1,0,0,0,2080,2085,3,346,173,0,2081,2082,5,24,0,0,2082,2084,3,346,173,0,2083,
2081,1,0,0,0,2084,2087,1,0,0,0,2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,
2110,1,0,0,0,2087,2085,1,0,0,0,2088,2089,5,314,0,0,2089,2092,3,136,68,0,
2090,2091,5,49,0,0,2091,2093,3,828,414,0,2092,2090,1,0,0,0,2092,2093,1,0,
0,0,2093,2096,1,0,0,0,2094,2095,5,323,0,0,2095,2097,3,248,124,0,2096,2094,
1,0,0,0,2096,2097,1,0,0,0,2097,2100,1,0,0,0,2098,2099,5,321,0,0,2099,2101,
3,14,7,0,2100,2098,1,0,0,0,2100,2101,1,0,0,0,2101,2104,1,0,0,0,2102,2103,
5,151,0,0,2103,2105,3,14,7,0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,2108,
1,0,0,0,2106,2107,5,51,0,0,2107,2109,3,314,157,0,2108,2106,1,0,0,0,2108,
2109,1,0,0,0,2109,2111,1,0,0,0,2110,2088,1,0,0,0,2110,2111,1,0,0,0,2111,
245,1,0,0,0,2112,2113,3,828,414,0,2113,2114,5,1,0,0,2114,2115,3,14,7,0,2115,
247,1,0,0,0,2116,2121,3,246,123,0,2117,2118,5,24,0,0,2118,2120,3,246,123,
0,2119,2117,1,0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,0,2121,2122,1,0,0,
0,2122,249,1,0,0,0,2123,2121,1,0,0,0,2124,2125,5,238,0,0,2125,2130,3,346,
173,0,2126,2127,5,24,0,0,2127,2129,3,346,173,0,2128,2126,1,0,0,0,2129,2132,
1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2135,1,0,0,0,2132,2130,
1,0,0,0,2133,2134,5,230,0,0,2134,2136,3,230,115,0,2135,2133,1,0,0,0,2135,
2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,5,207,0,0,2138,2139,3,124,62,0,
2139,2141,5,314,0,0,2140,2142,5,42,0,0,2141,2140,1,0,0,0,2141,2142,1,0,0,
0,2142,2143,1,0,0,0,2143,2146,3,136,68,0,2144,2145,5,49,0,0,2145,2147,3,
828,414,0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2150,1,0,0,0,2148,2149,
5,321,0,0,2149,2151,3,14,7,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,2154,
1,0,0,0,2152,2153,5,151,0,0,2153,2155,3,14,7,0,2154,2152,1,0,0,0,2154,2155,
1,0,0,0,2155,2158,1,0,0,0,2156,2157,5,51,0,0,2157,2159,3,314,157,0,2158,
2156,1,0,0,0,2158,2159,1,0,0,0,2159,251,1,0,0,0,2160,2162,7,11,0,0,2161,
2160,1,0,0,0,2161,2162,1,0,0,0,2162,253,1,0,0,0,2163,2164,5,141,0,0,2164,
2166,3,338,169,0,2165,2163,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,
2169,5,270,0,0,2168,2170,5,279,0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,
2171,1,0,0,0,2171,2172,3,252,126,0,2172,2177,3,336,168,0,2173,2174,5,24,
0,0,2174,2176,3,336,168,0,2175,2173,1,0,0,0,2176,2179,1,0,0,0,2177,2175,
1,0,0,0,2177,2178,1,0,0,0,2178,2181,1,0,0,0,2179,2177,1,0,0,0,2180,2182,
5,24,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2189,1,0,0,0,2183,2186,
5,324,0,0,2184,2185,5,153,0,0,2185,2187,5,127,0,0,2186,2184,1,0,0,0,2186,
2187,1,0,0,0,2187,2188,1,0,0,0,2188,2190,3,126,63,0,2189,2183,1,0,0,0,2189,
2190,1,0,0,0,2190,2193,1,0,0,0,2191,2192,5,141,0,0,2192,2194,3,338,169,0,
2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,2197,1,0,0,0,2195,2196,5,321,0,
0,2196,2198,3,14,7,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,
0,2199,2201,3,318,159,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2204,1,
0,0,0,2202,2203,5,151,0,0,2203,2205,3,14,7,0,2204,2202,1,0,0,0,2204,2205,
1,0,0,0,2205,2207,1,0,0,0,2206,2208,3,756,378,0,2207,2206,1,0,0,0,2207,2208,
1,0,0,0,2208,2210,1,0,0,0,2209,2211,3,316,158,0,2210,2209,1,0,0,0,2210,2211,
1,0,0,0,2211,255,1,0,0,0,2212,2213,5,189,0,0,2213,2215,5,25,0,0,2214,2216,
3,770,385,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2219,
3,314,157,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2222,
3,262,131,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2224,1,0,0,0,2223,2225,
3,258,129,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,0,0,0,2226,2227,
3,268,134,0,2227,2228,5,26,0,0,2228,257,1,0,0,0,2229,2230,5,208,0,0,2230,
2231,5,263,0,0,2231,2232,5,224,0,0,2232,2241,5,187,0,0,2233,2234,5,42,0,
0,2234,2235,5,264,0,0,2235,2236,5,224,0,0,2236,2238,5,187,0,0,2237,2239,
3,260,130,0,2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2241,1,0,0,0,2240,2229,
1,0,0,0,2240,2233,1,0,0,0,2241,259,1,0,0,0,2242,2243,5,274,0,0,2243,2244,
5,114,0,0,2244,2252,5,188,0,0,2245,2246,5,206,0,0,2246,2247,5,114,0,0,2247,
2252,5,188,0,0,2248,2249,5,323,0,0,2249,2250,5,309,0,0,2250,2252,5,264,0,
0,2251,2242,1,0,0,0,2251,2245,1,0,0,0,2251,2248,1,0,0,0,2252,261,1,0,0,0,
2253,2254,5,190,0,0,2254,2255,3,264,132,0,2255,263,1,0,0,0,2256,2261,3,266,
133,0,2257,2258,5,24,0,0,2258,2260,3,266,133,0,2259,2257,1,0,0,0,2260,2263,
1,0,0,0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,265,1,0,0,0,2263,2261,1,
0,0,0,2264,2265,3,14,7,0,2265,2266,5,49,0,0,2266,2267,3,828,414,0,2267,267,
1,0,0,0,2268,2269,5,41,0,0,2269,2270,5,187,0,0,2270,2272,3,270,135,0,2271,
2268,1,0,0,0,2271,2272,1,0,0,0,2272,2274,1,0,0,0,2273,2275,3,274,137,0,2274,
2273,1,0,0,0,2274,2275,1,0,0,0,2275,2276,1,0,0,0,2276,2277,5,223,0,0,2277,
2278,5,25,0,0,2278,2279,3,276,138,0,2279,2281,5,26,0,0,2280,2282,3,290,145,
0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,2283,1,0,0,0,2283,2284,5,100,
0,0,2284,2285,3,302,151,0,2285,269,1,0,0,0,2286,2287,5,275,0,0,2287,2288,
5,296,0,0,2288,2289,5,196,0,0,2289,2306,5,263,0,0,2290,2291,5,275,0,0,2291,
2292,5,222,0,0,2292,2293,5,178,0,0,2293,2306,5,263,0,0,2294,2295,5,275,0,
0,2295,2296,5,296,0,0,2296,2297,5,135,0,0,2297,2306,3,272,136,0,2298,2299,
5,275,0,0,2299,2300,5,296,0,0,2300,2301,5,178,0,0,2301,2306,3,272,136,0,
2302,2303,5,275,0,0,2303,2304,5,296,0,0,2304,2306,3,272,136,0,2305,2286,
1,0,0,0,2305,2290,1,0,0,0,2305,2294,1,0,0,0,2305,2298,1,0,0,0,2305,2302,
1,0,0,0,2306,271,1,0,0,0,2307,2308,3,312,156,0,2308,273,1,0,0,0,2309,2310,
7,12,0,0,2310,275,1,0,0,0,2311,2316,3,278,139,0,2312,2313,5,12,0,0,2313,
2315,3,278,139,0,2314,2312,1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,
2317,1,0,0,0,2317,277,1,0,0,0,2318,2316,1,0,0,0,2319,2321,3,280,140,0,2320,
2319,1,0,0,0,2321,2322,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,
279,1,0,0,0,2324,2326,3,284,142,0,2325,2327,3,282,141,0,2326,2325,1,0,0,
0,2326,2327,1,0,0,0,2327,281,1,0,0,0,2328,2330,5,19,0,0,2329,2331,5,27,0,
0,2330,2329,1,0,0,0,2330,2331,1,0,0,0,2331,2357,1,0,0,0,2332,2334,5,16,0,
0,2333,2335,5,27,0,0,2334,2333,1,0,0,0,2334,2335,1,0,0,0,2335,2357,1,0,0,
0,2336,2338,5,27,0,0,2337,2339,5,27,0,0,2338,2337,1,0,0,0,2338,2339,1,0,
0,0,2339,2357,1,0,0,0,2340,2342,5,31,0,0,2341,2343,3,892,446,0,2342,2341,
1,0,0,0,2342,2343,1,0,0,0,2343,2344,1,0,0,0,2344,2346,5,24,0,0,2345,2347,
3,892,446,0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2350,
5,32,0,0,2349,2351,5,27,0,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2357,
1,0,0,0,2352,2353,5,31,0,0,2353,2354,3,892,446,0,2354,2355,5,32,0,0,2355,
2357,1,0,0,0,2356,2328,1,0,0,0,2356,2332,1,0,0,0,2356,2336,1,0,0,0,2356,
2340,1,0,0,0,2356,2352,1,0,0,0,2357,283,1,0,0,0,2358,2374,3,286,143,0,2359,
2374,5,30,0,0,2360,2374,5,33,0,0,2361,2363,5,25,0,0,2362,2364,3,276,138,
0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,1,0,0,0,2365,2374,5,26,0,
0,2366,2367,5,31,0,0,2367,2368,5,17,0,0,2368,2369,3,276,138,0,2369,2370,
5,17,0,0,2370,2371,5,32,0,0,2371,2374,1,0,0,0,2372,2374,3,288,144,0,2373,
2358,1,0,0,0,2373,2359,1,0,0,0,2373,2360,1,0,0,0,2373,2361,1,0,0,0,2373,
2366,1,0,0,0,2373,2372,1,0,0,0,2374,285,1,0,0,0,2375,2376,3,312,156,0,2376,
287,1,0,0,0,2377,2378,5,225,0,0,2378,2379,5,25,0,0,2379,2384,3,276,138,0,
2380,2381,5,24,0,0,2381,2383,3,276,138,0,2382,2380,1,0,0,0,2383,2386,1,0,
0,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,2387,1,0,0,0,2386,2384,1,0,
0,0,2387,2388,5,26,0,0,2388,289,1,0,0,0,2389,2390,5,282,0,0,2390,2391,3,
292,146,0,2391,291,1,0,0,0,2392,2397,3,294,147,0,2393,2394,5,24,0,0,2394,
2396,3,294,147,0,2395,2393,1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,2397,
2398,1,0,0,0,2398,293,1,0,0,0,2399,2397,1,0,0,0,2400,2401,3,296,148,0,2401,
2402,5,1,0,0,2402,2403,5,25,0,0,2403,2404,3,298,149,0,2404,2405,5,26,0,0,
2405,295,1,0,0,0,2406,2407,3,312,156,0,2407,297,1,0,0,0,2408,2413,3,300,
150,0,2409,2410,5,24,0,0,2410,2412,3,300,150,0,2411,2409,1,0,0,0,2412,2415,
1,0,0,0,2413,2411,1,0,0,0,2413,2414,1,0,0,0,2414,299,1,0,0,0,2415,2413,1,
0,0,0,2416,2417,3,312,156,0,2417,301,1,0,0,0,2418,2423,3,304,152,0,2419,
2420,5,24,0,0,2420,2422,3,304,152,0,2421,2419,1,0,0,0,2422,2425,1,0,0,0,
2423,2421,1,0,0,0,2423,2424,1,0,0,0,2424,303,1,0,0,0,2425,2423,1,0,0,0,2426,
2427,3,306,153,0,2427,2428,5,49,0,0,2428,2429,3,308,154,0,2429,305,1,0,0,
0,2430,2431,3,312,156,0,2431,307,1,0,0,0,2432,2433,3,310,155,0,2433,309,
1,0,0,0,2434,2435,3,14,7,0,2435,311,1,0,0,0,2436,2437,3,808,404,0,2437,313,
1,0,0,0,2438,2439,5,213,0,0,2439,2440,5,67,0,0,2440,2441,3,230,115,0,2441,
315,1,0,0,0,2442,2444,5,51,0,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,
2445,1,0,0,0,2445,2446,3,314,157,0,2446,317,1,0,0,0,2447,2449,5,147,0,0,
2448,2450,5,79,0,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,2451,1,0,0,0,
2451,2452,5,67,0,0,2452,2453,3,252,126,0,2453,2456,3,320,160,0,2454,2455,
5,323,0,0,2455,2457,3,828,414,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,
319,1,0,0,0,2458,2463,3,322,161,0,2459,2460,5,24,0,0,2460,2462,3,322,161,
0,2461,2459,1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,0,
0,2464,321,1,0,0,0,2465,2463,1,0,0,0,2466,2472,3,324,162,0,2467,2472,3,328,
164,0,2468,2472,3,330,165,0,2469,2472,3,332,166,0,2470,2472,3,334,167,0,
2471,2466,1,0,0,0,2471,2467,1,0,0,0,2471,2468,1,0,0,0,2471,2469,1,0,0,0,
2471,2470,1,0,0,0,2472,323,1,0,0,0,2473,2474,3,128,64,0,2474,325,1,0,0,0,
2475,2480,3,324,162,0,2476,2477,5,24,0,0,2477,2479,3,324,162,0,2478,2476,
1,0,0,0,2479,2482,1,0,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,327,1,
0,0,0,2482,2480,1,0,0,0,2483,2484,5,262,0,0,2484,2485,5,25,0,0,2485,2486,
3,326,163,0,2486,2487,5,26,0,0,2487,329,1,0,0,0,2488,2489,5,88,0,0,2489,
2490,5,25,0,0,2490,2491,3,326,163,0,2491,2492,5,26,0,0,2492,331,1,0,0,0,
2493,2494,5,148,0,0,2494,2495,5,273,0,0,2495,2496,5,25,0,0,2496,2497,3,320,
160,0,2497,2498,5,26,0,0,2498,333,1,0,0,0,2499,2500,5,152,0,0,2500,2501,
5,25,0,0,2501,2502,3,14,7,0,2502,2503,5,24,0,0,2503,2504,3,14,7,0,2504,2505,
5,24,0,0,2505,2506,3,14,7,0,2506,2507,5,24,0,0,2507,2508,3,14,7,0,2508,2509,
5,26,0,0,2509,335,1,0,0,0,2510,2511,3,852,426,0,2511,2512,5,19,0,0,2512,
2520,1,0,0,0,2513,2517,3,14,7,0,2514,2515,5,49,0,0,2515,2518,3,830,415,0,
2516,2518,3,848,424,0,2517,2514,1,0,0,0,2517,2516,1,0,0,0,2517,2518,1,0,
0,0,2518,2520,1,0,0,0,2519,2510,1,0,0,0,2519,2513,1,0,0,0,2520,337,1,0,0,
0,2521,2523,5,47,0,0,2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,2524,1,0,0,
0,2524,2535,3,344,172,0,2525,2527,3,358,179,0,2526,2528,5,47,0,0,2527,2526,
1,0,0,0,2527,2528,1,0,0,0,2528,2529,1,0,0,0,2529,2531,3,344,172,0,2530,2532,
3,360,180,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2534,1,0,0,0,2533,2525,
1,0,0,0,2534,2537,1,0,0,0,2535,2533,1,0,0,0,2535,2536,1,0,0,0,2536,339,1,
0,0,0,2537,2535,1,0,0,0,2538,2541,3,120,60,0,2539,2540,5,49,0,0,2540,2542,
3,828,414,0,2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,341,1,0,0,0,2543,2552,
3,340,170,0,2544,2545,5,25,0,0,2545,2547,3,130,65,0,2546,2548,5,24,0,0,2547,
2546,1,0,0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2550,5,26,0,0,2550,
2552,1,0,0,0,2551,2543,1,0,0,0,2551,2544,1,0,0,0,2552,343,1,0,0,0,2553,2563,
3,346,173,0,2554,2561,5,136,0,0,2555,2557,7,13,0,0,2556,2555,1,0,0,0,2556,
2557,1,0,0,0,2557,2558,1,0,0,0,2558,2559,5,67,0,0,2559,2562,3,342,171,0,
2560,2562,5,77,0,0,2561,2556,1,0,0,0,2561,2560,1,0,0,0,2562,2564,1,0,0,0,
2563,2554,1,0,0,0,2563,2564,1,0,0,0,2564,345,1,0,0,0,2565,2567,3,348,174,
0,2566,2568,3,256,128,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,2577,1,
0,0,0,2569,2570,5,49,0,0,2570,2573,3,828,414,0,2571,2573,3,848,424,0,2572,
2569,1,0,0,0,2572,2571,1,0,0,0,2573,2575,1,0,0,0,2574,2576,3,114,57,0,2575,
2574,1,0,0,0,2575,2576,1,0,0,0,2576,2578,1,0,0,0,2577,2572,1,0,0,0,2577,
2578,1,0,0,0,2578,2581,1,0,0,0,2579,2582,3,350,175,0,2580,2582,3,352,176,
0,2581,2579,1,0,0,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,347,1,0,0,0,
2583,2593,3,664,332,0,2584,2585,5,25,0,0,2585,2586,3,232,116,0,2586,2587,
5,26,0,0,2587,2593,1,0,0,0,2588,2589,5,25,0,0,2589,2590,3,368,184,0,2590,
2591,5,26,0,0,2591,2593,1,0,0,0,2592,2583,1,0,0,0,2592,2584,1,0,0,0,2592,
2588,1,0,0,0,2593,349,1,0,0,0,2594,2595,5,265,0,0,2595,2596,3,14,7,0,2596,
351,1,0,0,0,2597,2598,5,289,0,0,2598,2599,3,354,177,0,2599,2600,5,25,0,0,
2600,2601,3,14,7,0,2601,2603,5,26,0,0,2602,2604,3,356,178,0,2603,2602,1,
0,0,0,2603,2604,1,0,0,0,2604,353,1,0,0,0,2605,2606,7,14,0,0,2606,355,1,0,
0,0,2607,2608,5,245,0,0,2608,2609,5,25,0,0,2609,2610,3,14,7,0,2610,2611,
5,26,0,0,2611,357,1,0,0,0,2612,2637,5,24,0,0,2613,2615,5,195,0,0,2614,2613,
1,0,0,0,2614,2615,1,0,0,0,2615,2633,1,0,0,0,2616,2618,5,179,0,0,2617,2619,
7,15,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2627,1,0,0,0,2620,2622,
5,259,0,0,2621,2623,7,15,0,0,2622,2621,1,0,0,0,2622,2623,1,0,0,0,2623,2627,
1,0,0,0,2624,2627,5,125,0,0,2625,2627,5,142,0,0,2626,2616,1,0,0,0,2626,2620,
1,0,0,0,2626,2624,1,0,0,0,2626,2625,1,0,0,0,2626,2627,1,0,0,0,2627,2629,
1,0,0,0,2628,2630,5,215,0,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2634,
1,0,0,0,2631,2634,5,166,0,0,2632,2634,5,87,0,0,2633,2626,1,0,0,0,2633,2631,
1,0,0,0,2633,2632,1,0,0,0,2634,2635,1,0,0,0,2635,2637,5,173,0,0,2636,2612,
1,0,0,0,2636,2614,1,0,0,0,2637,359,1,0,0,0,2638,2639,5,207,0,0,2639,2643,
3,14,7,0,2640,2641,5,314,0,0,2641,2643,3,118,59,0,2642,2638,1,0,0,0,2642,
2640,1,0,0,0,2643,361,1,0,0,0,2644,2654,5,256,0,0,2645,2655,5,19,0,0,2646,
2651,3,828,414,0,2647,2648,5,24,0,0,2648,2650,3,828,414,0,2649,2647,1,0,
0,0,2650,2653,1,0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,2655,1,0,
0,0,2653,2651,1,0,0,0,2654,2645,1,0,0,0,2654,2646,1,0,0,0,2655,363,1,0,0,
0,2656,2669,5,167,0,0,2657,2658,5,167,0,0,2658,2659,5,212,0,0,2659,2669,
5,38,0,0,2660,2661,5,167,0,0,2661,2662,5,212,0,0,2662,2669,5,257,0,0,2663,
2664,5,167,0,0,2664,2665,5,212,0,0,2665,2669,5,154,0,0,2666,2669,5,311,0,
0,2667,2669,5,246,0,0,2668,2656,1,0,0,0,2668,2657,1,0,0,0,2668,2660,1,0,
0,0,2668,2663,1,0,0,0,2668,2666,1,0,0,0,2668,2667,1,0,0,0,2669,2670,1,0,
0,0,2670,2671,5,170,0,0,2671,2672,3,680,340,0,2672,2674,3,366,183,0,2673,
2675,3,362,181,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,2675,365,1,0,0,0,2676,
2678,3,114,57,0,2677,2676,1,0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,
2683,3,370,185,0,2680,2681,5,97,0,0,2681,2683,5,316,0,0,2682,2677,1,0,0,
0,2682,2680,1,0,0,0,2683,367,1,0,0,0,2684,2685,5,316,0,0,2685,2686,3,372,
186,0,2686,369,1,0,0,0,2687,2690,3,368,184,0,2688,2690,3,232,116,0,2689,
2687,1,0,0,0,2689,2688,1,0,0,0,2690,371,1,0,0,0,2691,2696,3,374,187,0,2692,
2693,5,24,0,0,2693,2695,3,374,187,0,2694,2692,1,0,0,0,2695,2698,1,0,0,0,
2696,2694,1,0,0,0,2696,2697,1,0,0,0,2697,373,1,0,0,0,2698,2696,1,0,0,0,2699,
2700,5,25,0,0,2700,2701,3,112,56,0,2701,2702,5,26,0,0,2702,375,1,0,0,0,2703,
2706,3,112,56,0,2704,2706,3,232,116,0,2705,2703,1,0,0,0,2705,2704,1,0,0,
0,2706,377,1,0,0,0,2707,2710,5,86,0,0,2708,2709,5,212,0,0,2709,2711,5,246,
0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,2713,5,130,
0,0,2713,2714,5,93,0,0,2714,2718,5,277,0,0,2715,2716,5,153,0,0,2716,2717,
5,199,0,0,2717,2719,5,127,0,0,2718,2715,1,0,0,0,2718,2719,1,0,0,0,2719,2720,
1,0,0,0,2720,2721,3,674,337,0,2721,2722,3,456,228,0,2722,379,1,0,0,0,2723,
2724,5,43,0,0,2724,2725,5,130,0,0,2725,2726,5,93,0,0,2726,2727,5,277,0,0,
2727,2728,3,674,337,0,2728,2733,3,382,191,0,2729,2730,5,24,0,0,2730,2732,
3,382,191,0,2731,2729,1,0,0,0,2732,2735,1,0,0,0,2733,2731,1,0,0,0,2733,2734,
1,0,0,0,2734,381,1,0,0,0,2735,2733,1,0,0,0,2736,2740,3,488,244,0,2737,2740,
3,490,245,0,2738,2740,3,492,246,0,2739,2736,1,0,0,0,2739,2737,1,0,0,0,2739,
2738,1,0,0,0,2740,383,1,0,0,0,2741,2742,5,111,0,0,2742,2743,5,130,0,0,2743,
2744,5,93,0,0,2744,2747,5,277,0,0,2745,2746,5,153,0,0,2746,2748,5,127,0,
0,2747,2745,1,0,0,0,2747,2748,1,0,0,0,2748,2749,1,0,0,0,2749,2750,3,674,
337,0,2750,385,1,0,0,0,2751,2752,5,86,0,0,2752,2756,5,318,0,0,2753,2754,
5,153,0,0,2754,2755,5,199,0,0,2755,2757,5,127,0,0,2756,2753,1,0,0,0,2756,
2757,1,0,0,0,2757,2758,1,0,0,0,2758,2760,3,674,337,0,2759,2761,3,394,197,
0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,2762,1,0,0,0,2762,2763,5,49,0,
0,2763,2764,3,232,116,0,2764,387,1,0,0,0,2765,2766,5,111,0,0,2766,2769,5,
318,0,0,2767,2768,5,153,0,0,2768,2770,5,127,0,0,2769,2767,1,0,0,0,2769,2770,
1,0,0,0,2770,2771,1,0,0,0,2771,2772,3,674,337,0,2772,389,1,0,0,0,2773,2774,
5,311,0,0,2774,2775,5,203,0,0,2775,2776,3,674,337,0,2776,2777,5,25,0,0,2777,
2778,5,303,0,0,2778,2779,3,414,207,0,2779,2781,5,26,0,0,2780,2782,3,394,
197,0,2781,2780,1,0,0,0,2781,2782,1,0,0,0,2782,391,1,0,0,0,2783,2784,5,86,
0,0,2784,2788,5,203,0,0,2785,2786,5,153,0,0,2786,2787,5,199,0,0,2787,2789,
5,127,0,0,2788,2785,1,0,0,0,2788,2789,1,0,0,0,2789,2790,1,0,0,0,2790,2791,
3,674,337,0,2791,2792,5,25,0,0,2792,2793,5,303,0,0,2793,2794,3,414,207,0,
2794,2796,5,26,0,0,2795,2797,3,394,197,0,2796,2795,1,0,0,0,2796,2797,1,0,
0,0,2797,393,1,0,0,0,2798,2799,5,323,0,0,2799,2800,3,412,206,0,2800,395,
1,0,0,0,2801,2802,5,43,0,0,2802,2803,5,203,0,0,2803,2804,3,674,337,0,2804,
2805,5,25,0,0,2805,2806,5,303,0,0,2806,2807,3,414,207,0,2807,2808,5,26,0,
0,2808,2809,3,398,199,0,2809,397,1,0,0,0,2810,2811,5,272,0,0,2811,2812,3,
412,206,0,2812,399,1,0,0,0,2813,2814,5,111,0,0,2814,2817,5,203,0,0,2815,
2816,5,153,0,0,2816,2818,5,127,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,2818,
2819,1,0,0,0,2819,2820,3,674,337,0,2820,2821,5,25,0,0,2821,2822,5,303,0,
0,2822,2823,3,414,207,0,2823,2825,5,26,0,0,2824,2826,3,402,201,0,2825,2824,
1,0,0,0,2825,2826,1,0,0,0,2826,401,1,0,0,0,2827,2828,5,323,0,0,2828,2829,
3,412,206,0,2829,403,1,0,0,0,2830,2835,3,856,428,0,2831,2835,3,144,72,0,
2832,2835,5,327,0,0,2833,2835,3,888,444,0,2834,2830,1,0,0,0,2834,2831,1,
0,0,0,2834,2832,1,0,0,0,2834,2833,1,0,0,0,2835,405,1,0,0,0,2836,2837,3,830,
415,0,2837,2838,5,1,0,0,2838,2839,3,404,202,0,2839,407,1,0,0,0,2840,2841,
3,830,415,0,2841,409,1,0,0,0,2842,2845,3,406,203,0,2843,2845,3,408,204,0,
2844,2842,1,0,0,0,2844,2843,1,0,0,0,2845,411,1,0,0,0,2846,2859,3,410,205,
0,2847,2848,5,25,0,0,2848,2853,3,410,205,0,2849,2850,5,24,0,0,2850,2852,
3,410,205,0,2851,2849,1,0,0,0,2852,2855,1,0,0,0,2853,2851,1,0,0,0,2853,2854,
1,0,0,0,2854,2856,1,0,0,0,2855,2853,1,0,0,0,2856,2857,5,26,0,0,2857,2859,
1,0,0,0,2858,2846,1,0,0,0,2858,2847,1,0,0,0,2859,413,1,0,0,0,2860,2861,3,
830,415,0,2861,415,1,0,0,0,2862,2865,5,86,0,0,2863,2864,5,212,0,0,2864,2866,
5,246,0,0,2865,2863,1,0,0,0,2865,2866,1,0,0,0,2866,2875,1,0,0,0,2867,2876,
5,287,0,0,2868,2876,5,290,0,0,2869,2870,5,130,0,0,2870,2876,5,287,0,0,2871,
2872,5,292,0,0,2872,2876,5,287,0,0,2873,2874,5,293,0,0,2874,2876,5,287,0,
0,2875,2867,1,0,0,0,2875,2868,1,0,0,0,2875,2869,1,0,0,0,2875,2871,1,0,0,
0,2875,2873,1,0,0,0,2876,2880,1,0,0,0,2877,2878,5,153,0,0,2878,2879,5,199,
0,0,2879,2881,5,127,0,0,2880,2877,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,
0,0,0,2882,2883,3,678,339,0,2883,2884,5,25,0,0,2884,2889,3,418,209,0,2885,
2886,5,24,0,0,2886,2888,3,418,209,0,2887,2885,1,0,0,0,2888,2891,1,0,0,0,
2889,2887,1,0,0,0,2889,2890,1,0,0,0,2890,2893,1,0,0,0,2891,2889,1,0,0,0,
2892,2894,5,24,0,0,2893,2892,1,0,0,0,2893,2894,1,0,0,0,2894,2895,1,0,0,0,
2895,2897,5,26,0,0,2896,2898,3,452,226,0,2897,2896,1,0,0,0,2897,2898,1,0,
0,0,2898,2900,1,0,0,0,2899,2901,3,454,227,0,2900,2899,1,0,0,0,2900,2901,
1,0,0,0,2901,2903,1,0,0,0,2902,2904,3,456,228,0,2903,2902,1,0,0,0,2903,2904,
1,0,0,0,2904,2906,1,0,0,0,2905,2907,3,458,229,0,2906,2905,1,0,0,0,2906,2907,
1,0,0,0,2907,2909,1,0,0,0,2908,2910,3,462,231,0,2909,2908,1,0,0,0,2909,2910,
1,0,0,0,2910,417,1,0,0,0,2911,2918,3,510,255,0,2912,2918,3,518,259,0,2913,
2918,3,520,260,0,2914,2918,3,554,277,0,2915,2918,3,536,268,0,2916,2918,3,
832,416,0,2917,2911,1,0,0,0,2917,2912,1,0,0,0,2917,2913,1,0,0,0,2917,2914,
1,0,0,0,2917,2915,1,0,0,0,2917,2916,1,0,0,0,2918,419,1,0,0,0,2919,2920,5,
86,0,0,2920,2922,3,440,220,0,2921,2923,3,426,213,0,2922,2921,1,0,0,0,2922,
2923,1,0,0,0,2923,2924,1,0,0,0,2924,2925,5,323,0,0,2925,2926,5,25,0,0,2926,
2927,3,442,221,0,2927,2928,5,26,0,0,2928,421,1,0,0,0,2929,2930,5,43,0,0,
2930,2933,3,440,220,0,2931,2934,3,432,216,0,2932,2934,3,436,218,0,2933,2931,
1,0,0,0,2933,2932,1,0,0,0,2934,423,1,0,0,0,2935,2936,5,111,0,0,2936,2937,
3,440,220,0,2937,425,1,0,0,0,2938,2941,5,94,0,0,2939,2941,3,428,214,0,2940,
2938,1,0,0,0,2940,2939,1,0,0,0,2941,427,1,0,0,0,2942,2943,5,25,0,0,2943,
2944,3,430,215,0,2944,2945,5,26,0,0,2945,429,1,0,0,0,2946,2947,5,287,0,0,
2947,2953,3,840,420,0,2948,2949,5,24,0,0,2949,2950,5,287,0,0,2950,2952,3,
840,420,0,2951,2948,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,0,2953,2954,
1,0,0,0,2954,431,1,0,0,0,2955,2953,1,0,0,0,2956,2961,3,434,217,0,2957,2958,
5,24,0,0,2958,2960,3,434,217,0,2959,2957,1,0,0,0,2960,2963,1,0,0,0,2961,
2959,1,0,0,0,2961,2962,1,0,0,0,2962,433,1,0,0,0,2963,2961,1,0,0,0,2964,2967,
3,490,245,0,2965,2967,3,492,246,0,2966,2964,1,0,0,0,2966,2965,1,0,0,0,2967,
435,1,0,0,0,2968,2973,3,438,219,0,2969,2970,5,24,0,0,2970,2972,3,438,219,
0,2971,2969,1,0,0,0,2972,2975,1,0,0,0,2973,2971,1,0,0,0,2973,2974,1,0,0,
0,2974,437,1,0,0,0,2975,2973,1,0,0,0,2976,2977,5,40,0,0,2977,2987,5,94,0,
0,2978,2979,5,111,0,0,2979,2987,5,94,0,0,2980,2981,5,40,0,0,2981,2982,5,
287,0,0,2982,2987,3,840,420,0,2983,2984,5,111,0,0,2984,2985,5,287,0,0,2985,
2987,3,840,420,0,2986,2976,1,0,0,0,2986,2978,1,0,0,0,2986,2980,1,0,0,0,2986,
2983,1,0,0,0,2987,439,1,0,0,0,2988,2989,5,59,0,0,2989,2990,5,61,0,0,2990,
2991,3,674,337,0,2991,441,1,0,0,0,2992,2997,3,444,222,0,2993,2994,5,24,0,
0,2994,2996,3,444,222,0,2995,2993,1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,
0,0,0,2997,2998,1,0,0,0,2998,443,1,0,0,0,2999,2997,1,0,0,0,3000,3001,3,828,
414,0,3001,3002,5,1,0,0,3002,3003,3,548,274,0,3003,445,1,0,0,0,3004,3005,
5,59,0,0,3005,3007,3,674,337,0,3006,3008,5,160,0,0,3007,3006,1,0,0,0,3007,
3008,1,0,0,0,3008,447,1,0,0,0,3009,3010,5,252,0,0,3010,3013,3,674,337,0,
3011,3012,5,54,0,0,3012,3014,5,327,0,0,3013,3011,1,0,0,0,3013,3014,1,0,0,
0,3014,449,1,0,0,0,3015,3016,5,43,0,0,3016,3017,5,94,0,0,3017,3018,3,832,
416,0,3018,3019,5,217,0,0,3019,3020,5,296,0,0,3020,3021,3,580,290,0,3021,
451,1,0,0,0,3022,3023,5,163,0,0,3023,3024,5,25,0,0,3024,3029,3,676,338,0,
3025,3026,5,24,0,0,3026,3028,3,676,338,0,3027,3025,1,0,0,0,3028,3031,1,0,
0,0,3029,3027,1,0,0,0,3029,3030,1,0,0,0,3030,3032,1,0,0,0,3031,3029,1,0,
0,0,3032,3033,5,26,0,0,3033,453,1,0,0,0,3034,3035,5,219,0,0,3035,3036,5,
67,0,0,3036,3037,5,150,0,0,3037,3038,3,114,57,0,3038,455,1,0,0,0,3039,3040,
5,323,0,0,3040,3041,5,25,0,0,3041,3046,3,460,230,0,3042,3043,5,24,0,0,3043,
3045,3,460,230,0,3044,3042,1,0,0,0,3045,3048,1,0,0,0,3046,3044,1,0,0,0,3046,
3047,1,0,0,0,3047,3049,1,0,0,0,3048,3046,1,0,0,0,3049,3050,5,26,0,0,3050,
457,1,0,0,0,3051,3052,5,290,0,0,3052,3053,3,676,338,0,3053,459,1,0,0,0,3054,
3055,3,828,414,0,3055,3056,5,1,0,0,3056,3057,3,548,274,0,3057,461,1,0,0,
0,3058,3059,5,49,0,0,3059,3060,3,370,185,0,3060,463,1,0,0,0,3061,3062,5,
43,0,0,3062,3063,5,287,0,0,3063,3064,3,678,339,0,3064,3069,3,466,233,0,3065,
3066,5,24,0,0,3066,3068,3,466,233,0,3067,3065,1,0,0,0,3068,3071,1,0,0,0,
3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,465,1,0,0,0,3071,3069,1,0,0,0,3072,
3090,3,476,238,0,3073,3090,3,478,239,0,3074,3090,3,480,240,0,3075,3090,3,
484,242,0,3076,3090,3,486,243,0,3077,3090,3,488,244,0,3078,3090,3,490,245,
0,3079,3090,3,492,246,0,3080,3090,3,494,247,0,3081,3090,3,496,248,0,3082,
3090,3,498,249,0,3083,3090,3,502,251,0,3084,3090,3,504,252,0,3085,3090,3,
506,253,0,3086,3090,3,500,250,0,3087,3090,3,508,254,0,3088,3090,3,482,241,
0,3089,3072,1,0,0,0,3089,3073,1,0,0,0,3089,3074,1,0,0,0,3089,3075,1,0,0,
0,3089,3076,1,0,0,0,3089,3077,1,0,0,0,3089,3078,1,0,0,0,3089,3079,1,0,0,
0,3089,3080,1,0,0,0,3089,3081,1,0,0,0,3089,3082,1,0,0,0,3089,3083,1,0,0,
0,3089,3084,1,0,0,0,3089,3085,1,0,0,0,3089,3086,1,0,0,0,3089,3087,1,0,0,
0,3089,3088,1,0,0,0,3090,467,1,0,0,0,3091,3092,5,43,0,0,3092,3093,5,130,
0,0,3093,3094,5,287,0,0,3094,3095,3,678,339,0,3095,3100,3,470,235,0,3096,
3097,5,24,0,0,3097,3099,3,470,235,0,3098,3096,1,0,0,0,3099,3102,1,0,0,0,
3100,3098,1,0,0,0,3100,3101,1,0,0,0,3101,469,1,0,0,0,3102,3100,1,0,0,0,3103,
3109,3,476,238,0,3104,3109,3,478,239,0,3105,3109,3,488,244,0,3106,3109,3,
490,245,0,3107,3109,3,492,246,0,3108,3103,1,0,0,0,3108,3104,1,0,0,0,3108,
3105,1,0,0,0,3108,3106,1,0,0,0,3108,3107,1,0,0,0,3109,471,1,0,0,0,3110,3111,
5,43,0,0,3111,3112,5,290,0,0,3112,3113,3,674,337,0,3113,3118,3,474,237,0,
3114,3115,5,24,0,0,3115,3117,3,474,237,0,3116,3114,1,0,0,0,3117,3120,1,0,
0,0,3118,3116,1,0,0,0,3118,3119,1,0,0,0,3119,473,1,0,0,0,3120,3118,1,0,0,
0,3121,3124,3,476,238,0,3122,3124,3,478,239,0,3123,3121,1,0,0,0,3123,3122,
1,0,0,0,3124,475,1,0,0,0,3125,3127,5,40,0,0,3126,3128,5,76,0,0,3127,3126,
1,0,0,0,3127,3128,1,0,0,0,3128,3129,1,0,0,0,3129,3130,3,510,255,0,3130,477,
1,0,0,0,3131,3133,5,111,0,0,3132,3134,5,76,0,0,3133,3132,1,0,0,0,3133,3134,
1,0,0,0,3134,3135,1,0,0,0,3135,3136,3,828,414,0,3136,479,1,0,0,0,3137,3138,
5,43,0,0,3138,3139,5,76,0,0,3139,3140,3,828,414,0,3140,3141,5,272,0,0,3141,
3142,3,512,256,0,3142,481,1,0,0,0,3143,3144,5,43,0,0,3144,3145,5,76,0,0,
3145,3146,3,828,414,0,3146,3147,5,111,0,0,3147,3148,5,199,0,0,3148,3149,
5,201,0,0,3149,483,1,0,0,0,3150,3151,5,40,0,0,3151,3152,3,554,277,0,3152,
485,1,0,0,0,3153,3154,5,43,0,0,3154,3155,5,133,0,0,3155,3156,3,828,414,0,
3156,3157,5,272,0,0,3157,3158,3,828,414,0,3158,3159,3,560,280,0,3159,487,
1,0,0,0,3160,3161,5,272,0,0,3161,3162,3,828,414,0,3162,3163,3,548,274,0,
3163,489,1,0,0,0,3164,3165,5,272,0,0,3165,3166,5,25,0,0,3166,3171,3,546,
273,0,3167,3168,5,24,0,0,3168,3170,3,546,273,0,3169,3167,1,0,0,0,3170,3173,
1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,3174,1,0,0,0,3173,3171,
1,0,0,0,3174,3175,5,26,0,0,3175,491,1,0,0,0,3176,3177,5,248,0,0,3177,3178,
5,25,0,0,3178,3183,3,828,414,0,3179,3180,5,24,0,0,3180,3182,3,828,414,0,
3181,3179,1,0,0,0,3182,3185,1,0,0,0,3183,3181,1,0,0,0,3183,3184,1,0,0,0,
3184,3186,1,0,0,0,3185,3183,1,0,0,0,3186,3187,5,26,0,0,3187,493,1,0,0,0,
3188,3189,5,40,0,0,3189,3190,3,520,260,0,3190,495,1,0,0,0,3191,3192,5,111,
0,0,3192,3193,5,161,0,0,3193,3194,3,828,414,0,3194,497,1,0,0,0,3195,3196,
5,244,0,0,3196,3197,5,296,0,0,3197,3198,3,840,420,0,3198,499,1,0,0,0,3199,
3200,5,244,0,0,3200,3201,5,161,0,0,3201,3202,3,828,414,0,3202,3203,5,296,
0,0,3203,3204,3,828,414,0,3204,501,1,0,0,0,3205,3206,5,40,0,0,3206,3207,
3,536,268,0,3207,503,1,0,0,0,3208,3209,5,43,0,0,3209,3210,5,72,0,0,3210,
3211,3,828,414,0,3211,3212,3,544,272,0,3212,505,1,0,0,0,3213,3214,5,111,
0,0,3214,3215,5,72,0,0,3215,3216,3,828,414,0,3216,507,1,0,0,0,3217,3218,
5,43,0,0,3218,3219,5,161,0,0,3219,3220,3,828,414,0,3220,3221,3,566,283,0,
3221,509,1,0,0,0,3222,3223,3,832,416,0,3223,3225,3,204,102,0,3224,3226,3,
512,256,0,3225,3224,1,0,0,0,3225,3226,1,0,0,0,3226,3227,1,0,0,0,3227,3228,
3,514,257,0,3228,511,1,0,0,0,3229,3230,5,133,0,0,3230,3231,3,828,414,0,3231,
513,1,0,0,0,3232,3234,5,199,0,0,3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,
3235,1,0,0,0,3235,3237,5,201,0,0,3236,3233,1,0,0,0,3236,3237,1,0,0,0,3237,
3240,1,0,0,0,3238,3239,5,97,0,0,3239,3241,3,14,7,0,3240,3238,1,0,0,0,3240,
3241,1,0,0,0,3241,515,1,0,0,0,3242,3244,3,828,414,0,3243,3245,7,9,0,0,3244,
3243,1,0,0,0,3244,3245,1,0,0,0,3245,517,1,0,0,0,3246,3247,5,231,0,0,3247,
3248,5,177,0,0,3248,3249,5,25,0,0,3249,3254,3,828,414,0,3250,3251,5,24,0,
0,3251,3253,3,828,414,0,3252,3250,1,0,0,0,3253,3256,1,0,0,0,3254,3252,1,
0,0,0,3254,3255,1,0,0,0,3255,3257,1,0,0,0,3256,3254,1,0,0,0,3257,3258,5,
26,0,0,3258,3286,1,0,0,0,3259,3260,5,219,0,0,3260,3261,5,67,0,0,3261,3262,
5,25,0,0,3262,3267,3,828,414,0,3263,3264,5,24,0,0,3264,3266,3,828,414,0,
3265,3263,1,0,0,0,3266,3269,1,0,0,0,3267,3265,1,0,0,0,3267,3268,1,0,0,0,
3268,3270,1,0,0,0,3269,3267,1,0,0,0,3270,3271,5,26,0,0,3271,3286,1,0,0,0,
3272,3273,5,213,0,0,3273,3274,5,67,0,0,3274,3275,5,25,0,0,3275,3280,3,516,
258,0,3276,3277,5,24,0,0,3277,3279,3,516,258,0,3278,3276,1,0,0,0,3279,3282,
1,0,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,3283,1,0,0,0,3282,3280,
1,0,0,0,3283,3284,5,26,0,0,3284,3286,1,0,0,0,3285,3246,1,0,0,0,3285,3259,
1,0,0,0,3285,3272,1,0,0,0,3286,519,1,0,0,0,3287,3288,5,161,0,0,3288,3289,
3,828,414,0,3289,3290,3,522,261,0,3290,3291,5,207,0,0,3291,3292,5,25,0,0,
3292,3297,3,832,416,0,3293,3294,5,24,0,0,3294,3296,3,832,416,0,3295,3293,
1,0,0,0,3296,3299,1,0,0,0,3297,3295,1,0,0,0,3297,3298,1,0,0,0,3298,3300,
1,0,0,0,3299,3297,1,0,0,0,3300,3313,5,26,0,0,3301,3302,5,85,0,0,3302,3303,
5,25,0,0,3303,3308,3,832,416,0,3304,3305,5,24,0,0,3305,3307,3,832,416,0,
3306,3304,1,0,0,0,3307,3310,1,0,0,0,3308,3306,1,0,0,0,3308,3309,1,0,0,0,
3309,3311,1,0,0,0,3310,3308,1,0,0,0,3311,3312,5,26,0,0,3312,3314,1,0,0,0,
3313,3301,1,0,0,0,3313,3314,1,0,0,0,3314,3316,1,0,0,0,3315,3317,3,530,265,
0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,521,1,0,0,0,3318,3321,3,524,262,
0,3319,3321,3,526,263,0,3320,3318,1,0,0,0,3320,3319,1,0,0,0,3321,3324,1,
0,0,0,3322,3323,5,314,0,0,3323,3325,3,528,264,0,3324,3322,1,0,0,0,3324,3325,
1,0,0,0,3325,523,1,0,0,0,3326,3328,5,145,0,0,3327,3329,5,307,0,0,3328,3327,
1,0,0,0,3328,3329,1,0,0,0,3329,3331,1,0,0,0,3330,3332,7,16,0,0,3331,3330,
1,0,0,0,3331,3332,1,0,0,0,3332,525,1,0,0,0,3333,3334,5,184,0,0,3334,527,
1,0,0,0,3335,3336,3,828,414,0,3336,529,1,0,0,0,3337,3338,5,323,0,0,3338,
3339,5,25,0,0,3339,3344,3,532,266,0,3340,3341,5,24,0,0,3341,3343,3,532,266,
0,3342,3340,1,0,0,0,3343,3346,1,0,0,0,3344,3342,1,0,0,0,3344,3345,1,0,0,
0,3345,3348,1,0,0,0,3346,3344,1,0,0,0,3347,3349,5,24,0,0,3348,3347,1,0,0,
0,3348,3349,1,0,0,0,3349,3350,1,0,0,0,3350,3351,5,26,0,0,3351,531,1,0,0,
0,3352,3353,3,828,414,0,3353,3354,5,1,0,0,3354,3355,3,534,267,0,3355,533,
1,0,0,0,3356,3361,3,856,428,0,3357,3361,5,327,0,0,3358,3361,3,892,446,0,
3359,3361,3,888,444,0,3360,3356,1,0,0,0,3360,3357,1,0,0,0,3360,3358,1,0,
0,0,3360,3359,1,0,0,0,3361,535,1,0,0,0,3362,3363,5,72,0,0,3363,3364,3,828,
414,0,3364,3365,5,323,0,0,3365,3366,5,25,0,0,3366,3367,3,538,269,0,3367,
3368,5,26,0,0,3368,537,1,0,0,0,3369,3374,3,540,270,0,3370,3371,5,24,0,0,
3371,3373,3,540,270,0,3372,3370,1,0,0,0,3373,3376,1,0,0,0,3374,3372,1,0,
0,0,3374,3375,1,0,0,0,3375,539,1,0,0,0,3376,3374,1,0,0,0,3377,3378,3,828,
414,0,3378,3379,5,1,0,0,3379,3380,3,542,271,0,3380,541,1,0,0,0,3381,3382,
3,14,7,0,3382,543,1,0,0,0,3383,3390,5,107,0,0,3384,3385,5,272,0,0,3385,3386,
5,25,0,0,3386,3387,3,538,269,0,3387,3388,5,26,0,0,3388,3390,1,0,0,0,3389,
3383,1,0,0,0,3389,3384,1,0,0,0,3390,545,1,0,0,0,3391,3392,3,828,414,0,3392,
3393,5,1,0,0,3393,3394,3,548,274,0,3394,547,1,0,0,0,3395,3408,3,810,405,
0,3396,3408,5,327,0,0,3397,3408,3,892,446,0,3398,3408,3,562,281,0,3399,3400,
3,550,275,0,3400,3401,5,207,0,0,3401,3404,3,828,414,0,3402,3403,5,49,0,0,
3403,3405,7,17,0,0,3404,3402,1,0,0,0,3404,3405,1,0,0,0,3405,3408,1,0,0,0,
3406,3408,3,888,444,0,3407,3395,1,0,0,0,3407,3396,1,0,0,0,3407,3397,1,0,
0,0,3407,3398,1,0,0,0,3407,3399,1,0,0,0,3407,3406,1,0,0,0,3408,549,1,0,0,
0,3409,3420,3,14,7,0,3410,3417,3,552,276,0,3411,3412,5,24,0,0,3412,3413,
3,14,7,0,3413,3414,3,552,276,0,3414,3416,1,0,0,0,3415,3411,1,0,0,0,3416,
3419,1,0,0,0,3417,3415,1,0,0,0,3417,3418,1,0,0,0,3418,3421,1,0,0,0,3419,
3417,1,0,0,0,3420,3410,1,0,0,0,3420,3421,1,0,0,0,3421,551,1,0,0,0,3422,3423,
5,296,0,0,3423,3424,5,130,0,0,3424,3425,5,93,0,0,3425,3426,5,277,0,0,3426,
3429,3,828,414,0,3427,3429,5,101,0,0,3428,3422,1,0,0,0,3428,3427,1,0,0,0,
3429,553,1,0,0,0,3430,3431,5,133,0,0,3431,3432,3,828,414,0,3432,3433,3,556,
278,0,3433,555,1,0,0,0,3434,3443,5,25,0,0,3435,3440,3,558,279,0,3436,3437,
5,24,0,0,3437,3439,3,558,279,0,3438,3436,1,0,0,0,3439,3442,1,0,0,0,3440,
3438,1,0,0,0,3440,3441,1,0,0,0,3441,3444,1,0,0,0,3442,3440,1,0,0,0,3443,
3435,1,0,0,0,3443,3444,1,0,0,0,3444,3445,1,0,0,0,3445,3446,5,26,0,0,3446,
557,1,0,0,0,3447,3448,3,828,414,0,3448,3449,5,1,0,0,3449,3450,3,560,280,
0,3450,559,1,0,0,0,3451,3454,5,327,0,0,3452,3454,3,892,446,0,3453,3451,1,
0,0,0,3453,3452,1,0,0,0,3454,561,1,0,0,0,3455,3456,5,25,0,0,3456,3461,3,
564,282,0,3457,3458,5,24,0,0,3458,3460,3,564,282,0,3459,3457,1,0,0,0,3460,
3463,1,0,0,0,3461,3459,1,0,0,0,3461,3462,1,0,0,0,3462,3464,1,0,0,0,3463,
3461,1,0,0,0,3464,3465,5,26,0,0,3465,3468,1,0,0,0,3466,3468,3,564,282,0,
3467,3455,1,0,0,0,3467,3466,1,0,0,0,3468,563,1,0,0,0,3469,3470,5,25,0,0,
3470,3475,3,142,71,0,3471,3472,5,24,0,0,3472,3474,3,142,71,0,3473,3471,1,
0,0,0,3474,3477,1,0,0,0,3475,3473,1,0,0,0,3475,3476,1,0,0,0,3476,3478,1,
0,0,0,3477,3475,1,0,0,0,3478,3479,5,26,0,0,3479,565,1,0,0,0,3480,3484,3,
488,244,0,3481,3484,3,490,245,0,3482,3484,3,492,246,0,3483,3480,1,0,0,0,
3483,3481,1,0,0,0,3483,3482,1,0,0,0,3484,567,1,0,0,0,3485,3490,5,111,0,0,
3486,3491,5,287,0,0,3487,3491,5,290,0,0,3488,3489,5,130,0,0,3489,3491,5,
287,0,0,3490,3486,1,0,0,0,3490,3487,1,0,0,0,3490,3488,1,0,0,0,3491,3494,
1,0,0,0,3492,3493,5,153,0,0,3493,3495,5,127,0,0,3494,3492,1,0,0,0,3494,3495,
1,0,0,0,3495,3496,1,0,0,0,3496,3497,3,678,339,0,3497,569,1,0,0,0,3498,3499,
5,86,0,0,3499,3500,5,313,0,0,3500,3504,3,580,290,0,3501,3503,3,582,291,0,
3502,3501,1,0,0,0,3503,3506,1,0,0,0,3504,3502,1,0,0,0,3504,3505,1,0,0,0,
3505,571,1,0,0,0,3506,3504,1,0,0,0,3507,3508,5,43,0,0,3508,3509,5,313,0,
0,3509,3521,3,580,290,0,3510,3512,5,323,0,0,3511,3510,1,0,0,0,3511,3512,
1,0,0,0,3512,3514,1,0,0,0,3513,3515,3,582,291,0,3514,3513,1,0,0,0,3515,3516,
1,0,0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,3522,1,0,0,0,3518,3519,
5,244,0,0,3519,3520,5,296,0,0,3520,3522,3,580,290,0,3521,3511,1,0,0,0,3521,
3518,1,0,0,0,3522,573,1,0,0,0,3523,3524,5,86,0,0,3524,3525,5,147,0,0,3525,
3539,3,580,290,0,3526,3527,5,323,0,0,3527,3528,5,313,0,0,3528,3533,3,580,
290,0,3529,3530,5,24,0,0,3530,3532,3,580,290,0,3531,3529,1,0,0,0,3532,3535,
1,0,0,0,3533,3531,1,0,0,0,3533,3534,1,0,0,0,3534,3537,1,0,0,0,3535,3533,
1,0,0,0,3536,3538,5,24,0,0,3537,3536,1,0,0,0,3537,3538,1,0,0,0,3538,3540,
1,0,0,0,3539,3526,1,0,0,0,3539,3540,1,0,0,0,3540,575,1,0,0,0,3541,3542,5,
43,0,0,3542,3543,5,147,0,0,3543,3560,3,580,290,0,3544,3545,7,18,0,0,3545,
3546,5,313,0,0,3546,3551,3,580,290,0,3547,3548,5,24,0,0,3548,3550,3,580,
290,0,3549,3547,1,0,0,0,3550,3553,1,0,0,0,3551,3549,1,0,0,0,3551,3552,1,
0,0,0,3552,3555,1,0,0,0,3553,3551,1,0,0,0,3554,3556,5,24,0,0,3555,3554,1,
0,0,0,3555,3556,1,0,0,0,3556,3561,1,0,0,0,3557,3558,5,244,0,0,3558,3559,
5,296,0,0,3559,3561,3,580,290,0,3560,3544,1,0,0,0,3560,3557,1,0,0,0,3561,
577,1,0,0,0,3562,3563,5,111,0,0,3563,3566,7,19,0,0,3564,3565,5,153,0,0,3565,
3567,5,127,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,3568,1,0,0,0,3568,
3573,3,580,290,0,3569,3570,5,24,0,0,3570,3572,3,580,290,0,3571,3569,1,0,
0,0,3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,0,3574,3577,1,0,
0,0,3575,3573,1,0,0,0,3576,3578,5,24,0,0,3577,3576,1,0,0,0,3577,3578,1,0,
0,0,3578,579,1,0,0,0,3579,3582,3,830,415,0,3580,3582,3,144,72,0,3581,3579,
1,0,0,0,3581,3580,1,0,0,0,3582,581,1,0,0,0,3583,3586,3,584,292,0,3584,3586,
3,592,296,0,3585,3583,1,0,0,0,3585,3584,1,0,0,0,3586,583,1,0,0,0,3587,3590,
3,586,293,0,3588,3590,3,590,295,0,3589,3587,1,0,0,0,3589,3588,1,0,0,0,3590,
585,1,0,0,0,3591,3593,5,116,0,0,3592,3591,1,0,0,0,3592,3593,1,0,0,0,3593,
3594,1,0,0,0,3594,3595,5,221,0,0,3595,3596,3,588,294,0,3596,587,1,0,0,0,
3597,3598,7,20,0,0,3598,589,1,0,0,0,3599,3600,5,150,0,0,3600,3601,5,327,
0,0,3601,591,1,0,0,0,3602,3603,7,21,0,0,3603,593,1,0,0,0,3604,3605,5,146,
0,0,3605,3606,3,602,301,0,3606,3607,5,207,0,0,3607,3612,3,832,416,0,3608,
3609,5,24,0,0,3609,3611,3,832,416,0,3610,3608,1,0,0,0,3611,3614,1,0,0,0,
3612,3610,1,0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,3612,1,0,0,0,
3615,3616,5,296,0,0,3616,3621,3,580,290,0,3617,3618,5,24,0,0,3618,3620,3,
580,290,0,3619,3617,1,0,0,0,3620,3623,1,0,0,0,3621,3619,1,0,0,0,3621,3622,
1,0,0,0,3622,3625,1,0,0,0,3623,3621,1,0,0,0,3624,3626,5,24,0,0,3625,3624,
1,0,0,0,3625,3626,1,0,0,0,3626,3630,1,0,0,0,3627,3628,5,323,0,0,3628,3629,
5,146,0,0,3629,3631,5,210,0,0,3630,3627,1,0,0,0,3630,3631,1,0,0,0,3631,595,
1,0,0,0,3632,3636,5,258,0,0,3633,3634,5,146,0,0,3634,3635,5,210,0,0,3635,
3637,5,139,0,0,3636,3633,1,0,0,0,3636,3637,1,0,0,0,3637,3638,1,0,0,0,3638,
3639,3,602,301,0,3639,3640,5,207,0,0,3640,3645,3,832,416,0,3641,3642,5,24,
0,0,3642,3644,3,832,416,0,3643,3641,1,0,0,0,3644,3647,1,0,0,0,3645,3643,
1,0,0,0,3645,3646,1,0,0,0,3646,3648,1,0,0,0,3647,3645,1,0,0,0,3648,3649,
5,141,0,0,3649,3654,3,580,290,0,3650,3651,5,24,0,0,3651,3653,3,580,290,0,
3652,3650,1,0,0,0,3653,3656,1,0,0,0,3654,3652,1,0,0,0,3654,3655,1,0,0,0,
3655,597,1,0,0,0,3656,3654,1,0,0,0,3657,3682,5,82,0,0,3658,3682,5,183,0,
0,3659,3682,5,167,0,0,3660,3682,5,186,0,0,3661,3682,5,111,0,0,3662,3682,
5,146,0,0,3663,3664,5,193,0,0,3664,3682,7,22,0,0,3665,3666,7,23,0,0,3666,
3682,5,263,0,0,3667,3668,7,24,0,0,3668,3682,5,267,0,0,3669,3671,5,270,0,
0,3670,3672,7,25,0,0,3671,3670,1,0,0,0,3671,3672,1,0,0,0,3672,3682,1,0,0,
0,3673,3675,7,26,0,0,3674,3676,5,180,0,0,3675,3674,1,0,0,0,3675,3676,1,0,
0,0,3676,3682,1,0,0,0,3677,3679,5,86,0,0,3678,3680,7,27,0,0,3679,3678,1,
0,0,0,3679,3680,1,0,0,0,3680,3682,1,0,0,0,3681,3657,1,0,0,0,3681,3658,1,
0,0,0,3681,3659,1,0,0,0,3681,3660,1,0,0,0,3681,3661,1,0,0,0,3681,3662,1,
0,0,0,3681,3663,1,0,0,0,3681,3665,1,0,0,0,3681,3667,1,0,0,0,3681,3669,1,
0,0,0,3681,3673,1,0,0,0,3681,3677,1,0,0,0,3682,599,1,0,0,0,3683,3686,3,598,
299,0,3684,3686,5,327,0,0,3685,3683,1,0,0,0,3685,3684,1,0,0,0,3686,601,1,
0,0,0,3687,3692,3,600,300,0,3688,3689,5,24,0,0,3689,3691,3,600,300,0,3690,
3688,1,0,0,0,3691,3694,1,0,0,0,3692,3690,1,0,0,0,3692,3693,1,0,0,0,3693,
3696,1,0,0,0,3694,3692,1,0,0,0,3695,3697,5,24,0,0,3696,3695,1,0,0,0,3696,
3697,1,0,0,0,3697,3703,1,0,0,0,3698,3700,5,42,0,0,3699,3701,5,232,0,0,3700,
3699,1,0,0,0,3700,3701,1,0,0,0,3701,3703,1,0,0,0,3702,3687,1,0,0,0,3702,
3698,1,0,0,0,3703,603,1,0,0,0,3704,3705,5,86,0,0,3705,3706,5,249,0,0,3706,
3707,5,227,0,0,3707,3708,3,674,337,0,3708,3709,3,456,228,0,3709,605,1,0,
0,0,3710,3711,5,43,0,0,3711,3712,5,249,0,0,3712,3713,5,227,0,0,3713,3714,
3,674,337,0,3714,3719,3,608,304,0,3715,3716,5,24,0,0,3716,3718,3,608,304,
0,3717,3715,1,0,0,0,3718,3721,1,0,0,0,3719,3717,1,0,0,0,3719,3720,1,0,0,
0,3720,607,1,0,0,0,3721,3719,1,0,0,0,3722,3725,3,490,245,0,3723,3725,3,492,
246,0,3724,3722,1,0,0,0,3724,3723,1,0,0,0,3725,609,1,0,0,0,3726,3727,5,111,
0,0,3727,3728,5,249,0,0,3728,3729,5,227,0,0,3729,3730,3,674,337,0,3730,611,
1,0,0,0,3731,3732,5,86,0,0,3732,3733,5,249,0,0,3733,3734,5,227,0,0,3734,
3735,5,74,0,0,3735,3736,3,674,337,0,3736,3737,3,456,228,0,3737,613,1,0,0,
0,3738,3739,5,43,0,0,3739,3740,5,249,0,0,3740,3741,5,227,0,0,3741,3742,5,
74,0,0,3742,3743,3,674,337,0,3743,3748,3,616,308,0,3744,3745,5,24,0,0,3745,
3747,3,616,308,0,3746,3744,1,0,0,0,3747,3750,1,0,0,0,3748,3746,1,0,0,0,3748,
3749,1,0,0,0,3749,615,1,0,0,0,3750,3748,1,0,0,0,3751,3754,3,490,245,0,3752,
3754,3,492,246,0,3753,3751,1,0,0,0,3753,3752,1,0,0,0,3754,617,1,0,0,0,3755,
3756,5,111,0,0,3756,3757,5,249,0,0,3757,3758,5,227,0,0,3758,3759,5,74,0,
0,3759,3760,3,674,337,0,3760,619,1,0,0,0,3761,3762,5,86,0,0,3762,3763,5,
53,0,0,3763,3764,5,247,0,0,3764,3765,3,674,337,0,3765,3766,5,139,0,0,3766,
3771,3,622,311,0,3767,3768,5,24,0,0,3768,3770,3,622,311,0,3769,3767,1,0,
0,0,3770,3773,1,0,0,0,3771,3769,1,0,0,0,3771,3772,1,0,0,0,3772,3774,1,0,
0,0,3773,3771,1,0,0,0,3774,3775,5,323,0,0,3775,3776,5,25,0,0,3776,3777,3,
624,312,0,3777,3778,5,26,0,0,3778,621,1,0,0,0,3779,3780,3,674,337,0,3780,
3781,5,49,0,0,3781,3782,3,674,337,0,3782,623,1,0,0,0,3783,3788,3,626,313,
0,3784,3785,5,24,0,0,3785,3787,3,626,313,0,3786,3784,1,0,0,0,3787,3790,1,
0,0,0,3788,3786,1,0,0,0,3788,3789,1,0,0,0,3789,625,1,0,0,0,3790,3788,1,0,
0,0,3791,3792,3,828,414,0,3792,3793,5,1,0,0,3793,3794,3,14,7,0,3794,627,
1,0,0,0,3795,3796,5,43,0,0,3796,3797,5,53,0,0,3797,3798,5,247,0,0,3798,3799,
3,674,337,0,3799,3804,3,630,315,0,3800,3801,5,24,0,0,3801,3803,3,630,315,
0,3802,3800,1,0,0,0,3803,3806,1,0,0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,
0,3805,629,1,0,0,0,3806,3804,1,0,0,0,3807,3808,3,632,316,0,3808,631,1,0,
0,0,3809,3810,5,272,0,0,3810,3811,5,25,0,0,3811,3812,3,624,312,0,3812,3813,
5,26,0,0,3813,633,1,0,0,0,3814,3815,5,111,0,0,3815,3816,5,53,0,0,3816,3817,
5,247,0,0,3817,3819,3,674,337,0,3818,3820,5,69,0,0,3819,3818,1,0,0,0,3819,
3820,1,0,0,0,3820,635,1,0,0,0,3821,3824,3,80,40,0,3822,3824,3,144,72,0,3823,
3821,1,0,0,0,3823,3822,1,0,0,0,3824,637,1,0,0,0,3825,3826,5,86,0,0,3826,
3827,5,299,0,0,3827,3828,3,674,337,0,3828,3829,5,141,0,0,3829,3830,3,674,
337,0,3830,3831,5,296,0,0,3831,3834,3,674,337,0,3832,3833,5,314,0,0,3833,
3835,3,636,318,0,3834,3832,1,0,0,0,3834,3835,1,0,0,0,3835,3836,1,0,0,0,3836,
3837,5,323,0,0,3837,3838,5,25,0,0,3838,3839,3,640,320,0,3839,3840,5,26,0,
0,3840,639,1,0,0,0,3841,3846,3,642,321,0,3842,3843,5,24,0,0,3843,3845,3,
642,321,0,3844,3842,1,0,0,0,3845,3848,1,0,0,0,3846,3844,1,0,0,0,3846,3847,
1,0,0,0,3847,641,1,0,0,0,3848,3846,1,0,0,0,3849,3850,3,828,414,0,3850,3851,
5,1,0,0,3851,3852,3,14,7,0,3852,643,1,0,0,0,3853,3854,5,43,0,0,3854,3855,
5,299,0,0,3855,3856,3,674,337,0,3856,3861,3,646,323,0,3857,3858,5,24,0,0,
3858,3860,3,646,323,0,3859,3857,1,0,0,0,3860,3863,1,0,0,0,3861,3859,1,0,
0,0,3861,3862,1,0,0,0,3862,645,1,0,0,0,3863,3861,1,0,0,0,3864,3867,3,648,
324,0,3865,3867,3,650,325,0,3866,3864,1,0,0,0,3866,3865,1,0,0,0,3867,647,
1,0,0,0,3868,3869,5,272,0,0,3869,3870,5,25,0,0,3870,3871,3,640,320,0,3871,
3872,5,26,0,0,3872,649,1,0,0,0,3873,3874,5,272,0,0,3874,3875,5,314,0,0,3875,
3876,3,636,318,0,3876,651,1,0,0,0,3877,3878,5,111,0,0,3878,3879,5,299,0,
0,3879,3881,3,674,337,0,3880,3882,5,69,0,0,3881,3880,1,0,0,0,3881,3882,1,
0,0,0,3882,653,1,0,0,0,3883,3888,3,146,73,0,3884,3885,5,24,0,0,3885,3887,
3,146,73,0,3886,3884,1,0,0,0,3887,3890,1,0,0,0,3888,3886,1,0,0,0,3888,3889,
1,0,0,0,3889,655,1,0,0,0,3890,3888,1,0,0,0,3891,3892,5,100,0,0,3892,3893,
7,28,0,0,3893,3894,3,144,72,0,3894,3896,5,25,0,0,3895,3897,3,654,327,0,3896,
3895,1,0,0,0,3896,3897,1,0,0,0,3897,3898,1,0,0,0,3898,3899,5,26,0,0,3899,
3900,5,49,0,0,3900,3901,3,658,329,0,3901,3902,5,117,0,0,3902,3903,5,100,
0,0,3903,657,1,0,0,0,3904,3906,5,22,0,0,3905,3904,1,0,0,0,3906,3909,1,0,
0,0,3907,3905,1,0,0,0,3907,3908,1,0,0,0,3908,3928,1,0,0,0,3909,3907,1,0,
0,0,3910,3919,3,12,6,0,3911,3913,5,22,0,0,3912,3911,1,0,0,0,3913,3914,1,
0,0,0,3914,3912,1,0,0,0,3914,3915,1,0,0,0,3915,3916,1,0,0,0,3916,3918,3,
12,6,0,3917,3912,1,0,0,0,3918,3921,1,0,0,0,3919,3917,1,0,0,0,3919,3920,1,
0,0,0,3920,3925,1,0,0,0,3921,3919,1,0,0,0,3922,3924,5,22,0,0,3923,3922,1,
0,0,0,3924,3927,1,0,0,0,3925,3923,1,0,0,0,3925,3926,1,0,0,0,3926,3929,1,
0,0,0,3927,3925,1,0,0,0,3928,3910,1,0,0,0,3928,3929,1,0,0,0,3929,659,1,0,
0,0,3930,3932,5,122,0,0,3931,3930,1,0,0,0,3931,3932,1,0,0,0,3932,3933,1,
0,0,0,3933,3934,5,153,0,0,3934,3935,3,14,7,0,3935,3938,3,222,111,0,3936,
3937,5,113,0,0,3937,3939,3,222,111,0,3938,3936,1,0,0,0,3938,3939,1,0,0,0,
3939,661,1,0,0,0,3940,3942,5,122,0,0,3941,3940,1,0,0,0,3941,3942,1,0,0,0,
3942,3944,1,0,0,0,3943,3945,5,218,0,0,3944,3943,1,0,0,0,3944,3945,1,0,0,
0,3945,3946,1,0,0,0,3946,3947,5,139,0,0,3947,3948,3,144,72,0,3948,3949,5,
158,0,0,3949,3950,3,14,7,0,3950,3953,3,222,111,0,3951,3952,5,113,0,0,3952,
3954,3,222,111,0,3953,3951,1,0,0,0,3953,3954,1,0,0,0,3954,663,1,0,0,0,3955,
3956,3,854,427,0,3956,3957,5,23,0,0,3957,3959,1,0,0,0,3958,3955,1,0,0,0,
3958,3959,1,0,0,0,3959,3961,1,0,0,0,3960,3962,5,29,0,0,3961,3960,1,0,0,0,
3961,3962,1,0,0,0,3962,3993,1,0,0,0,3963,3994,3,666,333,0,3964,3965,3,834,
417,0,3965,3977,5,25,0,0,3966,3971,3,668,334,0,3967,3968,5,24,0,0,3968,3970,
3,668,334,0,3969,3967,1,0,0,0,3970,3973,1,0,0,0,3971,3969,1,0,0,0,3971,3972,
1,0,0,0,3972,3975,1,0,0,0,3973,3971,1,0,0,0,3974,3976,5,24,0,0,3975,3974,
1,0,0,0,3975,3976,1,0,0,0,3976,3978,1,0,0,0,3977,3966,1,0,0,0,3977,3978,
1,0,0,0,3978,3979,1,0,0,0,3979,3980,5,26,0,0,3980,3994,1,0,0,0,3981,3987,
3,144,72,0,3982,3984,5,25,0,0,3983,3985,3,112,56,0,3984,3983,1,0,0,0,3984,
3985,1,0,0,0,3985,3986,1,0,0,0,3986,3988,5,26,0,0,3987,3982,1,0,0,0,3987,
3988,1,0,0,0,3988,3991,1,0,0,0,3989,3990,5,318,0,0,3990,3992,3,850,425,0,
3991,3989,1,0,0,0,3991,3992,1,0,0,0,3992,3994,1,0,0,0,3993,3963,1,0,0,0,
3993,3964,1,0,0,0,3993,3981,1,0,0,0,3994,3996,1,0,0,0,3995,3997,3,670,335,
0,3996,3995,1,0,0,0,3996,3997,1,0,0,0,3997,665,1,0,0,0,3998,4001,3,862,431,
0,3999,4000,5,318,0,0,4000,4002,3,850,425,0,4001,3999,1,0,0,0,4001,4002,
1,0,0,0,4002,667,1,0,0,0,4003,4005,5,29,0,0,4004,4003,1,0,0,0,4004,4005,
1,0,0,0,4005,4006,1,0,0,0,4006,4009,3,128,64,0,4007,4008,5,318,0,0,4008,
4010,3,850,425,0,4009,4007,1,0,0,0,4009,4010,1,0,0,0,4010,669,1,0,0,0,4011,
4024,5,323,0,0,4012,4025,3,672,336,0,4013,4014,5,25,0,0,4014,4019,3,672,
336,0,4015,4016,5,24,0,0,4016,4018,3,672,336,0,4017,4015,1,0,0,0,4018,4021,
1,0,0,0,4019,4017,1,0,0,0,4019,4020,1,0,0,0,4020,4022,1,0,0,0,4021,4019,
1,0,0,0,4022,4023,5,26,0,0,4023,4025,1,0,0,0,4024,4012,1,0,0,0,4024,4013,
1,0,0,0,4025,671,1,0,0,0,4026,4045,3,844,422,0,4027,4043,5,1,0,0,4028,4044,
3,160,80,0,4029,4030,5,25,0,0,4030,4035,3,160,80,0,4031,4032,5,24,0,0,4032,
4034,3,160,80,0,4033,4031,1,0,0,0,4034,4037,1,0,0,0,4035,4033,1,0,0,0,4035,
4036,1,0,0,0,4036,4039,1,0,0,0,4037,4035,1,0,0,0,4038,4040,5,24,0,0,4039,
4038,1,0,0,0,4039,4040,1,0,0,0,4040,4041,1,0,0,0,4041,4042,5,26,0,0,4042,
4044,1,0,0,0,4043,4028,1,0,0,0,4043,4029,1,0,0,0,4044,4046,1,0,0,0,4045,
4027,1,0,0,0,4045,4046,1,0,0,0,4046,4072,1,0,0,0,4047,4049,7,29,0,0,4048,
4050,5,1,0,0,4049,4048,1,0,0,0,4049,4050,1,0,0,0,4050,4051,1,0,0,0,4051,
4072,3,204,102,0,4052,4054,5,267,0,0,4053,4055,5,1,0,0,4054,4053,1,0,0,0,
4054,4055,1,0,0,0,4055,4056,1,0,0,0,4056,4065,5,25,0,0,4057,4062,3,164,82,
0,4058,4059,5,24,0,0,4059,4061,3,164,82,0,4060,4058,1,0,0,0,4061,4064,1,
0,0,0,4062,4060,1,0,0,0,4062,4063,1,0,0,0,4063,4066,1,0,0,0,4064,4062,1,
0,0,0,4065,4057,1,0,0,0,4065,4066,1,0,0,0,4066,4068,1,0,0,0,4067,4069,5,
24,0,0,4068,4067,1,0,0,0,4068,4069,1,0,0,0,4069,4070,1,0,0,0,4070,4072,5,
26,0,0,4071,4026,1,0,0,0,4071,4047,1,0,0,0,4071,4052,1,0,0,0,4072,673,1,
0,0,0,4073,4074,3,854,427,0,4074,4075,5,23,0,0,4075,4077,1,0,0,0,4076,4073,
1,0,0,0,4076,4077,1,0,0,0,4077,4078,1,0,0,0,4078,4079,3,860,430,0,4079,675,
1,0,0,0,4080,4086,3,674,337,0,4081,4083,5,29,0,0,4082,4081,1,0,0,0,4082,
4083,1,0,0,0,4083,4084,1,0,0,0,4084,4086,3,144,72,0,4085,4080,1,0,0,0,4085,
4082,1,0,0,0,4086,677,1,0,0,0,4087,4089,3,676,338,0,4088,4090,3,670,335,
0,4089,4088,1,0,0,0,4089,4090,1,0,0,0,4090,679,1,0,0,0,4091,4095,3,678,339,
0,4092,4093,5,119,0,0,4093,4094,5,67,0,0,4094,4096,3,114,57,0,4095,4092,
1,0,0,0,4095,4096,1,0,0,0,4096,681,1,0,0,0,4097,4099,5,60,0,0,4098,4097,
1,0,0,0,4098,4099,1,0,0,0,4099,4100,1,0,0,0,4100,4101,5,101,0,0,4101,4102,
5,141,0,0,4102,4107,3,678,339,0,4103,4104,5,321,0,0,4104,4108,3,14,7,0,4105,
4106,5,207,0,0,4106,4108,3,366,183,0,4107,4103,1,0,0,0,4107,4105,1,0,0,0,
4107,4108,1,0,0,0,4108,4110,1,0,0,0,4109,4111,3,362,181,0,4110,4109,1,0,
0,0,4110,4111,1,0,0,0,4111,683,1,0,0,0,4112,4114,5,60,0,0,4113,4112,1,0,
0,0,4113,4114,1,0,0,0,4114,4115,1,0,0,0,4115,4116,5,310,0,0,4116,4125,3,
678,339,0,4117,4118,5,272,0,0,4118,4121,3,686,343,0,4119,4120,5,321,0,0,
4120,4122,3,14,7,0,4121,4119,1,0,0,0,4121,4122,1,0,0,0,4122,4126,1,0,0,0,
4123,4124,5,207,0,0,4124,4126,3,366,183,0,4125,4117,1,0,0,0,4125,4123,1,
0,0,0,4126,4128,1,0,0,0,4127,4129,3,362,181,0,4128,4127,1,0,0,0,4128,4129,
1,0,0,0,4129,685,1,0,0,0,4130,4133,3,688,344,0,4131,4133,3,694,347,0,4132,
4130,1,0,0,0,4132,4131,1,0,0,0,4133,687,1,0,0,0,4134,4139,3,690,345,0,4135,
4136,5,24,0,0,4136,4138,3,690,345,0,4137,4135,1,0,0,0,4138,4141,1,0,0,0,
4139,4137,1,0,0,0,4139,4140,1,0,0,0,4140,689,1,0,0,0,4141,4139,1,0,0,0,4142,
4143,3,692,346,0,4143,4144,5,1,0,0,4144,4145,3,14,7,0,4145,691,1,0,0,0,4146,
4147,3,120,60,0,4147,693,1,0,0,0,4148,4149,3,696,348,0,4149,4150,5,1,0,0,
4150,4151,5,25,0,0,4151,4152,3,376,188,0,4152,4153,5,26,0,0,4153,695,1,0,
0,0,4154,4155,5,25,0,0,4155,4160,3,692,346,0,4156,4157,5,24,0,0,4157,4159,
3,692,346,0,4158,4156,1,0,0,0,4159,4162,1,0,0,0,4160,4158,1,0,0,0,4160,4161,
1,0,0,0,4161,4163,1,0,0,0,4162,4160,1,0,0,0,4163,4164,5,26,0,0,4164,697,
1,0,0,0,4165,4166,5,86,0,0,4166,4170,5,297,0,0,4167,4168,5,153,0,0,4168,
4169,5,199,0,0,4169,4171,5,127,0,0,4170,4167,1,0,0,0,4170,4171,1,0,0,0,4171,
4172,1,0,0,0,4172,4174,3,744,372,0,4173,4175,3,700,350,0,4174,4173,1,0,0,
0,4174,4175,1,0,0,0,4175,4177,1,0,0,0,4176,4178,3,704,352,0,4177,4176,1,
0,0,0,4177,4178,1,0,0,0,4178,699,1,0,0,0,4179,4180,5,25,0,0,4180,4185,3,
702,351,0,4181,4182,5,24,0,0,4182,4184,3,702,351,0,4183,4181,1,0,0,0,4184,
4187,1,0,0,0,4185,4183,1,0,0,0,4185,4186,1,0,0,0,4186,4188,1,0,0,0,4187,
4185,1,0,0,0,4188,4189,5,26,0,0,4189,701,1,0,0,0,4190,4191,3,712,356,0,4191,
703,1,0,0,0,4192,4193,5,323,0,0,4193,4194,5,25,0,0,4194,4195,3,730,365,0,
4195,4196,5,26,0,0,4196,705,1,0,0,0,4197,4198,5,43,0,0,4198,4201,5,297,0,
0,4199,4200,5,153,0,0,4200,4202,5,127,0,0,4201,4199,1,0,0,0,4201,4202,1,
0,0,0,4202,4203,1,0,0,0,4203,4204,3,744,372,0,4204,4209,3,708,354,0,4205,
4206,5,24,0,0,4206,4208,3,708,354,0,4207,4205,1,0,0,0,4208,4211,1,0,0,0,
4209,4207,1,0,0,0,4209,4210,1,0,0,0,4210,707,1,0,0,0,4211,4209,1,0,0,0,4212,
4218,3,710,355,0,4213,4218,3,714,357,0,4214,4218,3,718,359,0,4215,4218,3,
724,362,0,4216,4218,3,726,363,0,4217,4212,1,0,0,0,4217,4213,1,0,0,0,4217,
4214,1,0,0,0,4217,4215,1,0,0,0,4217,4216,1,0,0,0,4218,709,1,0,0,0,4219,4220,
5,40,0,0,4220,4221,3,712,356,0,4221,711,1,0,0,0,4222,4223,5,84,0,0,4223,
4225,3,828,414,0,4224,4226,3,736,368,0,4225,4224,1,0,0,0,4225,4226,1,0,0,
0,4226,713,1,0,0,0,4227,4228,5,43,0,0,4228,4229,5,84,0,0,4229,4230,3,746,
373,0,4230,4231,3,716,358,0,4231,715,1,0,0,0,4232,4235,3,720,360,0,4233,
4235,3,722,361,0,4234,4232,1,0,0,0,4234,4233,1,0,0,0,4235,717,1,0,0,0,4236,
4237,5,111,0,0,4237,4238,5,84,0,0,4238,4239,3,746,373,0,4239,719,1,0,0,0,
4240,4241,5,272,0,0,4241,4242,5,25,0,0,4242,4243,3,738,369,0,4243,4244,5,
26,0,0,4244,721,1,0,0,0,4245,4246,5,248,0,0,4246,4247,5,25,0,0,4247,4252,
3,828,414,0,4248,4249,5,24,0,0,4249,4251,3,828,414,0,4250,4248,1,0,0,0,4251,
4254,1,0,0,0,4252,4250,1,0,0,0,4252,4253,1,0,0,0,4253,4255,1,0,0,0,4254,
4252,1,0,0,0,4255,4256,5,26,0,0,4256,723,1,0,0,0,4257,4258,5,272,0,0,4258,
4259,5,25,0,0,4259,4260,3,730,365,0,4260,4261,5,26,0,0,4261,725,1,0,0,0,
4262,4263,5,248,0,0,4263,4264,5,25,0,0,4264,4269,3,828,414,0,4265,4266,5,
24,0,0,4266,4268,3,846,423,0,4267,4265,1,0,0,0,4268,4271,1,0,0,0,4269,4267,
1,0,0,0,4269,4270,1,0,0,0,4270,4272,1,0,0,0,4271,4269,1,0,0,0,4272,4273,
5,26,0,0,4273,727,1,0,0,0,4274,4275,5,111,0,0,4275,4278,5,297,0,0,4276,4277,
5,153,0,0,4277,4279,5,127,0,0,4278,4276,1,0,0,0,4278,4279,1,0,0,0,4279,4280,
1,0,0,0,4280,4281,3,744,372,0,4281,729,1,0,0,0,4282,4287,3,732,366,0,4283,
4284,5,24,0,0,4284,4286,3,732,366,0,4285,4283,1,0,0,0,4286,4289,1,0,0,0,
4287,4285,1,0,0,0,4287,4288,1,0,0,0,4288,731,1,0,0,0,4289,4287,1,0,0,0,4290,
4291,3,828,414,0,4291,4292,5,1,0,0,4292,4293,3,734,367,0,4293,733,1,0,0,
0,4294,4295,3,14,7,0,4295,735,1,0,0,0,4296,4297,5,323,0,0,4297,4298,5,25,
0,0,4298,4299,3,738,369,0,4299,4300,5,26,0,0,4300,737,1,0,0,0,4301,4306,
3,740,370,0,4302,4303,5,24,0,0,4303,4305,3,740,370,0,4304,4302,1,0,0,0,4305,
4308,1,0,0,0,4306,4304,1,0,0,0,4306,4307,1,0,0,0,4307,739,1,0,0,0,4308,4306,
1,0,0,0,4309,4310,3,828,414,0,4310,4311,5,1,0,0,4311,4312,3,742,371,0,4312,
741,1,0,0,0,4313,4314,3,14,7,0,4314,743,1,0,0,0,4315,4316,3,854,427,0,4316,
4317,5,23,0,0,4317,4319,1,0,0,0,4318,4315,1,0,0,0,4318,4319,1,0,0,0,4319,
4320,1,0,0,0,4320,4321,3,828,414,0,4321,745,1,0,0,0,4322,4323,3,846,423,
0,4323,747,1,0,0,0,4324,4325,5,250,0,0,4325,4329,5,202,0,0,4326,4327,5,154,
0,0,4327,4329,5,202,0,0,4328,4324,1,0,0,0,4328,4326,1,0,0,0,4329,749,1,0,
0,0,4330,4331,5,134,0,0,4331,4332,5,25,0,0,4332,4333,5,321,0,0,4333,4334,
3,14,7,0,4334,4335,5,26,0,0,4335,751,1,0,0,0,4336,4339,3,754,377,0,4337,
4339,3,764,382,0,4338,4336,1,0,0,0,4338,4337,1,0,0,0,4339,753,1,0,0,0,4340,
4341,3,838,419,0,4341,755,1,0,0,0,4342,4343,5,322,0,0,4343,4344,3,758,379,
0,4344,757,1,0,0,0,4345,4350,3,760,380,0,4346,4347,5,24,0,0,4347,4349,3,
760,380,0,4348,4346,1,0,0,0,4349,4352,1,0,0,0,4350,4348,1,0,0,0,4350,4351,
1,0,0,0,4351,759,1,0,0,0,4352,4350,1,0,0,0,4353,4354,3,762,381,0,4354,4355,
5,49,0,0,4355,4356,3,764,382,0,4356,761,1,0,0,0,4357,4358,3,754,377,0,4358,
763,1,0,0,0,4359,4360,5,25,0,0,4360,4361,3,766,383,0,4361,4362,5,26,0,0,
4362,765,1,0,0,0,4363,4365,3,768,384,0,4364,4363,1,0,0,0,4364,4365,1,0,0,
0,4365,4367,1,0,0,0,4366,4368,3,770,385,0,4367,4366,1,0,0,0,4367,4368,1,
0,0,0,4368,4370,1,0,0,0,4369,4371,3,772,386,0,4370,4369,1,0,0,0,4370,4371,
1,0,0,0,4371,4373,1,0,0,0,4372,4374,3,774,387,0,4373,4372,1,0,0,0,4373,4374,
1,0,0,0,4374,767,1,0,0,0,4375,4376,3,754,377,0,4376,769,1,0,0,0,4377,4379,
5,219,0,0,4378,4380,5,79,0,0,4379,4378,1,0,0,0,4379,4380,1,0,0,0,4380,4381,
1,0,0,0,4381,4382,5,67,0,0,4382,4383,3,130,65,0,4383,771,1,0,0,0,4384,4385,
3,314,157,0,4385,773,1,0,0,0,4386,4387,3,776,388,0,4387,4389,3,778,389,0,
4388,4390,3,784,392,0,4389,4388,1,0,0,0,4389,4390,1,0,0,0,4390,775,1,0,0,
0,4391,4392,7,30,0,0,4392,777,1,0,0,0,4393,4396,3,782,391,0,4394,4396,3,
780,390,0,4395,4393,1,0,0,0,4395,4394,1,0,0,0,4396,779,1,0,0,0,4397,4398,
5,65,0,0,4398,4399,3,782,391,0,4399,4400,5,45,0,0,4400,4401,3,782,391,0,
4401,781,1,0,0,0,4402,4403,5,89,0,0,4403,4410,5,263,0,0,4404,4407,3,14,7,
0,4405,4407,5,304,0,0,4406,4404,1,0,0,0,4406,4405,1,0,0,0,4407,4408,1,0,
0,0,4408,4410,7,31,0,0,4409,4402,1,0,0,0,4409,4406,1,0,0,0,4410,783,1,0,
0,0,4411,4412,5,124,0,0,4412,4413,5,89,0,0,4413,4422,5,263,0,0,4414,4415,
5,124,0,0,4415,4422,5,147,0,0,4416,4417,5,124,0,0,4417,4422,5,295,0,0,4418,
4419,5,124,0,0,4419,4420,5,197,0,0,4420,4422,5,214,0,0,4421,4411,1,0,0,0,
4421,4414,1,0,0,0,4421,4416,1,0,0,0,4421,4418,1,0,0,0,4422,785,1,0,0,0,4423,
4424,5,312,0,0,4424,4425,3,854,427,0,4425,787,1,0,0,0,4426,4427,5,25,0,0,
4427,4428,3,232,116,0,4428,4429,5,26,0,0,4429,4432,1,0,0,0,4430,4432,3,234,
117,0,4431,4426,1,0,0,0,4431,4430,1,0,0,0,4432,789,1,0,0,0,4433,4434,3,148,
74,0,4434,4437,5,1,0,0,4435,4438,3,14,7,0,4436,4438,3,788,394,0,4437,4435,
1,0,0,0,4437,4436,1,0,0,0,4438,791,1,0,0,0,4439,4440,5,78,0,0,4440,793,1,
0,0,0,4441,4442,5,261,0,0,4442,795,1,0,0,0,4443,4448,3,678,339,0,4444,4445,
5,25,0,0,4445,4446,3,124,62,0,4446,4447,5,26,0,0,4447,4449,1,0,0,0,4448,
4444,1,0,0,0,4448,4449,1,0,0,0,4449,797,1,0,0,0,4450,4455,3,796,398,0,4451,
4452,5,24,0,0,4452,4454,3,796,398,0,4453,4451,1,0,0,0,4454,4457,1,0,0,0,
4455,4453,1,0,0,0,4455,4456,1,0,0,0,4456,4459,1,0,0,0,4457,4455,1,0,0,0,
4458,4460,5,24,0,0,4459,4458,1,0,0,0,4459,4460,1,0,0,0,4460,799,1,0,0,0,
4461,4462,5,44,0,0,4462,4463,3,798,399,0,4463,801,1,0,0,0,4464,4465,5,43,
0,0,4465,4468,5,276,0,0,4466,4467,5,153,0,0,4467,4469,5,127,0,0,4468,4466,
1,0,0,0,4468,4469,1,0,0,0,4469,4470,1,0,0,0,4470,4472,3,674,337,0,4471,4473,
3,804,402,0,4472,4471,1,0,0,0,4473,4474,1,0,0,0,4474,4472,1,0,0,0,4474,4475,
1,0,0,0,4475,803,1,0,0,0,4476,4478,5,278,0,0,4477,4479,5,323,0,0,4478,4477,
1,0,0,0,4478,4479,1,0,0,0,4479,4480,1,0,0,0,4480,4493,3,892,446,0,4481,4483,
5,251,0,0,4482,4484,5,323,0,0,4483,4482,1,0,0,0,4483,4484,1,0,0,0,4484,4485,
1,0,0,0,4485,4493,3,892,446,0,4486,4493,5,251,0,0,4487,4489,5,159,0,0,4488,
4490,5,67,0,0,4489,4488,1,0,0,0,4489,4490,1,0,0,0,4490,4491,1,0,0,0,4491,
4493,3,892,446,0,4492,4476,1,0,0,0,4492,4481,1,0,0,0,4492,4486,1,0,0,0,4492,
4487,1,0,0,0,4493,805,1,0,0,0,4494,4495,5,274,0,0,4495,4496,5,86,0,0,4496,
4497,5,287,0,0,4497,4498,3,678,339,0,4498,807,1,0,0,0,4499,4500,7,32,0,0,
4500,809,1,0,0,0,4501,4504,3,808,404,0,4502,4504,3,866,433,0,4503,4501,1,
0,0,0,4503,4502,1,0,0,0,4504,811,1,0,0,0,4505,4513,3,808,404,0,4506,4513,
3,884,442,0,4507,4513,3,868,434,0,4508,4513,3,872,436,0,4509,4513,3,876,
438,0,4510,4513,3,878,439,0,4511,4513,3,880,440,0,4512,4505,1,0,0,0,4512,
4506,1,0,0,0,4512,4507,1,0,0,0,4512,4508,1,0,0,0,4512,4509,1,0,0,0,4512,
4510,1,0,0,0,4512,4511,1,0,0,0,4513,813,1,0,0,0,4514,4521,3,808,404,0,4515,
4521,3,884,442,0,4516,4521,3,874,437,0,4517,4521,3,876,438,0,4518,4521,3,
878,439,0,4519,4521,3,880,440,0,4520,4514,1,0,0,0,4520,4515,1,0,0,0,4520,
4516,1,0,0,0,4520,4517,1,0,0,0,4520,4518,1,0,0,0,4520,4519,1,0,0,0,4521,
815,1,0,0,0,4522,4528,3,808,404,0,4523,4528,3,884,442,0,4524,4528,3,874,
437,0,4525,4528,3,878,439,0,4526,4528,3,880,440,0,4527,4522,1,0,0,0,4527,
4523,1,0,0,0,4527,4524,1,0,0,0,4527,4525,1,0,0,0,4527,4526,1,0,0,0,4528,
817,1,0,0,0,4529,4538,3,808,404,0,4530,4538,3,884,442,0,4531,4538,3,868,
434,0,4532,4538,3,870,435,0,4533,4538,3,872,436,0,4534,4538,3,874,437,0,
4535,4538,3,876,438,0,4536,4538,3,880,440,0,4537,4529,1,0,0,0,4537,4530,
1,0,0,0,4537,4531,1,0,0,0,4537,4532,1,0,0,0,4537,4533,1,0,0,0,4537,4534,
1,0,0,0,4537,4535,1,0,0,0,4537,4536,1,0,0,0,4538,819,1,0,0,0,4539,4547,3,
808,404,0,4540,4547,3,884,442,0,4541,4547,3,868,434,0,4542,4547,3,872,436,
0,4543,4547,3,876,438,0,4544,4547,3,878,439,0,4545,4547,3,880,440,0,4546,
4539,1,0,0,0,4546,4540,1,0,0,0,4546,4541,1,0,0,0,4546,4542,1,0,0,0,4546,
4543,1,0,0,0,4546,4544,1,0,0,0,4546,4545,1,0,0,0,4547,821,1,0,0,0,4548,4556,
3,808,404,0,4549,4556,3,884,442,0,4550,4556,3,870,435,0,4551,4556,3,874,
437,0,4552,4556,3,876,438,0,4553,4556,3,878,439,0,4554,4556,3,880,440,0,
4555,4548,1,0,0,0,4555,4549,1,0,0,0,4555,4550,1,0,0,0,4555,4551,1,0,0,0,
4555,4552,1,0,0,0,4555,4553,1,0,0,0,4555,4554,1,0,0,0,4556,823,1,0,0,0,4557,
4566,3,808,404,0,4558,4566,3,884,442,0,4559,4566,3,868,434,0,4560,4566,3,
870,435,0,4561,4566,3,872,436,0,4562,4566,3,874,437,0,4563,4566,3,876,438,
0,4564,4566,3,878,439,0,4565,4557,1,0,0,0,4565,4558,1,0,0,0,4565,4559,1,
0,0,0,4565,4560,1,0,0,0,4565,4561,1,0,0,0,4565,4562,1,0,0,0,4565,4563,1,
0,0,0,4565,4564,1,0,0,0,4566,825,1,0,0,0,4567,4570,3,808,404,0,4568,4570,
3,882,441,0,4569,4567,1,0,0,0,4569,4568,1,0,0,0,4570,827,1,0,0,0,4571,4574,
3,810,405,0,4572,4574,5,327,0,0,4573,4571,1,0,0,0,4573,4572,1,0,0,0,4574,
829,1,0,0,0,4575,4578,3,856,428,0,4576,4578,5,327,0,0,4577,4575,1,0,0,0,
4577,4576,1,0,0,0,4578,831,1,0,0,0,4579,4582,3,812,406,0,4580,4582,5,327,
0,0,4581,4579,1,0,0,0,4581,4580,1,0,0,0,4582,833,1,0,0,0,4583,4586,3,814,
407,0,4584,4586,5,327,0,0,4585,4583,1,0,0,0,4585,4584,1,0,0,0,4586,835,1,
0,0,0,4587,4590,3,816,408,0,4588,4590,5,327,0,0,4589,4587,1,0,0,0,4589,4588,
1,0,0,0,4590,837,1,0,0,0,4591,4594,3,818,409,0,4592,4594,5,327,0,0,4593,
4591,1,0,0,0,4593,4592,1,0,0,0,4594,839,1,0,0,0,4595,4598,3,820,410,0,4596,
4598,5,327,0,0,4597,4595,1,0,0,0,4597,4596,1,0,0,0,4598,841,1,0,0,0,4599,
4602,3,822,411,0,4600,4602,5,327,0,0,4601,4599,1,0,0,0,4601,4600,1,0,0,0,
4602,843,1,0,0,0,4603,4606,3,824,412,0,4604,4606,5,327,0,0,4605,4603,1,0,
0,0,4605,4604,1,0,0,0,4606,845,1,0,0,0,4607,4610,3,808,404,0,4608,4610,5,
327,0,0,4609,4607,1,0,0,0,4609,4608,1,0,0,0,4610,847,1,0,0,0,4611,4614,3,
826,413,0,4612,4614,5,327,0,0,4613,4611,1,0,0,0,4613,4612,1,0,0,0,4614,849,
1,0,0,0,4615,4619,3,828,414,0,4616,4617,5,231,0,0,4617,4619,5,177,0,0,4618,
4615,1,0,0,0,4618,4616,1,0,0,0,4619,851,1,0,0,0,4620,4621,3,828,414,0,4621,
4622,5,23,0,0,4622,4624,1,0,0,0,4623,4620,1,0,0,0,4623,4624,1,0,0,0,4624,
853,1,0,0,0,4625,4626,3,828,414,0,4626,4627,5,28,0,0,4627,4629,1,0,0,0,4628,
4625,1,0,0,0,4628,4629,1,0,0,0,4629,4632,1,0,0,0,4630,4633,3,116,58,0,4631,
4633,5,19,0,0,4632,4630,1,0,0,0,4632,4631,1,0,0,0,4633,855,1,0,0,0,4634,
4637,3,810,405,0,4635,4637,3,886,443,0,4636,4634,1,0,0,0,4636,4635,1,0,0,
0,4637,857,1,0,0,0,4638,4639,3,830,415,0,4639,4640,5,23,0,0,4640,4642,1,
0,0,0,4641,4638,1,0,0,0,4641,4642,1,0,0,0,4642,859,1,0,0,0,4643,4645,5,29,
0,0,4644,4643,1,0,0,0,4644,4645,1,0,0,0,4645,4646,1,0,0,0,4646,4647,3,830,
415,0,4647,861,1,0,0,0,4648,4651,3,840,420,0,4649,4651,3,886,443,0,4650,
4648,1,0,0,0,4650,4649,1,0,0,0,4651,863,1,0,0,0,4652,4654,5,29,0,0,4653,
4652,1,0,0,0,4653,4654,1,0,0,0,4654,4655,1,0,0,0,4655,4656,3,862,431,0,4656,
865,1,0,0,0,4657,4666,3,884,442,0,4658,4666,3,868,434,0,4659,4666,3,870,
435,0,4660,4666,3,872,436,0,4661,4666,3,874,437,0,4662,4666,3,876,438,0,
4663,4666,3,878,439,0,4664,4666,3,880,440,0,4665,4657,1,0,0,0,4665,4658,
1,0,0,0,4665,4659,1,0,0,0,4665,4660,1,0,0,0,4665,4661,1,0,0,0,4665,4662,
1,0,0,0,4665,4663,1,0,0,0,4665,4664,1,0,0,0,4666,867,1,0,0,0,4667,4668,7,
33,0,0,4668,869,1,0,0,0,4669,4670,7,34,0,0,4670,871,1,0,0,0,4671,4672,7,
35,0,0,4672,873,1,0,0,0,4673,4674,5,76,0,0,4674,875,1,0,0,0,4675,4676,5,
79,0,0,4676,877,1,0,0,0,4677,4678,7,30,0,0,4678,879,1,0,0,0,4679,4680,7,
29,0,0,4680,881,1,0,0,0,4681,4682,7,36,0,0,4682,883,1,0,0,0,4683,4684,7,
37,0,0,4684,885,1,0,0,0,4685,4686,7,38,0,0,4686,887,1,0,0,0,4687,4688,7,
39,0,0,4688,889,1,0,0,0,4689,4690,5,332,0,0,4690,891,1,0,0,0,4691,4692,7,
40,0,0,4692,893,1,0,0,0,515,899,904,911,916,922,930,938,945,949,957,962,
967,969,1035,1042,1046,1053,1061,1066,1070,1076,1082,1085,1089,1097,1101,
1104,1108,1119,1124,1126,1135,1156,1161,1170,1172,1179,1187,1195,1202,1212,
1214,1218,1223,1227,1233,1239,1243,1247,1250,1257,1263,1267,1272,1275,1289,
1294,1297,1311,1318,1329,1340,1360,1366,1371,1375,1389,1391,1398,1404,1415,
1423,1429,1436,1444,1457,1463,1467,1470,1472,1480,1488,1494,1500,1506,1509,
1518,1527,1534,1542,1555,1562,1566,1573,1577,1582,1589,1596,1599,1606,1610,
1620,1643,1649,1653,1660,1666,1673,1677,1681,1687,1692,1701,1704,1710,1715,
1723,1730,1752,1756,1758,1762,1771,1775,1777,1781,1790,1794,1832,1836,1856,
1859,1865,1885,1890,1896,1901,1904,1908,1935,1943,1946,1953,1966,1970,1982,
1995,2000,2007,2011,2018,2027,2036,2044,2048,2052,2059,2061,2064,2069,2074,
2078,2085,2092,2096,2100,2104,2108,2110,2121,2130,2135,2141,2146,2150,2154,
2158,2161,2165,2169,2177,2181,2186,2189,2193,2197,2200,2204,2207,2210,2215,
2218,2221,2224,2238,2240,2251,2261,2271,2274,2281,2305,2316,2322,2326,2330,
2334,2338,2342,2346,2350,2356,2363,2373,2384,2397,2413,2423,2443,2449,2456,
2463,2471,2480,2517,2519,2522,2527,2531,2535,2541,2547,2551,2556,2561,2563,
2567,2572,2575,2577,2581,2592,2603,2614,2618,2622,2626,2629,2633,2636,2642,
2651,2654,2668,2674,2677,2682,2689,2696,2705,2710,2718,2733,2739,2747,2756,
2760,2769,2781,2788,2796,2817,2825,2834,2844,2853,2858,2865,2875,2880,2889,
2893,2897,2900,2903,2906,2909,2917,2922,2933,2940,2953,2961,2966,2973,2986,
2997,3007,3013,3029,3046,3069,3089,3100,3108,3118,3123,3127,3133,3171,3183,
3225,3233,3236,3240,3244,3254,3267,3280,3285,3297,3308,3313,3316,3320,3324,
3328,3331,3344,3348,3360,3374,3389,3404,3407,3417,3420,3428,3440,3443,3453,
3461,3467,3475,3483,3490,3494,3504,3511,3516,3521,3533,3537,3539,3551,3555,
3560,3566,3573,3577,3581,3585,3589,3592,3612,3621,3625,3630,3636,3645,3654,
3671,3675,3679,3681,3685,3692,3696,3700,3702,3719,3724,3748,3753,3771,3788,
3804,3819,3823,3834,3846,3861,3866,3881,3888,3896,3907,3914,3919,3925,3928,
3931,3938,3941,3944,3953,3958,3961,3971,3975,3977,3984,3987,3991,3993,3996,
4001,4004,4009,4019,4024,4035,4039,4043,4045,4049,4054,4062,4065,4068,4071,
4076,4082,4085,4089,4095,4098,4107,4110,4113,4121,4125,4128,4132,4139,4160,
4170,4174,4177,4185,4201,4209,4217,4225,4234,4252,4269,4278,4287,4306,4318,
4328,4338,4350,4364,4367,4370,4373,4379,4389,4395,4406,4409,4421,4431,4437,
4448,4455,4459,4468,4474,4478,4483,4489,4492,4503,4512,4520,4527,4537,4546,
4555,4565,4569,4573,4577,4581,4585,4589,4593,4597,4601,4605,4609,4613,4618,
4623,4628,4632,4636,4641,4644,4650,4653,4665];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class YQLParser extends antlr4.Parser {

    static grammarFileName = "YQL.g4";
    static literalNames = [ null, "'='", "'=='", "'!='", "'<>'", "'<'", 
                            "'<='", "'>'", "'>='", "'<<'", "'|<<'", "'&'", 
                            "'|'", "'||'", "'<|'", "'|>'", "'+'", "'-'", 
                            "'~'", "'*'", "'/'", "'%'", "';'", "'.'", "','", 
                            "'('", "')'", "'?'", "':'", "'@'", "'$'", "'{'", 
                            "'}'", "'^'", "'::'", "'->'", "']'", "'['" ];
    static symbolicNames = [ null, "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", 
                             "LESS", "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", 
                             "SHIFT_LEFT", "ROT_LEFT", "AMPERSAND", "PIPE", 
                             "DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", 
                             "PLUS", "MINUS", "TILDA", "ASTERISK", "SLASH", 
                             "PERCENT", "SEMICOLON", "DOT", "COMMA", "LPAREN", 
                             "RPAREN", "QUESTION", "COLON", "COMMAT", "DOLLAR", 
                             "LBRACE_CURLY", "RBRACE_CURLY", "CARET", "NAMESPACE", 
                             "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", 
                             "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
                             "ANALYZE", "AND", "ANSI", "ANY", "ARRAY", "AS", 
                             "ASC", "ASSUME", "ASYMMETRIC", "ASYNC", "AT", 
                             "ATTACH", "ATTRIBUTES", "AUTOINCREMENT", "AUTOMAP", 
                             "BACKUP", "BATCH", "COLLECTION", "BEFORE", 
                             "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", 
                             "BY", "CALLABLE", "CASCADE", "CASE", "CAST", 
                             "CHANGEFEED", "CHECK", "CLASSIFIER", "COLLATE", 
                             "COLUMN", "COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", 
                             "CONFLICT", "CONNECT", "CONSTRAINT", "CONSUMER", 
                             "COVER", "CREATE", "CROSS", "CUBE", "CURRENT", 
                             "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                             "DATA", "DATABASE", "DECIMAL", "DECLARE", "DEFAULT", 
                             "DEFERRABLE", "DEFERRED", "DEFINE", "DELETE", 
                             "DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", 
                             "DISABLE", "DISCARD", "DISTINCT", "DO", "DROP", 
                             "EACH", "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", 
                             "END", "ENUM", "ERASE", "ERROR", "ESCAPE", 
                             "EVALUATE", "EXCEPT", "EXCLUDE", "EXCLUSION", 
                             "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", 
                             "EXTERNAL", "FAIL", "FALSE", "FAMILY", "FILTER", 
                             "FIRST", "FLATTEN", "FLOW", "FOLLOWING", "FOR", 
                             "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", 
                             "GLOBAL", "GRANT", "GROUP", "GROUPING", "GROUPS", 
                             "HASH", "HAVING", "HOP", "IF", "IGNORE", "ILIKE", 
                             "IMMEDIATE", "IMPORT", "IN", "INCREMENT", "INCREMENTAL", 
                             "INDEX", "INDEXED", "INHERITS", "INITIAL", 
                             "INITIALLY", "INNER", "INSERT", "INSTEAD", 
                             "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
                             "JSON_EXISTS", "JSON_QUERY", "JSON_VALUE", 
                             "KEY", "LAST", "LEFT", "LEGACY", "LIKE", "LIMIT", 
                             "LIST", "LOCAL", "LOGIN", "MANAGE", "MATCH", 
                             "MATCHES", "MATCH_RECOGNIZE", "MEASURES", "MICROSECONDS", 
                             "MILLISECONDS", "MODIFY", "NANOSECONDS", "NATURAL", 
                             "NEXT", "NO", "NOLOGIN", "NOT", "NOTNULL", 
                             "NULL", "NULLS", "OBJECT", "OF", "OFFSET", 
                             "OMIT", "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", 
                             "OR", "ORDER", "OTHERS", "OUTER", "OVER", "OWNER", 
                             "PARALLEL", "PARTITION", "PASSING", "PASSWORD", 
                             "PAST", "PATTERN", "PER", "PERMUTE", "PLAN", 
                             "POOL", "PRAGMA", "PRECEDING", "PRESORT", "PRIMARY", 
                             "PRIVILEGES", "PROCESS", "QUERY", "QUEUE", 
                             "RAISE", "RANGE", "REDUCE", "REFERENCES", "REGEXP", 
                             "REINDEX", "RELEASE", "REMOVE", "RENAME", "REPEATABLE", 
                             "REPLACE", "REPLICATION", "RESET", "RESOURCE", 
                             "RESPECT", "RESTART", "RESTORE", "RESTRICT", 
                             "RESULT", "RETURN", "RETURNING", "REVERT", 
                             "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", 
                             "ROW", "ROWS", "SAMPLE", "SAVEPOINT", "SCHEMA", 
                             "SECONDS", "SEEK", "SELECT", "SEMI", "SET", 
                             "SETS", "SHOW", "TSKIP", "SEQUENCE", "SOURCE", 
                             "START", "STREAM", "STRUCT", "SUBQUERY", "SUBSET", 
                             "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", 
                             "TABLES", "TABLESAMPLE", "TABLESTORE", "TAGGED", 
                             "TEMP", "TEMPORARY", "THEN", "TIES", "TO", 
                             "TOPIC", "TRANSACTION", "TRANSFER", "TRIGGER", 
                             "TRUE", "TUPLE", "TYPE", "UNBOUNDED", "UNCONDITIONAL", 
                             "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", 
                             "UPDATE", "UPSERT", "USE", "USER", "USING", 
                             "VACUUM", "VALUES", "VARIANT", "VIEW", "VIRTUAL", 
                             "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", 
                             "WRAPPER", "XOR", "STRING_VALUE", "ID_PLAIN", 
                             "ID_QUOTED", "DIGITS", "INTEGER_VALUE", "REAL", 
                             "BLOB", "WS", "COMMENT" ];
    static ruleNames = [ "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", 
                         "lambda_body", "lambda_stmt", "sql_stmt", "sql_stmt_core", 
                         "expr", "or_subexpr", "and_subexpr", "xor_subexpr", 
                         "distinct_from_op", "cond_expr", "match_op", "eq_subexpr", 
                         "shift_right", "rot_right", "double_question", 
                         "neq_subexpr", "bit_subexpr", "add_subexpr", "mul_subexpr", 
                         "con_subexpr", "unary_op", "unary_subexpr_suffix", 
                         "unary_casual_subexpr", "in_unary_casual_subexpr", 
                         "unary_subexpr", "in_unary_subexpr", "list_literal", 
                         "expr_dict_list", "dict_literal", "expr_struct_list", 
                         "struct_literal", "atom_expr", "in_atom_expr", 
                         "cast_expr", "bitcast_expr", "exists_expr", "case_expr", 
                         "lambda", "in_expr", "json_api_expr", "jsonpath_spec", 
                         "json_variable_name", "json_variable", "json_variables", 
                         "json_common_args", "json_case_handler", "json_value", 
                         "json_exists_handler", "json_exists", "json_query_wrapper", 
                         "json_query_handler", "json_query", "smart_parenthesis", 
                         "expr_list", "pure_column_list", "pure_column_or_named", 
                         "pure_column_or_named_list", "column_name", "without_column_name", 
                         "column_list", "without_column_list", "named_expr", 
                         "named_expr_list", "invoke_expr", "invoke_expr_tail", 
                         "using_call_expr", "key_expr", "when_expr", "literal_value", 
                         "bind_parameter", "opt_bind_parameter", "bind_parameter_list", 
                         "named_bind_parameter", "named_bind_parameter_list", 
                         "signed_number", "type_name_simple", "integer_or_bind", 
                         "type_name_tag", "struct_arg", "struct_arg_positional", 
                         "variant_arg", "callable_arg", "callable_arg_list", 
                         "type_name_decimal", "type_name_optional", "type_name_tuple", 
                         "type_name_struct", "type_name_variant", "type_name_list", 
                         "type_name_stream", "type_name_flow", "type_name_dict", 
                         "type_name_set", "type_name_enum", "type_name_resource", 
                         "type_name_tagged", "type_name_callable", "type_name_composite", 
                         "type_name", "type_name_or_bind", "value_constructor_literal", 
                         "value_constructor", "declare_stmt", "module_path", 
                         "import_stmt", "export_stmt", "call_action", "inline_action", 
                         "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
                         "sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
                         "select_kind_parenthesis", "select_op", "select_kind_partial", 
                         "select_kind", "process_core", "external_call_param", 
                         "external_call_settings", "reduce_core", "opt_set_quantifier", 
                         "select_core", "row_pattern_recognition_clause", 
                         "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
                         "row_pattern_measures", "row_pattern_measure_list", 
                         "row_pattern_measure_definition", "row_pattern_common_syntax", 
                         "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
                         "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
                         "row_pattern_factor", "row_pattern_quantifier", 
                         "row_pattern_primary", "row_pattern_primary_variable_name", 
                         "row_pattern_permute", "row_pattern_subset_clause", 
                         "row_pattern_subset_list", "row_pattern_subset_item", 
                         "row_pattern_subset_item_variable_name", "row_pattern_subset_rhs", 
                         "row_pattern_subset_rhs_variable_name", "row_pattern_definition_list", 
                         "row_pattern_definition", "row_pattern_definition_variable_name", 
                         "row_pattern_definition_search_condition", "search_condition", 
                         "row_pattern_variable_name", "order_by_clause", 
                         "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
                         "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
                         "rollup_list", "cube_list", "grouping_sets_specification", 
                         "hopping_window_specification", "result_column", 
                         "join_source", "named_column", "flatten_by_arg", 
                         "flatten_source", "named_single_source", "single_source", 
                         "sample_clause", "tablesample_clause", "sampling_mode", 
                         "repeatable_clause", "join_op", "join_constraint", 
                         "returning_columns_list", "into_table_stmt", "into_values_source", 
                         "values_stmt", "values_source", "values_source_row_list", 
                         "values_source_row", "simple_values_source", "create_external_data_source_stmt", 
                         "alter_external_data_source_stmt", "alter_external_data_source_action", 
                         "drop_external_data_source_stmt", "create_view_stmt", 
                         "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
                         "create_object_features", "alter_object_stmt", 
                         "alter_object_features", "drop_object_stmt", "drop_object_features", 
                         "object_feature_value", "object_feature_kv", "object_feature_flag", 
                         "object_feature", "object_features", "object_type_ref", 
                         "create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
                         "alter_backup_collection_stmt", "drop_backup_collection_stmt", 
                         "create_backup_collection_entries", "create_backup_collection_entries_many", 
                         "table_list", "alter_backup_collection_actions", 
                         "alter_backup_collection_action", "alter_backup_collection_entries", 
                         "alter_backup_collection_entry", "backup_collection", 
                         "backup_collection_settings", "backup_collection_settings_entry", 
                         "backup_stmt", "restore_stmt", "alter_database_stmt", 
                         "table_inherits", "table_partition_by", "with_table_settings", 
                         "table_tablestore", "table_settings_entry", "table_as_source", 
                         "alter_table_stmt", "alter_table_action", "alter_external_table_stmt", 
                         "alter_external_table_action", "alter_table_store_stmt", 
                         "alter_table_store_action", "alter_table_add_column", 
                         "alter_table_drop_column", "alter_table_alter_column", 
                         "alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
                         "alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
                         "alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
                         "alter_table_add_index", "alter_table_drop_index", 
                         "alter_table_rename_to", "alter_table_rename_index_to", 
                         "alter_table_add_changefeed", "alter_table_alter_changefeed", 
                         "alter_table_drop_changefeed", "alter_table_alter_index", 
                         "column_schema", "family_relation", "opt_column_constraints", 
                         "column_order_by_specification", "table_constraint", 
                         "table_index", "table_index_type", "global_index", 
                         "local_index", "index_subtype", "with_index_settings", 
                         "index_setting_entry", "index_setting_value", "changefeed", 
                         "changefeed_settings", "changefeed_settings_entry", 
                         "changefeed_setting_value", "changefeed_alter_settings", 
                         "alter_table_setting_entry", "table_setting_value", 
                         "ttl_tier_list", "ttl_tier_action", "family_entry", 
                         "family_settings", "family_settings_entry", "family_setting_value", 
                         "split_boundaries", "literal_value_list", "alter_table_alter_index_action", 
                         "drop_table_stmt", "create_user_stmt", "alter_user_stmt", 
                         "create_group_stmt", "alter_group_stmt", "drop_role_stmt", 
                         "role_name", "user_option", "authentication_option", 
                         "password_option", "password_value", "hash_option", 
                         "login_option", "grant_permissions_stmt", "revoke_permissions_stmt", 
                         "permission_id", "permission_name", "permission_name_target", 
                         "create_resource_pool_stmt", "alter_resource_pool_stmt", 
                         "alter_resource_pool_action", "drop_resource_pool_stmt", 
                         "create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
                         "alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
                         "create_replication_stmt", "replication_target", 
                         "replication_settings", "replication_settings_entry", 
                         "alter_replication_stmt", "alter_replication_action", 
                         "alter_replication_set_setting", "drop_replication_stmt", 
                         "lambda_or_parameter", "create_transfer_stmt", 
                         "transfer_settings", "transfer_settings_entry", 
                         "alter_transfer_stmt", "alter_transfer_action", 
                         "alter_transfer_set_setting", "alter_transfer_set_using", 
                         "drop_transfer_stmt", "action_or_subquery_args", 
                         "define_action_or_subquery_stmt", "define_action_or_subquery_body", 
                         "if_stmt", "for_stmt", "table_ref", "table_key", 
                         "table_arg", "table_hints", "table_hint", "object_ref", 
                         "simple_table_ref_core", "simple_table_ref", "into_simple_table_ref", 
                         "delete_stmt", "update_stmt", "set_clause_choice", 
                         "set_clause_list", "set_clause", "set_target", 
                         "multiple_column_assignment", "set_target_list", 
                         "create_topic_stmt", "create_topic_entries", "create_topic_entry", 
                         "with_topic_settings", "alter_topic_stmt", "alter_topic_action", 
                         "alter_topic_add_consumer", "topic_create_consumer_entry", 
                         "alter_topic_alter_consumer", "alter_topic_alter_consumer_entry", 
                         "alter_topic_drop_consumer", "topic_alter_consumer_set", 
                         "topic_alter_consumer_reset", "alter_topic_set_settings", 
                         "alter_topic_reset_settings", "drop_topic_stmt", 
                         "topic_settings", "topic_settings_entry", "topic_setting_value", 
                         "topic_consumer_with_settings", "topic_consumer_settings", 
                         "topic_consumer_settings_entry", "topic_consumer_setting_value", 
                         "topic_ref", "topic_consumer_ref", "null_treatment", 
                         "filter_clause", "window_name_or_specification", 
                         "window_name", "window_clause", "window_definition_list", 
                         "window_definition", "new_window_name", "window_specification", 
                         "window_specification_details", "existing_window_name", 
                         "window_partition_clause", "window_order_clause", 
                         "window_frame_clause", "window_frame_units", "window_frame_extent", 
                         "window_frame_between", "window_frame_bound", "window_frame_exclusion", 
                         "use_stmt", "subselect_stmt", "named_nodes_stmt", 
                         "commit_stmt", "rollback_stmt", "analyze_table", 
                         "analyze_table_list", "analyze_stmt", "alter_sequence_stmt", 
                         "alter_sequence_action", "show_create_table_stmt", 
                         "identifier", "id", "id_schema", "id_expr", "id_expr_in", 
                         "id_window", "id_table", "id_without", "id_hint", 
                         "id_as_compat", "an_id", "an_id_or_type", "an_id_schema", 
                         "an_id_expr", "an_id_expr_in", "an_id_window", 
                         "an_id_table", "an_id_without", "an_id_hint", "an_id_pure", 
                         "an_id_as_compat", "view_name", "opt_id_prefix", 
                         "cluster_expr", "id_or_type", "opt_id_prefix_or_type", 
                         "id_or_at", "id_table_or_type", "id_table_or_at", 
                         "keyword", "keyword_expr_uncompat", "keyword_table_uncompat", 
                         "keyword_select_uncompat", "keyword_alter_uncompat", 
                         "keyword_in_uncompat", "keyword_window_uncompat", 
                         "keyword_hint_uncompat", "keyword_as_compat", "keyword_compat", 
                         "type_id", "bool_value", "real", "integer" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = YQLParser.ruleNames;
        this.literalNames = YQLParser.literalNames;
        this.symbolicNames = YQLParser.symbolicNames;
    }



	sql_query() {
	    let localctx = new Sql_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, YQLParser.RULE_sql_query);
	    try {
	        this.state = 899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 894;
	            this.sql_stmt_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 895;
	            this.match(YQLParser.PRAGMA);
	            this.state = 896;
	            this.match(YQLParser.ANSI);
	            this.state = 897;
	            this.match(YQLParser.DIGITS);
	            this.state = 898;
	            this.ansi_sql_stmt_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, YQLParser.RULE_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 901;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 907;
	        this.sql_stmt();
	        this.state = 916;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 909; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 908;
	                    this.match(YQLParser.SEMICOLON);
	                    this.state = 911; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===22);
	                this.state = 913;
	                this.sql_stmt(); 
	            }
	            this.state = 918;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 922;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 919;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 924;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 925;
	        this.match(YQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ansi_sql_stmt_list() {
	    let localctx = new Ansi_sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, YQLParser.RULE_ansi_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 927;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 933;
	        this.match(YQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_body() {
	    let localctx = new Lambda_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, YQLParser.RULE_lambda_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 935;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30 || _la===157) {
	            this.state = 941;
	            this.lambda_stmt();
	            this.state = 943; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 942;
	                this.match(YQLParser.SEMICOLON);
	                this.state = 945; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===22);
	            this.state = 951;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 952;
	        this.match(YQLParser.RETURN);
	        this.state = 953;
	        this.expr();
	        this.state = 957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 954;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_stmt() {
	    let localctx = new Lambda_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, YQLParser.RULE_lambda_stmt);
	    try {
	        this.state = 962;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 960;
	            this.named_nodes_stmt();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 961;
	            this.import_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, YQLParser.RULE_sql_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 964;
	            this.match(YQLParser.EXPLAIN);
	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===234) {
	                this.state = 965;
	                this.match(YQLParser.QUERY);
	                this.state = 966;
	                this.match(YQLParser.PLAN);
	            }

	        }

	        this.state = 971;
	        this.sql_stmt_core();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_core() {
	    let localctx = new Sql_stmt_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, YQLParser.RULE_sql_stmt_core);
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 973;
	            this.pragma_stmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 974;
	            this.select_stmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 975;
	            this.named_nodes_stmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 976;
	            this.create_table_stmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 977;
	            this.drop_table_stmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 978;
	            this.use_stmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 979;
	            this.into_table_stmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 980;
	            this.commit_stmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 981;
	            this.update_stmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 982;
	            this.delete_stmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 983;
	            this.rollback_stmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 984;
	            this.declare_stmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 985;
	            this.import_stmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 986;
	            this.export_stmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 987;
	            this.alter_table_stmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 988;
	            this.alter_external_table_stmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 989;
	            this.do_stmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 990;
	            this.define_action_or_subquery_stmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 991;
	            this.if_stmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 992;
	            this.for_stmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 993;
	            this.values_stmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 994;
	            this.create_user_stmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 995;
	            this.alter_user_stmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 996;
	            this.create_group_stmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 997;
	            this.alter_group_stmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 998;
	            this.drop_role_stmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 999;
	            this.create_object_stmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1000;
	            this.alter_object_stmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1001;
	            this.drop_object_stmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1002;
	            this.create_external_data_source_stmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1003;
	            this.alter_external_data_source_stmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1004;
	            this.drop_external_data_source_stmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1005;
	            this.create_replication_stmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1006;
	            this.drop_replication_stmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1007;
	            this.create_topic_stmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1008;
	            this.alter_topic_stmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1009;
	            this.drop_topic_stmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1010;
	            this.grant_permissions_stmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1011;
	            this.revoke_permissions_stmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1012;
	            this.alter_table_store_stmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1013;
	            this.upsert_object_stmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1014;
	            this.create_view_stmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1015;
	            this.drop_view_stmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1016;
	            this.alter_replication_stmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1017;
	            this.create_resource_pool_stmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1018;
	            this.alter_resource_pool_stmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1019;
	            this.drop_resource_pool_stmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1020;
	            this.create_backup_collection_stmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1021;
	            this.alter_backup_collection_stmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1022;
	            this.drop_backup_collection_stmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1023;
	            this.analyze_stmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1024;
	            this.create_resource_pool_classifier_stmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1025;
	            this.alter_resource_pool_classifier_stmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1026;
	            this.drop_resource_pool_classifier_stmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1027;
	            this.backup_stmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 1028;
	            this.restore_stmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 1029;
	            this.alter_sequence_stmt();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 1030;
	            this.create_transfer_stmt();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 1031;
	            this.alter_transfer_stmt();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 1032;
	            this.drop_transfer_stmt();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 1033;
	            this.alter_database_stmt();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 1034;
	            this.show_create_table_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, YQLParser.RULE_expr);
	    try {
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1037;
	            this.or_subexpr();
	            this.state = 1042;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1038;
	                    this.match(YQLParser.OR);
	                    this.state = 1039;
	                    this.or_subexpr(); 
	                }
	                this.state = 1044;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1045;
	            this.type_name_composite();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_subexpr() {
	    let localctx = new Or_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, YQLParser.RULE_or_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1048;
	        this.and_subexpr();
	        this.state = 1053;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1049;
	                this.match(YQLParser.AND);
	                this.state = 1050;
	                this.and_subexpr(); 
	            }
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_subexpr() {
	    let localctx = new And_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, YQLParser.RULE_and_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.xor_subexpr();
	        this.state = 1061;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1057;
	                this.match(YQLParser.XOR);
	                this.state = 1058;
	                this.xor_subexpr(); 
	            }
	            this.state = 1063;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xor_subexpr() {
	    let localctx = new Xor_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, YQLParser.RULE_xor_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1064;
	        this.eq_subexpr();
	        this.state = 1066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 1065;
	            this.cond_expr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinct_from_op() {
	    let localctx = new Distinct_from_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, YQLParser.RULE_distinct_from_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1068;
	        this.match(YQLParser.IS);
	        this.state = 1070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===199) {
	            this.state = 1069;
	            this.match(YQLParser.NOT);
	        }

	        this.state = 1072;
	        this.match(YQLParser.DISTINCT);
	        this.state = 1073;
	        this.match(YQLParser.FROM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cond_expr() {
	    let localctx = new Cond_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, YQLParser.RULE_cond_expr);
	    var _la = 0;
	    try {
	        this.state = 1126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1075;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1078;
	            this.match_op();
	            this.state = 1079;
	            this.eq_subexpr();
	            this.state = 1082;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            if(la_===1) {
	                this.state = 1080;
	                this.match(YQLParser.ESCAPE);
	                this.state = 1081;
	                this.eq_subexpr();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1084;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1087;
	            this.match(YQLParser.IN);
	            this.state = 1089;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 1088;
	                this.match(YQLParser.COMPACT);

	            }
	            this.state = 1091;
	            this.in_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1101;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1092;
	                this.match(YQLParser.ISNULL);
	                break;

	            case 2:
	                this.state = 1093;
	                this.match(YQLParser.NOTNULL);
	                break;

	            case 3:
	                this.state = 1094;
	                this.match(YQLParser.IS);
	                this.state = 1095;
	                this.match(YQLParser.NULL);
	                break;

	            case 4:
	                this.state = 1097;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===171) {
	                    this.state = 1096;
	                    this.match(YQLParser.IS);
	                }

	                this.state = 1099;
	                this.match(YQLParser.NOT);
	                this.state = 1100;
	                this.match(YQLParser.NULL);
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1103;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1106;
	            this.match(YQLParser.BETWEEN);
	            this.state = 1108;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 1107;
	                _la = this._input.LA(1);
	                if(!(_la===52 || _la===284)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1110;
	            this.eq_subexpr();
	            this.state = 1111;
	            this.match(YQLParser.AND);
	            this.state = 1112;
	            this.eq_subexpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1122; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1119;
	            		this._errHandler.sync(this);
	            		switch(this._input.LA(1)) {
	            		case 1:
	            		    this.state = 1114;
	            		    this.match(YQLParser.EQUALS);
	            		    break;
	            		case 2:
	            		    this.state = 1115;
	            		    this.match(YQLParser.EQUALS2);
	            		    break;
	            		case 3:
	            		    this.state = 1116;
	            		    this.match(YQLParser.NOT_EQUALS);
	            		    break;
	            		case 4:
	            		    this.state = 1117;
	            		    this.match(YQLParser.NOT_EQUALS2);
	            		    break;
	            		case 171:
	            		    this.state = 1118;
	            		    this.distinct_from_op();
	            		    break;
	            		default:
	            		    throw new antlr4.error.NoViableAltException(this);
	            		}
	            		this.state = 1121;
	            		this.eq_subexpr();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1124; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_op() {
	    let localctx = new Match_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, YQLParser.RULE_match_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1128;
	        _la = this._input.LA(1);
	        if(!(_la===144 || _la===155 || _la===181 || _la===187 || _la===240 || _la===260)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eq_subexpr() {
	    let localctx = new Eq_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, YQLParser.RULE_eq_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1130;
	        this.neq_subexpr();
	        this.state = 1135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 480) !== 0)) {
	            this.state = 1131;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 480) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1132;
	            this.neq_subexpr();
	            this.state = 1137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_right() {
	    let localctx = new Shift_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, YQLParser.RULE_shift_right);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        this.match(YQLParser.GREATER);
	        this.state = 1139;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rot_right() {
	    let localctx = new Rot_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, YQLParser.RULE_rot_right);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1141;
	        this.match(YQLParser.GREATER);
	        this.state = 1142;
	        this.match(YQLParser.GREATER);
	        this.state = 1143;
	        this.match(YQLParser.PIPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_question() {
	    let localctx = new Double_questionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, YQLParser.RULE_double_question);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(YQLParser.QUESTION);
	        this.state = 1146;
	        this.match(YQLParser.QUESTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	neq_subexpr() {
	    let localctx = new Neq_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, YQLParser.RULE_neq_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1148;
	        this.bit_subexpr();
	        this.state = 1161;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1156;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1149;
	                    this.match(YQLParser.SHIFT_LEFT);
	                    break;

	                case 2:
	                    this.state = 1150;
	                    this.shift_right();
	                    break;

	                case 3:
	                    this.state = 1151;
	                    this.match(YQLParser.ROT_LEFT);
	                    break;

	                case 4:
	                    this.state = 1152;
	                    this.rot_right();
	                    break;

	                case 5:
	                    this.state = 1153;
	                    this.match(YQLParser.AMPERSAND);
	                    break;

	                case 6:
	                    this.state = 1154;
	                    this.match(YQLParser.PIPE);
	                    break;

	                case 7:
	                    this.state = 1155;
	                    this.match(YQLParser.CARET);
	                    break;

	                }
	                this.state = 1158;
	                this.bit_subexpr(); 
	            }
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	        this.state = 1172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 1164;
	            this.double_question();
	            this.state = 1165;
	            this.neq_subexpr();

	        } else if(la_===2) {
	            this.state = 1168; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1167;
	                this.match(YQLParser.QUESTION);
	                this.state = 1170; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===27);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bit_subexpr() {
	    let localctx = new Bit_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, YQLParser.RULE_bit_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1174;
	        this.add_subexpr();
	        this.state = 1179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16 || _la===17) {
	            this.state = 1175;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===17)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1176;
	            this.add_subexpr();
	            this.state = 1181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_subexpr() {
	    let localctx = new Add_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, YQLParser.RULE_add_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1182;
	        this.mul_subexpr();
	        this.state = 1187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3670016) !== 0)) {
	            this.state = 1183;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3670016) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1184;
	            this.mul_subexpr();
	            this.state = 1189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mul_subexpr() {
	    let localctx = new Mul_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, YQLParser.RULE_mul_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this.con_subexpr();
	        this.state = 1195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===13) {
	            this.state = 1191;
	            this.match(YQLParser.DOUBLE_PIPE);
	            this.state = 1192;
	            this.con_subexpr();
	            this.state = 1197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	con_subexpr() {
	    let localctx = new Con_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, YQLParser.RULE_con_subexpr);
	    try {
	        this.state = 1202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1198;
	            this.unary_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1199;
	            this.unary_op();
	            this.state = 1200;
	            this.unary_subexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_op() {
	    let localctx = new Unary_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, YQLParser.RULE_unary_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1204;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 458752) !== 0) || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_subexpr_suffix() {
	    let localctx = new Unary_subexpr_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, YQLParser.RULE_unary_subexpr_suffix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) === 0 && ((1 << (_la - 23)) & 16389) !== 0)) {
	            this.state = 1214;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 37:
	                this.state = 1206;
	                this.key_expr();
	                break;
	            case 25:
	                this.state = 1207;
	                this.invoke_expr();
	                break;
	            case 23:
	                this.state = 1208;
	                this.match(YQLParser.DOT);
	                this.state = 1212;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 30:
	                    this.state = 1209;
	                    this.bind_parameter();
	                    break;
	                case 330:
	                    this.state = 1210;
	                    this.match(YQLParser.DIGITS);
	                    break;
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 142:
	                case 143:
	                case 144:
	                case 145:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 152:
	                case 153:
	                case 154:
	                case 155:
	                case 156:
	                case 157:
	                case 158:
	                case 159:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 164:
	                case 165:
	                case 166:
	                case 167:
	                case 168:
	                case 169:
	                case 170:
	                case 171:
	                case 172:
	                case 173:
	                case 174:
	                case 175:
	                case 176:
	                case 177:
	                case 178:
	                case 179:
	                case 180:
	                case 181:
	                case 182:
	                case 183:
	                case 184:
	                case 185:
	                case 186:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 193:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 200:
	                case 201:
	                case 202:
	                case 203:
	                case 204:
	                case 205:
	                case 206:
	                case 207:
	                case 208:
	                case 209:
	                case 210:
	                case 211:
	                case 212:
	                case 213:
	                case 214:
	                case 215:
	                case 216:
	                case 217:
	                case 218:
	                case 219:
	                case 220:
	                case 221:
	                case 222:
	                case 223:
	                case 224:
	                case 225:
	                case 226:
	                case 227:
	                case 228:
	                case 229:
	                case 230:
	                case 231:
	                case 232:
	                case 233:
	                case 234:
	                case 235:
	                case 236:
	                case 237:
	                case 238:
	                case 239:
	                case 240:
	                case 241:
	                case 242:
	                case 243:
	                case 244:
	                case 246:
	                case 247:
	                case 248:
	                case 249:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 255:
	                case 256:
	                case 257:
	                case 258:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 264:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 271:
	                case 272:
	                case 273:
	                case 274:
	                case 275:
	                case 276:
	                case 277:
	                case 278:
	                case 279:
	                case 280:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 285:
	                case 286:
	                case 287:
	                case 288:
	                case 289:
	                case 290:
	                case 291:
	                case 292:
	                case 293:
	                case 294:
	                case 295:
	                case 296:
	                case 297:
	                case 298:
	                case 299:
	                case 300:
	                case 302:
	                case 303:
	                case 304:
	                case 305:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 315:
	                case 316:
	                case 317:
	                case 318:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 323:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                case 328:
	                case 329:
	                    this.state = 1211;
	                    this.an_id_or_type();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 1221;
	            this.match(YQLParser.COLLATE);
	            this.state = 1222;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_casual_subexpr() {
	    let localctx = new Unary_casual_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, YQLParser.RULE_unary_casual_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1225;
	            this.id_expr();
	            break;

	        case 2:
	            this.state = 1226;
	            this.atom_expr();
	            break;

	        }
	        this.state = 1229;
	        this.unary_subexpr_suffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_unary_casual_subexpr() {
	    let localctx = new In_unary_casual_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, YQLParser.RULE_in_unary_casual_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1231;
	            this.id_expr_in();
	            break;

	        case 2:
	            this.state = 1232;
	            this.in_atom_expr();
	            break;

	        }
	        this.state = 1235;
	        this.unary_subexpr_suffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_subexpr() {
	    let localctx = new Unary_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, YQLParser.RULE_unary_subexpr);
	    try {
	        this.state = 1239;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1237;
	            this.unary_casual_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1238;
	            this.json_api_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_unary_subexpr() {
	    let localctx = new In_unary_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, YQLParser.RULE_in_unary_subexpr);
	    try {
	        this.state = 1243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1241;
	            this.in_unary_casual_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1242;
	            this.json_api_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_literal() {
	    let localctx = new List_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, YQLParser.RULE_list_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.match(YQLParser.LBRACE_SQUARE);
	        this.state = 1247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	            this.state = 1246;
	            this.expr_list();
	        }

	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1249;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1252;
	        this.match(YQLParser.RBRACE_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_dict_list() {
	    let localctx = new Expr_dict_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, YQLParser.RULE_expr_dict_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.expr();
	        this.state = 1257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28) {
	            this.state = 1255;
	            this.match(YQLParser.COLON);
	            this.state = 1256;
	            this.expr();
	        }

	        this.state = 1267;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1259;
	                this.match(YQLParser.COMMA);
	                this.state = 1260;
	                this.expr();
	                this.state = 1263;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===28) {
	                    this.state = 1261;
	                    this.match(YQLParser.COLON);
	                    this.state = 1262;
	                    this.expr();
	                }
	         
	            }
	            this.state = 1269;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_literal() {
	    let localctx = new Dict_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, YQLParser.RULE_dict_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(YQLParser.LBRACE_CURLY);
	        this.state = 1272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	            this.state = 1271;
	            this.expr_dict_list();
	        }

	        this.state = 1275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1274;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1277;
	        this.match(YQLParser.RBRACE_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_struct_list() {
	    let localctx = new Expr_struct_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, YQLParser.RULE_expr_struct_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.expr();
	        this.state = 1280;
	        this.match(YQLParser.COLON);
	        this.state = 1281;
	        this.expr();
	        this.state = 1289;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1282;
	                this.match(YQLParser.COMMA);
	                this.state = 1283;
	                this.expr();
	                this.state = 1284;
	                this.match(YQLParser.COLON);
	                this.state = 1285;
	                this.expr(); 
	            }
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_literal() {
	    let localctx = new Struct_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, YQLParser.RULE_struct_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.match(YQLParser.STRUCT_OPEN);
	        this.state = 1294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	            this.state = 1293;
	            this.expr_struct_list();
	        }

	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1296;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1299;
	        this.match(YQLParser.STRUCT_CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom_expr() {
	    let localctx = new Atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, YQLParser.RULE_atom_expr);
	    try {
	        this.state = 1318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1301;
	            this.literal_value();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.bind_parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1303;
	            this.lambda();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1304;
	            this.cast_expr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1305;
	            this.exists_expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1306;
	            this.case_expr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1307;
	            this.an_id_or_type();
	            this.state = 1308;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1311;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 328:
	            case 329:
	                this.state = 1309;
	                this.id_or_type();
	                break;
	            case 327:
	                this.state = 1310;
	                this.match(YQLParser.STRING_VALUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1313;
	            this.value_constructor();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1314;
	            this.bitcast_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1315;
	            this.list_literal();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1316;
	            this.dict_literal();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1317;
	            this.struct_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_atom_expr() {
	    let localctx = new In_atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, YQLParser.RULE_in_atom_expr);
	    try {
	        this.state = 1340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1320;
	            this.literal_value();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1321;
	            this.bind_parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1322;
	            this.lambda();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1323;
	            this.cast_expr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1324;
	            this.case_expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1325;
	            this.an_id_or_type();
	            this.state = 1326;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1329;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 328:
	            case 329:
	                this.state = 1327;
	                this.id_or_type();
	                break;
	            case 327:
	                this.state = 1328;
	                this.match(YQLParser.STRING_VALUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1331;
	            this.match(YQLParser.LPAREN);
	            this.state = 1332;
	            this.select_stmt();
	            this.state = 1333;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1335;
	            this.value_constructor();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1336;
	            this.bitcast_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1337;
	            this.list_literal();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1338;
	            this.dict_literal();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1339;
	            this.struct_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast_expr() {
	    let localctx = new Cast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, YQLParser.RULE_cast_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1342;
	        this.match(YQLParser.CAST);
	        this.state = 1343;
	        this.match(YQLParser.LPAREN);
	        this.state = 1344;
	        this.expr();
	        this.state = 1345;
	        this.match(YQLParser.AS);
	        this.state = 1346;
	        this.type_name_or_bind();
	        this.state = 1347;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitcast_expr() {
	    let localctx = new Bitcast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, YQLParser.RULE_bitcast_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1349;
	        this.match(YQLParser.BITCAST);
	        this.state = 1350;
	        this.match(YQLParser.LPAREN);
	        this.state = 1351;
	        this.expr();
	        this.state = 1352;
	        this.match(YQLParser.AS);
	        this.state = 1353;
	        this.type_name_simple();
	        this.state = 1354;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exists_expr() {
	    let localctx = new Exists_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, YQLParser.RULE_exists_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.match(YQLParser.EXISTS);
	        this.state = 1357;
	        this.match(YQLParser.LPAREN);
	        this.state = 1360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 108:
	        case 141:
	        case 233:
	        case 238:
	        case 270:
	            this.state = 1358;
	            this.select_stmt();
	            break;
	        case 316:
	            this.state = 1359;
	            this.values_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1362;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_expr() {
	    let localctx = new Case_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, YQLParser.RULE_case_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1364;
	        this.match(YQLParser.CASE);
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 1365;
	            this.expr();

	        }
	        this.state = 1369; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1368;
	            this.when_expr();
	            this.state = 1371; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===320);
	        this.state = 1375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 1373;
	            this.match(YQLParser.ELSE);
	            this.state = 1374;
	            this.expr();
	        }

	        this.state = 1377;
	        this.match(YQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda() {
	    let localctx = new LambdaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, YQLParser.RULE_lambda);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.smart_parenthesis();
	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 1380;
	            this.match(YQLParser.ARROW);
	            this.state = 1389;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 25:
	                this.state = 1381;
	                this.match(YQLParser.LPAREN);
	                this.state = 1382;
	                this.expr();
	                this.state = 1383;
	                this.match(YQLParser.RPAREN);
	                break;
	            case 31:
	                this.state = 1385;
	                this.match(YQLParser.LBRACE_CURLY);
	                this.state = 1386;
	                this.lambda_body();
	                this.state = 1387;
	                this.match(YQLParser.RBRACE_CURLY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_expr() {
	    let localctx = new In_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, YQLParser.RULE_in_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this.in_unary_subexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_api_expr() {
	    let localctx = new Json_api_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, YQLParser.RULE_json_api_expr);
	    try {
	        this.state = 1398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 176:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1395;
	            this.json_value();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1396;
	            this.json_exists();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1397;
	            this.json_query();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonpath_spec() {
	    let localctx = new Jsonpath_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, YQLParser.RULE_jsonpath_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this.match(YQLParser.STRING_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variable_name() {
	    let localctx = new Json_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, YQLParser.RULE_json_variable_name);
	    try {
	        this.state = 1404;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1402;
	            this.id_expr();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1403;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variable() {
	    let localctx = new Json_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, YQLParser.RULE_json_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        this.expr();
	        this.state = 1407;
	        this.match(YQLParser.AS);
	        this.state = 1408;
	        this.json_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variables() {
	    let localctx = new Json_variablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, YQLParser.RULE_json_variables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this.json_variable();
	        this.state = 1415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1411;
	            this.match(YQLParser.COMMA);
	            this.state = 1412;
	            this.json_variable();
	            this.state = 1417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_common_args() {
	    let localctx = new Json_common_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, YQLParser.RULE_json_common_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1418;
	        this.expr();
	        this.state = 1419;
	        this.match(YQLParser.COMMA);
	        this.state = 1420;
	        this.jsonpath_spec();
	        this.state = 1423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===220) {
	            this.state = 1421;
	            this.match(YQLParser.PASSING);
	            this.state = 1422;
	            this.json_variables();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_case_handler() {
	    let localctx = new Json_case_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, YQLParser.RULE_json_case_handler);
	    try {
	        this.state = 1429;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 120:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1425;
	            this.match(YQLParser.ERROR);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1426;
	            this.match(YQLParser.NULL);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1427;
	            this.match(YQLParser.DEFAULT);
	            this.state = 1428;
	            this.expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_value() {
	    let localctx = new Json_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, YQLParser.RULE_json_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1431;
	        this.match(YQLParser.JSON_VALUE);
	        this.state = 1432;
	        this.match(YQLParser.LPAREN);
	        this.state = 1433;
	        this.json_common_args();
	        this.state = 1436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===256) {
	            this.state = 1434;
	            this.match(YQLParser.RETURNING);
	            this.state = 1435;
	            this.type_name_simple();
	        }

	        this.state = 1444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===97 || _la===120 || _la===201) {
	            this.state = 1438;
	            this.json_case_handler();
	            this.state = 1439;
	            this.match(YQLParser.ON);
	            this.state = 1440;
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===120)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1447;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_exists_handler() {
	    let localctx = new Json_exists_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, YQLParser.RULE_json_exists_handler);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        _la = this._input.LA(1);
	        if(!(_la===120 || _la===132 || _la===301 || _la===308)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1450;
	        this.match(YQLParser.ON);
	        this.state = 1451;
	        this.match(YQLParser.ERROR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_exists() {
	    let localctx = new Json_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, YQLParser.RULE_json_exists);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1453;
	        this.match(YQLParser.JSON_EXISTS);
	        this.state = 1454;
	        this.match(YQLParser.LPAREN);
	        this.state = 1455;
	        this.json_common_args();
	        this.state = 1457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===120 || _la===132 || _la===301 || _la===308) {
	            this.state = 1456;
	            this.json_exists_handler();
	        }

	        this.state = 1459;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query_wrapper() {
	    let localctx = new Json_query_wrapperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, YQLParser.RULE_json_query_wrapper);
	    var _la = 0;
	    try {
	        this.state = 1472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 324:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1461;
	            this.match(YQLParser.WITHOUT);
	            this.state = 1463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1462;
	                this.match(YQLParser.ARRAY);
	            }

	            break;
	        case 323:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1465;
	            this.match(YQLParser.WITH);
	            this.state = 1467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80 || _la===305) {
	                this.state = 1466;
	                _la = this._input.LA(1);
	                if(!(_la===80 || _la===305)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1469;
	                this.match(YQLParser.ARRAY);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query_handler() {
	    let localctx = new Json_query_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, YQLParser.RULE_json_query_handler);
	    try {
	        this.state = 1480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1474;
	            this.match(YQLParser.ERROR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1475;
	            this.match(YQLParser.NULL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1476;
	            this.match(YQLParser.EMPTY);
	            this.state = 1477;
	            this.match(YQLParser.ARRAY);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1478;
	            this.match(YQLParser.EMPTY);
	            this.state = 1479;
	            this.match(YQLParser.OBJECT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query() {
	    let localctx = new Json_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, YQLParser.RULE_json_query);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1482;
	        this.match(YQLParser.JSON_QUERY);
	        this.state = 1483;
	        this.match(YQLParser.LPAREN);
	        this.state = 1484;
	        this.json_common_args();
	        this.state = 1488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323 || _la===324) {
	            this.state = 1485;
	            this.json_query_wrapper();
	            this.state = 1486;
	            this.match(YQLParser.WRAPPER);
	        }

	        this.state = 1494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1490;
	            this.json_query_handler();
	            this.state = 1491;
	            this.match(YQLParser.ON);
	            this.state = 1492;
	            this.match(YQLParser.EMPTY);

	        }
	        this.state = 1500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114 || _la===120 || _la===201) {
	            this.state = 1496;
	            this.json_query_handler();
	            this.state = 1497;
	            this.match(YQLParser.ON);
	            this.state = 1498;
	            this.match(YQLParser.ERROR);
	        }

	        this.state = 1502;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	smart_parenthesis() {
	    let localctx = new Smart_parenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, YQLParser.RULE_smart_parenthesis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(YQLParser.LPAREN);
	        this.state = 1506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	            this.state = 1505;
	            this.named_expr_list();
	        }

	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1508;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1511;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list() {
	    let localctx = new Expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, YQLParser.RULE_expr_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513;
	        this.expr();
	        this.state = 1518;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1514;
	                this.match(YQLParser.COMMA);
	                this.state = 1515;
	                this.expr(); 
	            }
	            this.state = 1520;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_list() {
	    let localctx = new Pure_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, YQLParser.RULE_pure_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1521;
	        this.match(YQLParser.LPAREN);
	        this.state = 1522;
	        this.an_id();
	        this.state = 1527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1523;
	            this.match(YQLParser.COMMA);
	            this.state = 1524;
	            this.an_id();
	            this.state = 1529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1530;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_or_named() {
	    let localctx = new Pure_column_or_namedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, YQLParser.RULE_pure_column_or_named);
	    try {
	        this.state = 1534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1532;
	            this.bind_parameter();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1533;
	            this.an_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_or_named_list() {
	    let localctx = new Pure_column_or_named_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, YQLParser.RULE_pure_column_or_named_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1536;
	        this.match(YQLParser.LPAREN);
	        this.state = 1537;
	        this.pure_column_or_named();
	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1538;
	            this.match(YQLParser.COMMA);
	            this.state = 1539;
	            this.pure_column_or_named();
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1545;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, YQLParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.opt_id_prefix();
	        this.state = 1548;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	without_column_name() {
	    let localctx = new Without_column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, YQLParser.RULE_without_column_name);
	    try {
	        this.state = 1555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1550;
	            this.an_id();
	            this.state = 1551;
	            this.match(YQLParser.DOT);
	            this.state = 1552;
	            this.an_id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1554;
	            this.an_id_without();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_list() {
	    let localctx = new Column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, YQLParser.RULE_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1557;
	        this.column_name();
	        this.state = 1562;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1558;
	                this.match(YQLParser.COMMA);
	                this.state = 1559;
	                this.column_name(); 
	            }
	            this.state = 1564;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	        this.state = 1566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1565;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	without_column_list() {
	    let localctx = new Without_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, YQLParser.RULE_without_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1568;
	        this.without_column_name();
	        this.state = 1573;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1569;
	                this.match(YQLParser.COMMA);
	                this.state = 1570;
	                this.without_column_name(); 
	            }
	            this.state = 1575;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	        this.state = 1577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1576;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_expr() {
	    let localctx = new Named_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, YQLParser.RULE_named_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1579;
	        this.expr();
	        this.state = 1582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1580;
	            this.match(YQLParser.AS);
	            this.state = 1581;
	            this.an_id_or_type();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_expr_list() {
	    let localctx = new Named_expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, YQLParser.RULE_named_expr_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1584;
	        this.named_expr();
	        this.state = 1589;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1585;
	                this.match(YQLParser.COMMA);
	                this.state = 1586;
	                this.named_expr(); 
	            }
	            this.state = 1591;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invoke_expr() {
	    let localctx = new Invoke_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, YQLParser.RULE_invoke_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1592;
	        this.match(YQLParser.LPAREN);
	        this.state = 1599;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 14:
	        case 16:
	        case 17:
	        case 18:
	        case 25:
	        case 30:
	        case 31:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        	this.state = 1593;
	        	this.opt_set_quantifier();
	        	this.state = 1594;
	        	this.named_expr_list();
	        	this.state = 1596;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===24) {
	        	    this.state = 1595;
	        	    this.match(YQLParser.COMMA);
	        	}

	        	break;
	        case 19:
	        	this.state = 1598;
	        	this.match(YQLParser.ASTERISK);
	        	break;
	        case 26:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1601;
	        this.match(YQLParser.RPAREN);
	        this.state = 1602;
	        this.invoke_expr_tail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invoke_expr_tail() {
	    let localctx = new Invoke_expr_tailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, YQLParser.RULE_invoke_expr_tail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1604;
	            this.null_treatment();

	        } else if(la_===2) {
	            this.state = 1605;
	            this.filter_clause();

	        }
	        this.state = 1610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===216) {
	            this.state = 1608;
	            this.match(YQLParser.OVER);
	            this.state = 1609;
	            this.window_name_or_specification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_call_expr() {
	    let localctx = new Using_call_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, YQLParser.RULE_using_call_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1612;
	            this.an_id_or_type();
	            this.state = 1613;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1614;
	            this.an_id_or_type();
	            break;

	        case 2:
	            this.state = 1616;
	            this.an_id_expr();
	            break;

	        case 3:
	            this.state = 1617;
	            this.bind_parameter();
	            break;

	        case 4:
	            this.state = 1618;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 1619;
	            this.match(YQLParser.FUNCTION);
	            break;

	        }
	        this.state = 1622;
	        this.invoke_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_expr() {
	    let localctx = new Key_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, YQLParser.RULE_key_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1624;
	        this.match(YQLParser.LBRACE_SQUARE);
	        this.state = 1625;
	        this.expr();
	        this.state = 1626;
	        this.match(YQLParser.RBRACE_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_expr() {
	    let localctx = new When_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, YQLParser.RULE_when_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1628;
	        this.match(YQLParser.WHEN);
	        this.state = 1629;
	        this.expr();
	        this.state = 1630;
	        this.match(YQLParser.THEN);
	        this.state = 1631;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, YQLParser.RULE_literal_value);
	    try {
	        this.state = 1643;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1633;
	            this.integer();
	            break;
	        case 332:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1634;
	            this.real();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1635;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 333:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1636;
	            this.match(YQLParser.BLOB);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1637;
	            this.match(YQLParser.NULL);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1638;
	            this.match(YQLParser.CURRENT_TIME);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1639;
	            this.match(YQLParser.CURRENT_DATE);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1640;
	            this.match(YQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 132:
	        case 301:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1641;
	            this.bool_value();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1642;
	            this.match(YQLParser.EMPTY_ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_parameter() {
	    let localctx = new Bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, YQLParser.RULE_bind_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1645;
	        this.match(YQLParser.DOLLAR);
	        this.state = 1649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.state = 1646;
	            this.an_id_or_type();
	            break;
	        case 301:
	            this.state = 1647;
	            this.match(YQLParser.TRUE);
	            break;
	        case 132:
	            this.state = 1648;
	            this.match(YQLParser.FALSE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_bind_parameter() {
	    let localctx = new Opt_bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, YQLParser.RULE_opt_bind_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.bind_parameter();
	        this.state = 1653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 1652;
	            this.match(YQLParser.QUESTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_parameter_list() {
	    let localctx = new Bind_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, YQLParser.RULE_bind_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1655;
	        this.bind_parameter();
	        this.state = 1660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1656;
	            this.match(YQLParser.COMMA);
	            this.state = 1657;
	            this.bind_parameter();
	            this.state = 1662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_bind_parameter() {
	    let localctx = new Named_bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, YQLParser.RULE_named_bind_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this.bind_parameter();
	        this.state = 1666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1664;
	            this.match(YQLParser.AS);
	            this.state = 1665;
	            this.bind_parameter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_bind_parameter_list() {
	    let localctx = new Named_bind_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, YQLParser.RULE_named_bind_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1668;
	        this.named_bind_parameter();
	        this.state = 1673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1669;
	            this.match(YQLParser.COMMA);
	            this.state = 1670;
	            this.named_bind_parameter();
	            this.state = 1675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, YQLParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16 || _la===17) {
	            this.state = 1676;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===17)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1681;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 330:
	        case 331:
	            this.state = 1679;
	            this.integer();
	            break;
	        case 332:
	            this.state = 1680;
	            this.real();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_simple() {
	    let localctx = new Type_name_simpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, YQLParser.RULE_type_name_simple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this.an_id_pure();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer_or_bind() {
	    let localctx = new Integer_or_bindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, YQLParser.RULE_integer_or_bind);
	    try {
	        this.state = 1687;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1685;
	            this.integer();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1686;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tag() {
	    let localctx = new Type_name_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, YQLParser.RULE_type_name_tag);
	    try {
	        this.state = 1692;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1689;
	            this.id();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1690;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1691;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_arg() {
	    let localctx = new Struct_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, YQLParser.RULE_struct_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.type_name_tag();
	        this.state = 1695;
	        this.match(YQLParser.COLON);
	        this.state = 1696;
	        this.type_name_or_bind();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_arg_positional() {
	    let localctx = new Struct_arg_positionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, YQLParser.RULE_struct_arg_positional);
	    var _la = 0;
	    try {
	        this.state = 1710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1698;
	            this.type_name_tag();
	            this.state = 1699;
	            this.type_name_or_bind();
	            this.state = 1704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199 || _la===201) {
	                this.state = 1701;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===199) {
	                    this.state = 1700;
	                    this.match(YQLParser.NOT);
	                }

	                this.state = 1703;
	                this.match(YQLParser.NULL);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1706;
	            this.type_name_or_bind();
	            this.state = 1707;
	            this.match(YQLParser.AS);
	            this.state = 1708;
	            this.type_name_tag();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_arg() {
	    let localctx = new Variant_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, YQLParser.RULE_variant_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 1712;
	            this.type_name_tag();
	            this.state = 1713;
	            this.match(YQLParser.COLON);

	        }
	        this.state = 1717;
	        this.type_name_or_bind();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callable_arg() {
	    let localctx = new Callable_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, YQLParser.RULE_callable_arg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.variant_arg();
	        this.state = 1723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 1720;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 1721;
	            this.match(YQLParser.AUTOMAP);
	            this.state = 1722;
	            this.match(YQLParser.RBRACE_CURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callable_arg_list() {
	    let localctx = new Callable_arg_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, YQLParser.RULE_callable_arg_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1725;
	        this.callable_arg();
	        this.state = 1730;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1726;
	                this.match(YQLParser.COMMA);
	                this.state = 1727;
	                this.callable_arg(); 
	            }
	            this.state = 1732;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_decimal() {
	    let localctx = new Type_name_decimalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, YQLParser.RULE_type_name_decimal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1733;
	        this.match(YQLParser.DECIMAL);
	        this.state = 1734;
	        this.match(YQLParser.LPAREN);
	        this.state = 1735;
	        this.integer_or_bind();
	        this.state = 1736;
	        this.match(YQLParser.COMMA);
	        this.state = 1737;
	        this.integer_or_bind();
	        this.state = 1738;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_optional() {
	    let localctx = new Type_name_optionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, YQLParser.RULE_type_name_optional);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1740;
	        this.match(YQLParser.OPTIONAL);
	        this.state = 1741;
	        this.match(YQLParser.LESS);
	        this.state = 1742;
	        this.type_name_or_bind();
	        this.state = 1743;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tuple() {
	    let localctx = new Type_name_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, YQLParser.RULE_type_name_tuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        this.match(YQLParser.TUPLE);
	        this.state = 1762;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1746;
	            this.match(YQLParser.LESS);
	            this.state = 1758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30 || _la===68 || _la===95 || _la===105 || _la===118 || _la===137 || _la===183 || _la===211 || ((((_la - 249)) & ~0x1f) === 0 && ((1 << (_la - 249)) & 3229614081) !== 0) || ((((_la - 291)) & ~0x1f) === 0 && ((1 << (_la - 291)) & 67110913) !== 0) || ((((_la - 327)) & ~0x1f) === 0 && ((1 << (_la - 327)) & 7) !== 0)) {
	                this.state = 1747;
	                this.type_name_or_bind();
	                this.state = 1752;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1748;
	                        this.match(YQLParser.COMMA);
	                        this.state = 1749;
	                        this.type_name_or_bind(); 
	                    }
	                    this.state = 1754;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
	                }

	                this.state = 1756;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 1755;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 1760;
	            this.match(YQLParser.GREATER);
	            break;
	        case 4:
	            this.state = 1761;
	            this.match(YQLParser.NOT_EQUALS2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_struct() {
	    let localctx = new Type_name_structContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, YQLParser.RULE_type_name_struct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.match(YQLParser.STRUCT);
	        this.state = 1781;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1765;
	            this.match(YQLParser.LESS);
	            this.state = 1777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967231) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4278188031) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294965183) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4261412863) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4292870143) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4152360959) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4227596287) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 2147385311) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 4095) !== 0)) {
	                this.state = 1766;
	                this.struct_arg();
	                this.state = 1771;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1767;
	                        this.match(YQLParser.COMMA);
	                        this.state = 1768;
	                        this.struct_arg(); 
	                    }
	                    this.state = 1773;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	                }

	                this.state = 1775;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 1774;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 1779;
	            this.match(YQLParser.GREATER);
	            break;
	        case 4:
	            this.state = 1780;
	            this.match(YQLParser.NOT_EQUALS2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_variant() {
	    let localctx = new Type_name_variantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, YQLParser.RULE_type_name_variant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1783;
	        this.match(YQLParser.VARIANT);
	        this.state = 1784;
	        this.match(YQLParser.LESS);
	        this.state = 1785;
	        this.variant_arg();
	        this.state = 1790;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1786;
	                this.match(YQLParser.COMMA);
	                this.state = 1787;
	                this.variant_arg(); 
	            }
	            this.state = 1792;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
	        }

	        this.state = 1794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1793;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1796;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_list() {
	    let localctx = new Type_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, YQLParser.RULE_type_name_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1798;
	        this.match(YQLParser.LIST);
	        this.state = 1799;
	        this.match(YQLParser.LESS);
	        this.state = 1800;
	        this.type_name_or_bind();
	        this.state = 1801;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_stream() {
	    let localctx = new Type_name_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, YQLParser.RULE_type_name_stream);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1803;
	        this.match(YQLParser.STREAM);
	        this.state = 1804;
	        this.match(YQLParser.LESS);
	        this.state = 1805;
	        this.type_name_or_bind();
	        this.state = 1806;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_flow() {
	    let localctx = new Type_name_flowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, YQLParser.RULE_type_name_flow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        this.match(YQLParser.FLOW);
	        this.state = 1809;
	        this.match(YQLParser.LESS);
	        this.state = 1810;
	        this.type_name_or_bind();
	        this.state = 1811;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_dict() {
	    let localctx = new Type_name_dictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, YQLParser.RULE_type_name_dict);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        this.match(YQLParser.DICT);
	        this.state = 1814;
	        this.match(YQLParser.LESS);
	        this.state = 1815;
	        this.type_name_or_bind();
	        this.state = 1816;
	        this.match(YQLParser.COMMA);
	        this.state = 1817;
	        this.type_name_or_bind();
	        this.state = 1818;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_set() {
	    let localctx = new Type_name_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, YQLParser.RULE_type_name_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1820;
	        this.match(YQLParser.SET);
	        this.state = 1821;
	        this.match(YQLParser.LESS);
	        this.state = 1822;
	        this.type_name_or_bind();
	        this.state = 1823;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_enum() {
	    let localctx = new Type_name_enumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, YQLParser.RULE_type_name_enum);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1825;
	        this.match(YQLParser.ENUM);
	        this.state = 1826;
	        this.match(YQLParser.LESS);
	        this.state = 1827;
	        this.type_name_tag();
	        this.state = 1832;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1828;
	                this.match(YQLParser.COMMA);
	                this.state = 1829;
	                this.type_name_tag(); 
	            }
	            this.state = 1834;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	        this.state = 1836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1835;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1838;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_resource() {
	    let localctx = new Type_name_resourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, YQLParser.RULE_type_name_resource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1840;
	        this.match(YQLParser.RESOURCE);
	        this.state = 1841;
	        this.match(YQLParser.LESS);
	        this.state = 1842;
	        this.type_name_tag();
	        this.state = 1843;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tagged() {
	    let localctx = new Type_name_taggedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, YQLParser.RULE_type_name_tagged);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1845;
	        this.match(YQLParser.TAGGED);
	        this.state = 1846;
	        this.match(YQLParser.LESS);
	        this.state = 1847;
	        this.type_name_or_bind();
	        this.state = 1848;
	        this.match(YQLParser.COMMA);
	        this.state = 1849;
	        this.type_name_tag();
	        this.state = 1850;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_callable() {
	    let localctx = new Type_name_callableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, YQLParser.RULE_type_name_callable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1852;
	        this.match(YQLParser.CALLABLE);
	        this.state = 1853;
	        this.match(YQLParser.LESS);
	        this.state = 1854;
	        this.match(YQLParser.LPAREN);
	        this.state = 1856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967295) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4294967295) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294967231) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4294967295) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4294967295) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4286578687) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4294967295) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 4294934527) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 4095) !== 0)) {
	            this.state = 1855;
	            this.callable_arg_list();
	        }

	        this.state = 1859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1858;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37) {
	            this.state = 1861;
	            this.match(YQLParser.LBRACE_SQUARE);
	            this.state = 1862;
	            this.callable_arg_list();
	            this.state = 1863;
	            this.match(YQLParser.RBRACE_SQUARE);
	        }

	        this.state = 1867;
	        this.match(YQLParser.RPAREN);
	        this.state = 1868;
	        this.match(YQLParser.ARROW);
	        this.state = 1869;
	        this.type_name_or_bind();
	        this.state = 1870;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_composite() {
	    let localctx = new Type_name_compositeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, YQLParser.RULE_type_name_composite);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 211:
	            this.state = 1872;
	            this.type_name_optional();
	            break;
	        case 302:
	            this.state = 1873;
	            this.type_name_tuple();
	            break;
	        case 280:
	            this.state = 1874;
	            this.type_name_struct();
	            break;
	        case 317:
	            this.state = 1875;
	            this.type_name_variant();
	            break;
	        case 183:
	            this.state = 1876;
	            this.type_name_list();
	            break;
	        case 279:
	            this.state = 1877;
	            this.type_name_stream();
	            break;
	        case 137:
	            this.state = 1878;
	            this.type_name_flow();
	            break;
	        case 105:
	            this.state = 1879;
	            this.type_name_dict();
	            break;
	        case 272:
	            this.state = 1880;
	            this.type_name_set();
	            break;
	        case 118:
	            this.state = 1881;
	            this.type_name_enum();
	            break;
	        case 249:
	            this.state = 1882;
	            this.type_name_resource();
	            break;
	        case 291:
	            this.state = 1883;
	            this.type_name_tagged();
	            break;
	        case 68:
	            this.state = 1884;
	            this.type_name_callable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 1887;
	            this.match(YQLParser.QUESTION);
	            this.state = 1892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, YQLParser.RULE_type_name);
	    var _la = 0;
	    try {
	        this.state = 1904;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 249:
	        case 272:
	        case 279:
	        case 280:
	        case 291:
	        case 302:
	        case 317:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1893;
	            this.type_name_composite();
	            break;
	        case 95:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1896;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 95:
	                this.state = 1894;
	                this.type_name_decimal();
	                break;
	            case 327:
	            case 328:
	            case 329:
	                this.state = 1895;
	                this.type_name_simple();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 1898;
	                this.match(YQLParser.QUESTION);
	                this.state = 1903;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_or_bind() {
	    let localctx = new Type_name_or_bindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, YQLParser.RULE_type_name_or_bind);
	    try {
	        this.state = 1908;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 95:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 249:
	        case 272:
	        case 279:
	        case 280:
	        case 291:
	        case 302:
	        case 317:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1906;
	            this.type_name();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1907;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_constructor_literal() {
	    let localctx = new Value_constructor_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, YQLParser.RULE_value_constructor_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1910;
	        this.match(YQLParser.STRING_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_constructor() {
	    let localctx = new Value_constructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, YQLParser.RULE_value_constructor);
	    try {
	        this.state = 1935;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 317:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1912;
	            this.match(YQLParser.VARIANT);
	            this.state = 1913;
	            this.match(YQLParser.LPAREN);
	            this.state = 1914;
	            this.expr();
	            this.state = 1915;
	            this.match(YQLParser.COMMA);
	            this.state = 1916;
	            this.expr();
	            this.state = 1917;
	            this.match(YQLParser.COMMA);
	            this.state = 1918;
	            this.expr();
	            this.state = 1919;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1921;
	            this.match(YQLParser.ENUM);
	            this.state = 1922;
	            this.match(YQLParser.LPAREN);
	            this.state = 1923;
	            this.expr();
	            this.state = 1924;
	            this.match(YQLParser.COMMA);
	            this.state = 1925;
	            this.expr();
	            this.state = 1926;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1928;
	            this.match(YQLParser.CALLABLE);
	            this.state = 1929;
	            this.match(YQLParser.LPAREN);
	            this.state = 1930;
	            this.expr();
	            this.state = 1931;
	            this.match(YQLParser.COMMA);
	            this.state = 1932;
	            this.expr();
	            this.state = 1933;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declare_stmt() {
	    let localctx = new Declare_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, YQLParser.RULE_declare_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1937;
	        this.match(YQLParser.DECLARE);
	        this.state = 1938;
	        this.bind_parameter();
	        this.state = 1939;
	        this.match(YQLParser.AS);
	        this.state = 1940;
	        this.type_name();
	        this.state = 1943;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 1941;
	            this.match(YQLParser.EQUALS);
	            this.state = 1942;
	            this.literal_value();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_path() {
	    let localctx = new Module_pathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, YQLParser.RULE_module_path);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 1945;
	            this.match(YQLParser.DOT);
	        }

	        this.state = 1948;
	        this.an_id();
	        this.state = 1953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 1949;
	            this.match(YQLParser.DOT);
	            this.state = 1950;
	            this.an_id();
	            this.state = 1955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, YQLParser.RULE_import_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1956;
	        this.match(YQLParser.IMPORT);
	        this.state = 1957;
	        this.module_path();
	        this.state = 1958;
	        this.match(YQLParser.SYMBOLS);
	        this.state = 1959;
	        this.named_bind_parameter_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	export_stmt() {
	    let localctx = new Export_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, YQLParser.RULE_export_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1961;
	        this.match(YQLParser.EXPORT);
	        this.state = 1962;
	        this.bind_parameter_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_action() {
	    let localctx = new Call_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, YQLParser.RULE_call_action);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.state = 1964;
	            this.bind_parameter();
	            break;
	        case 115:
	            this.state = 1965;
	            this.match(YQLParser.EMPTY_ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1968;
	        this.match(YQLParser.LPAREN);
	        this.state = 1970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	            this.state = 1969;
	            this.expr_list();
	        }

	        this.state = 1972;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inline_action() {
	    let localctx = new Inline_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, YQLParser.RULE_inline_action);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        this.match(YQLParser.BEGIN);
	        this.state = 1975;
	        this.define_action_or_subquery_body();
	        this.state = 1976;
	        this.match(YQLParser.END);
	        this.state = 1977;
	        this.match(YQLParser.DO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_stmt() {
	    let localctx = new Do_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, YQLParser.RULE_do_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1979;
	        this.match(YQLParser.DO);
	        this.state = 1982;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 115:
	            this.state = 1980;
	            this.call_action();
	            break;
	        case 63:
	            this.state = 1981;
	            this.inline_action();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_stmt() {
	    let localctx = new Pragma_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, YQLParser.RULE_pragma_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        this.match(YQLParser.PRAGMA);
	        this.state = 1985;
	        this.opt_id_prefix_or_type();
	        this.state = 1986;
	        this.an_id();
	        this.state = 2000;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 1:
	        	this.state = 1987;
	        	this.match(YQLParser.EQUALS);
	        	this.state = 1988;
	        	this.pragma_value();
	        	break;
	        case 25:
	        	this.state = 1989;
	        	this.match(YQLParser.LPAREN);
	        	this.state = 1990;
	        	this.pragma_value();
	        	this.state = 1995;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===24) {
	        	    this.state = 1991;
	        	    this.match(YQLParser.COMMA);
	        	    this.state = 1992;
	        	    this.pragma_value();
	        	    this.state = 1997;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1998;
	        	this.match(YQLParser.RPAREN);
	        	break;
	        case -1:
	        case 22:
	        case 117:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, YQLParser.RULE_pragma_value);
	    try {
	        this.state = 2007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 17:
	        case 330:
	        case 331:
	        case 332:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2002;
	            this.signed_number();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2003;
	            this.id();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2004;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 132:
	        case 301:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2005;
	            this.bool_value();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2006;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_specification() {
	    let localctx = new Sort_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, YQLParser.RULE_sort_specification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2009;
	        this.expr();
	        this.state = 2011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===102) {
	            this.state = 2010;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_specification_list() {
	    let localctx = new Sort_specification_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, YQLParser.RULE_sort_specification_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2013;
	        this.sort_specification();
	        this.state = 2018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2014;
	            this.match(YQLParser.COMMA);
	            this.state = 2015;
	            this.sort_specification();
	            this.state = 2020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, YQLParser.RULE_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        this.select_kind_parenthesis();
	        this.state = 2027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===169 || _la===306) {
	            this.state = 2022;
	            this.select_op();
	            this.state = 2023;
	            this.select_kind_parenthesis();
	            this.state = 2029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_unparenthesized_stmt() {
	    let localctx = new Select_unparenthesized_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, YQLParser.RULE_select_unparenthesized_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.select_kind_partial();
	        this.state = 2036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===169 || _la===306) {
	            this.state = 2031;
	            this.select_op();
	            this.state = 2032;
	            this.select_kind_parenthesis();
	            this.state = 2038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind_parenthesis() {
	    let localctx = new Select_kind_parenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, YQLParser.RULE_select_kind_parenthesis);
	    try {
	        this.state = 2044;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 141:
	        case 233:
	        case 238:
	        case 270:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2039;
	            this.select_kind_partial();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2040;
	            this.match(YQLParser.LPAREN);
	            this.state = 2041;
	            this.select_kind_partial();
	            this.state = 2042;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_op() {
	    let localctx = new Select_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, YQLParser.RULE_select_op);
	    var _la = 0;
	    try {
	        this.state = 2052;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 306:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2046;
	            this.match(YQLParser.UNION);
	            this.state = 2048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 2047;
	                this.match(YQLParser.ALL);
	            }

	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2050;
	            this.match(YQLParser.INTERSECT);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2051;
	            this.match(YQLParser.EXCEPT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind_partial() {
	    let localctx = new Select_kind_partialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, YQLParser.RULE_select_kind_partial);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2054;
	        this.select_kind();
	        this.state = 2061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===182) {
	            this.state = 2055;
	            this.match(YQLParser.LIMIT);
	            this.state = 2056;
	            this.expr();
	            this.state = 2059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || _la===205) {
	                this.state = 2057;
	                _la = this._input.LA(1);
	                if(!(_la===24 || _la===205)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2058;
	                this.expr();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind() {
	    let localctx = new Select_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, YQLParser.RULE_select_kind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2064;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 2063;
	            this.match(YQLParser.DISCARD);
	        }

	        this.state = 2069;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 233:
	            this.state = 2066;
	            this.process_core();
	            break;
	        case 238:
	            this.state = 2067;
	            this.reduce_core();
	            break;
	        case 141:
	        case 270:
	            this.state = 2068;
	            this.select_core();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===170) {
	            this.state = 2071;
	            this.match(YQLParser.INTO);
	            this.state = 2072;
	            this.match(YQLParser.RESULT);
	            this.state = 2073;
	            this.pure_column_or_named();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_core() {
	    let localctx = new Process_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, YQLParser.RULE_process_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2076;
	        this.match(YQLParser.PROCESS);
	        this.state = 2078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 2077;
	            this.match(YQLParser.STREAM);

	        }
	        this.state = 2080;
	        this.named_single_source();
	        this.state = 2085;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2081;
	            this.match(YQLParser.COMMA);
	            this.state = 2082;
	            this.named_single_source();
	            this.state = 2087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===314) {
	            this.state = 2088;
	            this.match(YQLParser.USING);
	            this.state = 2089;
	            this.using_call_expr();
	            this.state = 2092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 2090;
	                this.match(YQLParser.AS);
	                this.state = 2091;
	                this.an_id();
	            }

	            this.state = 2096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 2094;
	                this.match(YQLParser.WITH);
	                this.state = 2095;
	                this.external_call_settings();
	            }

	            this.state = 2100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 2098;
	                this.match(YQLParser.WHERE);
	                this.state = 2099;
	                this.expr();
	            }

	            this.state = 2104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===151) {
	                this.state = 2102;
	                this.match(YQLParser.HAVING);
	                this.state = 2103;
	                this.expr();
	            }

	            this.state = 2108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 2106;
	                this.match(YQLParser.ASSUME);
	                this.state = 2107;
	                this.order_by_clause();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_call_param() {
	    let localctx = new External_call_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, YQLParser.RULE_external_call_param);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2112;
	        this.an_id();
	        this.state = 2113;
	        this.match(YQLParser.EQUALS);
	        this.state = 2114;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_call_settings() {
	    let localctx = new External_call_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, YQLParser.RULE_external_call_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2116;
	        this.external_call_param();
	        this.state = 2121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2117;
	            this.match(YQLParser.COMMA);
	            this.state = 2118;
	            this.external_call_param();
	            this.state = 2123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reduce_core() {
	    let localctx = new Reduce_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, YQLParser.RULE_reduce_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        this.match(YQLParser.REDUCE);
	        this.state = 2125;
	        this.named_single_source();
	        this.state = 2130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2126;
	            this.match(YQLParser.COMMA);
	            this.state = 2127;
	            this.named_single_source();
	            this.state = 2132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===230) {
	            this.state = 2133;
	            this.match(YQLParser.PRESORT);
	            this.state = 2134;
	            this.sort_specification_list();
	        }

	        this.state = 2137;
	        this.match(YQLParser.ON);
	        this.state = 2138;
	        this.column_list();
	        this.state = 2139;
	        this.match(YQLParser.USING);
	        this.state = 2141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        if(la_===1) {
	            this.state = 2140;
	            this.match(YQLParser.ALL);

	        }
	        this.state = 2143;
	        this.using_call_expr();
	        this.state = 2146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2144;
	            this.match(YQLParser.AS);
	            this.state = 2145;
	            this.an_id();
	        }

	        this.state = 2150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2148;
	            this.match(YQLParser.WHERE);
	            this.state = 2149;
	            this.expr();
	        }

	        this.state = 2154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===151) {
	            this.state = 2152;
	            this.match(YQLParser.HAVING);
	            this.state = 2153;
	            this.expr();
	        }

	        this.state = 2158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 2156;
	            this.match(YQLParser.ASSUME);
	            this.state = 2157;
	            this.order_by_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_set_quantifier() {
	    let localctx = new Opt_set_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, YQLParser.RULE_opt_set_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        if(la_===1) {
	            this.state = 2160;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===109)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, YQLParser.RULE_select_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===141) {
	            this.state = 2163;
	            this.match(YQLParser.FROM);
	            this.state = 2164;
	            this.join_source();
	        }

	        this.state = 2167;
	        this.match(YQLParser.SELECT);
	        this.state = 2169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 2168;
	            this.match(YQLParser.STREAM);

	        }
	        this.state = 2171;
	        this.opt_set_quantifier();
	        this.state = 2172;
	        this.result_column();
	        this.state = 2177;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2173;
	                this.match(YQLParser.COMMA);
	                this.state = 2174;
	                this.result_column(); 
	            }
	            this.state = 2179;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	        }

	        this.state = 2181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2180;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 2189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===324) {
	            this.state = 2183;
	            this.match(YQLParser.WITHOUT);
	            this.state = 2186;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	            if(la_===1) {
	                this.state = 2184;
	                this.match(YQLParser.IF);
	                this.state = 2185;
	                this.match(YQLParser.EXISTS);

	            }
	            this.state = 2188;
	            this.without_column_list();
	        }

	        this.state = 2193;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===141) {
	            this.state = 2191;
	            this.match(YQLParser.FROM);
	            this.state = 2192;
	            this.join_source();
	        }

	        this.state = 2197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2195;
	            this.match(YQLParser.WHERE);
	            this.state = 2196;
	            this.expr();
	        }

	        this.state = 2200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 2199;
	            this.group_by_clause();
	        }

	        this.state = 2204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===151) {
	            this.state = 2202;
	            this.match(YQLParser.HAVING);
	            this.state = 2203;
	            this.expr();
	        }

	        this.state = 2207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===322) {
	            this.state = 2206;
	            this.window_clause();
	        }

	        this.state = 2210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51 || _la===213) {
	            this.state = 2209;
	            this.ext_order_by_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_recognition_clause() {
	    let localctx = new Row_pattern_recognition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, YQLParser.RULE_row_pattern_recognition_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2212;
	        this.match(YQLParser.MATCH_RECOGNIZE);
	        this.state = 2213;
	        this.match(YQLParser.LPAREN);
	        this.state = 2215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===219) {
	            this.state = 2214;
	            this.window_partition_clause();
	        }

	        this.state = 2218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===213) {
	            this.state = 2217;
	            this.order_by_clause();
	        }

	        this.state = 2221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 2220;
	            this.row_pattern_measures();
	        }

	        this.state = 2224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42 || _la===208) {
	            this.state = 2223;
	            this.row_pattern_rows_per_match();
	        }

	        this.state = 2226;
	        this.row_pattern_common_syntax();
	        this.state = 2227;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_rows_per_match() {
	    let localctx = new Row_pattern_rows_per_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, YQLParser.RULE_row_pattern_rows_per_match);
	    var _la = 0;
	    try {
	        this.state = 2240;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 208:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2229;
	            this.match(YQLParser.ONE);
	            this.state = 2230;
	            this.match(YQLParser.ROW);
	            this.state = 2231;
	            this.match(YQLParser.PER);
	            this.state = 2232;
	            this.match(YQLParser.MATCH);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2233;
	            this.match(YQLParser.ALL);
	            this.state = 2234;
	            this.match(YQLParser.ROWS);
	            this.state = 2235;
	            this.match(YQLParser.PER);
	            this.state = 2236;
	            this.match(YQLParser.MATCH);
	            this.state = 2238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===206 || _la===274 || _la===323) {
	                this.state = 2237;
	                this.row_pattern_empty_match_handling();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_empty_match_handling() {
	    let localctx = new Row_pattern_empty_match_handlingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, YQLParser.RULE_row_pattern_empty_match_handling);
	    try {
	        this.state = 2251;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 274:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2242;
	            this.match(YQLParser.SHOW);
	            this.state = 2243;
	            this.match(YQLParser.EMPTY);
	            this.state = 2244;
	            this.match(YQLParser.MATCHES);
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2245;
	            this.match(YQLParser.OMIT);
	            this.state = 2246;
	            this.match(YQLParser.EMPTY);
	            this.state = 2247;
	            this.match(YQLParser.MATCHES);
	            break;
	        case 323:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2248;
	            this.match(YQLParser.WITH);
	            this.state = 2249;
	            this.match(YQLParser.UNMATCHED);
	            this.state = 2250;
	            this.match(YQLParser.ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measures() {
	    let localctx = new Row_pattern_measuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, YQLParser.RULE_row_pattern_measures);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2253;
	        this.match(YQLParser.MEASURES);
	        this.state = 2254;
	        this.row_pattern_measure_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measure_list() {
	    let localctx = new Row_pattern_measure_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, YQLParser.RULE_row_pattern_measure_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2256;
	        this.row_pattern_measure_definition();
	        this.state = 2261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2257;
	            this.match(YQLParser.COMMA);
	            this.state = 2258;
	            this.row_pattern_measure_definition();
	            this.state = 2263;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measure_definition() {
	    let localctx = new Row_pattern_measure_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, YQLParser.RULE_row_pattern_measure_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2264;
	        this.expr();
	        this.state = 2265;
	        this.match(YQLParser.AS);
	        this.state = 2266;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_common_syntax() {
	    let localctx = new Row_pattern_common_syntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, YQLParser.RULE_row_pattern_common_syntax);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 2268;
	            this.match(YQLParser.AFTER);
	            this.state = 2269;
	            this.match(YQLParser.MATCH);
	            this.state = 2270;
	            this.row_pattern_skip_to();
	        }

	        this.state = 2274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164 || _la===269) {
	            this.state = 2273;
	            this.row_pattern_initial_or_seek();
	        }

	        this.state = 2276;
	        this.match(YQLParser.PATTERN);
	        this.state = 2277;
	        this.match(YQLParser.LPAREN);
	        this.state = 2278;
	        this.row_pattern();
	        this.state = 2279;
	        this.match(YQLParser.RPAREN);
	        this.state = 2281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===282) {
	            this.state = 2280;
	            this.row_pattern_subset_clause();
	        }

	        this.state = 2283;
	        this.match(YQLParser.DEFINE);
	        this.state = 2284;
	        this.row_pattern_definition_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_skip_to() {
	    let localctx = new Row_pattern_skip_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, YQLParser.RULE_row_pattern_skip_to);
	    try {
	        this.state = 2305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2286;
	            this.match(YQLParser.TSKIP);
	            this.state = 2287;
	            this.match(YQLParser.TO);
	            this.state = 2288;
	            this.match(YQLParser.NEXT);
	            this.state = 2289;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2290;
	            this.match(YQLParser.TSKIP);
	            this.state = 2291;
	            this.match(YQLParser.PAST);
	            this.state = 2292;
	            this.match(YQLParser.LAST);
	            this.state = 2293;
	            this.match(YQLParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2294;
	            this.match(YQLParser.TSKIP);
	            this.state = 2295;
	            this.match(YQLParser.TO);
	            this.state = 2296;
	            this.match(YQLParser.FIRST);
	            this.state = 2297;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2298;
	            this.match(YQLParser.TSKIP);
	            this.state = 2299;
	            this.match(YQLParser.TO);
	            this.state = 2300;
	            this.match(YQLParser.LAST);
	            this.state = 2301;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2302;
	            this.match(YQLParser.TSKIP);
	            this.state = 2303;
	            this.match(YQLParser.TO);
	            this.state = 2304;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_skip_to_variable_name() {
	    let localctx = new Row_pattern_skip_to_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, YQLParser.RULE_row_pattern_skip_to_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2307;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_initial_or_seek() {
	    let localctx = new Row_pattern_initial_or_seekContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, YQLParser.RULE_row_pattern_initial_or_seek);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2309;
	        _la = this._input.LA(1);
	        if(!(_la===164 || _la===269)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern() {
	    let localctx = new Row_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, YQLParser.RULE_row_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2311;
	        this.row_pattern_term();
	        this.state = 2316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 2312;
	            this.match(YQLParser.PIPE);
	            this.state = 2313;
	            this.row_pattern_term();
	            this.state = 2318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_term() {
	    let localctx = new Row_pattern_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, YQLParser.RULE_row_pattern_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2320; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2319;
	            this.row_pattern_factor();
	            this.state = 2322; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 353) !== 0) || _la===225 || _la===328 || _la===329);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_factor() {
	    let localctx = new Row_pattern_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, YQLParser.RULE_row_pattern_factor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2324;
	        this.row_pattern_primary();
	        this.state = 2326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        if(la_===1) {
	            this.state = 2325;
	            this.row_pattern_quantifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_quantifier() {
	    let localctx = new Row_pattern_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, YQLParser.RULE_row_pattern_quantifier);
	    var _la = 0;
	    try {
	        this.state = 2356;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2328;
	            this.match(YQLParser.ASTERISK);
	            this.state = 2330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2329;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2332;
	            this.match(YQLParser.PLUS);
	            this.state = 2334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2333;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2336;
	            this.match(YQLParser.QUESTION);
	            this.state = 2338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2337;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2340;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===330 || _la===331) {
	                this.state = 2341;
	                this.integer();
	            }

	            this.state = 2344;
	            this.match(YQLParser.COMMA);
	            this.state = 2346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===330 || _la===331) {
	                this.state = 2345;
	                this.integer();
	            }

	            this.state = 2348;
	            this.match(YQLParser.RBRACE_CURLY);
	            this.state = 2350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2349;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2352;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2353;
	            this.integer();
	            this.state = 2354;
	            this.match(YQLParser.RBRACE_CURLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_primary() {
	    let localctx = new Row_pattern_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, YQLParser.RULE_row_pattern_primary);
	    var _la = 0;
	    try {
	        this.state = 2373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2358;
	            this.row_pattern_primary_variable_name();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2359;
	            this.match(YQLParser.DOLLAR);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2360;
	            this.match(YQLParser.CARET);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2361;
	            this.match(YQLParser.LPAREN);
	            this.state = 2363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 353) !== 0) || _la===225 || _la===328 || _la===329) {
	                this.state = 2362;
	                this.row_pattern();
	            }

	            this.state = 2365;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2366;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2367;
	            this.match(YQLParser.MINUS);
	            this.state = 2368;
	            this.row_pattern();
	            this.state = 2369;
	            this.match(YQLParser.MINUS);
	            this.state = 2370;
	            this.match(YQLParser.RBRACE_CURLY);
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2372;
	            this.row_pattern_permute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_primary_variable_name() {
	    let localctx = new Row_pattern_primary_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, YQLParser.RULE_row_pattern_primary_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2375;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_permute() {
	    let localctx = new Row_pattern_permuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, YQLParser.RULE_row_pattern_permute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2377;
	        this.match(YQLParser.PERMUTE);
	        this.state = 2378;
	        this.match(YQLParser.LPAREN);
	        this.state = 2379;
	        this.row_pattern();
	        this.state = 2384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2380;
	            this.match(YQLParser.COMMA);
	            this.state = 2381;
	            this.row_pattern();
	            this.state = 2386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2387;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_clause() {
	    let localctx = new Row_pattern_subset_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, YQLParser.RULE_row_pattern_subset_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2389;
	        this.match(YQLParser.SUBSET);
	        this.state = 2390;
	        this.row_pattern_subset_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_list() {
	    let localctx = new Row_pattern_subset_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, YQLParser.RULE_row_pattern_subset_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2392;
	        this.row_pattern_subset_item();
	        this.state = 2397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2393;
	            this.match(YQLParser.COMMA);
	            this.state = 2394;
	            this.row_pattern_subset_item();
	            this.state = 2399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_item() {
	    let localctx = new Row_pattern_subset_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, YQLParser.RULE_row_pattern_subset_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2400;
	        this.row_pattern_subset_item_variable_name();
	        this.state = 2401;
	        this.match(YQLParser.EQUALS);
	        this.state = 2402;
	        this.match(YQLParser.LPAREN);
	        this.state = 2403;
	        this.row_pattern_subset_rhs();
	        this.state = 2404;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_item_variable_name() {
	    let localctx = new Row_pattern_subset_item_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, YQLParser.RULE_row_pattern_subset_item_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2406;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_rhs() {
	    let localctx = new Row_pattern_subset_rhsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, YQLParser.RULE_row_pattern_subset_rhs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2408;
	        this.row_pattern_subset_rhs_variable_name();
	        this.state = 2413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2409;
	            this.match(YQLParser.COMMA);
	            this.state = 2410;
	            this.row_pattern_subset_rhs_variable_name();
	            this.state = 2415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_rhs_variable_name() {
	    let localctx = new Row_pattern_subset_rhs_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, YQLParser.RULE_row_pattern_subset_rhs_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2416;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_list() {
	    let localctx = new Row_pattern_definition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, YQLParser.RULE_row_pattern_definition_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2418;
	        this.row_pattern_definition();
	        this.state = 2423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2419;
	            this.match(YQLParser.COMMA);
	            this.state = 2420;
	            this.row_pattern_definition();
	            this.state = 2425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition() {
	    let localctx = new Row_pattern_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, YQLParser.RULE_row_pattern_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2426;
	        this.row_pattern_definition_variable_name();
	        this.state = 2427;
	        this.match(YQLParser.AS);
	        this.state = 2428;
	        this.row_pattern_definition_search_condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_variable_name() {
	    let localctx = new Row_pattern_definition_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, YQLParser.RULE_row_pattern_definition_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2430;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_search_condition() {
	    let localctx = new Row_pattern_definition_search_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, YQLParser.RULE_row_pattern_definition_search_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2432;
	        this.search_condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	search_condition() {
	    let localctx = new Search_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, YQLParser.RULE_search_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2434;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_variable_name() {
	    let localctx = new Row_pattern_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, YQLParser.RULE_row_pattern_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2436;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_clause() {
	    let localctx = new Order_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, YQLParser.RULE_order_by_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2438;
	        this.match(YQLParser.ORDER);
	        this.state = 2439;
	        this.match(YQLParser.BY);
	        this.state = 2440;
	        this.sort_specification_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ext_order_by_clause() {
	    let localctx = new Ext_order_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, YQLParser.RULE_ext_order_by_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 2442;
	            this.match(YQLParser.ASSUME);
	        }

	        this.state = 2445;
	        this.order_by_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_clause() {
	    let localctx = new Group_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, YQLParser.RULE_group_by_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2447;
	        this.match(YQLParser.GROUP);
	        this.state = 2449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 2448;
	            this.match(YQLParser.COMPACT);
	        }

	        this.state = 2451;
	        this.match(YQLParser.BY);
	        this.state = 2452;
	        this.opt_set_quantifier();
	        this.state = 2453;
	        this.grouping_element_list();
	        this.state = 2456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2454;
	            this.match(YQLParser.WITH);
	            this.state = 2455;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_element_list() {
	    let localctx = new Grouping_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, YQLParser.RULE_grouping_element_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2458;
	        this.grouping_element();
	        this.state = 2463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2459;
	            this.match(YQLParser.COMMA);
	            this.state = 2460;
	            this.grouping_element();
	            this.state = 2465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_element() {
	    let localctx = new Grouping_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, YQLParser.RULE_grouping_element);
	    try {
	        this.state = 2471;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2466;
	            this.ordinary_grouping_set();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2467;
	            this.rollup_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2468;
	            this.cube_list();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2469;
	            this.grouping_sets_specification();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2470;
	            this.hopping_window_specification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinary_grouping_set() {
	    let localctx = new Ordinary_grouping_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, YQLParser.RULE_ordinary_grouping_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2473;
	        this.named_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinary_grouping_set_list() {
	    let localctx = new Ordinary_grouping_set_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, YQLParser.RULE_ordinary_grouping_set_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2475;
	        this.ordinary_grouping_set();
	        this.state = 2480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2476;
	            this.match(YQLParser.COMMA);
	            this.state = 2477;
	            this.ordinary_grouping_set();
	            this.state = 2482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollup_list() {
	    let localctx = new Rollup_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, YQLParser.RULE_rollup_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2483;
	        this.match(YQLParser.ROLLUP);
	        this.state = 2484;
	        this.match(YQLParser.LPAREN);
	        this.state = 2485;
	        this.ordinary_grouping_set_list();
	        this.state = 2486;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cube_list() {
	    let localctx = new Cube_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, YQLParser.RULE_cube_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        this.match(YQLParser.CUBE);
	        this.state = 2489;
	        this.match(YQLParser.LPAREN);
	        this.state = 2490;
	        this.ordinary_grouping_set_list();
	        this.state = 2491;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_sets_specification() {
	    let localctx = new Grouping_sets_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, YQLParser.RULE_grouping_sets_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2493;
	        this.match(YQLParser.GROUPING);
	        this.state = 2494;
	        this.match(YQLParser.SETS);
	        this.state = 2495;
	        this.match(YQLParser.LPAREN);
	        this.state = 2496;
	        this.grouping_element_list();
	        this.state = 2497;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hopping_window_specification() {
	    let localctx = new Hopping_window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, YQLParser.RULE_hopping_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2499;
	        this.match(YQLParser.HOP);
	        this.state = 2500;
	        this.match(YQLParser.LPAREN);
	        this.state = 2501;
	        this.expr();
	        this.state = 2502;
	        this.match(YQLParser.COMMA);
	        this.state = 2503;
	        this.expr();
	        this.state = 2504;
	        this.match(YQLParser.COMMA);
	        this.state = 2505;
	        this.expr();
	        this.state = 2506;
	        this.match(YQLParser.COMMA);
	        this.state = 2507;
	        this.expr();
	        this.state = 2508;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, YQLParser.RULE_result_column);
	    try {
	        this.state = 2519;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2510;
	            this.opt_id_prefix();
	            this.state = 2511;
	            this.match(YQLParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2513;
	            this.expr();
	            this.state = 2517;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	            if(la_===1) {
	                this.state = 2514;
	                this.match(YQLParser.AS);
	                this.state = 2515;
	                this.an_id_or_type();

	            } else if(la_===2) {
	                this.state = 2516;
	                this.an_id_as_compat();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_source() {
	    let localctx = new Join_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, YQLParser.RULE_join_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        if(la_===1) {
	            this.state = 2521;
	            this.match(YQLParser.ANY);

	        }
	        this.state = 2524;
	        this.flatten_source();
	        this.state = 2535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24 || _la===87 || _la===125 || _la===142 || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 536879233) !== 0) || _la===215 || _la===259) {
	            this.state = 2525;
	            this.join_op();
	            this.state = 2527;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	            if(la_===1) {
	                this.state = 2526;
	                this.match(YQLParser.ANY);

	            }
	            this.state = 2529;
	            this.flatten_source();
	            this.state = 2531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207 || _la===314) {
	                this.state = 2530;
	                this.join_constraint();
	            }

	            this.state = 2537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_column() {
	    let localctx = new Named_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, YQLParser.RULE_named_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2538;
	        this.column_name();
	        this.state = 2541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2539;
	            this.match(YQLParser.AS);
	            this.state = 2540;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_by_arg() {
	    let localctx = new Flatten_by_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, YQLParser.RULE_flatten_by_arg);
	    var _la = 0;
	    try {
	        this.state = 2551;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2543;
	            this.named_column();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2544;
	            this.match(YQLParser.LPAREN);
	            this.state = 2545;
	            this.named_expr_list();
	            this.state = 2547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 2546;
	                this.match(YQLParser.COMMA);
	            }

	            this.state = 2549;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_source() {
	    let localctx = new Flatten_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, YQLParser.RULE_flatten_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2553;
	        this.named_single_source();
	        this.state = 2563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136) {
	            this.state = 2554;
	            this.match(YQLParser.FLATTEN);
	            this.state = 2561;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 67:
	            case 105:
	            case 183:
	            case 211:
	                this.state = 2556;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===105 || _la===183 || _la===211) {
	                    this.state = 2555;
	                    _la = this._input.LA(1);
	                    if(!(_la===105 || _la===183 || _la===211)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 2558;
	                this.match(YQLParser.BY);
	                this.state = 2559;
	                this.flatten_by_arg();
	                break;
	            case 77:
	                this.state = 2560;
	                this.match(YQLParser.COLUMNS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_single_source() {
	    let localctx = new Named_single_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, YQLParser.RULE_named_single_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2565;
	        this.single_source();
	        this.state = 2567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        if(la_===1) {
	            this.state = 2566;
	            this.row_pattern_recognition_clause();

	        }
	        this.state = 2577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        if(la_===1) {
	            this.state = 2572;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 49:
	                this.state = 2569;
	                this.match(YQLParser.AS);
	                this.state = 2570;
	                this.an_id();
	                break;
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 50:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 67:
	            case 69:
	            case 72:
	            case 73:
	            case 74:
	            case 78:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 89:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 106:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 116:
	            case 117:
	            case 120:
	            case 121:
	            case 122:
	            case 124:
	            case 126:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 138:
	            case 139:
	            case 140:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 150:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 167:
	            case 168:
	            case 170:
	            case 171:
	            case 178:
	            case 180:
	            case 181:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 196:
	            case 197:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 208:
	            case 209:
	            case 210:
	            case 212:
	            case 213:
	            case 214:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 231:
	            case 232:
	            case 234:
	            case 235:
	            case 236:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 244:
	            case 246:
	            case 247:
	            case 248:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 257:
	            case 258:
	            case 260:
	            case 261:
	            case 263:
	            case 266:
	            case 268:
	            case 269:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 281:
	            case 282:
	            case 283:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 303:
	            case 305:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 315:
	            case 316:
	            case 319:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	                this.state = 2571;
	                this.an_id_as_compat();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 2574;
	                this.pure_column_list();
	            }


	        }
	        this.state = 2581;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 265:
	        	this.state = 2579;
	        	this.sample_clause();
	        	break;
	        case 289:
	        	this.state = 2580;
	        	this.tablesample_clause();
	        	break;
	        case -1:
	        case 22:
	        case 24:
	        case 26:
	        case 51:
	        case 87:
	        case 117:
	        case 123:
	        case 125:
	        case 136:
	        case 142:
	        case 147:
	        case 151:
	        case 166:
	        case 169:
	        case 170:
	        case 173:
	        case 179:
	        case 182:
	        case 195:
	        case 207:
	        case 213:
	        case 215:
	        case 230:
	        case 256:
	        case 259:
	        case 270:
	        case 306:
	        case 314:
	        case 321:
	        case 322:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_source() {
	    let localctx = new Single_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, YQLParser.RULE_single_source);
	    try {
	        this.state = 2592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2583;
	            this.table_ref();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2584;
	            this.match(YQLParser.LPAREN);
	            this.state = 2585;
	            this.select_stmt();
	            this.state = 2586;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2588;
	            this.match(YQLParser.LPAREN);
	            this.state = 2589;
	            this.values_stmt();
	            this.state = 2590;
	            this.match(YQLParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample_clause() {
	    let localctx = new Sample_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, YQLParser.RULE_sample_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2594;
	        this.match(YQLParser.SAMPLE);
	        this.state = 2595;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablesample_clause() {
	    let localctx = new Tablesample_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, YQLParser.RULE_tablesample_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2597;
	        this.match(YQLParser.TABLESAMPLE);
	        this.state = 2598;
	        this.sampling_mode();
	        this.state = 2599;
	        this.match(YQLParser.LPAREN);
	        this.state = 2600;
	        this.expr();
	        this.state = 2601;
	        this.match(YQLParser.RPAREN);
	        this.state = 2603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===245) {
	            this.state = 2602;
	            this.repeatable_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampling_mode() {
	    let localctx = new Sampling_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, YQLParser.RULE_sampling_mode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2605;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===286)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatable_clause() {
	    let localctx = new Repeatable_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, YQLParser.RULE_repeatable_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2607;
	        this.match(YQLParser.REPEATABLE);
	        this.state = 2608;
	        this.match(YQLParser.LPAREN);
	        this.state = 2609;
	        this.expr();
	        this.state = 2610;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_op() {
	    let localctx = new Join_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, YQLParser.RULE_join_op);
	    var _la = 0;
	    try {
	        this.state = 2636;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2612;
	            this.match(YQLParser.COMMA);
	            break;
	        case 87:
	        case 125:
	        case 142:
	        case 166:
	        case 173:
	        case 179:
	        case 195:
	        case 215:
	        case 259:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===195) {
	                this.state = 2613;
	                this.match(YQLParser.NATURAL);
	            }

	            this.state = 2633;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 125:
	            case 142:
	            case 173:
	            case 179:
	            case 215:
	            case 259:
	                this.state = 2626;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 179:
	                	this.state = 2616;
	                	this.match(YQLParser.LEFT);
	                	this.state = 2618;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===209 || _la===271) {
	                	    this.state = 2617;
	                	    _la = this._input.LA(1);
	                	    if(!(_la===209 || _la===271)) {
	                	    this._errHandler.recoverInline(this);
	                	    }
	                	    else {
	                	    	this._errHandler.reportMatch(this);
	                	        this.consume();
	                	    }
	                	}

	                	break;
	                case 259:
	                	this.state = 2620;
	                	this.match(YQLParser.RIGHT);
	                	this.state = 2622;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===209 || _la===271) {
	                	    this.state = 2621;
	                	    _la = this._input.LA(1);
	                	    if(!(_la===209 || _la===271)) {
	                	    this._errHandler.recoverInline(this);
	                	    }
	                	    else {
	                	    	this._errHandler.reportMatch(this);
	                	        this.consume();
	                	    }
	                	}

	                	break;
	                case 125:
	                	this.state = 2624;
	                	this.match(YQLParser.EXCLUSION);
	                	break;
	                case 142:
	                	this.state = 2625;
	                	this.match(YQLParser.FULL);
	                	break;
	                case 173:
	                case 215:
	                	break;
	                default:
	                	break;
	                }
	                this.state = 2629;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===215) {
	                    this.state = 2628;
	                    this.match(YQLParser.OUTER);
	                }

	                break;
	            case 166:
	                this.state = 2631;
	                this.match(YQLParser.INNER);
	                break;
	            case 87:
	                this.state = 2632;
	                this.match(YQLParser.CROSS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2635;
	            this.match(YQLParser.JOIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, YQLParser.RULE_join_constraint);
	    try {
	        this.state = 2642;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 207:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2638;
	            this.match(YQLParser.ON);
	            this.state = 2639;
	            this.expr();
	            break;
	        case 314:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2640;
	            this.match(YQLParser.USING);
	            this.state = 2641;
	            this.pure_column_or_named_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returning_columns_list() {
	    let localctx = new Returning_columns_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, YQLParser.RULE_returning_columns_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2644;
	        this.match(YQLParser.RETURNING);
	        this.state = 2654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.state = 2645;
	            this.match(YQLParser.ASTERISK);
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.state = 2646;
	            this.an_id();
	            this.state = 2651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 2647;
	                this.match(YQLParser.COMMA);
	                this.state = 2648;
	                this.an_id();
	                this.state = 2653;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_table_stmt() {
	    let localctx = new Into_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, YQLParser.RULE_into_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2656;
	            this.match(YQLParser.INSERT);
	            break;

	        case 2:
	            this.state = 2657;
	            this.match(YQLParser.INSERT);
	            this.state = 2658;
	            this.match(YQLParser.OR);
	            this.state = 2659;
	            this.match(YQLParser.ABORT);
	            break;

	        case 3:
	            this.state = 2660;
	            this.match(YQLParser.INSERT);
	            this.state = 2661;
	            this.match(YQLParser.OR);
	            this.state = 2662;
	            this.match(YQLParser.REVERT);
	            break;

	        case 4:
	            this.state = 2663;
	            this.match(YQLParser.INSERT);
	            this.state = 2664;
	            this.match(YQLParser.OR);
	            this.state = 2665;
	            this.match(YQLParser.IGNORE);
	            break;

	        case 5:
	            this.state = 2666;
	            this.match(YQLParser.UPSERT);
	            break;

	        case 6:
	            this.state = 2667;
	            this.match(YQLParser.REPLACE);
	            break;

	        }
	        this.state = 2670;
	        this.match(YQLParser.INTO);
	        this.state = 2671;
	        this.into_simple_table_ref();
	        this.state = 2672;
	        this.into_values_source();
	        this.state = 2674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===256) {
	            this.state = 2673;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_values_source() {
	    let localctx = new Into_values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, YQLParser.RULE_into_values_source);
	    try {
	        this.state = 2682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 108:
	        case 141:
	        case 233:
	        case 238:
	        case 270:
	        case 316:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2677;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	            if(la_===1) {
	                this.state = 2676;
	                this.pure_column_list();

	            }
	            this.state = 2679;
	            this.values_source();
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2680;
	            this.match(YQLParser.DEFAULT);
	            this.state = 2681;
	            this.match(YQLParser.VALUES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_stmt() {
	    let localctx = new Values_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, YQLParser.RULE_values_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        this.match(YQLParser.VALUES);
	        this.state = 2685;
	        this.values_source_row_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source() {
	    let localctx = new Values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, YQLParser.RULE_values_source);
	    try {
	        this.state = 2689;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 316:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2687;
	            this.values_stmt();
	            break;
	        case 25:
	        case 108:
	        case 141:
	        case 233:
	        case 238:
	        case 270:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2688;
	            this.select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source_row_list() {
	    let localctx = new Values_source_row_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, YQLParser.RULE_values_source_row_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2691;
	        this.values_source_row();
	        this.state = 2696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2692;
	            this.match(YQLParser.COMMA);
	            this.state = 2693;
	            this.values_source_row();
	            this.state = 2698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source_row() {
	    let localctx = new Values_source_rowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, YQLParser.RULE_values_source_row);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2699;
	        this.match(YQLParser.LPAREN);
	        this.state = 2700;
	        this.expr_list();
	        this.state = 2701;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_values_source() {
	    let localctx = new Simple_values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, YQLParser.RULE_simple_values_source);
	    try {
	        this.state = 2705;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2703;
	            this.expr_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2704;
	            this.select_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_external_data_source_stmt() {
	    let localctx = new Create_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, YQLParser.RULE_create_external_data_source_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2707;
	        this.match(YQLParser.CREATE);
	        this.state = 2710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 2708;
	            this.match(YQLParser.OR);
	            this.state = 2709;
	            this.match(YQLParser.REPLACE);
	        }

	        this.state = 2712;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2713;
	        this.match(YQLParser.DATA);
	        this.state = 2714;
	        this.match(YQLParser.SOURCE);
	        this.state = 2718;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        if(la_===1) {
	            this.state = 2715;
	            this.match(YQLParser.IF);
	            this.state = 2716;
	            this.match(YQLParser.NOT);
	            this.state = 2717;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2720;
	        this.object_ref();
	        this.state = 2721;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_data_source_stmt() {
	    let localctx = new Alter_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, YQLParser.RULE_alter_external_data_source_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2723;
	        this.match(YQLParser.ALTER);
	        this.state = 2724;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2725;
	        this.match(YQLParser.DATA);
	        this.state = 2726;
	        this.match(YQLParser.SOURCE);
	        this.state = 2727;
	        this.object_ref();
	        this.state = 2728;
	        this.alter_external_data_source_action();
	        this.state = 2733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2729;
	            this.match(YQLParser.COMMA);
	            this.state = 2730;
	            this.alter_external_data_source_action();
	            this.state = 2735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_data_source_action() {
	    let localctx = new Alter_external_data_source_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, YQLParser.RULE_alter_external_data_source_action);
	    try {
	        this.state = 2739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2736;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2737;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2738;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_external_data_source_stmt() {
	    let localctx = new Drop_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, YQLParser.RULE_drop_external_data_source_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2741;
	        this.match(YQLParser.DROP);
	        this.state = 2742;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2743;
	        this.match(YQLParser.DATA);
	        this.state = 2744;
	        this.match(YQLParser.SOURCE);
	        this.state = 2747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 2745;
	            this.match(YQLParser.IF);
	            this.state = 2746;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2749;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_view_stmt() {
	    let localctx = new Create_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, YQLParser.RULE_create_view_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2751;
	        this.match(YQLParser.CREATE);
	        this.state = 2752;
	        this.match(YQLParser.VIEW);
	        this.state = 2756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	        if(la_===1) {
	            this.state = 2753;
	            this.match(YQLParser.IF);
	            this.state = 2754;
	            this.match(YQLParser.NOT);
	            this.state = 2755;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2758;
	        this.object_ref();
	        this.state = 2760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2759;
	            this.create_object_features();
	        }

	        this.state = 2762;
	        this.match(YQLParser.AS);
	        this.state = 2763;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_view_stmt() {
	    let localctx = new Drop_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, YQLParser.RULE_drop_view_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2765;
	        this.match(YQLParser.DROP);
	        this.state = 2766;
	        this.match(YQLParser.VIEW);
	        this.state = 2769;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
	        if(la_===1) {
	            this.state = 2767;
	            this.match(YQLParser.IF);
	            this.state = 2768;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2771;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upsert_object_stmt() {
	    let localctx = new Upsert_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, YQLParser.RULE_upsert_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2773;
	        this.match(YQLParser.UPSERT);
	        this.state = 2774;
	        this.match(YQLParser.OBJECT);
	        this.state = 2775;
	        this.object_ref();
	        this.state = 2776;
	        this.match(YQLParser.LPAREN);
	        this.state = 2777;
	        this.match(YQLParser.TYPE);
	        this.state = 2778;
	        this.object_type_ref();
	        this.state = 2779;
	        this.match(YQLParser.RPAREN);
	        this.state = 2781;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2780;
	            this.create_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_object_stmt() {
	    let localctx = new Create_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, YQLParser.RULE_create_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2783;
	        this.match(YQLParser.CREATE);
	        this.state = 2784;
	        this.match(YQLParser.OBJECT);
	        this.state = 2788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        if(la_===1) {
	            this.state = 2785;
	            this.match(YQLParser.IF);
	            this.state = 2786;
	            this.match(YQLParser.NOT);
	            this.state = 2787;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2790;
	        this.object_ref();
	        this.state = 2791;
	        this.match(YQLParser.LPAREN);
	        this.state = 2792;
	        this.match(YQLParser.TYPE);
	        this.state = 2793;
	        this.object_type_ref();
	        this.state = 2794;
	        this.match(YQLParser.RPAREN);
	        this.state = 2796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2795;
	            this.create_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_object_features() {
	    let localctx = new Create_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, YQLParser.RULE_create_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2798;
	        this.match(YQLParser.WITH);
	        this.state = 2799;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_object_stmt() {
	    let localctx = new Alter_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, YQLParser.RULE_alter_object_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2801;
	        this.match(YQLParser.ALTER);
	        this.state = 2802;
	        this.match(YQLParser.OBJECT);
	        this.state = 2803;
	        this.object_ref();
	        this.state = 2804;
	        this.match(YQLParser.LPAREN);
	        this.state = 2805;
	        this.match(YQLParser.TYPE);
	        this.state = 2806;
	        this.object_type_ref();
	        this.state = 2807;
	        this.match(YQLParser.RPAREN);
	        this.state = 2808;
	        this.alter_object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_object_features() {
	    let localctx = new Alter_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, YQLParser.RULE_alter_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2810;
	        this.match(YQLParser.SET);
	        this.state = 2811;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_object_stmt() {
	    let localctx = new Drop_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, YQLParser.RULE_drop_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2813;
	        this.match(YQLParser.DROP);
	        this.state = 2814;
	        this.match(YQLParser.OBJECT);
	        this.state = 2817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        if(la_===1) {
	            this.state = 2815;
	            this.match(YQLParser.IF);
	            this.state = 2816;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2819;
	        this.object_ref();
	        this.state = 2820;
	        this.match(YQLParser.LPAREN);
	        this.state = 2821;
	        this.match(YQLParser.TYPE);
	        this.state = 2822;
	        this.object_type_ref();
	        this.state = 2823;
	        this.match(YQLParser.RPAREN);
	        this.state = 2825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2824;
	            this.drop_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_object_features() {
	    let localctx = new Drop_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, YQLParser.RULE_drop_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2827;
	        this.match(YQLParser.WITH);
	        this.state = 2828;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_value() {
	    let localctx = new Object_feature_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, YQLParser.RULE_object_feature_value);
	    try {
	        this.state = 2834;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2830;
	            this.id_or_type();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2831;
	            this.bind_parameter();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2832;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 132:
	        case 301:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2833;
	            this.bool_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_kv() {
	    let localctx = new Object_feature_kvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, YQLParser.RULE_object_feature_kv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2836;
	        this.an_id_or_type();
	        this.state = 2837;
	        this.match(YQLParser.EQUALS);
	        this.state = 2838;
	        this.object_feature_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_flag() {
	    let localctx = new Object_feature_flagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, YQLParser.RULE_object_feature_flag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2840;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature() {
	    let localctx = new Object_featureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, YQLParser.RULE_object_feature);
	    try {
	        this.state = 2844;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2842;
	            this.object_feature_kv();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2843;
	            this.object_feature_flag();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_features() {
	    let localctx = new Object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, YQLParser.RULE_object_features);
	    var _la = 0;
	    try {
	        this.state = 2858;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2846;
	            this.object_feature();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2847;
	            this.match(YQLParser.LPAREN);
	            this.state = 2848;
	            this.object_feature();
	            this.state = 2853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 2849;
	                this.match(YQLParser.COMMA);
	                this.state = 2850;
	                this.object_feature();
	                this.state = 2855;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2856;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_ref() {
	    let localctx = new Object_type_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, YQLParser.RULE_object_type_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2860;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, YQLParser.RULE_create_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2862;
	        this.match(YQLParser.CREATE);
	        this.state = 2865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 2863;
	            this.match(YQLParser.OR);
	            this.state = 2864;
	            this.match(YQLParser.REPLACE);
	        }

	        this.state = 2875;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 287:
	            this.state = 2867;
	            this.match(YQLParser.TABLE);
	            break;
	        case 290:
	            this.state = 2868;
	            this.match(YQLParser.TABLESTORE);
	            break;
	        case 130:
	            this.state = 2869;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 2870;
	            this.match(YQLParser.TABLE);
	            break;
	        case 292:
	            this.state = 2871;
	            this.match(YQLParser.TEMP);
	            this.state = 2872;
	            this.match(YQLParser.TABLE);
	            break;
	        case 293:
	            this.state = 2873;
	            this.match(YQLParser.TEMPORARY);
	            this.state = 2874;
	            this.match(YQLParser.TABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2880;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        if(la_===1) {
	            this.state = 2877;
	            this.match(YQLParser.IF);
	            this.state = 2878;
	            this.match(YQLParser.NOT);
	            this.state = 2879;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2882;
	        this.simple_table_ref();
	        this.state = 2883;
	        this.match(YQLParser.LPAREN);
	        this.state = 2884;
	        this.create_table_entry();
	        this.state = 2889;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2885;
	                this.match(YQLParser.COMMA);
	                this.state = 2886;
	                this.create_table_entry(); 
	            }
	            this.state = 2891;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
	        }

	        this.state = 2893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2892;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 2895;
	        this.match(YQLParser.RPAREN);
	        this.state = 2897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163) {
	            this.state = 2896;
	            this.table_inherits();
	        }

	        this.state = 2900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===219) {
	            this.state = 2899;
	            this.table_partition_by();
	        }

	        this.state = 2903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 2902;
	            this.with_table_settings();
	        }

	        this.state = 2906;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===290) {
	            this.state = 2905;
	            this.table_tablestore();
	        }

	        this.state = 2909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2908;
	            this.table_as_source();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_entry() {
	    let localctx = new Create_table_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, YQLParser.RULE_create_table_entry);
	    try {
	        this.state = 2917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2911;
	            this.column_schema();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2912;
	            this.table_constraint();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2913;
	            this.table_index();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2914;
	            this.family_entry();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2915;
	            this.changefeed();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2916;
	            this.an_id_schema();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_stmt() {
	    let localctx = new Create_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, YQLParser.RULE_create_backup_collection_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2919;
	        this.match(YQLParser.CREATE);
	        this.state = 2920;
	        this.backup_collection();
	        this.state = 2922;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===94) {
	            this.state = 2921;
	            this.create_backup_collection_entries();
	        }

	        this.state = 2924;
	        this.match(YQLParser.WITH);
	        this.state = 2925;
	        this.match(YQLParser.LPAREN);
	        this.state = 2926;
	        this.backup_collection_settings();
	        this.state = 2927;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_stmt() {
	    let localctx = new Alter_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, YQLParser.RULE_alter_backup_collection_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2929;
	        this.match(YQLParser.ALTER);
	        this.state = 2930;
	        this.backup_collection();
	        this.state = 2933;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 248:
	        case 272:
	            this.state = 2931;
	            this.alter_backup_collection_actions();
	            break;
	        case 40:
	        case 111:
	            this.state = 2932;
	            this.alter_backup_collection_entries();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_backup_collection_stmt() {
	    let localctx = new Drop_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, YQLParser.RULE_drop_backup_collection_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2935;
	        this.match(YQLParser.DROP);
	        this.state = 2936;
	        this.backup_collection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_entries() {
	    let localctx = new Create_backup_collection_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, YQLParser.RULE_create_backup_collection_entries);
	    try {
	        this.state = 2940;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2938;
	            this.match(YQLParser.DATABASE);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2939;
	            this.create_backup_collection_entries_many();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_entries_many() {
	    let localctx = new Create_backup_collection_entries_manyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, YQLParser.RULE_create_backup_collection_entries_many);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2942;
	        this.match(YQLParser.LPAREN);
	        this.state = 2943;
	        this.table_list();
	        this.state = 2944;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_list() {
	    let localctx = new Table_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, YQLParser.RULE_table_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2946;
	        this.match(YQLParser.TABLE);
	        this.state = 2947;
	        this.an_id_table();
	        this.state = 2953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2948;
	            this.match(YQLParser.COMMA);
	            this.state = 2949;
	            this.match(YQLParser.TABLE);
	            this.state = 2950;
	            this.an_id_table();
	            this.state = 2955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_actions() {
	    let localctx = new Alter_backup_collection_actionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, YQLParser.RULE_alter_backup_collection_actions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2956;
	        this.alter_backup_collection_action();
	        this.state = 2961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2957;
	            this.match(YQLParser.COMMA);
	            this.state = 2958;
	            this.alter_backup_collection_action();
	            this.state = 2963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_action() {
	    let localctx = new Alter_backup_collection_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, YQLParser.RULE_alter_backup_collection_action);
	    try {
	        this.state = 2966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2964;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2965;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_entries() {
	    let localctx = new Alter_backup_collection_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, YQLParser.RULE_alter_backup_collection_entries);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2968;
	        this.alter_backup_collection_entry();
	        this.state = 2973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2969;
	            this.match(YQLParser.COMMA);
	            this.state = 2970;
	            this.alter_backup_collection_entry();
	            this.state = 2975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_entry() {
	    let localctx = new Alter_backup_collection_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, YQLParser.RULE_alter_backup_collection_entry);
	    try {
	        this.state = 2986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2976;
	            this.match(YQLParser.ADD);
	            this.state = 2977;
	            this.match(YQLParser.DATABASE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2978;
	            this.match(YQLParser.DROP);
	            this.state = 2979;
	            this.match(YQLParser.DATABASE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2980;
	            this.match(YQLParser.ADD);
	            this.state = 2981;
	            this.match(YQLParser.TABLE);
	            this.state = 2982;
	            this.an_id_table();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2983;
	            this.match(YQLParser.DROP);
	            this.state = 2984;
	            this.match(YQLParser.TABLE);
	            this.state = 2985;
	            this.an_id_table();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection() {
	    let localctx = new Backup_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, YQLParser.RULE_backup_collection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2988;
	        this.match(YQLParser.BACKUP);
	        this.state = 2989;
	        this.match(YQLParser.COLLECTION);
	        this.state = 2990;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection_settings() {
	    let localctx = new Backup_collection_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, YQLParser.RULE_backup_collection_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2992;
	        this.backup_collection_settings_entry();
	        this.state = 2997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2993;
	            this.match(YQLParser.COMMA);
	            this.state = 2994;
	            this.backup_collection_settings_entry();
	            this.state = 2999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection_settings_entry() {
	    let localctx = new Backup_collection_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, YQLParser.RULE_backup_collection_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3000;
	        this.an_id();
	        this.state = 3001;
	        this.match(YQLParser.EQUALS);
	        this.state = 3002;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_stmt() {
	    let localctx = new Backup_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, YQLParser.RULE_backup_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3004;
	        this.match(YQLParser.BACKUP);
	        this.state = 3005;
	        this.object_ref();
	        this.state = 3007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===160) {
	            this.state = 3006;
	            this.match(YQLParser.INCREMENTAL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restore_stmt() {
	    let localctx = new Restore_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, YQLParser.RULE_restore_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3009;
	        this.match(YQLParser.RESTORE);
	        this.state = 3010;
	        this.object_ref();
	        this.state = 3013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 3011;
	            this.match(YQLParser.AT);
	            this.state = 3012;
	            this.match(YQLParser.STRING_VALUE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_database_stmt() {
	    let localctx = new Alter_database_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, YQLParser.RULE_alter_database_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3015;
	        this.match(YQLParser.ALTER);
	        this.state = 3016;
	        this.match(YQLParser.DATABASE);
	        this.state = 3017;
	        this.an_id_schema();
	        this.state = 3018;
	        this.match(YQLParser.OWNER);
	        this.state = 3019;
	        this.match(YQLParser.TO);
	        this.state = 3020;
	        this.role_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_inherits() {
	    let localctx = new Table_inheritsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, YQLParser.RULE_table_inherits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3022;
	        this.match(YQLParser.INHERITS);
	        this.state = 3023;
	        this.match(YQLParser.LPAREN);
	        this.state = 3024;
	        this.simple_table_ref_core();
	        this.state = 3029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3025;
	            this.match(YQLParser.COMMA);
	            this.state = 3026;
	            this.simple_table_ref_core();
	            this.state = 3031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3032;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_partition_by() {
	    let localctx = new Table_partition_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, YQLParser.RULE_table_partition_by);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3034;
	        this.match(YQLParser.PARTITION);
	        this.state = 3035;
	        this.match(YQLParser.BY);
	        this.state = 3036;
	        this.match(YQLParser.HASH);
	        this.state = 3037;
	        this.pure_column_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_table_settings() {
	    let localctx = new With_table_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, YQLParser.RULE_with_table_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3039;
	        this.match(YQLParser.WITH);
	        this.state = 3040;
	        this.match(YQLParser.LPAREN);
	        this.state = 3041;
	        this.table_settings_entry();
	        this.state = 3046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3042;
	            this.match(YQLParser.COMMA);
	            this.state = 3043;
	            this.table_settings_entry();
	            this.state = 3048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3049;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_tablestore() {
	    let localctx = new Table_tablestoreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, YQLParser.RULE_table_tablestore);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3051;
	        this.match(YQLParser.TABLESTORE);
	        this.state = 3052;
	        this.simple_table_ref_core();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_settings_entry() {
	    let localctx = new Table_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, YQLParser.RULE_table_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3054;
	        this.an_id();
	        this.state = 3055;
	        this.match(YQLParser.EQUALS);
	        this.state = 3056;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_as_source() {
	    let localctx = new Table_as_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, YQLParser.RULE_table_as_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3058;
	        this.match(YQLParser.AS);
	        this.state = 3059;
	        this.values_source();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_stmt() {
	    let localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, YQLParser.RULE_alter_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3061;
	        this.match(YQLParser.ALTER);
	        this.state = 3062;
	        this.match(YQLParser.TABLE);
	        this.state = 3063;
	        this.simple_table_ref();
	        this.state = 3064;
	        this.alter_table_action();
	        this.state = 3069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3065;
	            this.match(YQLParser.COMMA);
	            this.state = 3066;
	            this.alter_table_action();
	            this.state = 3071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_action() {
	    let localctx = new Alter_table_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, YQLParser.RULE_alter_table_action);
	    try {
	        this.state = 3089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3072;
	            this.alter_table_add_column();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3073;
	            this.alter_table_drop_column();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3074;
	            this.alter_table_alter_column();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3075;
	            this.alter_table_add_column_family();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3076;
	            this.alter_table_alter_column_family();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3077;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3078;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3079;
	            this.alter_table_reset_table_setting();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3080;
	            this.alter_table_add_index();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3081;
	            this.alter_table_drop_index();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3082;
	            this.alter_table_rename_to();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3083;
	            this.alter_table_add_changefeed();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3084;
	            this.alter_table_alter_changefeed();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3085;
	            this.alter_table_drop_changefeed();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3086;
	            this.alter_table_rename_index_to();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3087;
	            this.alter_table_alter_index();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3088;
	            this.alter_table_alter_column_drop_not_null();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_table_stmt() {
	    let localctx = new Alter_external_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, YQLParser.RULE_alter_external_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3091;
	        this.match(YQLParser.ALTER);
	        this.state = 3092;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 3093;
	        this.match(YQLParser.TABLE);
	        this.state = 3094;
	        this.simple_table_ref();
	        this.state = 3095;
	        this.alter_external_table_action();
	        this.state = 3100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3096;
	            this.match(YQLParser.COMMA);
	            this.state = 3097;
	            this.alter_external_table_action();
	            this.state = 3102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_table_action() {
	    let localctx = new Alter_external_table_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, YQLParser.RULE_alter_external_table_action);
	    try {
	        this.state = 3108;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3103;
	            this.alter_table_add_column();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3104;
	            this.alter_table_drop_column();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3105;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3106;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3107;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_store_stmt() {
	    let localctx = new Alter_table_store_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, YQLParser.RULE_alter_table_store_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3110;
	        this.match(YQLParser.ALTER);
	        this.state = 3111;
	        this.match(YQLParser.TABLESTORE);
	        this.state = 3112;
	        this.object_ref();
	        this.state = 3113;
	        this.alter_table_store_action();
	        this.state = 3118;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3114;
	            this.match(YQLParser.COMMA);
	            this.state = 3115;
	            this.alter_table_store_action();
	            this.state = 3120;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_store_action() {
	    let localctx = new Alter_table_store_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, YQLParser.RULE_alter_table_store_action);
	    try {
	        this.state = 3123;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3121;
	            this.alter_table_add_column();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3122;
	            this.alter_table_drop_column();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_column() {
	    let localctx = new Alter_table_add_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, YQLParser.RULE_alter_table_add_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3125;
	        this.match(YQLParser.ADD);
	        this.state = 3127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 3126;
	            this.match(YQLParser.COLUMN);
	        }

	        this.state = 3129;
	        this.column_schema();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_column() {
	    let localctx = new Alter_table_drop_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, YQLParser.RULE_alter_table_drop_column);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3131;
	        this.match(YQLParser.DROP);
	        this.state = 3133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	        if(la_===1) {
	            this.state = 3132;
	            this.match(YQLParser.COLUMN);

	        }
	        this.state = 3135;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column() {
	    let localctx = new Alter_table_alter_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, YQLParser.RULE_alter_table_alter_column);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3137;
	        this.match(YQLParser.ALTER);
	        this.state = 3138;
	        this.match(YQLParser.COLUMN);
	        this.state = 3139;
	        this.an_id();
	        this.state = 3140;
	        this.match(YQLParser.SET);
	        this.state = 3141;
	        this.family_relation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column_drop_not_null() {
	    let localctx = new Alter_table_alter_column_drop_not_nullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, YQLParser.RULE_alter_table_alter_column_drop_not_null);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3143;
	        this.match(YQLParser.ALTER);
	        this.state = 3144;
	        this.match(YQLParser.COLUMN);
	        this.state = 3145;
	        this.an_id();
	        this.state = 3146;
	        this.match(YQLParser.DROP);
	        this.state = 3147;
	        this.match(YQLParser.NOT);
	        this.state = 3148;
	        this.match(YQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_column_family() {
	    let localctx = new Alter_table_add_column_familyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, YQLParser.RULE_alter_table_add_column_family);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3150;
	        this.match(YQLParser.ADD);
	        this.state = 3151;
	        this.family_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column_family() {
	    let localctx = new Alter_table_alter_column_familyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, YQLParser.RULE_alter_table_alter_column_family);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3153;
	        this.match(YQLParser.ALTER);
	        this.state = 3154;
	        this.match(YQLParser.FAMILY);
	        this.state = 3155;
	        this.an_id();
	        this.state = 3156;
	        this.match(YQLParser.SET);
	        this.state = 3157;
	        this.an_id();
	        this.state = 3158;
	        this.family_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_set_table_setting_uncompat() {
	    let localctx = new Alter_table_set_table_setting_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, YQLParser.RULE_alter_table_set_table_setting_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3160;
	        this.match(YQLParser.SET);
	        this.state = 3161;
	        this.an_id();
	        this.state = 3162;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_set_table_setting_compat() {
	    let localctx = new Alter_table_set_table_setting_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, YQLParser.RULE_alter_table_set_table_setting_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3164;
	        this.match(YQLParser.SET);
	        this.state = 3165;
	        this.match(YQLParser.LPAREN);
	        this.state = 3166;
	        this.alter_table_setting_entry();
	        this.state = 3171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3167;
	            this.match(YQLParser.COMMA);
	            this.state = 3168;
	            this.alter_table_setting_entry();
	            this.state = 3173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3174;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_reset_table_setting() {
	    let localctx = new Alter_table_reset_table_settingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, YQLParser.RULE_alter_table_reset_table_setting);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3176;
	        this.match(YQLParser.RESET);
	        this.state = 3177;
	        this.match(YQLParser.LPAREN);
	        this.state = 3178;
	        this.an_id();
	        this.state = 3183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3179;
	            this.match(YQLParser.COMMA);
	            this.state = 3180;
	            this.an_id();
	            this.state = 3185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3186;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_index() {
	    let localctx = new Alter_table_add_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, YQLParser.RULE_alter_table_add_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3188;
	        this.match(YQLParser.ADD);
	        this.state = 3189;
	        this.table_index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_index() {
	    let localctx = new Alter_table_drop_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, YQLParser.RULE_alter_table_drop_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3191;
	        this.match(YQLParser.DROP);
	        this.state = 3192;
	        this.match(YQLParser.INDEX);
	        this.state = 3193;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_rename_to() {
	    let localctx = new Alter_table_rename_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, YQLParser.RULE_alter_table_rename_to);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3195;
	        this.match(YQLParser.RENAME);
	        this.state = 3196;
	        this.match(YQLParser.TO);
	        this.state = 3197;
	        this.an_id_table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_rename_index_to() {
	    let localctx = new Alter_table_rename_index_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, YQLParser.RULE_alter_table_rename_index_to);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3199;
	        this.match(YQLParser.RENAME);
	        this.state = 3200;
	        this.match(YQLParser.INDEX);
	        this.state = 3201;
	        this.an_id();
	        this.state = 3202;
	        this.match(YQLParser.TO);
	        this.state = 3203;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_changefeed() {
	    let localctx = new Alter_table_add_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, YQLParser.RULE_alter_table_add_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3205;
	        this.match(YQLParser.ADD);
	        this.state = 3206;
	        this.changefeed();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_changefeed() {
	    let localctx = new Alter_table_alter_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, YQLParser.RULE_alter_table_alter_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3208;
	        this.match(YQLParser.ALTER);
	        this.state = 3209;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3210;
	        this.an_id();
	        this.state = 3211;
	        this.changefeed_alter_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_changefeed() {
	    let localctx = new Alter_table_drop_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, YQLParser.RULE_alter_table_drop_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3213;
	        this.match(YQLParser.DROP);
	        this.state = 3214;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3215;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_index() {
	    let localctx = new Alter_table_alter_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, YQLParser.RULE_alter_table_alter_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3217;
	        this.match(YQLParser.ALTER);
	        this.state = 3218;
	        this.match(YQLParser.INDEX);
	        this.state = 3219;
	        this.an_id();
	        this.state = 3220;
	        this.alter_table_alter_index_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_schema() {
	    let localctx = new Column_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, YQLParser.RULE_column_schema);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3222;
	        this.an_id_schema();
	        this.state = 3223;
	        this.type_name_or_bind();
	        this.state = 3225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 3224;
	            this.family_relation();
	        }

	        this.state = 3227;
	        this.opt_column_constraints();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_relation() {
	    let localctx = new Family_relationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, YQLParser.RULE_family_relation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3229;
	        this.match(YQLParser.FAMILY);
	        this.state = 3230;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_column_constraints() {
	    let localctx = new Opt_column_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, YQLParser.RULE_opt_column_constraints);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===199 || _la===201) {
	            this.state = 3233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 3232;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 3235;
	            this.match(YQLParser.NULL);
	        }

	        this.state = 3240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 3238;
	            this.match(YQLParser.DEFAULT);
	            this.state = 3239;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_order_by_specification() {
	    let localctx = new Column_order_by_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, YQLParser.RULE_column_order_by_specification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3242;
	        this.an_id();
	        this.state = 3244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===102) {
	            this.state = 3243;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, YQLParser.RULE_table_constraint);
	    var _la = 0;
	    try {
	        this.state = 3285;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 231:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3246;
	            this.match(YQLParser.PRIMARY);
	            this.state = 3247;
	            this.match(YQLParser.KEY);
	            this.state = 3248;
	            this.match(YQLParser.LPAREN);
	            this.state = 3249;
	            this.an_id();
	            this.state = 3254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3250;
	                this.match(YQLParser.COMMA);
	                this.state = 3251;
	                this.an_id();
	                this.state = 3256;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3257;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 219:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3259;
	            this.match(YQLParser.PARTITION);
	            this.state = 3260;
	            this.match(YQLParser.BY);
	            this.state = 3261;
	            this.match(YQLParser.LPAREN);
	            this.state = 3262;
	            this.an_id();
	            this.state = 3267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3263;
	                this.match(YQLParser.COMMA);
	                this.state = 3264;
	                this.an_id();
	                this.state = 3269;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3270;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3272;
	            this.match(YQLParser.ORDER);
	            this.state = 3273;
	            this.match(YQLParser.BY);
	            this.state = 3274;
	            this.match(YQLParser.LPAREN);
	            this.state = 3275;
	            this.column_order_by_specification();
	            this.state = 3280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3276;
	                this.match(YQLParser.COMMA);
	                this.state = 3277;
	                this.column_order_by_specification();
	                this.state = 3282;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3283;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_index() {
	    let localctx = new Table_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, YQLParser.RULE_table_index);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3287;
	        this.match(YQLParser.INDEX);
	        this.state = 3288;
	        this.an_id();
	        this.state = 3289;
	        this.table_index_type();
	        this.state = 3290;
	        this.match(YQLParser.ON);
	        this.state = 3291;
	        this.match(YQLParser.LPAREN);
	        this.state = 3292;
	        this.an_id_schema();
	        this.state = 3297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3293;
	            this.match(YQLParser.COMMA);
	            this.state = 3294;
	            this.an_id_schema();
	            this.state = 3299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3300;
	        this.match(YQLParser.RPAREN);
	        this.state = 3313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 3301;
	            this.match(YQLParser.COVER);
	            this.state = 3302;
	            this.match(YQLParser.LPAREN);
	            this.state = 3303;
	            this.an_id_schema();
	            this.state = 3308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3304;
	                this.match(YQLParser.COMMA);
	                this.state = 3305;
	                this.an_id_schema();
	                this.state = 3310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3311;
	            this.match(YQLParser.RPAREN);
	        }

	        this.state = 3316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 3315;
	            this.with_index_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_index_type() {
	    let localctx = new Table_index_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, YQLParser.RULE_table_index_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3320;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 145:
	            this.state = 3318;
	            this.global_index();
	            break;
	        case 184:
	            this.state = 3319;
	            this.local_index();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===314) {
	            this.state = 3322;
	            this.match(YQLParser.USING);
	            this.state = 3323;
	            this.index_subtype();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_index() {
	    let localctx = new Global_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, YQLParser.RULE_global_index);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3326;
	        this.match(YQLParser.GLOBAL);
	        this.state = 3328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===307) {
	            this.state = 3327;
	            this.match(YQLParser.UNIQUE);
	        }

	        this.state = 3331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53 || _la===285) {
	            this.state = 3330;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===285)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_index() {
	    let localctx = new Local_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, YQLParser.RULE_local_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3333;
	        this.match(YQLParser.LOCAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_subtype() {
	    let localctx = new Index_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, YQLParser.RULE_index_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3335;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_index_settings() {
	    let localctx = new With_index_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, YQLParser.RULE_with_index_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3337;
	        this.match(YQLParser.WITH);
	        this.state = 3338;
	        this.match(YQLParser.LPAREN);
	        this.state = 3339;
	        this.index_setting_entry();
	        this.state = 3344;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,328,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3340;
	                this.match(YQLParser.COMMA);
	                this.state = 3341;
	                this.index_setting_entry(); 
	            }
	            this.state = 3346;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,328,this._ctx);
	        }

	        this.state = 3348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3347;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 3350;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_setting_entry() {
	    let localctx = new Index_setting_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, YQLParser.RULE_index_setting_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3352;
	        this.an_id();
	        this.state = 3353;
	        this.match(YQLParser.EQUALS);
	        this.state = 3354;
	        this.index_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_setting_value() {
	    let localctx = new Index_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, YQLParser.RULE_index_setting_value);
	    try {
	        this.state = 3360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3356;
	            this.id_or_type();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3357;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3358;
	            this.integer();
	            break;
	        case 132:
	        case 301:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3359;
	            this.bool_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed() {
	    let localctx = new ChangefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, YQLParser.RULE_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3362;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3363;
	        this.an_id();
	        this.state = 3364;
	        this.match(YQLParser.WITH);
	        this.state = 3365;
	        this.match(YQLParser.LPAREN);
	        this.state = 3366;
	        this.changefeed_settings();
	        this.state = 3367;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_settings() {
	    let localctx = new Changefeed_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, YQLParser.RULE_changefeed_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3369;
	        this.changefeed_settings_entry();
	        this.state = 3374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3370;
	            this.match(YQLParser.COMMA);
	            this.state = 3371;
	            this.changefeed_settings_entry();
	            this.state = 3376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_settings_entry() {
	    let localctx = new Changefeed_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, YQLParser.RULE_changefeed_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3377;
	        this.an_id();
	        this.state = 3378;
	        this.match(YQLParser.EQUALS);
	        this.state = 3379;
	        this.changefeed_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_setting_value() {
	    let localctx = new Changefeed_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, YQLParser.RULE_changefeed_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3381;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_alter_settings() {
	    let localctx = new Changefeed_alter_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, YQLParser.RULE_changefeed_alter_settings);
	    try {
	        this.state = 3389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3383;
	            this.match(YQLParser.DISABLE);
	            break;
	        case 272:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3384;
	            this.match(YQLParser.SET);
	            this.state = 3385;
	            this.match(YQLParser.LPAREN);
	            this.state = 3386;
	            this.changefeed_settings();
	            this.state = 3387;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_setting_entry() {
	    let localctx = new Alter_table_setting_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, YQLParser.RULE_alter_table_setting_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3391;
	        this.an_id();
	        this.state = 3392;
	        this.match(YQLParser.EQUALS);
	        this.state = 3393;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_setting_value() {
	    let localctx = new Table_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, YQLParser.RULE_table_setting_value);
	    var _la = 0;
	    try {
	        this.state = 3407;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3395;
	            this.id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3396;
	            this.match(YQLParser.STRING_VALUE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3397;
	            this.integer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3398;
	            this.split_boundaries();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3399;
	            this.ttl_tier_list();
	            this.state = 3400;
	            this.match(YQLParser.ON);
	            this.state = 3401;
	            this.an_id();
	            this.state = 3404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 3402;
	                this.match(YQLParser.AS);
	                this.state = 3403;
	                _la = this._input.LA(1);
	                if(!(((((_la - 191)) & ~0x1f) === 0 && ((1 << (_la - 191)) & 11) !== 0) || _la===268)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3406;
	            this.bool_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttl_tier_list() {
	    let localctx = new Ttl_tier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, YQLParser.RULE_ttl_tier_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3409;
	        this.expr();
	        this.state = 3420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===296) {
	            this.state = 3410;
	            this.ttl_tier_action();
	            this.state = 3417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3411;
	                this.match(YQLParser.COMMA);
	                this.state = 3412;
	                this.expr();
	                this.state = 3413;
	                this.ttl_tier_action();
	                this.state = 3419;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttl_tier_action() {
	    let localctx = new Ttl_tier_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, YQLParser.RULE_ttl_tier_action);
	    try {
	        this.state = 3428;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 296:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3422;
	            this.match(YQLParser.TO);
	            this.state = 3423;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 3424;
	            this.match(YQLParser.DATA);
	            this.state = 3425;
	            this.match(YQLParser.SOURCE);
	            this.state = 3426;
	            this.an_id();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3427;
	            this.match(YQLParser.DELETE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_entry() {
	    let localctx = new Family_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, YQLParser.RULE_family_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3430;
	        this.match(YQLParser.FAMILY);
	        this.state = 3431;
	        this.an_id();
	        this.state = 3432;
	        this.family_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_settings() {
	    let localctx = new Family_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, YQLParser.RULE_family_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3434;
	        this.match(YQLParser.LPAREN);
	        this.state = 3443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 3220176895) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4294967295) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 3221159927) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 4294967287) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4294836223) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 4294959103) !== 0) || ((((_la - 230)) & ~0x1f) === 0 && ((1 << (_la - 230)) & 4294410239) !== 0) || ((((_la - 262)) & ~0x1f) === 0 && ((1 << (_la - 262)) & 3757833215) !== 0) || ((((_la - 294)) & ~0x1f) === 0 && ((1 << (_la - 294)) & 4286578303) !== 0) || ((((_la - 326)) & ~0x1f) === 0 && ((1 << (_la - 326)) & 15) !== 0)) {
	            this.state = 3435;
	            this.family_settings_entry();
	            this.state = 3440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3436;
	                this.match(YQLParser.COMMA);
	                this.state = 3437;
	                this.family_settings_entry();
	                this.state = 3442;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3445;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_settings_entry() {
	    let localctx = new Family_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, YQLParser.RULE_family_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3447;
	        this.an_id();
	        this.state = 3448;
	        this.match(YQLParser.EQUALS);
	        this.state = 3449;
	        this.family_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_setting_value() {
	    let localctx = new Family_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, YQLParser.RULE_family_setting_value);
	    try {
	        this.state = 3453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3451;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3452;
	            this.integer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	split_boundaries() {
	    let localctx = new Split_boundariesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, YQLParser.RULE_split_boundaries);
	    var _la = 0;
	    try {
	        this.state = 3467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3455;
	            this.match(YQLParser.LPAREN);
	            this.state = 3456;
	            this.literal_value_list();
	            this.state = 3461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3457;
	                this.match(YQLParser.COMMA);
	                this.state = 3458;
	                this.literal_value_list();
	                this.state = 3463;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3464;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3466;
	            this.literal_value_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value_list() {
	    let localctx = new Literal_value_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, YQLParser.RULE_literal_value_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3469;
	        this.match(YQLParser.LPAREN);
	        this.state = 3470;
	        this.literal_value();
	        this.state = 3475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3471;
	            this.match(YQLParser.COMMA);
	            this.state = 3472;
	            this.literal_value();
	            this.state = 3477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3478;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_index_action() {
	    let localctx = new Alter_table_alter_index_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, YQLParser.RULE_alter_table_alter_index_action);
	    try {
	        this.state = 3483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3480;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3481;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3482;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table_stmt() {
	    let localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, YQLParser.RULE_drop_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3485;
	        this.match(YQLParser.DROP);
	        this.state = 3490;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 287:
	            this.state = 3486;
	            this.match(YQLParser.TABLE);
	            break;
	        case 290:
	            this.state = 3487;
	            this.match(YQLParser.TABLESTORE);
	            break;
	        case 130:
	            this.state = 3488;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 3489;
	            this.match(YQLParser.TABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        if(la_===1) {
	            this.state = 3492;
	            this.match(YQLParser.IF);
	            this.state = 3493;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 3496;
	        this.simple_table_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_user_stmt() {
	    let localctx = new Create_user_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, YQLParser.RULE_create_user_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3498;
	        this.match(YQLParser.CREATE);
	        this.state = 3499;
	        this.match(YQLParser.USER);
	        this.state = 3500;
	        this.role_name();
	        this.state = 3504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===116 || _la===150 || _la===185 || _la===198 || _la===221) {
	            this.state = 3501;
	            this.user_option();
	            this.state = 3506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_user_stmt() {
	    let localctx = new Alter_user_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, YQLParser.RULE_alter_user_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3507;
	        this.match(YQLParser.ALTER);
	        this.state = 3508;
	        this.match(YQLParser.USER);
	        this.state = 3509;
	        this.role_name();
	        this.state = 3521;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	        case 150:
	        case 185:
	        case 198:
	        case 221:
	        case 323:
	            this.state = 3511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 3510;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 3514; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3513;
	                this.user_option();
	                this.state = 3516; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===116 || _la===150 || _la===185 || _la===198 || _la===221);
	            break;
	        case 244:
	            this.state = 3518;
	            this.match(YQLParser.RENAME);
	            this.state = 3519;
	            this.match(YQLParser.TO);
	            this.state = 3520;
	            this.role_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_group_stmt() {
	    let localctx = new Create_group_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, YQLParser.RULE_create_group_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3523;
	        this.match(YQLParser.CREATE);
	        this.state = 3524;
	        this.match(YQLParser.GROUP);
	        this.state = 3525;
	        this.role_name();
	        this.state = 3539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 3526;
	            this.match(YQLParser.WITH);
	            this.state = 3527;
	            this.match(YQLParser.USER);
	            this.state = 3528;
	            this.role_name();
	            this.state = 3533;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,351,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3529;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3530;
	                    this.role_name(); 
	                }
	                this.state = 3535;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,351,this._ctx);
	            }

	            this.state = 3537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3536;
	                this.match(YQLParser.COMMA);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_group_stmt() {
	    let localctx = new Alter_group_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, YQLParser.RULE_alter_group_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3541;
	        this.match(YQLParser.ALTER);
	        this.state = 3542;
	        this.match(YQLParser.GROUP);
	        this.state = 3543;
	        this.role_name();
	        this.state = 3560;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 111:
	            this.state = 3544;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===111)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3545;
	            this.match(YQLParser.USER);
	            this.state = 3546;
	            this.role_name();
	            this.state = 3551;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3547;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3548;
	                    this.role_name(); 
	                }
	                this.state = 3553;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
	            }

	            this.state = 3555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3554;
	                this.match(YQLParser.COMMA);
	            }

	            break;
	        case 244:
	            this.state = 3557;
	            this.match(YQLParser.RENAME);
	            this.state = 3558;
	            this.match(YQLParser.TO);
	            this.state = 3559;
	            this.role_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_role_stmt() {
	    let localctx = new Drop_role_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, YQLParser.RULE_drop_role_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3562;
	        this.match(YQLParser.DROP);
	        this.state = 3563;
	        _la = this._input.LA(1);
	        if(!(_la===147 || _la===313)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        if(la_===1) {
	            this.state = 3564;
	            this.match(YQLParser.IF);
	            this.state = 3565;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 3568;
	        this.role_name();
	        this.state = 3573;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,358,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3569;
	                this.match(YQLParser.COMMA);
	                this.state = 3570;
	                this.role_name(); 
	            }
	            this.state = 3575;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,358,this._ctx);
	        }

	        this.state = 3577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3576;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role_name() {
	    let localctx = new Role_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, YQLParser.RULE_role_name);
	    try {
	        this.state = 3581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3579;
	            this.an_id_or_type();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3580;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user_option() {
	    let localctx = new User_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, YQLParser.RULE_user_option);
	    try {
	        this.state = 3585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	        case 150:
	        case 221:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3583;
	            this.authentication_option();
	            break;
	        case 185:
	        case 198:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3584;
	            this.login_option();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authentication_option() {
	    let localctx = new Authentication_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, YQLParser.RULE_authentication_option);
	    try {
	        this.state = 3589;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	        case 221:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3587;
	            this.password_option();
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3588;
	            this.hash_option();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password_option() {
	    let localctx = new Password_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, YQLParser.RULE_password_option);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 3591;
	            this.match(YQLParser.ENCRYPTED);
	        }

	        this.state = 3594;
	        this.match(YQLParser.PASSWORD);
	        this.state = 3595;
	        this.password_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password_value() {
	    let localctx = new Password_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, YQLParser.RULE_password_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3597;
	        _la = this._input.LA(1);
	        if(!(_la===201 || _la===327)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hash_option() {
	    let localctx = new Hash_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, YQLParser.RULE_hash_option);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3599;
	        this.match(YQLParser.HASH);
	        this.state = 3600;
	        this.match(YQLParser.STRING_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	login_option() {
	    let localctx = new Login_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, YQLParser.RULE_login_option);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3602;
	        _la = this._input.LA(1);
	        if(!(_la===185 || _la===198)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_permissions_stmt() {
	    let localctx = new Grant_permissions_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, YQLParser.RULE_grant_permissions_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3604;
	        this.match(YQLParser.GRANT);
	        this.state = 3605;
	        this.permission_name_target();
	        this.state = 3606;
	        this.match(YQLParser.ON);
	        this.state = 3607;
	        this.an_id_schema();
	        this.state = 3612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3608;
	            this.match(YQLParser.COMMA);
	            this.state = 3609;
	            this.an_id_schema();
	            this.state = 3614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3615;
	        this.match(YQLParser.TO);
	        this.state = 3616;
	        this.role_name();
	        this.state = 3621;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,365,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3617;
	                this.match(YQLParser.COMMA);
	                this.state = 3618;
	                this.role_name(); 
	            }
	            this.state = 3623;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,365,this._ctx);
	        }

	        this.state = 3625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3624;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 3630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 3627;
	            this.match(YQLParser.WITH);
	            this.state = 3628;
	            this.match(YQLParser.GRANT);
	            this.state = 3629;
	            this.match(YQLParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_permissions_stmt() {
	    let localctx = new Revoke_permissions_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, YQLParser.RULE_revoke_permissions_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3632;
	        this.match(YQLParser.REVOKE);
	        this.state = 3636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	        if(la_===1) {
	            this.state = 3633;
	            this.match(YQLParser.GRANT);
	            this.state = 3634;
	            this.match(YQLParser.OPTION);
	            this.state = 3635;
	            this.match(YQLParser.FOR);

	        }
	        this.state = 3638;
	        this.permission_name_target();
	        this.state = 3639;
	        this.match(YQLParser.ON);
	        this.state = 3640;
	        this.an_id_schema();
	        this.state = 3645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3641;
	            this.match(YQLParser.COMMA);
	            this.state = 3642;
	            this.an_id_schema();
	            this.state = 3647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3648;
	        this.match(YQLParser.FROM);
	        this.state = 3649;
	        this.role_name();
	        this.state = 3654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3650;
	            this.match(YQLParser.COMMA);
	            this.state = 3651;
	            this.role_name();
	            this.state = 3656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_id() {
	    let localctx = new Permission_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, YQLParser.RULE_permission_id);
	    var _la = 0;
	    try {
	        this.state = 3681;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3657;
	            this.match(YQLParser.CONNECT);
	            break;
	        case 183:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3658;
	            this.match(YQLParser.LIST);
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3659;
	            this.match(YQLParser.INSERT);
	            break;
	        case 186:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3660;
	            this.match(YQLParser.MANAGE);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3661;
	            this.match(YQLParser.DROP);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3662;
	            this.match(YQLParser.GRANT);
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3663;
	            this.match(YQLParser.MODIFY);
	            this.state = 3664;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===288)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 119:
	        case 310:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3665;
	            _la = this._input.LA(1);
	            if(!(_la===119 || _la===310)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3666;
	            this.match(YQLParser.ROW);
	            break;
	        case 43:
	        case 103:
	        case 243:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3667;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===103 || _la===243)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3668;
	            this.match(YQLParser.SCHEMA);
	            break;
	        case 270:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3669;
	            this.match(YQLParser.SELECT);
	            this.state = 3671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56 || _la===263 || _la===288) {
	                this.state = 3670;
	                _la = this._input.LA(1);
	                if(!(_la===56 || _la===263 || _la===288)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 142:
	        case 312:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3673;
	            _la = this._input.LA(1);
	            if(!(_la===142 || _la===312)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180) {
	                this.state = 3674;
	                this.match(YQLParser.LEGACY);
	            }

	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3677;
	            this.match(YQLParser.CREATE);
	            this.state = 3679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106 || _la===235 || _la===287) {
	                this.state = 3678;
	                _la = this._input.LA(1);
	                if(!(_la===106 || _la===235 || _la===287)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_name() {
	    let localctx = new Permission_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, YQLParser.RULE_permission_name);
	    try {
	        this.state = 3685;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 82:
	        case 86:
	        case 103:
	        case 111:
	        case 119:
	        case 142:
	        case 146:
	        case 167:
	        case 183:
	        case 186:
	        case 193:
	        case 243:
	        case 270:
	        case 310:
	        case 312:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3683;
	            this.permission_id();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3684;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_name_target() {
	    let localctx = new Permission_name_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, YQLParser.RULE_permission_name_target);
	    var _la = 0;
	    try {
	        this.state = 3702;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 82:
	        case 86:
	        case 103:
	        case 111:
	        case 119:
	        case 142:
	        case 146:
	        case 167:
	        case 183:
	        case 186:
	        case 193:
	        case 243:
	        case 270:
	        case 310:
	        case 312:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3687;
	            this.permission_name();
	            this.state = 3692;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,376,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3688;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3689;
	                    this.permission_name(); 
	                }
	                this.state = 3694;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,376,this._ctx);
	            }

	            this.state = 3696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3695;
	                this.match(YQLParser.COMMA);
	            }

	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3698;
	            this.match(YQLParser.ALL);
	            this.state = 3700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232) {
	                this.state = 3699;
	                this.match(YQLParser.PRIVILEGES);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_resource_pool_stmt() {
	    let localctx = new Create_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, YQLParser.RULE_create_resource_pool_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3704;
	        this.match(YQLParser.CREATE);
	        this.state = 3705;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3706;
	        this.match(YQLParser.POOL);
	        this.state = 3707;
	        this.object_ref();
	        this.state = 3708;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_stmt() {
	    let localctx = new Alter_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, YQLParser.RULE_alter_resource_pool_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3710;
	        this.match(YQLParser.ALTER);
	        this.state = 3711;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3712;
	        this.match(YQLParser.POOL);
	        this.state = 3713;
	        this.object_ref();
	        this.state = 3714;
	        this.alter_resource_pool_action();
	        this.state = 3719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3715;
	            this.match(YQLParser.COMMA);
	            this.state = 3716;
	            this.alter_resource_pool_action();
	            this.state = 3721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_action() {
	    let localctx = new Alter_resource_pool_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, YQLParser.RULE_alter_resource_pool_action);
	    try {
	        this.state = 3724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3722;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3723;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_resource_pool_stmt() {
	    let localctx = new Drop_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, YQLParser.RULE_drop_resource_pool_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3726;
	        this.match(YQLParser.DROP);
	        this.state = 3727;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3728;
	        this.match(YQLParser.POOL);
	        this.state = 3729;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_resource_pool_classifier_stmt() {
	    let localctx = new Create_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, YQLParser.RULE_create_resource_pool_classifier_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3731;
	        this.match(YQLParser.CREATE);
	        this.state = 3732;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3733;
	        this.match(YQLParser.POOL);
	        this.state = 3734;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3735;
	        this.object_ref();
	        this.state = 3736;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_classifier_stmt() {
	    let localctx = new Alter_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, YQLParser.RULE_alter_resource_pool_classifier_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3738;
	        this.match(YQLParser.ALTER);
	        this.state = 3739;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3740;
	        this.match(YQLParser.POOL);
	        this.state = 3741;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3742;
	        this.object_ref();
	        this.state = 3743;
	        this.alter_resource_pool_classifier_action();
	        this.state = 3748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3744;
	            this.match(YQLParser.COMMA);
	            this.state = 3745;
	            this.alter_resource_pool_classifier_action();
	            this.state = 3750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_classifier_action() {
	    let localctx = new Alter_resource_pool_classifier_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, YQLParser.RULE_alter_resource_pool_classifier_action);
	    try {
	        this.state = 3753;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3751;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3752;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_resource_pool_classifier_stmt() {
	    let localctx = new Drop_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, YQLParser.RULE_drop_resource_pool_classifier_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3755;
	        this.match(YQLParser.DROP);
	        this.state = 3756;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3757;
	        this.match(YQLParser.POOL);
	        this.state = 3758;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3759;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_replication_stmt() {
	    let localctx = new Create_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, YQLParser.RULE_create_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3761;
	        this.match(YQLParser.CREATE);
	        this.state = 3762;
	        this.match(YQLParser.ASYNC);
	        this.state = 3763;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3764;
	        this.object_ref();
	        this.state = 3765;
	        this.match(YQLParser.FOR);
	        this.state = 3766;
	        this.replication_target();
	        this.state = 3771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3767;
	            this.match(YQLParser.COMMA);
	            this.state = 3768;
	            this.replication_target();
	            this.state = 3773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3774;
	        this.match(YQLParser.WITH);
	        this.state = 3775;
	        this.match(YQLParser.LPAREN);
	        this.state = 3776;
	        this.replication_settings();
	        this.state = 3777;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_target() {
	    let localctx = new Replication_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, YQLParser.RULE_replication_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3779;
	        this.object_ref();
	        this.state = 3780;
	        this.match(YQLParser.AS);
	        this.state = 3781;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_settings() {
	    let localctx = new Replication_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, YQLParser.RULE_replication_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3783;
	        this.replication_settings_entry();
	        this.state = 3788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3784;
	            this.match(YQLParser.COMMA);
	            this.state = 3785;
	            this.replication_settings_entry();
	            this.state = 3790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_settings_entry() {
	    let localctx = new Replication_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, YQLParser.RULE_replication_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3791;
	        this.an_id();
	        this.state = 3792;
	        this.match(YQLParser.EQUALS);
	        this.state = 3793;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_stmt() {
	    let localctx = new Alter_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, YQLParser.RULE_alter_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3795;
	        this.match(YQLParser.ALTER);
	        this.state = 3796;
	        this.match(YQLParser.ASYNC);
	        this.state = 3797;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3798;
	        this.object_ref();
	        this.state = 3799;
	        this.alter_replication_action();
	        this.state = 3804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3800;
	            this.match(YQLParser.COMMA);
	            this.state = 3801;
	            this.alter_replication_action();
	            this.state = 3806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_action() {
	    let localctx = new Alter_replication_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, YQLParser.RULE_alter_replication_action);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3807;
	        this.alter_replication_set_setting();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_set_setting() {
	    let localctx = new Alter_replication_set_settingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, YQLParser.RULE_alter_replication_set_setting);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3809;
	        this.match(YQLParser.SET);
	        this.state = 3810;
	        this.match(YQLParser.LPAREN);
	        this.state = 3811;
	        this.replication_settings();
	        this.state = 3812;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_replication_stmt() {
	    let localctx = new Drop_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, YQLParser.RULE_drop_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3814;
	        this.match(YQLParser.DROP);
	        this.state = 3815;
	        this.match(YQLParser.ASYNC);
	        this.state = 3816;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3817;
	        this.object_ref();
	        this.state = 3819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 3818;
	            this.match(YQLParser.CASCADE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_or_parameter() {
	    let localctx = new Lambda_or_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, YQLParser.RULE_lambda_or_parameter);
	    try {
	        this.state = 3823;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3821;
	            this.lambda();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3822;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_transfer_stmt() {
	    let localctx = new Create_transfer_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, YQLParser.RULE_create_transfer_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3825;
	        this.match(YQLParser.CREATE);
	        this.state = 3826;
	        this.match(YQLParser.TRANSFER);
	        this.state = 3827;
	        this.object_ref();
	        this.state = 3828;
	        this.match(YQLParser.FROM);
	        this.state = 3829;
	        this.object_ref();
	        this.state = 3830;
	        this.match(YQLParser.TO);
	        this.state = 3831;
	        this.object_ref();
	        this.state = 3834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===314) {
	            this.state = 3832;
	            this.match(YQLParser.USING);
	            this.state = 3833;
	            this.lambda_or_parameter();
	        }

	        this.state = 3836;
	        this.match(YQLParser.WITH);
	        this.state = 3837;
	        this.match(YQLParser.LPAREN);
	        this.state = 3838;
	        this.transfer_settings();
	        this.state = 3839;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transfer_settings() {
	    let localctx = new Transfer_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, YQLParser.RULE_transfer_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3841;
	        this.transfer_settings_entry();
	        this.state = 3846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3842;
	            this.match(YQLParser.COMMA);
	            this.state = 3843;
	            this.transfer_settings_entry();
	            this.state = 3848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transfer_settings_entry() {
	    let localctx = new Transfer_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, YQLParser.RULE_transfer_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3849;
	        this.an_id();
	        this.state = 3850;
	        this.match(YQLParser.EQUALS);
	        this.state = 3851;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_transfer_stmt() {
	    let localctx = new Alter_transfer_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, YQLParser.RULE_alter_transfer_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3853;
	        this.match(YQLParser.ALTER);
	        this.state = 3854;
	        this.match(YQLParser.TRANSFER);
	        this.state = 3855;
	        this.object_ref();
	        this.state = 3856;
	        this.alter_transfer_action();
	        this.state = 3861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3857;
	            this.match(YQLParser.COMMA);
	            this.state = 3858;
	            this.alter_transfer_action();
	            this.state = 3863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_transfer_action() {
	    let localctx = new Alter_transfer_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, YQLParser.RULE_alter_transfer_action);
	    try {
	        this.state = 3866;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3864;
	            this.alter_transfer_set_setting();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3865;
	            this.alter_transfer_set_using();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_transfer_set_setting() {
	    let localctx = new Alter_transfer_set_settingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, YQLParser.RULE_alter_transfer_set_setting);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3868;
	        this.match(YQLParser.SET);
	        this.state = 3869;
	        this.match(YQLParser.LPAREN);
	        this.state = 3870;
	        this.transfer_settings();
	        this.state = 3871;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_transfer_set_using() {
	    let localctx = new Alter_transfer_set_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, YQLParser.RULE_alter_transfer_set_using);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3873;
	        this.match(YQLParser.SET);
	        this.state = 3874;
	        this.match(YQLParser.USING);
	        this.state = 3875;
	        this.lambda_or_parameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_transfer_stmt() {
	    let localctx = new Drop_transfer_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, YQLParser.RULE_drop_transfer_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3877;
	        this.match(YQLParser.DROP);
	        this.state = 3878;
	        this.match(YQLParser.TRANSFER);
	        this.state = 3879;
	        this.object_ref();
	        this.state = 3881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 3880;
	            this.match(YQLParser.CASCADE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	action_or_subquery_args() {
	    let localctx = new Action_or_subquery_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, YQLParser.RULE_action_or_subquery_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3883;
	        this.opt_bind_parameter();
	        this.state = 3888;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3884;
	            this.match(YQLParser.COMMA);
	            this.state = 3885;
	            this.opt_bind_parameter();
	            this.state = 3890;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define_action_or_subquery_stmt() {
	    let localctx = new Define_action_or_subquery_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, YQLParser.RULE_define_action_or_subquery_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3891;
	        this.match(YQLParser.DEFINE);
	        this.state = 3892;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===281)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3893;
	        this.bind_parameter();
	        this.state = 3894;
	        this.match(YQLParser.LPAREN);
	        this.state = 3896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30) {
	            this.state = 3895;
	            this.action_or_subquery_args();
	        }

	        this.state = 3898;
	        this.match(YQLParser.RPAREN);
	        this.state = 3899;
	        this.match(YQLParser.AS);
	        this.state = 3900;
	        this.define_action_or_subquery_body();
	        this.state = 3901;
	        this.match(YQLParser.END);
	        this.state = 3902;
	        this.match(YQLParser.DEFINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define_action_or_subquery_body() {
	    let localctx = new Define_action_or_subquery_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, YQLParser.RULE_define_action_or_subquery_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 3904;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 3909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===30 || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 196611) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 1086587137) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 2684882947) !== 0) || ((((_la - 146)) & ~0x1f) === 0 && ((1 << (_la - 146)) & 2099329) !== 0) || ((((_la - 218)) & ~0x1f) === 0 && ((1 << (_la - 218)) & 269517825) !== 0) || ((((_la - 252)) & ~0x1f) === 0 && ((1 << (_la - 252)) & 4457025) !== 0) || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 71) !== 0)) {
	            this.state = 3910;
	            this.sql_stmt_core();
	            this.state = 3919;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,398,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3912; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 3911;
	                        this.match(YQLParser.SEMICOLON);
	                        this.state = 3914; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===22);
	                    this.state = 3916;
	                    this.sql_stmt_core(); 
	                }
	                this.state = 3921;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,398,this._ctx);
	            }

	            this.state = 3925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===22) {
	                this.state = 3922;
	                this.match(YQLParser.SEMICOLON);
	                this.state = 3927;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, YQLParser.RULE_if_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 3930;
	            this.match(YQLParser.EVALUATE);
	        }

	        this.state = 3933;
	        this.match(YQLParser.IF);
	        this.state = 3934;
	        this.expr();
	        this.state = 3935;
	        this.do_stmt();
	        this.state = 3938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 3936;
	            this.match(YQLParser.ELSE);
	            this.state = 3937;
	            this.do_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, YQLParser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 3940;
	            this.match(YQLParser.EVALUATE);
	        }

	        this.state = 3944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===218) {
	            this.state = 3943;
	            this.match(YQLParser.PARALLEL);
	        }

	        this.state = 3946;
	        this.match(YQLParser.FOR);
	        this.state = 3947;
	        this.bind_parameter();
	        this.state = 3948;
	        this.match(YQLParser.IN);
	        this.state = 3949;
	        this.expr();
	        this.state = 3950;
	        this.do_stmt();
	        this.state = 3953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 3951;
	            this.match(YQLParser.ELSE);
	            this.state = 3952;
	            this.do_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_ref() {
	    let localctx = new Table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, YQLParser.RULE_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        if(la_===1) {
	            this.state = 3955;
	            this.cluster_expr();
	            this.state = 3956;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 3961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 3960;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 3993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3963;
	            this.table_key();
	            break;

	        case 2:
	            this.state = 3964;
	            this.an_id_expr();
	            this.state = 3965;
	            this.match(YQLParser.LPAREN);
	            this.state = 3977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286810141) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	                this.state = 3966;
	                this.table_arg();
	                this.state = 3971;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,408,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3967;
	                        this.match(YQLParser.COMMA);
	                        this.state = 3968;
	                        this.table_arg(); 
	                    }
	                    this.state = 3973;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,408,this._ctx);
	                }

	                this.state = 3975;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 3974;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 3979;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 3:
	            this.state = 3981;
	            this.bind_parameter();
	            this.state = 3987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 3982;
	                this.match(YQLParser.LPAREN);
	                this.state = 3984;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967167) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0)) {
	                    this.state = 3983;
	                    this.expr_list();
	                }

	                this.state = 3986;
	                this.match(YQLParser.RPAREN);
	            }

	            this.state = 3991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===318) {
	                this.state = 3989;
	                this.match(YQLParser.VIEW);
	                this.state = 3990;
	                this.view_name();
	            }

	            break;

	        }
	        this.state = 3996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 3995;
	            this.table_hints();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_key() {
	    let localctx = new Table_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, YQLParser.RULE_table_key);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3998;
	        this.id_table_or_type();
	        this.state = 4001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===318) {
	            this.state = 3999;
	            this.match(YQLParser.VIEW);
	            this.state = 4000;
	            this.view_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_arg() {
	    let localctx = new Table_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, YQLParser.RULE_table_arg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4004;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 4003;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 4006;
	        this.named_expr();
	        this.state = 4009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===318) {
	            this.state = 4007;
	            this.match(YQLParser.VIEW);
	            this.state = 4008;
	            this.view_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_hints() {
	    let localctx = new Table_hintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, YQLParser.RULE_table_hints);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4011;
	        this.match(YQLParser.WITH);
	        this.state = 4024;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.state = 4012;
	            this.table_hint();
	            break;
	        case 25:
	            this.state = 4013;
	            this.match(YQLParser.LPAREN);
	            this.state = 4014;
	            this.table_hint();
	            this.state = 4019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 4015;
	                this.match(YQLParser.COMMA);
	                this.state = 4016;
	                this.table_hint();
	                this.state = 4021;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4022;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_hint() {
	    let localctx = new Table_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, YQLParser.RULE_table_hint);
	    var _la = 0;
	    try {
	        this.state = 4071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4026;
	            this.an_id_hint();
	            this.state = 4045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 4027;
	                this.match(YQLParser.EQUALS);
	                this.state = 4043;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 30:
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 142:
	                case 143:
	                case 144:
	                case 145:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 152:
	                case 153:
	                case 154:
	                case 155:
	                case 156:
	                case 157:
	                case 158:
	                case 159:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 164:
	                case 165:
	                case 166:
	                case 167:
	                case 168:
	                case 169:
	                case 170:
	                case 171:
	                case 172:
	                case 173:
	                case 174:
	                case 175:
	                case 176:
	                case 177:
	                case 178:
	                case 179:
	                case 180:
	                case 181:
	                case 182:
	                case 184:
	                case 185:
	                case 186:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 193:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 200:
	                case 201:
	                case 202:
	                case 203:
	                case 204:
	                case 205:
	                case 206:
	                case 207:
	                case 208:
	                case 209:
	                case 210:
	                case 212:
	                case 213:
	                case 214:
	                case 215:
	                case 216:
	                case 217:
	                case 218:
	                case 219:
	                case 220:
	                case 221:
	                case 222:
	                case 223:
	                case 224:
	                case 225:
	                case 226:
	                case 227:
	                case 228:
	                case 229:
	                case 230:
	                case 231:
	                case 232:
	                case 233:
	                case 234:
	                case 235:
	                case 236:
	                case 237:
	                case 238:
	                case 239:
	                case 240:
	                case 241:
	                case 242:
	                case 243:
	                case 244:
	                case 246:
	                case 247:
	                case 248:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 255:
	                case 256:
	                case 257:
	                case 258:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 264:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 271:
	                case 273:
	                case 274:
	                case 275:
	                case 276:
	                case 277:
	                case 278:
	                case 279:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 285:
	                case 286:
	                case 287:
	                case 288:
	                case 289:
	                case 290:
	                case 292:
	                case 293:
	                case 294:
	                case 295:
	                case 296:
	                case 297:
	                case 298:
	                case 299:
	                case 300:
	                case 303:
	                case 304:
	                case 305:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 315:
	                case 316:
	                case 318:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 323:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                case 328:
	                case 329:
	                    this.state = 4028;
	                    this.type_name_tag();
	                    break;
	                case 25:
	                    this.state = 4029;
	                    this.match(YQLParser.LPAREN);
	                    this.state = 4030;
	                    this.type_name_tag();
	                    this.state = 4035;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,421,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 4031;
	                            this.match(YQLParser.COMMA);
	                            this.state = 4032;
	                            this.type_name_tag(); 
	                        }
	                        this.state = 4037;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,421,this._ctx);
	                    }

	                    this.state = 4039;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24) {
	                        this.state = 4038;
	                        this.match(YQLParser.COMMA);
	                    }

	                    this.state = 4041;
	                    this.match(YQLParser.RPAREN);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4047;
	            _la = this._input.LA(1);
	            if(!(_la===77 || _la===267)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 4048;
	                this.match(YQLParser.EQUALS);
	            }

	            this.state = 4051;
	            this.type_name_or_bind();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4052;
	            this.match(YQLParser.SCHEMA);
	            this.state = 4054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 4053;
	                this.match(YQLParser.EQUALS);
	            }

	            this.state = 4056;
	            this.match(YQLParser.LPAREN);
	            this.state = 4065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967295) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4294967295) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294967231) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4294967295) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4294967295) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4286578687) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4294967295) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 4294934527) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 4095) !== 0)) {
	                this.state = 4057;
	                this.struct_arg_positional();
	                this.state = 4062;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,427,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 4058;
	                        this.match(YQLParser.COMMA);
	                        this.state = 4059;
	                        this.struct_arg_positional(); 
	                    }
	                    this.state = 4064;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,427,this._ctx);
	                }

	            }

	            this.state = 4068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 4067;
	                this.match(YQLParser.COMMA);
	            }

	            this.state = 4070;
	            this.match(YQLParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_ref() {
	    let localctx = new Object_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, YQLParser.RULE_object_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4076;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	        if(la_===1) {
	            this.state = 4073;
	            this.cluster_expr();
	            this.state = 4074;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 4078;
	        this.id_or_at();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_table_ref_core() {
	    let localctx = new Simple_table_ref_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, YQLParser.RULE_simple_table_ref_core);
	    var _la = 0;
	    try {
	        this.state = 4085;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4080;
	            this.object_ref();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===29) {
	                this.state = 4081;
	                this.match(YQLParser.COMMAT);
	            }

	            this.state = 4084;
	            this.bind_parameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_table_ref() {
	    let localctx = new Simple_table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, YQLParser.RULE_simple_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4087;
	        this.simple_table_ref_core();
	        this.state = 4089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 4088;
	            this.table_hints();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_simple_table_ref() {
	    let localctx = new Into_simple_table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, YQLParser.RULE_into_simple_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4091;
	        this.simple_table_ref();
	        this.state = 4095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 4092;
	            this.match(YQLParser.ERASE);
	            this.state = 4093;
	            this.match(YQLParser.BY);
	            this.state = 4094;
	            this.pure_column_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, YQLParser.RULE_delete_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4098;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 4097;
	            this.match(YQLParser.BATCH);
	        }

	        this.state = 4100;
	        this.match(YQLParser.DELETE);
	        this.state = 4101;
	        this.match(YQLParser.FROM);
	        this.state = 4102;
	        this.simple_table_ref();
	        this.state = 4107;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 321:
	        	this.state = 4103;
	        	this.match(YQLParser.WHERE);
	        	this.state = 4104;
	        	this.expr();
	        	break;
	        case 207:
	        	this.state = 4105;
	        	this.match(YQLParser.ON);
	        	this.state = 4106;
	        	this.into_values_source();
	        	break;
	        case -1:
	        case 22:
	        case 117:
	        case 256:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 4110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===256) {
	            this.state = 4109;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, YQLParser.RULE_update_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 4112;
	            this.match(YQLParser.BATCH);
	        }

	        this.state = 4115;
	        this.match(YQLParser.UPDATE);
	        this.state = 4116;
	        this.simple_table_ref();
	        this.state = 4125;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.state = 4117;
	            this.match(YQLParser.SET);
	            this.state = 4118;
	            this.set_clause_choice();
	            this.state = 4121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 4119;
	                this.match(YQLParser.WHERE);
	                this.state = 4120;
	                this.expr();
	            }

	            break;
	        case 207:
	            this.state = 4123;
	            this.match(YQLParser.ON);
	            this.state = 4124;
	            this.into_values_source();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4128;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===256) {
	            this.state = 4127;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause_choice() {
	    let localctx = new Set_clause_choiceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, YQLParser.RULE_set_clause_choice);
	    try {
	        this.state = 4132;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4130;
	            this.set_clause_list();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4131;
	            this.multiple_column_assignment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause_list() {
	    let localctx = new Set_clause_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, YQLParser.RULE_set_clause_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4134;
	        this.set_clause();
	        this.state = 4139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4135;
	            this.match(YQLParser.COMMA);
	            this.state = 4136;
	            this.set_clause();
	            this.state = 4141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause() {
	    let localctx = new Set_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, YQLParser.RULE_set_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4142;
	        this.set_target();
	        this.state = 4143;
	        this.match(YQLParser.EQUALS);
	        this.state = 4144;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target() {
	    let localctx = new Set_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, YQLParser.RULE_set_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4146;
	        this.column_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiple_column_assignment() {
	    let localctx = new Multiple_column_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, YQLParser.RULE_multiple_column_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4148;
	        this.set_target_list();
	        this.state = 4149;
	        this.match(YQLParser.EQUALS);
	        this.state = 4150;
	        this.match(YQLParser.LPAREN);
	        this.state = 4151;
	        this.simple_values_source();
	        this.state = 4152;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target_list() {
	    let localctx = new Set_target_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, YQLParser.RULE_set_target_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4154;
	        this.match(YQLParser.LPAREN);
	        this.state = 4155;
	        this.set_target();
	        this.state = 4160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4156;
	            this.match(YQLParser.COMMA);
	            this.state = 4157;
	            this.set_target();
	            this.state = 4162;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4163;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_stmt() {
	    let localctx = new Create_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, YQLParser.RULE_create_topic_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4165;
	        this.match(YQLParser.CREATE);
	        this.state = 4166;
	        this.match(YQLParser.TOPIC);
	        this.state = 4170;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        if(la_===1) {
	            this.state = 4167;
	            this.match(YQLParser.IF);
	            this.state = 4168;
	            this.match(YQLParser.NOT);
	            this.state = 4169;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4172;
	        this.topic_ref();
	        this.state = 4174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 4173;
	            this.create_topic_entries();
	        }

	        this.state = 4177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 4176;
	            this.with_topic_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_entries() {
	    let localctx = new Create_topic_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, YQLParser.RULE_create_topic_entries);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4179;
	        this.match(YQLParser.LPAREN);
	        this.state = 4180;
	        this.create_topic_entry();
	        this.state = 4185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4181;
	            this.match(YQLParser.COMMA);
	            this.state = 4182;
	            this.create_topic_entry();
	            this.state = 4187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4188;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_entry() {
	    let localctx = new Create_topic_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, YQLParser.RULE_create_topic_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4190;
	        this.topic_create_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_topic_settings() {
	    let localctx = new With_topic_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, YQLParser.RULE_with_topic_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4192;
	        this.match(YQLParser.WITH);
	        this.state = 4193;
	        this.match(YQLParser.LPAREN);
	        this.state = 4194;
	        this.topic_settings();
	        this.state = 4195;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_stmt() {
	    let localctx = new Alter_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, YQLParser.RULE_alter_topic_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4197;
	        this.match(YQLParser.ALTER);
	        this.state = 4198;
	        this.match(YQLParser.TOPIC);
	        this.state = 4201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
	        if(la_===1) {
	            this.state = 4199;
	            this.match(YQLParser.IF);
	            this.state = 4200;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4203;
	        this.topic_ref();
	        this.state = 4204;
	        this.alter_topic_action();
	        this.state = 4209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4205;
	            this.match(YQLParser.COMMA);
	            this.state = 4206;
	            this.alter_topic_action();
	            this.state = 4211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_action() {
	    let localctx = new Alter_topic_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, YQLParser.RULE_alter_topic_action);
	    try {
	        this.state = 4217;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4212;
	            this.alter_topic_add_consumer();
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4213;
	            this.alter_topic_alter_consumer();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4214;
	            this.alter_topic_drop_consumer();
	            break;
	        case 272:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4215;
	            this.alter_topic_set_settings();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4216;
	            this.alter_topic_reset_settings();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_add_consumer() {
	    let localctx = new Alter_topic_add_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, YQLParser.RULE_alter_topic_add_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4219;
	        this.match(YQLParser.ADD);
	        this.state = 4220;
	        this.topic_create_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_create_consumer_entry() {
	    let localctx = new Topic_create_consumer_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, YQLParser.RULE_topic_create_consumer_entry);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4222;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4223;
	        this.an_id();
	        this.state = 4225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323) {
	            this.state = 4224;
	            this.topic_consumer_with_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_alter_consumer() {
	    let localctx = new Alter_topic_alter_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, YQLParser.RULE_alter_topic_alter_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4227;
	        this.match(YQLParser.ALTER);
	        this.state = 4228;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4229;
	        this.topic_consumer_ref();
	        this.state = 4230;
	        this.alter_topic_alter_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_alter_consumer_entry() {
	    let localctx = new Alter_topic_alter_consumer_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, YQLParser.RULE_alter_topic_alter_consumer_entry);
	    try {
	        this.state = 4234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 272:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4232;
	            this.topic_alter_consumer_set();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4233;
	            this.topic_alter_consumer_reset();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_drop_consumer() {
	    let localctx = new Alter_topic_drop_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, YQLParser.RULE_alter_topic_drop_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4236;
	        this.match(YQLParser.DROP);
	        this.state = 4237;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4238;
	        this.topic_consumer_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_alter_consumer_set() {
	    let localctx = new Topic_alter_consumer_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, YQLParser.RULE_topic_alter_consumer_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4240;
	        this.match(YQLParser.SET);
	        this.state = 4241;
	        this.match(YQLParser.LPAREN);
	        this.state = 4242;
	        this.topic_consumer_settings();
	        this.state = 4243;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_alter_consumer_reset() {
	    let localctx = new Topic_alter_consumer_resetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, YQLParser.RULE_topic_alter_consumer_reset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4245;
	        this.match(YQLParser.RESET);
	        this.state = 4246;
	        this.match(YQLParser.LPAREN);
	        this.state = 4247;
	        this.an_id();
	        this.state = 4252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4248;
	            this.match(YQLParser.COMMA);
	            this.state = 4249;
	            this.an_id();
	            this.state = 4254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4255;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_set_settings() {
	    let localctx = new Alter_topic_set_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, YQLParser.RULE_alter_topic_set_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4257;
	        this.match(YQLParser.SET);
	        this.state = 4258;
	        this.match(YQLParser.LPAREN);
	        this.state = 4259;
	        this.topic_settings();
	        this.state = 4260;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_reset_settings() {
	    let localctx = new Alter_topic_reset_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, YQLParser.RULE_alter_topic_reset_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4262;
	        this.match(YQLParser.RESET);
	        this.state = 4263;
	        this.match(YQLParser.LPAREN);
	        this.state = 4264;
	        this.an_id();
	        this.state = 4269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4265;
	            this.match(YQLParser.COMMA);
	            this.state = 4266;
	            this.an_id_pure();
	            this.state = 4271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4272;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_topic_stmt() {
	    let localctx = new Drop_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, YQLParser.RULE_drop_topic_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4274;
	        this.match(YQLParser.DROP);
	        this.state = 4275;
	        this.match(YQLParser.TOPIC);
	        this.state = 4278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
	        if(la_===1) {
	            this.state = 4276;
	            this.match(YQLParser.IF);
	            this.state = 4277;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4280;
	        this.topic_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_settings() {
	    let localctx = new Topic_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, YQLParser.RULE_topic_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4282;
	        this.topic_settings_entry();
	        this.state = 4287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4283;
	            this.match(YQLParser.COMMA);
	            this.state = 4284;
	            this.topic_settings_entry();
	            this.state = 4289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_settings_entry() {
	    let localctx = new Topic_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, YQLParser.RULE_topic_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4290;
	        this.an_id();
	        this.state = 4291;
	        this.match(YQLParser.EQUALS);
	        this.state = 4292;
	        this.topic_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_setting_value() {
	    let localctx = new Topic_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, YQLParser.RULE_topic_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4294;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_with_settings() {
	    let localctx = new Topic_consumer_with_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, YQLParser.RULE_topic_consumer_with_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4296;
	        this.match(YQLParser.WITH);
	        this.state = 4297;
	        this.match(YQLParser.LPAREN);
	        this.state = 4298;
	        this.topic_consumer_settings();
	        this.state = 4299;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_settings() {
	    let localctx = new Topic_consumer_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, YQLParser.RULE_topic_consumer_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4301;
	        this.topic_consumer_settings_entry();
	        this.state = 4306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4302;
	            this.match(YQLParser.COMMA);
	            this.state = 4303;
	            this.topic_consumer_settings_entry();
	            this.state = 4308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_settings_entry() {
	    let localctx = new Topic_consumer_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, YQLParser.RULE_topic_consumer_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4309;
	        this.an_id();
	        this.state = 4310;
	        this.match(YQLParser.EQUALS);
	        this.state = 4311;
	        this.topic_consumer_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_setting_value() {
	    let localctx = new Topic_consumer_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, YQLParser.RULE_topic_consumer_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4313;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_ref() {
	    let localctx = new Topic_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, YQLParser.RULE_topic_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        if(la_===1) {
	            this.state = 4315;
	            this.cluster_expr();
	            this.state = 4316;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 4320;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_ref() {
	    let localctx = new Topic_consumer_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, YQLParser.RULE_topic_consumer_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4322;
	        this.an_id_pure();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_treatment() {
	    let localctx = new Null_treatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, YQLParser.RULE_null_treatment);
	    try {
	        this.state = 4328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 250:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4324;
	            this.match(YQLParser.RESPECT);
	            this.state = 4325;
	            this.match(YQLParser.NULLS);
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4326;
	            this.match(YQLParser.IGNORE);
	            this.state = 4327;
	            this.match(YQLParser.NULLS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter_clause() {
	    let localctx = new Filter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, YQLParser.RULE_filter_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4330;
	        this.match(YQLParser.FILTER);
	        this.state = 4331;
	        this.match(YQLParser.LPAREN);
	        this.state = 4332;
	        this.match(YQLParser.WHERE);
	        this.state = 4333;
	        this.expr();
	        this.state = 4334;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_name_or_specification() {
	    let localctx = new Window_name_or_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, YQLParser.RULE_window_name_or_specification);
	    try {
	        this.state = 4338;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4336;
	            this.window_name();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4337;
	            this.window_specification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_name() {
	    let localctx = new Window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, YQLParser.RULE_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4340;
	        this.an_id_window();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_clause() {
	    let localctx = new Window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, YQLParser.RULE_window_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4342;
	        this.match(YQLParser.WINDOW);
	        this.state = 4343;
	        this.window_definition_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition_list() {
	    let localctx = new Window_definition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, YQLParser.RULE_window_definition_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4345;
	        this.window_definition();
	        this.state = 4350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4346;
	            this.match(YQLParser.COMMA);
	            this.state = 4347;
	            this.window_definition();
	            this.state = 4352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition() {
	    let localctx = new Window_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, YQLParser.RULE_window_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4353;
	        this.new_window_name();
	        this.state = 4354;
	        this.match(YQLParser.AS);
	        this.state = 4355;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_window_name() {
	    let localctx = new New_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, YQLParser.RULE_new_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4357;
	        this.window_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, YQLParser.RULE_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4359;
	        this.match(YQLParser.LPAREN);
	        this.state = 4360;
	        this.window_specification_details();
	        this.state = 4361;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification_details() {
	    let localctx = new Window_specification_detailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, YQLParser.RULE_window_specification_details);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        if(la_===1) {
	            this.state = 4363;
	            this.existing_window_name();

	        }
	        this.state = 4367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===219) {
	            this.state = 4366;
	            this.window_partition_clause();
	        }

	        this.state = 4370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===213) {
	            this.state = 4369;
	            this.window_order_clause();
	        }

	        this.state = 4373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===149 || _la===237 || _la===264) {
	            this.state = 4372;
	            this.window_frame_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existing_window_name() {
	    let localctx = new Existing_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, YQLParser.RULE_existing_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4375;
	        this.window_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_partition_clause() {
	    let localctx = new Window_partition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, YQLParser.RULE_window_partition_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4377;
	        this.match(YQLParser.PARTITION);
	        this.state = 4379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 4378;
	            this.match(YQLParser.COMPACT);
	        }

	        this.state = 4381;
	        this.match(YQLParser.BY);
	        this.state = 4382;
	        this.named_expr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_order_clause() {
	    let localctx = new Window_order_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, YQLParser.RULE_window_order_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4384;
	        this.order_by_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_clause() {
	    let localctx = new Window_frame_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, YQLParser.RULE_window_frame_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4386;
	        this.window_frame_units();
	        this.state = 4387;
	        this.window_frame_extent();
	        this.state = 4389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 4388;
	            this.window_frame_exclusion();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_units() {
	    let localctx = new Window_frame_unitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, YQLParser.RULE_window_frame_units);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4391;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===237 || _la===264)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_extent() {
	    let localctx = new Window_frame_extentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, YQLParser.RULE_window_frame_extent);
	    try {
	        this.state = 4395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4393;
	            this.window_frame_bound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4394;
	            this.window_frame_between();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_between() {
	    let localctx = new Window_frame_betweenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, YQLParser.RULE_window_frame_between);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4397;
	        this.match(YQLParser.BETWEEN);
	        this.state = 4398;
	        this.window_frame_bound();
	        this.state = 4399;
	        this.match(YQLParser.AND);
	        this.state = 4400;
	        this.window_frame_bound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_bound() {
	    let localctx = new Window_frame_boundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, YQLParser.RULE_window_frame_bound);
	    var _la = 0;
	    try {
	        this.state = 4409;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4402;
	            this.match(YQLParser.CURRENT);
	            this.state = 4403;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4406;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4404;
	                this.expr();
	                break;

	            case 2:
	                this.state = 4405;
	                this.match(YQLParser.UNBOUNDED);
	                break;

	            }
	            this.state = 4408;
	            _la = this._input.LA(1);
	            if(!(_la===138 || _la===229)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_exclusion() {
	    let localctx = new Window_frame_exclusionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, YQLParser.RULE_window_frame_exclusion);
	    try {
	        this.state = 4421;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4411;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4412;
	            this.match(YQLParser.CURRENT);
	            this.state = 4413;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4414;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4415;
	            this.match(YQLParser.GROUP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4416;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4417;
	            this.match(YQLParser.TIES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4418;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4419;
	            this.match(YQLParser.NO);
	            this.state = 4420;
	            this.match(YQLParser.OTHERS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_stmt() {
	    let localctx = new Use_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, YQLParser.RULE_use_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4423;
	        this.match(YQLParser.USE);
	        this.state = 4424;
	        this.cluster_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subselect_stmt() {
	    let localctx = new Subselect_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, YQLParser.RULE_subselect_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4431;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.state = 4426;
	            this.match(YQLParser.LPAREN);
	            this.state = 4427;
	            this.select_stmt();
	            this.state = 4428;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 108:
	        case 141:
	        case 233:
	        case 238:
	        case 270:
	            this.state = 4430;
	            this.select_unparenthesized_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_nodes_stmt() {
	    let localctx = new Named_nodes_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, YQLParser.RULE_named_nodes_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4433;
	        this.bind_parameter_list();
	        this.state = 4434;
	        this.match(YQLParser.EQUALS);
	        this.state = 4437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4435;
	            this.expr();
	            break;

	        case 2:
	            this.state = 4436;
	            this.subselect_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit_stmt() {
	    let localctx = new Commit_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, YQLParser.RULE_commit_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4439;
	        this.match(YQLParser.COMMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback_stmt() {
	    let localctx = new Rollback_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, YQLParser.RULE_rollback_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4441;
	        this.match(YQLParser.ROLLBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_table() {
	    let localctx = new Analyze_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, YQLParser.RULE_analyze_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4443;
	        this.simple_table_ref();
	        this.state = 4448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 4444;
	            this.match(YQLParser.LPAREN);
	            this.state = 4445;
	            this.column_list();
	            this.state = 4446;
	            this.match(YQLParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_table_list() {
	    let localctx = new Analyze_table_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, YQLParser.RULE_analyze_table_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4450;
	        this.analyze_table();
	        this.state = 4455;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,477,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4451;
	                this.match(YQLParser.COMMA);
	                this.state = 4452;
	                this.analyze_table(); 
	            }
	            this.state = 4457;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,477,this._ctx);
	        }

	        this.state = 4459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 4458;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_stmt() {
	    let localctx = new Analyze_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, YQLParser.RULE_analyze_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4461;
	        this.match(YQLParser.ANALYZE);
	        this.state = 4462;
	        this.analyze_table_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_sequence_stmt() {
	    let localctx = new Alter_sequence_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, YQLParser.RULE_alter_sequence_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4464;
	        this.match(YQLParser.ALTER);
	        this.state = 4465;
	        this.match(YQLParser.SEQUENCE);
	        this.state = 4468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,479,this._ctx);
	        if(la_===1) {
	            this.state = 4466;
	            this.match(YQLParser.IF);
	            this.state = 4467;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4470;
	        this.object_ref();
	        this.state = 4472; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4471;
	            this.alter_sequence_action();
	            this.state = 4474; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===159 || _la===251 || _la===278);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_sequence_action() {
	    let localctx = new Alter_sequence_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, YQLParser.RULE_alter_sequence_action);
	    var _la = 0;
	    try {
	        this.state = 4492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4476;
	            this.match(YQLParser.START);
	            this.state = 4478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 4477;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 4480;
	            this.integer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4481;
	            this.match(YQLParser.RESTART);
	            this.state = 4483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===323) {
	                this.state = 4482;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 4485;
	            this.integer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4486;
	            this.match(YQLParser.RESTART);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4487;
	            this.match(YQLParser.INCREMENT);
	            this.state = 4489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 4488;
	                this.match(YQLParser.BY);
	            }

	            this.state = 4491;
	            this.integer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	show_create_table_stmt() {
	    let localctx = new Show_create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, YQLParser.RULE_show_create_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4494;
	        this.match(YQLParser.SHOW);
	        this.state = 4495;
	        this.match(YQLParser.CREATE);
	        this.state = 4496;
	        this.match(YQLParser.TABLE);
	        this.state = 4497;
	        this.simple_table_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, YQLParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4499;
	        _la = this._input.LA(1);
	        if(!(_la===328 || _la===329)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id() {
	    let localctx = new IdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, YQLParser.RULE_id);
	    try {
	        this.state = 4503;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4501;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4502;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_schema() {
	    let localctx = new Id_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, YQLParser.RULE_id_schema);
	    try {
	        this.state = 4512;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4505;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4506;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 233:
	        case 238:
	        case 255:
	        case 256:
	        case 262:
	        case 270:
	        case 284:
	        case 304:
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4507;
	            this.keyword_expr_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 306:
	        case 322:
	        case 324:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4508;
	            this.keyword_select_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4509;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4510;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4511;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_expr() {
	    let localctx = new Id_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, YQLParser.RULE_id_expr);
	    try {
	        this.state = 4520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4514;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4515;
	            this.keyword_compat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4516;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4517;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4518;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4519;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_expr_in() {
	    let localctx = new Id_expr_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, YQLParser.RULE_id_expr_in);
	    try {
	        this.state = 4527;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4522;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4523;
	            this.keyword_compat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4524;
	            this.keyword_alter_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4525;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4526;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_window() {
	    let localctx = new Id_windowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, YQLParser.RULE_id_window);
	    try {
	        this.state = 4537;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4529;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4530;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 233:
	        case 238:
	        case 255:
	        case 256:
	        case 262:
	        case 270:
	        case 284:
	        case 304:
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4531;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 279:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4532;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 306:
	        case 322:
	        case 324:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4533;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4534;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4535;
	            this.keyword_in_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4536;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table() {
	    let localctx = new Id_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, YQLParser.RULE_id_table);
	    try {
	        this.state = 4546;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4539;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4540;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 233:
	        case 238:
	        case 255:
	        case 256:
	        case 262:
	        case 270:
	        case 284:
	        case 304:
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4541;
	            this.keyword_expr_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 306:
	        case 322:
	        case 324:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4542;
	            this.keyword_select_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4543;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4544;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4545;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_without() {
	    let localctx = new Id_withoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, YQLParser.RULE_id_without);
	    try {
	        this.state = 4555;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4548;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4549;
	            this.keyword_compat();
	            break;
	        case 47:
	        case 119:
	        case 279:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4550;
	            this.keyword_table_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4551;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4552;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4553;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4554;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_hint() {
	    let localctx = new Id_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, YQLParser.RULE_id_hint);
	    try {
	        this.state = 4565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4557;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4558;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 233:
	        case 238:
	        case 255:
	        case 256:
	        case 262:
	        case 270:
	        case 284:
	        case 304:
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4559;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 279:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4560;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 306:
	        case 322:
	        case 324:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4561;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4562;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4563;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4564;
	            this.keyword_window_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_as_compat() {
	    let localctx = new Id_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, YQLParser.RULE_id_as_compat);
	    try {
	        this.state = 4569;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4567;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 178:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 196:
	        case 197:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 257:
	        case 258:
	        case 260:
	        case 261:
	        case 263:
	        case 266:
	        case 268:
	        case 269:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 315:
	        case 316:
	        case 319:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4568;
	            this.keyword_as_compat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id() {
	    let localctx = new An_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, YQLParser.RULE_an_id);
	    try {
	        this.state = 4573;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4571;
	            this.id();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4572;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_or_type() {
	    let localctx = new An_id_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, YQLParser.RULE_an_id_or_type);
	    try {
	        this.state = 4577;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4575;
	            this.id_or_type();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4576;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_schema() {
	    let localctx = new An_id_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, YQLParser.RULE_an_id_schema);
	    try {
	        this.state = 4581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4579;
	            this.id_schema();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4580;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_expr() {
	    let localctx = new An_id_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, YQLParser.RULE_an_id_expr);
	    try {
	        this.state = 4585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4583;
	            this.id_expr();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4584;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_expr_in() {
	    let localctx = new An_id_expr_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, YQLParser.RULE_an_id_expr_in);
	    try {
	        this.state = 4589;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4587;
	            this.id_expr_in();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4588;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_window() {
	    let localctx = new An_id_windowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, YQLParser.RULE_an_id_window);
	    try {
	        this.state = 4593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4591;
	            this.id_window();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4592;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_table() {
	    let localctx = new An_id_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, YQLParser.RULE_an_id_table);
	    try {
	        this.state = 4597;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4595;
	            this.id_table();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4596;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_without() {
	    let localctx = new An_id_withoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, YQLParser.RULE_an_id_without);
	    try {
	        this.state = 4601;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4599;
	            this.id_without();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4600;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_hint() {
	    let localctx = new An_id_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, YQLParser.RULE_an_id_hint);
	    try {
	        this.state = 4605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4603;
	            this.id_hint();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4604;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_pure() {
	    let localctx = new An_id_pureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, YQLParser.RULE_an_id_pure);
	    try {
	        this.state = 4609;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4607;
	            this.identifier();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4608;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_as_compat() {
	    let localctx = new An_id_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, YQLParser.RULE_an_id_as_compat);
	    try {
	        this.state = 4613;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 178:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 196:
	        case 197:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 257:
	        case 258:
	        case 260:
	        case 261:
	        case 263:
	        case 266:
	        case 268:
	        case 269:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 315:
	        case 316:
	        case 319:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4611;
	            this.id_as_compat();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4612;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, YQLParser.RULE_view_name);
	    try {
	        this.state = 4618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4615;
	            this.an_id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4616;
	            this.match(YQLParser.PRIMARY);
	            this.state = 4617;
	            this.match(YQLParser.KEY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_id_prefix() {
	    let localctx = new Opt_id_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, YQLParser.RULE_opt_id_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
	        if(la_===1) {
	            this.state = 4620;
	            this.an_id();
	            this.state = 4621;
	            this.match(YQLParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cluster_expr() {
	    let localctx = new Cluster_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, YQLParser.RULE_cluster_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,507,this._ctx);
	        if(la_===1) {
	            this.state = 4625;
	            this.an_id();
	            this.state = 4626;
	            this.match(YQLParser.COLON);

	        }
	        this.state = 4632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.state = 4630;
	            this.pure_column_or_named();
	            break;
	        case 19:
	            this.state = 4631;
	            this.match(YQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_or_type() {
	    let localctx = new Id_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, YQLParser.RULE_id_or_type);
	    try {
	        this.state = 4636;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4634;
	            this.id();
	            break;
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 249:
	        case 272:
	        case 280:
	        case 291:
	        case 302:
	        case 317:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4635;
	            this.type_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_id_prefix_or_type() {
	    let localctx = new Opt_id_prefix_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, YQLParser.RULE_opt_id_prefix_or_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	        if(la_===1) {
	            this.state = 4638;
	            this.an_id_or_type();
	            this.state = 4639;
	            this.match(YQLParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_or_at() {
	    let localctx = new Id_or_atContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, YQLParser.RULE_id_or_at);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 4643;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 4646;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table_or_type() {
	    let localctx = new Id_table_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, YQLParser.RULE_id_table_or_type);
	    try {
	        this.state = 4650;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4648;
	            this.an_id_table();
	            break;
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 249:
	        case 272:
	        case 280:
	        case 291:
	        case 302:
	        case 317:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4649;
	            this.type_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table_or_at() {
	    let localctx = new Id_table_or_atContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, YQLParser.RULE_id_table_or_at);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 4652;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 4655;
	        this.id_table_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, YQLParser.RULE_keyword);
	    try {
	        this.state = 4665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 234:
	        case 235:
	        case 236:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 248:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 263:
	        case 265:
	        case 266:
	        case 268:
	        case 269:
	        case 271:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 281:
	        case 282:
	        case 283:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 303:
	        case 305:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 318:
	        case 319:
	        case 323:
	        case 325:
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4657;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 233:
	        case 238:
	        case 255:
	        case 256:
	        case 262:
	        case 270:
	        case 284:
	        case 304:
	        case 320:
	        case 321:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4658;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 279:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4659;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 306:
	        case 322:
	        case 324:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4660;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4661;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4662;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 237:
	        case 264:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4663;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 267:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4664;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_expr_uncompat() {
	    let localctx = new Keyword_expr_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, YQLParser.RULE_keyword_expr_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4667;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 811009) !== 0) || ((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 134217757) !== 0) || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 33603585) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 167772167) !== 0) || ((((_la - 233)) & ~0x1f) === 0 && ((1 << (_la - 233)) & 549453857) !== 0) || _la===270 || _la===284 || ((((_la - 304)) & ~0x1f) === 0 && ((1 << (_la - 304)) & 196609) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_table_uncompat() {
	    let localctx = new Keyword_table_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, YQLParser.RULE_keyword_table_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4669;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===119 || _la===279)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_select_uncompat() {
	    let localctx = new Keyword_select_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, YQLParser.RULE_keyword_select_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4671;
	        _la = this._input.LA(1);
	        if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 641) !== 0) || _la===109 || _la===123 || ((((_la - 151)) & ~0x1f) === 0 && ((1 << (_la - 151)) & 2147745793) !== 0) || ((((_la - 306)) & ~0x1f) === 0 && ((1 << (_la - 306)) & 327681) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_alter_uncompat() {
	    let localctx = new Keyword_alter_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, YQLParser.RULE_keyword_alter_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4673;
	        this.match(YQLParser.COLUMN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_in_uncompat() {
	    let localctx = new Keyword_in_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, YQLParser.RULE_keyword_in_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4675;
	        this.match(YQLParser.COMPACT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_window_uncompat() {
	    let localctx = new Keyword_window_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, YQLParser.RULE_keyword_window_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4677;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===237 || _la===264)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_hint_uncompat() {
	    let localctx = new Keyword_hint_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, YQLParser.RULE_keyword_hint_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4679;
	        _la = this._input.LA(1);
	        if(!(_la===77 || _la===267)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_as_compat() {
	    let localctx = new Keyword_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, YQLParser.RULE_keyword_as_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4681;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2817496559) !== 0) || ((((_la - 72)) & ~0x1f) === 0 && ((1 << (_la - 72)) & 4024598343) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4015470493) !== 0) || ((((_la - 136)) & ~0x1f) === 0 && ((1 << (_la - 136)) & 3221118877) !== 0) || ((((_la - 168)) & ~0x1f) === 0 && ((1 << (_la - 168)) & 2013213709) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 1879023071) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 764377063) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 4261126029) !== 0) || ((((_la - 298)) & ~0x1f) === 0 && ((1 << (_la - 298)) & 405208743) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_compat() {
	    let localctx = new Keyword_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, YQLParser.RULE_keyword_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4683;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2817496559) !== 0) || ((((_la - 72)) & ~0x1f) === 0 && ((1 << (_la - 72)) & 4293066575) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4017567709) !== 0) || ((((_la - 136)) & ~0x1f) === 0 && ((1 << (_la - 136)) & 4294860701) !== 0) || ((((_la - 168)) & ~0x1f) === 0 && ((1 << (_la - 168)) & 2147434045) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 4294965245) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 3195920285) !== 0) || ((((_la - 265)) & ~0x1f) === 0 && ((1 << (_la - 265)) & 4227284827) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 879754575) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_id() {
	    let localctx = new Type_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, YQLParser.RULE_type_id);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4685;
	        _la = this._input.LA(1);
	        if(!(_la===68 || _la===105 || _la===118 || _la===137 || _la===183 || _la===211 || ((((_la - 249)) & ~0x1f) === 0 && ((1 << (_la - 249)) & 2155872257) !== 0) || ((((_la - 291)) & ~0x1f) === 0 && ((1 << (_la - 291)) & 67110913) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_value() {
	    let localctx = new Bool_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, YQLParser.RULE_bool_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4687;
	        _la = this._input.LA(1);
	        if(!(_la===132 || _la===301)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real() {
	    let localctx = new RealContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, YQLParser.RULE_real);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4689;
	        this.match(YQLParser.REAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, YQLParser.RULE_integer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4691;
	        _la = this._input.LA(1);
	        if(!(_la===330 || _la===331)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

YQLParser.EOF = antlr4.Token.EOF;
YQLParser.EQUALS = 1;
YQLParser.EQUALS2 = 2;
YQLParser.NOT_EQUALS = 3;
YQLParser.NOT_EQUALS2 = 4;
YQLParser.LESS = 5;
YQLParser.LESS_OR_EQ = 6;
YQLParser.GREATER = 7;
YQLParser.GREATER_OR_EQ = 8;
YQLParser.SHIFT_LEFT = 9;
YQLParser.ROT_LEFT = 10;
YQLParser.AMPERSAND = 11;
YQLParser.PIPE = 12;
YQLParser.DOUBLE_PIPE = 13;
YQLParser.STRUCT_OPEN = 14;
YQLParser.STRUCT_CLOSE = 15;
YQLParser.PLUS = 16;
YQLParser.MINUS = 17;
YQLParser.TILDA = 18;
YQLParser.ASTERISK = 19;
YQLParser.SLASH = 20;
YQLParser.PERCENT = 21;
YQLParser.SEMICOLON = 22;
YQLParser.DOT = 23;
YQLParser.COMMA = 24;
YQLParser.LPAREN = 25;
YQLParser.RPAREN = 26;
YQLParser.QUESTION = 27;
YQLParser.COLON = 28;
YQLParser.COMMAT = 29;
YQLParser.DOLLAR = 30;
YQLParser.LBRACE_CURLY = 31;
YQLParser.RBRACE_CURLY = 32;
YQLParser.CARET = 33;
YQLParser.NAMESPACE = 34;
YQLParser.ARROW = 35;
YQLParser.RBRACE_SQUARE = 36;
YQLParser.LBRACE_SQUARE = 37;
YQLParser.ABORT = 38;
YQLParser.ACTION = 39;
YQLParser.ADD = 40;
YQLParser.AFTER = 41;
YQLParser.ALL = 42;
YQLParser.ALTER = 43;
YQLParser.ANALYZE = 44;
YQLParser.AND = 45;
YQLParser.ANSI = 46;
YQLParser.ANY = 47;
YQLParser.ARRAY = 48;
YQLParser.AS = 49;
YQLParser.ASC = 50;
YQLParser.ASSUME = 51;
YQLParser.ASYMMETRIC = 52;
YQLParser.ASYNC = 53;
YQLParser.AT = 54;
YQLParser.ATTACH = 55;
YQLParser.ATTRIBUTES = 56;
YQLParser.AUTOINCREMENT = 57;
YQLParser.AUTOMAP = 58;
YQLParser.BACKUP = 59;
YQLParser.BATCH = 60;
YQLParser.COLLECTION = 61;
YQLParser.BEFORE = 62;
YQLParser.BEGIN = 63;
YQLParser.BERNOULLI = 64;
YQLParser.BETWEEN = 65;
YQLParser.BITCAST = 66;
YQLParser.BY = 67;
YQLParser.CALLABLE = 68;
YQLParser.CASCADE = 69;
YQLParser.CASE = 70;
YQLParser.CAST = 71;
YQLParser.CHANGEFEED = 72;
YQLParser.CHECK = 73;
YQLParser.CLASSIFIER = 74;
YQLParser.COLLATE = 75;
YQLParser.COLUMN = 76;
YQLParser.COLUMNS = 77;
YQLParser.COMMIT = 78;
YQLParser.COMPACT = 79;
YQLParser.CONDITIONAL = 80;
YQLParser.CONFLICT = 81;
YQLParser.CONNECT = 82;
YQLParser.CONSTRAINT = 83;
YQLParser.CONSUMER = 84;
YQLParser.COVER = 85;
YQLParser.CREATE = 86;
YQLParser.CROSS = 87;
YQLParser.CUBE = 88;
YQLParser.CURRENT = 89;
YQLParser.CURRENT_DATE = 90;
YQLParser.CURRENT_TIME = 91;
YQLParser.CURRENT_TIMESTAMP = 92;
YQLParser.DATA = 93;
YQLParser.DATABASE = 94;
YQLParser.DECIMAL = 95;
YQLParser.DECLARE = 96;
YQLParser.DEFAULT = 97;
YQLParser.DEFERRABLE = 98;
YQLParser.DEFERRED = 99;
YQLParser.DEFINE = 100;
YQLParser.DELETE = 101;
YQLParser.DESC = 102;
YQLParser.DESCRIBE = 103;
YQLParser.DETACH = 104;
YQLParser.DICT = 105;
YQLParser.DIRECTORY = 106;
YQLParser.DISABLE = 107;
YQLParser.DISCARD = 108;
YQLParser.DISTINCT = 109;
YQLParser.DO = 110;
YQLParser.DROP = 111;
YQLParser.EACH = 112;
YQLParser.ELSE = 113;
YQLParser.EMPTY = 114;
YQLParser.EMPTY_ACTION = 115;
YQLParser.ENCRYPTED = 116;
YQLParser.END = 117;
YQLParser.ENUM = 118;
YQLParser.ERASE = 119;
YQLParser.ERROR = 120;
YQLParser.ESCAPE = 121;
YQLParser.EVALUATE = 122;
YQLParser.EXCEPT = 123;
YQLParser.EXCLUDE = 124;
YQLParser.EXCLUSION = 125;
YQLParser.EXCLUSIVE = 126;
YQLParser.EXISTS = 127;
YQLParser.EXPLAIN = 128;
YQLParser.EXPORT = 129;
YQLParser.EXTERNAL = 130;
YQLParser.FAIL = 131;
YQLParser.FALSE = 132;
YQLParser.FAMILY = 133;
YQLParser.FILTER = 134;
YQLParser.FIRST = 135;
YQLParser.FLATTEN = 136;
YQLParser.FLOW = 137;
YQLParser.FOLLOWING = 138;
YQLParser.FOR = 139;
YQLParser.FOREIGN = 140;
YQLParser.FROM = 141;
YQLParser.FULL = 142;
YQLParser.FUNCTION = 143;
YQLParser.GLOB = 144;
YQLParser.GLOBAL = 145;
YQLParser.GRANT = 146;
YQLParser.GROUP = 147;
YQLParser.GROUPING = 148;
YQLParser.GROUPS = 149;
YQLParser.HASH = 150;
YQLParser.HAVING = 151;
YQLParser.HOP = 152;
YQLParser.IF = 153;
YQLParser.IGNORE = 154;
YQLParser.ILIKE = 155;
YQLParser.IMMEDIATE = 156;
YQLParser.IMPORT = 157;
YQLParser.IN = 158;
YQLParser.INCREMENT = 159;
YQLParser.INCREMENTAL = 160;
YQLParser.INDEX = 161;
YQLParser.INDEXED = 162;
YQLParser.INHERITS = 163;
YQLParser.INITIAL = 164;
YQLParser.INITIALLY = 165;
YQLParser.INNER = 166;
YQLParser.INSERT = 167;
YQLParser.INSTEAD = 168;
YQLParser.INTERSECT = 169;
YQLParser.INTO = 170;
YQLParser.IS = 171;
YQLParser.ISNULL = 172;
YQLParser.JOIN = 173;
YQLParser.JSON_EXISTS = 174;
YQLParser.JSON_QUERY = 175;
YQLParser.JSON_VALUE = 176;
YQLParser.KEY = 177;
YQLParser.LAST = 178;
YQLParser.LEFT = 179;
YQLParser.LEGACY = 180;
YQLParser.LIKE = 181;
YQLParser.LIMIT = 182;
YQLParser.LIST = 183;
YQLParser.LOCAL = 184;
YQLParser.LOGIN = 185;
YQLParser.MANAGE = 186;
YQLParser.MATCH = 187;
YQLParser.MATCHES = 188;
YQLParser.MATCH_RECOGNIZE = 189;
YQLParser.MEASURES = 190;
YQLParser.MICROSECONDS = 191;
YQLParser.MILLISECONDS = 192;
YQLParser.MODIFY = 193;
YQLParser.NANOSECONDS = 194;
YQLParser.NATURAL = 195;
YQLParser.NEXT = 196;
YQLParser.NO = 197;
YQLParser.NOLOGIN = 198;
YQLParser.NOT = 199;
YQLParser.NOTNULL = 200;
YQLParser.NULL = 201;
YQLParser.NULLS = 202;
YQLParser.OBJECT = 203;
YQLParser.OF = 204;
YQLParser.OFFSET = 205;
YQLParser.OMIT = 206;
YQLParser.ON = 207;
YQLParser.ONE = 208;
YQLParser.ONLY = 209;
YQLParser.OPTION = 210;
YQLParser.OPTIONAL = 211;
YQLParser.OR = 212;
YQLParser.ORDER = 213;
YQLParser.OTHERS = 214;
YQLParser.OUTER = 215;
YQLParser.OVER = 216;
YQLParser.OWNER = 217;
YQLParser.PARALLEL = 218;
YQLParser.PARTITION = 219;
YQLParser.PASSING = 220;
YQLParser.PASSWORD = 221;
YQLParser.PAST = 222;
YQLParser.PATTERN = 223;
YQLParser.PER = 224;
YQLParser.PERMUTE = 225;
YQLParser.PLAN = 226;
YQLParser.POOL = 227;
YQLParser.PRAGMA = 228;
YQLParser.PRECEDING = 229;
YQLParser.PRESORT = 230;
YQLParser.PRIMARY = 231;
YQLParser.PRIVILEGES = 232;
YQLParser.PROCESS = 233;
YQLParser.QUERY = 234;
YQLParser.QUEUE = 235;
YQLParser.RAISE = 236;
YQLParser.RANGE = 237;
YQLParser.REDUCE = 238;
YQLParser.REFERENCES = 239;
YQLParser.REGEXP = 240;
YQLParser.REINDEX = 241;
YQLParser.RELEASE = 242;
YQLParser.REMOVE = 243;
YQLParser.RENAME = 244;
YQLParser.REPEATABLE = 245;
YQLParser.REPLACE = 246;
YQLParser.REPLICATION = 247;
YQLParser.RESET = 248;
YQLParser.RESOURCE = 249;
YQLParser.RESPECT = 250;
YQLParser.RESTART = 251;
YQLParser.RESTORE = 252;
YQLParser.RESTRICT = 253;
YQLParser.RESULT = 254;
YQLParser.RETURN = 255;
YQLParser.RETURNING = 256;
YQLParser.REVERT = 257;
YQLParser.REVOKE = 258;
YQLParser.RIGHT = 259;
YQLParser.RLIKE = 260;
YQLParser.ROLLBACK = 261;
YQLParser.ROLLUP = 262;
YQLParser.ROW = 263;
YQLParser.ROWS = 264;
YQLParser.SAMPLE = 265;
YQLParser.SAVEPOINT = 266;
YQLParser.SCHEMA = 267;
YQLParser.SECONDS = 268;
YQLParser.SEEK = 269;
YQLParser.SELECT = 270;
YQLParser.SEMI = 271;
YQLParser.SET = 272;
YQLParser.SETS = 273;
YQLParser.SHOW = 274;
YQLParser.TSKIP = 275;
YQLParser.SEQUENCE = 276;
YQLParser.SOURCE = 277;
YQLParser.START = 278;
YQLParser.STREAM = 279;
YQLParser.STRUCT = 280;
YQLParser.SUBQUERY = 281;
YQLParser.SUBSET = 282;
YQLParser.SYMBOLS = 283;
YQLParser.SYMMETRIC = 284;
YQLParser.SYNC = 285;
YQLParser.SYSTEM = 286;
YQLParser.TABLE = 287;
YQLParser.TABLES = 288;
YQLParser.TABLESAMPLE = 289;
YQLParser.TABLESTORE = 290;
YQLParser.TAGGED = 291;
YQLParser.TEMP = 292;
YQLParser.TEMPORARY = 293;
YQLParser.THEN = 294;
YQLParser.TIES = 295;
YQLParser.TO = 296;
YQLParser.TOPIC = 297;
YQLParser.TRANSACTION = 298;
YQLParser.TRANSFER = 299;
YQLParser.TRIGGER = 300;
YQLParser.TRUE = 301;
YQLParser.TUPLE = 302;
YQLParser.TYPE = 303;
YQLParser.UNBOUNDED = 304;
YQLParser.UNCONDITIONAL = 305;
YQLParser.UNION = 306;
YQLParser.UNIQUE = 307;
YQLParser.UNKNOWN = 308;
YQLParser.UNMATCHED = 309;
YQLParser.UPDATE = 310;
YQLParser.UPSERT = 311;
YQLParser.USE = 312;
YQLParser.USER = 313;
YQLParser.USING = 314;
YQLParser.VACUUM = 315;
YQLParser.VALUES = 316;
YQLParser.VARIANT = 317;
YQLParser.VIEW = 318;
YQLParser.VIRTUAL = 319;
YQLParser.WHEN = 320;
YQLParser.WHERE = 321;
YQLParser.WINDOW = 322;
YQLParser.WITH = 323;
YQLParser.WITHOUT = 324;
YQLParser.WRAPPER = 325;
YQLParser.XOR = 326;
YQLParser.STRING_VALUE = 327;
YQLParser.ID_PLAIN = 328;
YQLParser.ID_QUOTED = 329;
YQLParser.DIGITS = 330;
YQLParser.INTEGER_VALUE = 331;
YQLParser.REAL = 332;
YQLParser.BLOB = 333;
YQLParser.WS = 334;
YQLParser.COMMENT = 335;

YQLParser.RULE_sql_query = 0;
YQLParser.RULE_sql_stmt_list = 1;
YQLParser.RULE_ansi_sql_stmt_list = 2;
YQLParser.RULE_lambda_body = 3;
YQLParser.RULE_lambda_stmt = 4;
YQLParser.RULE_sql_stmt = 5;
YQLParser.RULE_sql_stmt_core = 6;
YQLParser.RULE_expr = 7;
YQLParser.RULE_or_subexpr = 8;
YQLParser.RULE_and_subexpr = 9;
YQLParser.RULE_xor_subexpr = 10;
YQLParser.RULE_distinct_from_op = 11;
YQLParser.RULE_cond_expr = 12;
YQLParser.RULE_match_op = 13;
YQLParser.RULE_eq_subexpr = 14;
YQLParser.RULE_shift_right = 15;
YQLParser.RULE_rot_right = 16;
YQLParser.RULE_double_question = 17;
YQLParser.RULE_neq_subexpr = 18;
YQLParser.RULE_bit_subexpr = 19;
YQLParser.RULE_add_subexpr = 20;
YQLParser.RULE_mul_subexpr = 21;
YQLParser.RULE_con_subexpr = 22;
YQLParser.RULE_unary_op = 23;
YQLParser.RULE_unary_subexpr_suffix = 24;
YQLParser.RULE_unary_casual_subexpr = 25;
YQLParser.RULE_in_unary_casual_subexpr = 26;
YQLParser.RULE_unary_subexpr = 27;
YQLParser.RULE_in_unary_subexpr = 28;
YQLParser.RULE_list_literal = 29;
YQLParser.RULE_expr_dict_list = 30;
YQLParser.RULE_dict_literal = 31;
YQLParser.RULE_expr_struct_list = 32;
YQLParser.RULE_struct_literal = 33;
YQLParser.RULE_atom_expr = 34;
YQLParser.RULE_in_atom_expr = 35;
YQLParser.RULE_cast_expr = 36;
YQLParser.RULE_bitcast_expr = 37;
YQLParser.RULE_exists_expr = 38;
YQLParser.RULE_case_expr = 39;
YQLParser.RULE_lambda = 40;
YQLParser.RULE_in_expr = 41;
YQLParser.RULE_json_api_expr = 42;
YQLParser.RULE_jsonpath_spec = 43;
YQLParser.RULE_json_variable_name = 44;
YQLParser.RULE_json_variable = 45;
YQLParser.RULE_json_variables = 46;
YQLParser.RULE_json_common_args = 47;
YQLParser.RULE_json_case_handler = 48;
YQLParser.RULE_json_value = 49;
YQLParser.RULE_json_exists_handler = 50;
YQLParser.RULE_json_exists = 51;
YQLParser.RULE_json_query_wrapper = 52;
YQLParser.RULE_json_query_handler = 53;
YQLParser.RULE_json_query = 54;
YQLParser.RULE_smart_parenthesis = 55;
YQLParser.RULE_expr_list = 56;
YQLParser.RULE_pure_column_list = 57;
YQLParser.RULE_pure_column_or_named = 58;
YQLParser.RULE_pure_column_or_named_list = 59;
YQLParser.RULE_column_name = 60;
YQLParser.RULE_without_column_name = 61;
YQLParser.RULE_column_list = 62;
YQLParser.RULE_without_column_list = 63;
YQLParser.RULE_named_expr = 64;
YQLParser.RULE_named_expr_list = 65;
YQLParser.RULE_invoke_expr = 66;
YQLParser.RULE_invoke_expr_tail = 67;
YQLParser.RULE_using_call_expr = 68;
YQLParser.RULE_key_expr = 69;
YQLParser.RULE_when_expr = 70;
YQLParser.RULE_literal_value = 71;
YQLParser.RULE_bind_parameter = 72;
YQLParser.RULE_opt_bind_parameter = 73;
YQLParser.RULE_bind_parameter_list = 74;
YQLParser.RULE_named_bind_parameter = 75;
YQLParser.RULE_named_bind_parameter_list = 76;
YQLParser.RULE_signed_number = 77;
YQLParser.RULE_type_name_simple = 78;
YQLParser.RULE_integer_or_bind = 79;
YQLParser.RULE_type_name_tag = 80;
YQLParser.RULE_struct_arg = 81;
YQLParser.RULE_struct_arg_positional = 82;
YQLParser.RULE_variant_arg = 83;
YQLParser.RULE_callable_arg = 84;
YQLParser.RULE_callable_arg_list = 85;
YQLParser.RULE_type_name_decimal = 86;
YQLParser.RULE_type_name_optional = 87;
YQLParser.RULE_type_name_tuple = 88;
YQLParser.RULE_type_name_struct = 89;
YQLParser.RULE_type_name_variant = 90;
YQLParser.RULE_type_name_list = 91;
YQLParser.RULE_type_name_stream = 92;
YQLParser.RULE_type_name_flow = 93;
YQLParser.RULE_type_name_dict = 94;
YQLParser.RULE_type_name_set = 95;
YQLParser.RULE_type_name_enum = 96;
YQLParser.RULE_type_name_resource = 97;
YQLParser.RULE_type_name_tagged = 98;
YQLParser.RULE_type_name_callable = 99;
YQLParser.RULE_type_name_composite = 100;
YQLParser.RULE_type_name = 101;
YQLParser.RULE_type_name_or_bind = 102;
YQLParser.RULE_value_constructor_literal = 103;
YQLParser.RULE_value_constructor = 104;
YQLParser.RULE_declare_stmt = 105;
YQLParser.RULE_module_path = 106;
YQLParser.RULE_import_stmt = 107;
YQLParser.RULE_export_stmt = 108;
YQLParser.RULE_call_action = 109;
YQLParser.RULE_inline_action = 110;
YQLParser.RULE_do_stmt = 111;
YQLParser.RULE_pragma_stmt = 112;
YQLParser.RULE_pragma_value = 113;
YQLParser.RULE_sort_specification = 114;
YQLParser.RULE_sort_specification_list = 115;
YQLParser.RULE_select_stmt = 116;
YQLParser.RULE_select_unparenthesized_stmt = 117;
YQLParser.RULE_select_kind_parenthesis = 118;
YQLParser.RULE_select_op = 119;
YQLParser.RULE_select_kind_partial = 120;
YQLParser.RULE_select_kind = 121;
YQLParser.RULE_process_core = 122;
YQLParser.RULE_external_call_param = 123;
YQLParser.RULE_external_call_settings = 124;
YQLParser.RULE_reduce_core = 125;
YQLParser.RULE_opt_set_quantifier = 126;
YQLParser.RULE_select_core = 127;
YQLParser.RULE_row_pattern_recognition_clause = 128;
YQLParser.RULE_row_pattern_rows_per_match = 129;
YQLParser.RULE_row_pattern_empty_match_handling = 130;
YQLParser.RULE_row_pattern_measures = 131;
YQLParser.RULE_row_pattern_measure_list = 132;
YQLParser.RULE_row_pattern_measure_definition = 133;
YQLParser.RULE_row_pattern_common_syntax = 134;
YQLParser.RULE_row_pattern_skip_to = 135;
YQLParser.RULE_row_pattern_skip_to_variable_name = 136;
YQLParser.RULE_row_pattern_initial_or_seek = 137;
YQLParser.RULE_row_pattern = 138;
YQLParser.RULE_row_pattern_term = 139;
YQLParser.RULE_row_pattern_factor = 140;
YQLParser.RULE_row_pattern_quantifier = 141;
YQLParser.RULE_row_pattern_primary = 142;
YQLParser.RULE_row_pattern_primary_variable_name = 143;
YQLParser.RULE_row_pattern_permute = 144;
YQLParser.RULE_row_pattern_subset_clause = 145;
YQLParser.RULE_row_pattern_subset_list = 146;
YQLParser.RULE_row_pattern_subset_item = 147;
YQLParser.RULE_row_pattern_subset_item_variable_name = 148;
YQLParser.RULE_row_pattern_subset_rhs = 149;
YQLParser.RULE_row_pattern_subset_rhs_variable_name = 150;
YQLParser.RULE_row_pattern_definition_list = 151;
YQLParser.RULE_row_pattern_definition = 152;
YQLParser.RULE_row_pattern_definition_variable_name = 153;
YQLParser.RULE_row_pattern_definition_search_condition = 154;
YQLParser.RULE_search_condition = 155;
YQLParser.RULE_row_pattern_variable_name = 156;
YQLParser.RULE_order_by_clause = 157;
YQLParser.RULE_ext_order_by_clause = 158;
YQLParser.RULE_group_by_clause = 159;
YQLParser.RULE_grouping_element_list = 160;
YQLParser.RULE_grouping_element = 161;
YQLParser.RULE_ordinary_grouping_set = 162;
YQLParser.RULE_ordinary_grouping_set_list = 163;
YQLParser.RULE_rollup_list = 164;
YQLParser.RULE_cube_list = 165;
YQLParser.RULE_grouping_sets_specification = 166;
YQLParser.RULE_hopping_window_specification = 167;
YQLParser.RULE_result_column = 168;
YQLParser.RULE_join_source = 169;
YQLParser.RULE_named_column = 170;
YQLParser.RULE_flatten_by_arg = 171;
YQLParser.RULE_flatten_source = 172;
YQLParser.RULE_named_single_source = 173;
YQLParser.RULE_single_source = 174;
YQLParser.RULE_sample_clause = 175;
YQLParser.RULE_tablesample_clause = 176;
YQLParser.RULE_sampling_mode = 177;
YQLParser.RULE_repeatable_clause = 178;
YQLParser.RULE_join_op = 179;
YQLParser.RULE_join_constraint = 180;
YQLParser.RULE_returning_columns_list = 181;
YQLParser.RULE_into_table_stmt = 182;
YQLParser.RULE_into_values_source = 183;
YQLParser.RULE_values_stmt = 184;
YQLParser.RULE_values_source = 185;
YQLParser.RULE_values_source_row_list = 186;
YQLParser.RULE_values_source_row = 187;
YQLParser.RULE_simple_values_source = 188;
YQLParser.RULE_create_external_data_source_stmt = 189;
YQLParser.RULE_alter_external_data_source_stmt = 190;
YQLParser.RULE_alter_external_data_source_action = 191;
YQLParser.RULE_drop_external_data_source_stmt = 192;
YQLParser.RULE_create_view_stmt = 193;
YQLParser.RULE_drop_view_stmt = 194;
YQLParser.RULE_upsert_object_stmt = 195;
YQLParser.RULE_create_object_stmt = 196;
YQLParser.RULE_create_object_features = 197;
YQLParser.RULE_alter_object_stmt = 198;
YQLParser.RULE_alter_object_features = 199;
YQLParser.RULE_drop_object_stmt = 200;
YQLParser.RULE_drop_object_features = 201;
YQLParser.RULE_object_feature_value = 202;
YQLParser.RULE_object_feature_kv = 203;
YQLParser.RULE_object_feature_flag = 204;
YQLParser.RULE_object_feature = 205;
YQLParser.RULE_object_features = 206;
YQLParser.RULE_object_type_ref = 207;
YQLParser.RULE_create_table_stmt = 208;
YQLParser.RULE_create_table_entry = 209;
YQLParser.RULE_create_backup_collection_stmt = 210;
YQLParser.RULE_alter_backup_collection_stmt = 211;
YQLParser.RULE_drop_backup_collection_stmt = 212;
YQLParser.RULE_create_backup_collection_entries = 213;
YQLParser.RULE_create_backup_collection_entries_many = 214;
YQLParser.RULE_table_list = 215;
YQLParser.RULE_alter_backup_collection_actions = 216;
YQLParser.RULE_alter_backup_collection_action = 217;
YQLParser.RULE_alter_backup_collection_entries = 218;
YQLParser.RULE_alter_backup_collection_entry = 219;
YQLParser.RULE_backup_collection = 220;
YQLParser.RULE_backup_collection_settings = 221;
YQLParser.RULE_backup_collection_settings_entry = 222;
YQLParser.RULE_backup_stmt = 223;
YQLParser.RULE_restore_stmt = 224;
YQLParser.RULE_alter_database_stmt = 225;
YQLParser.RULE_table_inherits = 226;
YQLParser.RULE_table_partition_by = 227;
YQLParser.RULE_with_table_settings = 228;
YQLParser.RULE_table_tablestore = 229;
YQLParser.RULE_table_settings_entry = 230;
YQLParser.RULE_table_as_source = 231;
YQLParser.RULE_alter_table_stmt = 232;
YQLParser.RULE_alter_table_action = 233;
YQLParser.RULE_alter_external_table_stmt = 234;
YQLParser.RULE_alter_external_table_action = 235;
YQLParser.RULE_alter_table_store_stmt = 236;
YQLParser.RULE_alter_table_store_action = 237;
YQLParser.RULE_alter_table_add_column = 238;
YQLParser.RULE_alter_table_drop_column = 239;
YQLParser.RULE_alter_table_alter_column = 240;
YQLParser.RULE_alter_table_alter_column_drop_not_null = 241;
YQLParser.RULE_alter_table_add_column_family = 242;
YQLParser.RULE_alter_table_alter_column_family = 243;
YQLParser.RULE_alter_table_set_table_setting_uncompat = 244;
YQLParser.RULE_alter_table_set_table_setting_compat = 245;
YQLParser.RULE_alter_table_reset_table_setting = 246;
YQLParser.RULE_alter_table_add_index = 247;
YQLParser.RULE_alter_table_drop_index = 248;
YQLParser.RULE_alter_table_rename_to = 249;
YQLParser.RULE_alter_table_rename_index_to = 250;
YQLParser.RULE_alter_table_add_changefeed = 251;
YQLParser.RULE_alter_table_alter_changefeed = 252;
YQLParser.RULE_alter_table_drop_changefeed = 253;
YQLParser.RULE_alter_table_alter_index = 254;
YQLParser.RULE_column_schema = 255;
YQLParser.RULE_family_relation = 256;
YQLParser.RULE_opt_column_constraints = 257;
YQLParser.RULE_column_order_by_specification = 258;
YQLParser.RULE_table_constraint = 259;
YQLParser.RULE_table_index = 260;
YQLParser.RULE_table_index_type = 261;
YQLParser.RULE_global_index = 262;
YQLParser.RULE_local_index = 263;
YQLParser.RULE_index_subtype = 264;
YQLParser.RULE_with_index_settings = 265;
YQLParser.RULE_index_setting_entry = 266;
YQLParser.RULE_index_setting_value = 267;
YQLParser.RULE_changefeed = 268;
YQLParser.RULE_changefeed_settings = 269;
YQLParser.RULE_changefeed_settings_entry = 270;
YQLParser.RULE_changefeed_setting_value = 271;
YQLParser.RULE_changefeed_alter_settings = 272;
YQLParser.RULE_alter_table_setting_entry = 273;
YQLParser.RULE_table_setting_value = 274;
YQLParser.RULE_ttl_tier_list = 275;
YQLParser.RULE_ttl_tier_action = 276;
YQLParser.RULE_family_entry = 277;
YQLParser.RULE_family_settings = 278;
YQLParser.RULE_family_settings_entry = 279;
YQLParser.RULE_family_setting_value = 280;
YQLParser.RULE_split_boundaries = 281;
YQLParser.RULE_literal_value_list = 282;
YQLParser.RULE_alter_table_alter_index_action = 283;
YQLParser.RULE_drop_table_stmt = 284;
YQLParser.RULE_create_user_stmt = 285;
YQLParser.RULE_alter_user_stmt = 286;
YQLParser.RULE_create_group_stmt = 287;
YQLParser.RULE_alter_group_stmt = 288;
YQLParser.RULE_drop_role_stmt = 289;
YQLParser.RULE_role_name = 290;
YQLParser.RULE_user_option = 291;
YQLParser.RULE_authentication_option = 292;
YQLParser.RULE_password_option = 293;
YQLParser.RULE_password_value = 294;
YQLParser.RULE_hash_option = 295;
YQLParser.RULE_login_option = 296;
YQLParser.RULE_grant_permissions_stmt = 297;
YQLParser.RULE_revoke_permissions_stmt = 298;
YQLParser.RULE_permission_id = 299;
YQLParser.RULE_permission_name = 300;
YQLParser.RULE_permission_name_target = 301;
YQLParser.RULE_create_resource_pool_stmt = 302;
YQLParser.RULE_alter_resource_pool_stmt = 303;
YQLParser.RULE_alter_resource_pool_action = 304;
YQLParser.RULE_drop_resource_pool_stmt = 305;
YQLParser.RULE_create_resource_pool_classifier_stmt = 306;
YQLParser.RULE_alter_resource_pool_classifier_stmt = 307;
YQLParser.RULE_alter_resource_pool_classifier_action = 308;
YQLParser.RULE_drop_resource_pool_classifier_stmt = 309;
YQLParser.RULE_create_replication_stmt = 310;
YQLParser.RULE_replication_target = 311;
YQLParser.RULE_replication_settings = 312;
YQLParser.RULE_replication_settings_entry = 313;
YQLParser.RULE_alter_replication_stmt = 314;
YQLParser.RULE_alter_replication_action = 315;
YQLParser.RULE_alter_replication_set_setting = 316;
YQLParser.RULE_drop_replication_stmt = 317;
YQLParser.RULE_lambda_or_parameter = 318;
YQLParser.RULE_create_transfer_stmt = 319;
YQLParser.RULE_transfer_settings = 320;
YQLParser.RULE_transfer_settings_entry = 321;
YQLParser.RULE_alter_transfer_stmt = 322;
YQLParser.RULE_alter_transfer_action = 323;
YQLParser.RULE_alter_transfer_set_setting = 324;
YQLParser.RULE_alter_transfer_set_using = 325;
YQLParser.RULE_drop_transfer_stmt = 326;
YQLParser.RULE_action_or_subquery_args = 327;
YQLParser.RULE_define_action_or_subquery_stmt = 328;
YQLParser.RULE_define_action_or_subquery_body = 329;
YQLParser.RULE_if_stmt = 330;
YQLParser.RULE_for_stmt = 331;
YQLParser.RULE_table_ref = 332;
YQLParser.RULE_table_key = 333;
YQLParser.RULE_table_arg = 334;
YQLParser.RULE_table_hints = 335;
YQLParser.RULE_table_hint = 336;
YQLParser.RULE_object_ref = 337;
YQLParser.RULE_simple_table_ref_core = 338;
YQLParser.RULE_simple_table_ref = 339;
YQLParser.RULE_into_simple_table_ref = 340;
YQLParser.RULE_delete_stmt = 341;
YQLParser.RULE_update_stmt = 342;
YQLParser.RULE_set_clause_choice = 343;
YQLParser.RULE_set_clause_list = 344;
YQLParser.RULE_set_clause = 345;
YQLParser.RULE_set_target = 346;
YQLParser.RULE_multiple_column_assignment = 347;
YQLParser.RULE_set_target_list = 348;
YQLParser.RULE_create_topic_stmt = 349;
YQLParser.RULE_create_topic_entries = 350;
YQLParser.RULE_create_topic_entry = 351;
YQLParser.RULE_with_topic_settings = 352;
YQLParser.RULE_alter_topic_stmt = 353;
YQLParser.RULE_alter_topic_action = 354;
YQLParser.RULE_alter_topic_add_consumer = 355;
YQLParser.RULE_topic_create_consumer_entry = 356;
YQLParser.RULE_alter_topic_alter_consumer = 357;
YQLParser.RULE_alter_topic_alter_consumer_entry = 358;
YQLParser.RULE_alter_topic_drop_consumer = 359;
YQLParser.RULE_topic_alter_consumer_set = 360;
YQLParser.RULE_topic_alter_consumer_reset = 361;
YQLParser.RULE_alter_topic_set_settings = 362;
YQLParser.RULE_alter_topic_reset_settings = 363;
YQLParser.RULE_drop_topic_stmt = 364;
YQLParser.RULE_topic_settings = 365;
YQLParser.RULE_topic_settings_entry = 366;
YQLParser.RULE_topic_setting_value = 367;
YQLParser.RULE_topic_consumer_with_settings = 368;
YQLParser.RULE_topic_consumer_settings = 369;
YQLParser.RULE_topic_consumer_settings_entry = 370;
YQLParser.RULE_topic_consumer_setting_value = 371;
YQLParser.RULE_topic_ref = 372;
YQLParser.RULE_topic_consumer_ref = 373;
YQLParser.RULE_null_treatment = 374;
YQLParser.RULE_filter_clause = 375;
YQLParser.RULE_window_name_or_specification = 376;
YQLParser.RULE_window_name = 377;
YQLParser.RULE_window_clause = 378;
YQLParser.RULE_window_definition_list = 379;
YQLParser.RULE_window_definition = 380;
YQLParser.RULE_new_window_name = 381;
YQLParser.RULE_window_specification = 382;
YQLParser.RULE_window_specification_details = 383;
YQLParser.RULE_existing_window_name = 384;
YQLParser.RULE_window_partition_clause = 385;
YQLParser.RULE_window_order_clause = 386;
YQLParser.RULE_window_frame_clause = 387;
YQLParser.RULE_window_frame_units = 388;
YQLParser.RULE_window_frame_extent = 389;
YQLParser.RULE_window_frame_between = 390;
YQLParser.RULE_window_frame_bound = 391;
YQLParser.RULE_window_frame_exclusion = 392;
YQLParser.RULE_use_stmt = 393;
YQLParser.RULE_subselect_stmt = 394;
YQLParser.RULE_named_nodes_stmt = 395;
YQLParser.RULE_commit_stmt = 396;
YQLParser.RULE_rollback_stmt = 397;
YQLParser.RULE_analyze_table = 398;
YQLParser.RULE_analyze_table_list = 399;
YQLParser.RULE_analyze_stmt = 400;
YQLParser.RULE_alter_sequence_stmt = 401;
YQLParser.RULE_alter_sequence_action = 402;
YQLParser.RULE_show_create_table_stmt = 403;
YQLParser.RULE_identifier = 404;
YQLParser.RULE_id = 405;
YQLParser.RULE_id_schema = 406;
YQLParser.RULE_id_expr = 407;
YQLParser.RULE_id_expr_in = 408;
YQLParser.RULE_id_window = 409;
YQLParser.RULE_id_table = 410;
YQLParser.RULE_id_without = 411;
YQLParser.RULE_id_hint = 412;
YQLParser.RULE_id_as_compat = 413;
YQLParser.RULE_an_id = 414;
YQLParser.RULE_an_id_or_type = 415;
YQLParser.RULE_an_id_schema = 416;
YQLParser.RULE_an_id_expr = 417;
YQLParser.RULE_an_id_expr_in = 418;
YQLParser.RULE_an_id_window = 419;
YQLParser.RULE_an_id_table = 420;
YQLParser.RULE_an_id_without = 421;
YQLParser.RULE_an_id_hint = 422;
YQLParser.RULE_an_id_pure = 423;
YQLParser.RULE_an_id_as_compat = 424;
YQLParser.RULE_view_name = 425;
YQLParser.RULE_opt_id_prefix = 426;
YQLParser.RULE_cluster_expr = 427;
YQLParser.RULE_id_or_type = 428;
YQLParser.RULE_opt_id_prefix_or_type = 429;
YQLParser.RULE_id_or_at = 430;
YQLParser.RULE_id_table_or_type = 431;
YQLParser.RULE_id_table_or_at = 432;
YQLParser.RULE_keyword = 433;
YQLParser.RULE_keyword_expr_uncompat = 434;
YQLParser.RULE_keyword_table_uncompat = 435;
YQLParser.RULE_keyword_select_uncompat = 436;
YQLParser.RULE_keyword_alter_uncompat = 437;
YQLParser.RULE_keyword_in_uncompat = 438;
YQLParser.RULE_keyword_window_uncompat = 439;
YQLParser.RULE_keyword_hint_uncompat = 440;
YQLParser.RULE_keyword_as_compat = 441;
YQLParser.RULE_keyword_compat = 442;
YQLParser.RULE_type_id = 443;
YQLParser.RULE_bool_value = 444;
YQLParser.RULE_real = 445;
YQLParser.RULE_integer = 446;

class Sql_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_query;
    }

	sql_stmt_list() {
	    return this.getTypedRuleContext(Sql_stmt_listContext,0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	DIGITS() {
	    return this.getToken(YQLParser.DIGITS, 0);
	};

	ansi_sql_stmt_list() {
	    return this.getTypedRuleContext(Ansi_sql_stmt_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_query(this);
		}
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	EOF() {
	    return this.getToken(YQLParser.EOF, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}


}



class Ansi_sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ansi_sql_stmt_list;
    }

	EOF() {
	    return this.getToken(YQLParser.EOF, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnsi_sql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnsi_sql_stmt_list(this);
		}
	}


}



class Lambda_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda_body;
    }

	RETURN() {
	    return this.getToken(YQLParser.RETURN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	lambda_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_stmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda_body(this);
		}
	}


}



class Lambda_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda_stmt;
    }

	named_nodes_stmt() {
	    return this.getTypedRuleContext(Named_nodes_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda_stmt(this);
		}
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt;
    }

	sql_stmt_core() {
	    return this.getTypedRuleContext(Sql_stmt_coreContext,0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt(this);
		}
	}


}



class Sql_stmt_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt_core;
    }

	pragma_stmt() {
	    return this.getTypedRuleContext(Pragma_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	named_nodes_stmt() {
	    return this.getTypedRuleContext(Named_nodes_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	drop_table_stmt() {
	    return this.getTypedRuleContext(Drop_table_stmtContext,0);
	};

	use_stmt() {
	    return this.getTypedRuleContext(Use_stmtContext,0);
	};

	into_table_stmt() {
	    return this.getTypedRuleContext(Into_table_stmtContext,0);
	};

	commit_stmt() {
	    return this.getTypedRuleContext(Commit_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	rollback_stmt() {
	    return this.getTypedRuleContext(Rollback_stmtContext,0);
	};

	declare_stmt() {
	    return this.getTypedRuleContext(Declare_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	export_stmt() {
	    return this.getTypedRuleContext(Export_stmtContext,0);
	};

	alter_table_stmt() {
	    return this.getTypedRuleContext(Alter_table_stmtContext,0);
	};

	alter_external_table_stmt() {
	    return this.getTypedRuleContext(Alter_external_table_stmtContext,0);
	};

	do_stmt() {
	    return this.getTypedRuleContext(Do_stmtContext,0);
	};

	define_action_or_subquery_stmt() {
	    return this.getTypedRuleContext(Define_action_or_subquery_stmtContext,0);
	};

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	create_user_stmt() {
	    return this.getTypedRuleContext(Create_user_stmtContext,0);
	};

	alter_user_stmt() {
	    return this.getTypedRuleContext(Alter_user_stmtContext,0);
	};

	create_group_stmt() {
	    return this.getTypedRuleContext(Create_group_stmtContext,0);
	};

	alter_group_stmt() {
	    return this.getTypedRuleContext(Alter_group_stmtContext,0);
	};

	drop_role_stmt() {
	    return this.getTypedRuleContext(Drop_role_stmtContext,0);
	};

	create_object_stmt() {
	    return this.getTypedRuleContext(Create_object_stmtContext,0);
	};

	alter_object_stmt() {
	    return this.getTypedRuleContext(Alter_object_stmtContext,0);
	};

	drop_object_stmt() {
	    return this.getTypedRuleContext(Drop_object_stmtContext,0);
	};

	create_external_data_source_stmt() {
	    return this.getTypedRuleContext(Create_external_data_source_stmtContext,0);
	};

	alter_external_data_source_stmt() {
	    return this.getTypedRuleContext(Alter_external_data_source_stmtContext,0);
	};

	drop_external_data_source_stmt() {
	    return this.getTypedRuleContext(Drop_external_data_source_stmtContext,0);
	};

	create_replication_stmt() {
	    return this.getTypedRuleContext(Create_replication_stmtContext,0);
	};

	drop_replication_stmt() {
	    return this.getTypedRuleContext(Drop_replication_stmtContext,0);
	};

	create_topic_stmt() {
	    return this.getTypedRuleContext(Create_topic_stmtContext,0);
	};

	alter_topic_stmt() {
	    return this.getTypedRuleContext(Alter_topic_stmtContext,0);
	};

	drop_topic_stmt() {
	    return this.getTypedRuleContext(Drop_topic_stmtContext,0);
	};

	grant_permissions_stmt() {
	    return this.getTypedRuleContext(Grant_permissions_stmtContext,0);
	};

	revoke_permissions_stmt() {
	    return this.getTypedRuleContext(Revoke_permissions_stmtContext,0);
	};

	alter_table_store_stmt() {
	    return this.getTypedRuleContext(Alter_table_store_stmtContext,0);
	};

	upsert_object_stmt() {
	    return this.getTypedRuleContext(Upsert_object_stmtContext,0);
	};

	create_view_stmt() {
	    return this.getTypedRuleContext(Create_view_stmtContext,0);
	};

	drop_view_stmt() {
	    return this.getTypedRuleContext(Drop_view_stmtContext,0);
	};

	alter_replication_stmt() {
	    return this.getTypedRuleContext(Alter_replication_stmtContext,0);
	};

	create_resource_pool_stmt() {
	    return this.getTypedRuleContext(Create_resource_pool_stmtContext,0);
	};

	alter_resource_pool_stmt() {
	    return this.getTypedRuleContext(Alter_resource_pool_stmtContext,0);
	};

	drop_resource_pool_stmt() {
	    return this.getTypedRuleContext(Drop_resource_pool_stmtContext,0);
	};

	create_backup_collection_stmt() {
	    return this.getTypedRuleContext(Create_backup_collection_stmtContext,0);
	};

	alter_backup_collection_stmt() {
	    return this.getTypedRuleContext(Alter_backup_collection_stmtContext,0);
	};

	drop_backup_collection_stmt() {
	    return this.getTypedRuleContext(Drop_backup_collection_stmtContext,0);
	};

	analyze_stmt() {
	    return this.getTypedRuleContext(Analyze_stmtContext,0);
	};

	create_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Create_resource_pool_classifier_stmtContext,0);
	};

	alter_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Alter_resource_pool_classifier_stmtContext,0);
	};

	drop_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Drop_resource_pool_classifier_stmtContext,0);
	};

	backup_stmt() {
	    return this.getTypedRuleContext(Backup_stmtContext,0);
	};

	restore_stmt() {
	    return this.getTypedRuleContext(Restore_stmtContext,0);
	};

	alter_sequence_stmt() {
	    return this.getTypedRuleContext(Alter_sequence_stmtContext,0);
	};

	create_transfer_stmt() {
	    return this.getTypedRuleContext(Create_transfer_stmtContext,0);
	};

	alter_transfer_stmt() {
	    return this.getTypedRuleContext(Alter_transfer_stmtContext,0);
	};

	drop_transfer_stmt() {
	    return this.getTypedRuleContext(Drop_transfer_stmtContext,0);
	};

	alter_database_stmt() {
	    return this.getTypedRuleContext(Alter_database_stmtContext,0);
	};

	show_create_table_stmt() {
	    return this.getTypedRuleContext(Show_create_table_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt_core(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr;
    }

	or_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Or_subexprContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.OR);
	    } else {
	        return this.getToken(YQLParser.OR, i);
	    }
	};


	type_name_composite() {
	    return this.getTypedRuleContext(Type_name_compositeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Or_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_or_subexpr;
    }

	and_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_subexprContext);
	    } else {
	        return this.getTypedRuleContext(And_subexprContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.AND);
	    } else {
	        return this.getToken(YQLParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOr_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOr_subexpr(this);
		}
	}


}



class And_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_and_subexpr;
    }

	xor_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xor_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Xor_subexprContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.XOR);
	    } else {
	        return this.getToken(YQLParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnd_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnd_subexpr(this);
		}
	}


}



class Xor_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_xor_subexpr;
    }

	eq_subexpr() {
	    return this.getTypedRuleContext(Eq_subexprContext,0);
	};

	cond_expr() {
	    return this.getTypedRuleContext(Cond_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterXor_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitXor_subexpr(this);
		}
	}


}



class Distinct_from_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_distinct_from_op;
    }

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDistinct_from_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDistinct_from_op(this);
		}
	}


}



class Cond_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cond_expr;
    }

	match_op() {
	    return this.getTypedRuleContext(Match_opContext,0);
	};

	eq_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Eq_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Eq_subexprContext,i);
	    }
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	in_expr() {
	    return this.getTypedRuleContext(In_exprContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	ISNULL() {
	    return this.getToken(YQLParser.ISNULL, 0);
	};

	NOTNULL() {
	    return this.getToken(YQLParser.NOTNULL, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	SYMMETRIC() {
	    return this.getToken(YQLParser.SYMMETRIC, 0);
	};

	ASYMMETRIC() {
	    return this.getToken(YQLParser.ASYMMETRIC, 0);
	};

	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EQUALS);
	    } else {
	        return this.getToken(YQLParser.EQUALS, i);
	    }
	};


	EQUALS2 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EQUALS2);
	    } else {
	        return this.getToken(YQLParser.EQUALS2, i);
	    }
	};


	NOT_EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.NOT_EQUALS);
	    } else {
	        return this.getToken(YQLParser.NOT_EQUALS, i);
	    }
	};


	NOT_EQUALS2 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.NOT_EQUALS2);
	    } else {
	        return this.getToken(YQLParser.NOT_EQUALS2, i);
	    }
	};


	distinct_from_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Distinct_from_opContext);
	    } else {
	        return this.getTypedRuleContext(Distinct_from_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCond_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCond_expr(this);
		}
	}


}



class Match_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_match_op;
    }

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMatch_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMatch_op(this);
		}
	}


}



class Eq_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_eq_subexpr;
    }

	neq_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Neq_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Neq_subexprContext,i);
	    }
	};

	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LESS);
	    } else {
	        return this.getToken(YQLParser.LESS, i);
	    }
	};


	LESS_OR_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LESS_OR_EQ);
	    } else {
	        return this.getToken(YQLParser.LESS_OR_EQ, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	GREATER_OR_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER_OR_EQ);
	    } else {
	        return this.getToken(YQLParser.GREATER_OR_EQ, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterEq_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitEq_subexpr(this);
		}
	}


}



class Shift_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_shift_right;
    }

	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterShift_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitShift_right(this);
		}
	}


}



class Rot_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rot_right;
    }

	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	PIPE() {
	    return this.getToken(YQLParser.PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRot_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRot_right(this);
		}
	}


}



class Double_questionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_double_question;
    }

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDouble_question(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDouble_question(this);
		}
	}


}



class Neq_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_neq_subexpr;
    }

	bit_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bit_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Bit_subexprContext,i);
	    }
	};

	double_question() {
	    return this.getTypedRuleContext(Double_questionContext,0);
	};

	neq_subexpr() {
	    return this.getTypedRuleContext(Neq_subexprContext,0);
	};

	SHIFT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SHIFT_LEFT);
	    } else {
	        return this.getToken(YQLParser.SHIFT_LEFT, i);
	    }
	};


	shift_right = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_rightContext);
	    } else {
	        return this.getTypedRuleContext(Shift_rightContext,i);
	    }
	};

	ROT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ROT_LEFT);
	    } else {
	        return this.getToken(YQLParser.ROT_LEFT, i);
	    }
	};


	rot_right = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rot_rightContext);
	    } else {
	        return this.getTypedRuleContext(Rot_rightContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.AMPERSAND);
	    } else {
	        return this.getToken(YQLParser.AMPERSAND, i);
	    }
	};


	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PIPE);
	    } else {
	        return this.getToken(YQLParser.PIPE, i);
	    }
	};


	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.CARET);
	    } else {
	        return this.getToken(YQLParser.CARET, i);
	    }
	};


	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNeq_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNeq_subexpr(this);
		}
	}


}



class Bit_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bit_subexpr;
    }

	add_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Add_subexprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PLUS);
	    } else {
	        return this.getToken(YQLParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.MINUS);
	    } else {
	        return this.getToken(YQLParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBit_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBit_subexpr(this);
		}
	}


}



class Add_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_add_subexpr;
    }

	mul_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mul_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Mul_subexprContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ASTERISK);
	    } else {
	        return this.getToken(YQLParser.ASTERISK, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SLASH);
	    } else {
	        return this.getToken(YQLParser.SLASH, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PERCENT);
	    } else {
	        return this.getToken(YQLParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAdd_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAdd_subexpr(this);
		}
	}


}



class Mul_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_mul_subexpr;
    }

	con_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Con_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Con_subexprContext,i);
	    }
	};

	DOUBLE_PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOUBLE_PIPE);
	    } else {
	        return this.getToken(YQLParser.DOUBLE_PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMul_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMul_subexpr(this);
		}
	}


}



class Con_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_con_subexpr;
    }

	unary_subexpr() {
	    return this.getTypedRuleContext(Unary_subexprContext,0);
	};

	unary_op() {
	    return this.getTypedRuleContext(Unary_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCon_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCon_subexpr(this);
		}
	}


}



class Unary_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_op;
    }

	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(YQLParser.MINUS, 0);
	};

	TILDA() {
	    return this.getToken(YQLParser.TILDA, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_op(this);
		}
	}


}



class Unary_subexpr_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_subexpr_suffix;
    }

	COLLATE() {
	    return this.getToken(YQLParser.COLLATE, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	key_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_exprContext);
	    } else {
	        return this.getTypedRuleContext(Key_exprContext,i);
	    }
	};

	invoke_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Invoke_exprContext);
	    } else {
	        return this.getTypedRuleContext(Invoke_exprContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOT);
	    } else {
	        return this.getToken(YQLParser.DOT, i);
	    }
	};


	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	DIGITS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DIGITS);
	    } else {
	        return this.getToken(YQLParser.DIGITS, i);
	    }
	};


	an_id_or_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_or_typeContext);
	    } else {
	        return this.getTypedRuleContext(An_id_or_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_subexpr_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_subexpr_suffix(this);
		}
	}


}



class Unary_casual_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_casual_subexpr;
    }

	unary_subexpr_suffix() {
	    return this.getTypedRuleContext(Unary_subexpr_suffixContext,0);
	};

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	atom_expr() {
	    return this.getTypedRuleContext(Atom_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_casual_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_casual_subexpr(this);
		}
	}


}



class In_unary_casual_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_unary_casual_subexpr;
    }

	unary_subexpr_suffix() {
	    return this.getTypedRuleContext(Unary_subexpr_suffixContext,0);
	};

	id_expr_in() {
	    return this.getTypedRuleContext(Id_expr_inContext,0);
	};

	in_atom_expr() {
	    return this.getTypedRuleContext(In_atom_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_unary_casual_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_unary_casual_subexpr(this);
		}
	}


}



class Unary_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_subexpr;
    }

	unary_casual_subexpr() {
	    return this.getTypedRuleContext(Unary_casual_subexprContext,0);
	};

	json_api_expr() {
	    return this.getTypedRuleContext(Json_api_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_subexpr(this);
		}
	}


}



class In_unary_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_unary_subexpr;
    }

	in_unary_casual_subexpr() {
	    return this.getTypedRuleContext(In_unary_casual_subexprContext,0);
	};

	json_api_expr() {
	    return this.getTypedRuleContext(Json_api_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_unary_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_unary_subexpr(this);
		}
	}


}



class List_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_list_literal;
    }

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterList_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitList_literal(this);
		}
	}


}



class Expr_dict_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_dict_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COLON);
	    } else {
	        return this.getToken(YQLParser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_dict_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_dict_list(this);
		}
	}


}



class Dict_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_dict_literal;
    }

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	expr_dict_list() {
	    return this.getTypedRuleContext(Expr_dict_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDict_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDict_literal(this);
		}
	}


}



class Expr_struct_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_struct_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COLON);
	    } else {
	        return this.getToken(YQLParser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_struct_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_struct_list(this);
		}
	}


}



class Struct_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_literal;
    }

	STRUCT_OPEN() {
	    return this.getToken(YQLParser.STRUCT_OPEN, 0);
	};

	STRUCT_CLOSE() {
	    return this.getToken(YQLParser.STRUCT_CLOSE, 0);
	};

	expr_struct_list() {
	    return this.getTypedRuleContext(Expr_struct_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_literal(this);
		}
	}


}



class Atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_atom_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	cast_expr() {
	    return this.getTypedRuleContext(Cast_exprContext,0);
	};

	exists_expr() {
	    return this.getTypedRuleContext(Exists_exprContext,0);
	};

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	value_constructor() {
	    return this.getTypedRuleContext(Value_constructorContext,0);
	};

	bitcast_expr() {
	    return this.getTypedRuleContext(Bitcast_exprContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	struct_literal() {
	    return this.getTypedRuleContext(Struct_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAtom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAtom_expr(this);
		}
	}


}



class In_atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_atom_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	cast_expr() {
	    return this.getTypedRuleContext(Cast_exprContext,0);
	};

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	value_constructor() {
	    return this.getTypedRuleContext(Value_constructorContext,0);
	};

	bitcast_expr() {
	    return this.getTypedRuleContext(Bitcast_exprContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	struct_literal() {
	    return this.getTypedRuleContext(Struct_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_atom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_atom_expr(this);
		}
	}


}



class Cast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cast_expr;
    }

	CAST() {
	    return this.getToken(YQLParser.CAST, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCast_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCast_expr(this);
		}
	}


}



class Bitcast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bitcast_expr;
    }

	BITCAST() {
	    return this.getToken(YQLParser.BITCAST, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBitcast_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBitcast_expr(this);
		}
	}


}



class Exists_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_exists_expr;
    }

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExists_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExists_expr(this);
		}
	}


}



class Case_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_case_expr;
    }

	CASE() {
	    return this.getToken(YQLParser.CASE, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	when_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(When_exprContext);
	    } else {
	        return this.getTypedRuleContext(When_exprContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCase_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCase_expr(this);
		}
	}


}



class LambdaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda;
    }

	smart_parenthesis() {
	    return this.getTypedRuleContext(Smart_parenthesisContext,0);
	};

	ARROW() {
	    return this.getToken(YQLParser.ARROW, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	lambda_body() {
	    return this.getTypedRuleContext(Lambda_bodyContext,0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda(this);
		}
	}


}



class In_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_expr;
    }

	in_unary_subexpr() {
	    return this.getTypedRuleContext(In_unary_subexprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_expr(this);
		}
	}


}



class Json_api_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_api_expr;
    }

	json_value() {
	    return this.getTypedRuleContext(Json_valueContext,0);
	};

	json_exists() {
	    return this.getTypedRuleContext(Json_existsContext,0);
	};

	json_query() {
	    return this.getTypedRuleContext(Json_queryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_api_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_api_expr(this);
		}
	}


}



class Jsonpath_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_jsonpath_spec;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJsonpath_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJsonpath_spec(this);
		}
	}


}



class Json_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variable_name;
    }

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variable_name(this);
		}
	}


}



class Json_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variable;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	json_variable_name() {
	    return this.getTypedRuleContext(Json_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variable(this);
		}
	}


}



class Json_variablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variables;
    }

	json_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_variableContext);
	    } else {
	        return this.getTypedRuleContext(Json_variableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variables(this);
		}
	}


}



class Json_common_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_common_args;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	jsonpath_spec() {
	    return this.getTypedRuleContext(Jsonpath_specContext,0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	json_variables() {
	    return this.getTypedRuleContext(Json_variablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_common_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_common_args(this);
		}
	}


}



class Json_case_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_case_handler;
    }

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_case_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_case_handler(this);
		}
	}


}



class Json_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_value;
    }

	JSON_VALUE() {
	    return this.getToken(YQLParser.JSON_VALUE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	json_case_handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_case_handlerContext);
	    } else {
	        return this.getTypedRuleContext(Json_case_handlerContext,i);
	    }
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ON);
	    } else {
	        return this.getToken(YQLParser.ON, i);
	    }
	};


	EMPTY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EMPTY);
	    } else {
	        return this.getToken(YQLParser.EMPTY, i);
	    }
	};


	ERROR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ERROR);
	    } else {
	        return this.getToken(YQLParser.ERROR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_value(this);
		}
	}


}



class Json_exists_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_exists_handler;
    }

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	ERROR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ERROR);
	    } else {
	        return this.getToken(YQLParser.ERROR, i);
	    }
	};


	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_exists_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_exists_handler(this);
		}
	}


}



class Json_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_exists;
    }

	JSON_EXISTS() {
	    return this.getToken(YQLParser.JSON_EXISTS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	json_exists_handler() {
	    return this.getTypedRuleContext(Json_exists_handlerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_exists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_exists(this);
		}
	}


}



class Json_query_wrapperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query_wrapper;
    }

	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query_wrapper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query_wrapper(this);
		}
	}


}



class Json_query_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query_handler;
    }

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query_handler(this);
		}
	}


}



class Json_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query;
    }

	JSON_QUERY() {
	    return this.getToken(YQLParser.JSON_QUERY, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	json_query_wrapper() {
	    return this.getTypedRuleContext(Json_query_wrapperContext,0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	json_query_handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_query_handlerContext);
	    } else {
	        return this.getTypedRuleContext(Json_query_handlerContext,i);
	    }
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ON);
	    } else {
	        return this.getToken(YQLParser.ON, i);
	    }
	};


	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query(this);
		}
	}


}



class Smart_parenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_smart_parenthesis;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSmart_parenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSmart_parenthesis(this);
		}
	}


}



class Expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_list(this);
		}
	}


}



class Pure_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_list(this);
		}
	}


}



class Pure_column_or_namedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_or_named;
    }

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_or_named(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_or_named(this);
		}
	}


}



class Pure_column_or_named_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_or_named_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	pure_column_or_named = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pure_column_or_namedContext);
	    } else {
	        return this.getTypedRuleContext(Pure_column_or_namedContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_or_named_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_or_named_list(this);
		}
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_name;
    }

	opt_id_prefix() {
	    return this.getTypedRuleContext(Opt_id_prefixContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_name(this);
		}
	}


}



class Without_column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_without_column_name;
    }

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	an_id_without() {
	    return this.getTypedRuleContext(An_id_withoutContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWithout_column_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWithout_column_name(this);
		}
	}


}



class Column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_list;
    }

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_list(this);
		}
	}


}



class Without_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_without_column_list;
    }

	without_column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Without_column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Without_column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWithout_column_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWithout_column_list(this);
		}
	}


}



class Named_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_expr(this);
		}
	}


}



class Named_expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_expr_list;
    }

	named_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_exprContext);
	    } else {
	        return this.getTypedRuleContext(Named_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_expr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_expr_list(this);
		}
	}


}



class Invoke_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_invoke_expr;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	invoke_expr_tail() {
	    return this.getTypedRuleContext(Invoke_expr_tailContext,0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInvoke_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInvoke_expr(this);
		}
	}


}



class Invoke_expr_tailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_invoke_expr_tail;
    }

	null_treatment() {
	    return this.getTypedRuleContext(Null_treatmentContext,0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	OVER() {
	    return this.getToken(YQLParser.OVER, 0);
	};

	window_name_or_specification() {
	    return this.getTypedRuleContext(Window_name_or_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInvoke_expr_tail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInvoke_expr_tail(this);
		}
	}


}



class Using_call_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_using_call_expr;
    }

	invoke_expr() {
	    return this.getTypedRuleContext(Invoke_exprContext,0);
	};

	an_id_or_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_or_typeContext);
	    } else {
	        return this.getTypedRuleContext(An_id_or_typeContext,i);
	    }
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	an_id_expr() {
	    return this.getTypedRuleContext(An_id_exprContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUsing_call_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUsing_call_expr(this);
		}
	}


}



class Key_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_key_expr;
    }

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKey_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKey_expr(this);
		}
	}


}



class When_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_when_expr;
    }

	WHEN() {
	    return this.getToken(YQLParser.WHEN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWhen_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWhen_expr(this);
		}
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_literal_value;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	real() {
	    return this.getTypedRuleContext(RealContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	BLOB() {
	    return this.getToken(YQLParser.BLOB, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(YQLParser.CURRENT_TIME, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(YQLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLiteral_value(this);
		}
	}


}



class Bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bind_parameter;
    }

	DOLLAR() {
	    return this.getToken(YQLParser.DOLLAR, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBind_parameter(this);
		}
	}


}



class Opt_bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_bind_parameter;
    }

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	QUESTION() {
	    return this.getToken(YQLParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_bind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_bind_parameter(this);
		}
	}


}



class Bind_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bind_parameter_list;
    }

	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBind_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBind_parameter_list(this);
		}
	}


}



class Named_bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_bind_parameter;
    }

	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_bind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_bind_parameter(this);
		}
	}


}



class Named_bind_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_bind_parameter_list;
    }

	named_bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Named_bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_bind_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_bind_parameter_list(this);
		}
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_signed_number;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	real() {
	    return this.getTypedRuleContext(RealContext,0);
	};

	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(YQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSigned_number(this);
		}
	}


}



class Type_name_simpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_simple;
    }

	an_id_pure() {
	    return this.getTypedRuleContext(An_id_pureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_simple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_simple(this);
		}
	}


}



class Integer_or_bindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_integer_or_bind;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInteger_or_bind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInteger_or_bind(this);
		}
	}


}



class Type_name_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tag;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tag(this);
		}
	}


}



class Struct_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_arg;
    }

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_arg(this);
		}
	}


}



class Struct_arg_positionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_arg_positional;
    }

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_arg_positional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_arg_positional(this);
		}
	}


}



class Variant_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_variant_arg;
    }

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterVariant_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitVariant_arg(this);
		}
	}


}



class Callable_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_callable_arg;
    }

	variant_arg() {
	    return this.getTypedRuleContext(Variant_argContext,0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	AUTOMAP() {
	    return this.getToken(YQLParser.AUTOMAP, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCallable_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCallable_arg(this);
		}
	}


}



class Callable_arg_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_callable_arg_list;
    }

	callable_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Callable_argContext);
	    } else {
	        return this.getTypedRuleContext(Callable_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCallable_arg_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCallable_arg_list(this);
		}
	}


}



class Type_name_decimalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_decimal;
    }

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	integer_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Integer_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Integer_or_bindContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_decimal(this);
		}
	}


}



class Type_name_optionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_optional;
    }

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_optional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_optional(this);
		}
	}


}



class Type_name_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tuple;
    }

	TUPLE() {
	    return this.getToken(YQLParser.TUPLE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	NOT_EQUALS2() {
	    return this.getToken(YQLParser.NOT_EQUALS2, 0);
	};

	type_name_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_or_bindContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tuple(this);
		}
	}


}



class Type_name_structContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_struct;
    }

	STRUCT() {
	    return this.getToken(YQLParser.STRUCT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	NOT_EQUALS2() {
	    return this.getToken(YQLParser.NOT_EQUALS2, 0);
	};

	struct_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_argContext);
	    } else {
	        return this.getTypedRuleContext(Struct_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_struct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_struct(this);
		}
	}


}



class Type_name_variantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_variant;
    }

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	variant_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variant_argContext);
	    } else {
	        return this.getTypedRuleContext(Variant_argContext,i);
	    }
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_variant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_variant(this);
		}
	}


}



class Type_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_list;
    }

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_list(this);
		}
	}


}



class Type_name_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_stream;
    }

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_stream(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_stream(this);
		}
	}


}



class Type_name_flowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_flow;
    }

	FLOW() {
	    return this.getToken(YQLParser.FLOW, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_flow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_flow(this);
		}
	}


}



class Type_name_dictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_dict;
    }

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_or_bindContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_dict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_dict(this);
		}
	}


}



class Type_name_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_set;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_set(this);
		}
	}


}



class Type_name_enumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_enum;
    }

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_tag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_tagContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_tagContext,i);
	    }
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_enum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_enum(this);
		}
	}


}



class Type_name_resourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_resource;
    }

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_resource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_resource(this);
		}
	}


}



class Type_name_taggedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tagged;
    }

	TAGGED() {
	    return this.getToken(YQLParser.TAGGED, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tagged(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tagged(this);
		}
	}


}



class Type_name_callableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_callable;
    }

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	ARROW() {
	    return this.getToken(YQLParser.ARROW, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	callable_arg_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Callable_arg_listContext);
	    } else {
	        return this.getTypedRuleContext(Callable_arg_listContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_callable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_callable(this);
		}
	}


}



class Type_name_compositeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_composite;
    }

	type_name_optional() {
	    return this.getTypedRuleContext(Type_name_optionalContext,0);
	};

	type_name_tuple() {
	    return this.getTypedRuleContext(Type_name_tupleContext,0);
	};

	type_name_struct() {
	    return this.getTypedRuleContext(Type_name_structContext,0);
	};

	type_name_variant() {
	    return this.getTypedRuleContext(Type_name_variantContext,0);
	};

	type_name_list() {
	    return this.getTypedRuleContext(Type_name_listContext,0);
	};

	type_name_stream() {
	    return this.getTypedRuleContext(Type_name_streamContext,0);
	};

	type_name_flow() {
	    return this.getTypedRuleContext(Type_name_flowContext,0);
	};

	type_name_dict() {
	    return this.getTypedRuleContext(Type_name_dictContext,0);
	};

	type_name_set() {
	    return this.getTypedRuleContext(Type_name_setContext,0);
	};

	type_name_enum() {
	    return this.getTypedRuleContext(Type_name_enumContext,0);
	};

	type_name_resource() {
	    return this.getTypedRuleContext(Type_name_resourceContext,0);
	};

	type_name_tagged() {
	    return this.getTypedRuleContext(Type_name_taggedContext,0);
	};

	type_name_callable() {
	    return this.getTypedRuleContext(Type_name_callableContext,0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_composite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_composite(this);
		}
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name;
    }

	type_name_composite() {
	    return this.getTypedRuleContext(Type_name_compositeContext,0);
	};

	type_name_decimal() {
	    return this.getTypedRuleContext(Type_name_decimalContext,0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name(this);
		}
	}


}



class Type_name_or_bindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_or_bind;
    }

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_or_bind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_or_bind(this);
		}
	}


}



class Value_constructor_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_value_constructor_literal;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValue_constructor_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValue_constructor_literal(this);
		}
	}


}



class Value_constructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_value_constructor;
    }

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValue_constructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValue_constructor(this);
		}
	}


}



class Declare_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_declare_stmt;
    }

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDeclare_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDeclare_stmt(this);
		}
	}


}



class Module_pathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_module_path;
    }

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOT);
	    } else {
	        return this.getToken(YQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterModule_path(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitModule_path(this);
		}
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_import_stmt;
    }

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	module_path() {
	    return this.getTypedRuleContext(Module_pathContext,0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	named_bind_parameter_list() {
	    return this.getTypedRuleContext(Named_bind_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitImport_stmt(this);
		}
	}


}



class Export_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_export_stmt;
    }

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	bind_parameter_list() {
	    return this.getTypedRuleContext(Bind_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExport_stmt(this);
		}
	}


}



class Call_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_call_action;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCall_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCall_action(this);
		}
	}


}



class Inline_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_inline_action;
    }

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	define_action_or_subquery_body() {
	    return this.getTypedRuleContext(Define_action_or_subquery_bodyContext,0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInline_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInline_action(this);
		}
	}


}



class Do_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_do_stmt;
    }

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	call_action() {
	    return this.getTypedRuleContext(Call_actionContext,0);
	};

	inline_action() {
	    return this.getTypedRuleContext(Inline_actionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDo_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDo_stmt(this);
		}
	}


}



class Pragma_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pragma_stmt;
    }

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	opt_id_prefix_or_type() {
	    return this.getTypedRuleContext(Opt_id_prefix_or_typeContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	pragma_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pragma_valueContext);
	    } else {
	        return this.getTypedRuleContext(Pragma_valueContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPragma_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPragma_stmt(this);
		}
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPragma_value(this);
		}
	}


}



class Sort_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sort_specification;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSort_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSort_specification(this);
		}
	}


}



class Sort_specification_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sort_specification_list;
    }

	sort_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sort_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Sort_specificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSort_specification_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSort_specification_list(this);
		}
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_stmt;
    }

	select_kind_parenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_kind_parenthesisContext);
	    } else {
	        return this.getTypedRuleContext(Select_kind_parenthesisContext,i);
	    }
	};

	select_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_opContext);
	    } else {
	        return this.getTypedRuleContext(Select_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_stmt(this);
		}
	}


}



class Select_unparenthesized_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_unparenthesized_stmt;
    }

	select_kind_partial() {
	    return this.getTypedRuleContext(Select_kind_partialContext,0);
	};

	select_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_opContext);
	    } else {
	        return this.getTypedRuleContext(Select_opContext,i);
	    }
	};

	select_kind_parenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_kind_parenthesisContext);
	    } else {
	        return this.getTypedRuleContext(Select_kind_parenthesisContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_unparenthesized_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_unparenthesized_stmt(this);
		}
	}


}



class Select_kind_parenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind_parenthesis;
    }

	select_kind_partial() {
	    return this.getTypedRuleContext(Select_kind_partialContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind_parenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind_parenthesis(this);
		}
	}


}



class Select_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_op;
    }

	UNION() {
	    return this.getToken(YQLParser.UNION, 0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	INTERSECT() {
	    return this.getToken(YQLParser.INTERSECT, 0);
	};

	EXCEPT() {
	    return this.getToken(YQLParser.EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_op(this);
		}
	}


}



class Select_kind_partialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind_partial;
    }

	select_kind() {
	    return this.getTypedRuleContext(Select_kindContext,0);
	};

	LIMIT() {
	    return this.getToken(YQLParser.LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind_partial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind_partial(this);
		}
	}


}



class Select_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind;
    }

	process_core() {
	    return this.getTypedRuleContext(Process_coreContext,0);
	};

	reduce_core() {
	    return this.getTypedRuleContext(Reduce_coreContext,0);
	};

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	RESULT() {
	    return this.getToken(YQLParser.RESULT, 0);
	};

	pure_column_or_named() {
	    return this.getTypedRuleContext(Pure_column_or_namedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind(this);
		}
	}


}



class Process_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_process_core;
    }

	PROCESS() {
	    return this.getToken(YQLParser.PROCESS, 0);
	};

	named_single_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_single_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Named_single_sourceContext,i);
	    }
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	using_call_expr() {
	    return this.getTypedRuleContext(Using_call_exprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	external_call_settings() {
	    return this.getTypedRuleContext(External_call_settingsContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterProcess_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitProcess_core(this);
		}
	}


}



class External_call_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_external_call_param;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExternal_call_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExternal_call_param(this);
		}
	}


}



class External_call_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_external_call_settings;
    }

	external_call_param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(External_call_paramContext);
	    } else {
	        return this.getTypedRuleContext(External_call_paramContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExternal_call_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExternal_call_settings(this);
		}
	}


}



class Reduce_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_reduce_core;
    }

	REDUCE() {
	    return this.getToken(YQLParser.REDUCE, 0);
	};

	named_single_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_single_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Named_single_sourceContext,i);
	    }
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	using_call_expr() {
	    return this.getTypedRuleContext(Using_call_exprContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	PRESORT() {
	    return this.getToken(YQLParser.PRESORT, 0);
	};

	sort_specification_list() {
	    return this.getTypedRuleContext(Sort_specification_listContext,0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReduce_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReduce_core(this);
		}
	}


}



class Opt_set_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_set_quantifier;
    }

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_set_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_set_quantifier(this);
		}
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_core;
    }

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.FROM);
	    } else {
	        return this.getToken(YQLParser.FROM, i);
	    }
	};


	join_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Join_sourceContext,i);
	    }
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	without_column_list() {
	    return this.getTypedRuleContext(Without_column_listContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	group_by_clause() {
	    return this.getTypedRuleContext(Group_by_clauseContext,0);
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	ext_order_by_clause() {
	    return this.getTypedRuleContext(Ext_order_by_clauseContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_core(this);
		}
	}


}



class Row_pattern_recognition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_recognition_clause;
    }

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern_common_syntax() {
	    return this.getTypedRuleContext(Row_pattern_common_syntaxContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	window_partition_clause() {
	    return this.getTypedRuleContext(Window_partition_clauseContext,0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	row_pattern_measures() {
	    return this.getTypedRuleContext(Row_pattern_measuresContext,0);
	};

	row_pattern_rows_per_match() {
	    return this.getTypedRuleContext(Row_pattern_rows_per_matchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_recognition_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_recognition_clause(this);
		}
	}


}



class Row_pattern_rows_per_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_rows_per_match;
    }

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	row_pattern_empty_match_handling() {
	    return this.getTypedRuleContext(Row_pattern_empty_match_handlingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_rows_per_match(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_rows_per_match(this);
		}
	}


}



class Row_pattern_empty_match_handlingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_empty_match_handling;
    }

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_empty_match_handling(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_empty_match_handling(this);
		}
	}


}



class Row_pattern_measuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measures;
    }

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	row_pattern_measure_list() {
	    return this.getTypedRuleContext(Row_pattern_measure_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measures(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measures(this);
		}
	}


}



class Row_pattern_measure_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measure_list;
    }

	row_pattern_measure_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_measure_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_measure_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measure_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measure_list(this);
		}
	}


}



class Row_pattern_measure_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measure_definition;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measure_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measure_definition(this);
		}
	}


}



class Row_pattern_common_syntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_common_syntax;
    }

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern() {
	    return this.getTypedRuleContext(Row_patternContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	DEFINE() {
	    return this.getToken(YQLParser.DEFINE, 0);
	};

	row_pattern_definition_list() {
	    return this.getTypedRuleContext(Row_pattern_definition_listContext,0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	row_pattern_skip_to() {
	    return this.getTypedRuleContext(Row_pattern_skip_toContext,0);
	};

	row_pattern_initial_or_seek() {
	    return this.getTypedRuleContext(Row_pattern_initial_or_seekContext,0);
	};

	row_pattern_subset_clause() {
	    return this.getTypedRuleContext(Row_pattern_subset_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_common_syntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_common_syntax(this);
		}
	}


}



class Row_pattern_skip_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_skip_to;
    }

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	row_pattern_skip_to_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_skip_to_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_skip_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_skip_to(this);
		}
	}


}



class Row_pattern_skip_to_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_skip_to_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_skip_to_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_skip_to_variable_name(this);
		}
	}


}



class Row_pattern_initial_or_seekContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_initial_or_seek;
    }

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_initial_or_seek(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_initial_or_seek(this);
		}
	}


}



class Row_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern;
    }

	row_pattern_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_termContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_termContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PIPE);
	    } else {
	        return this.getToken(YQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern(this);
		}
	}


}



class Row_pattern_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_term;
    }

	row_pattern_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_factorContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_term(this);
		}
	}


}



class Row_pattern_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_factor;
    }

	row_pattern_primary() {
	    return this.getTypedRuleContext(Row_pattern_primaryContext,0);
	};

	row_pattern_quantifier() {
	    return this.getTypedRuleContext(Row_pattern_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_factor(this);
		}
	}


}



class Row_pattern_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_quantifier;
    }

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	integer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerContext);
	    } else {
	        return this.getTypedRuleContext(IntegerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_quantifier(this);
		}
	}


}



class Row_pattern_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_primary;
    }

	row_pattern_primary_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_primary_variable_nameContext,0);
	};

	DOLLAR() {
	    return this.getToken(YQLParser.DOLLAR, 0);
	};

	CARET() {
	    return this.getToken(YQLParser.CARET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	row_pattern() {
	    return this.getTypedRuleContext(Row_patternContext,0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.MINUS);
	    } else {
	        return this.getToken(YQLParser.MINUS, i);
	    }
	};


	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	row_pattern_permute() {
	    return this.getTypedRuleContext(Row_pattern_permuteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_primary(this);
		}
	}


}



class Row_pattern_primary_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_primary_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_primary_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_primary_variable_name(this);
		}
	}


}



class Row_pattern_permuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_permute;
    }

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_patternContext);
	    } else {
	        return this.getTypedRuleContext(Row_patternContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_permute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_permute(this);
		}
	}


}



class Row_pattern_subset_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_clause;
    }

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	row_pattern_subset_list() {
	    return this.getTypedRuleContext(Row_pattern_subset_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_clause(this);
		}
	}


}



class Row_pattern_subset_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_list;
    }

	row_pattern_subset_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_subset_itemContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_subset_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_list(this);
		}
	}


}



class Row_pattern_subset_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_item;
    }

	row_pattern_subset_item_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_subset_item_variable_nameContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern_subset_rhs() {
	    return this.getTypedRuleContext(Row_pattern_subset_rhsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_item(this);
		}
	}


}



class Row_pattern_subset_item_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_item_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_item_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_item_variable_name(this);
		}
	}


}



class Row_pattern_subset_rhsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_rhs;
    }

	row_pattern_subset_rhs_variable_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_subset_rhs_variable_nameContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_subset_rhs_variable_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_rhs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_rhs(this);
		}
	}


}



class Row_pattern_subset_rhs_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_rhs_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_rhs_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_rhs_variable_name(this);
		}
	}


}



class Row_pattern_definition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_list;
    }

	row_pattern_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_list(this);
		}
	}


}



class Row_pattern_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition;
    }

	row_pattern_definition_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_definition_variable_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	row_pattern_definition_search_condition() {
	    return this.getTypedRuleContext(Row_pattern_definition_search_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition(this);
		}
	}


}



class Row_pattern_definition_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_variable_name(this);
		}
	}


}



class Row_pattern_definition_search_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_search_condition;
    }

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_search_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_search_condition(this);
		}
	}


}



class Search_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_search_condition;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSearch_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSearch_condition(this);
		}
	}


}



class Row_pattern_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_variable_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_variable_name(this);
		}
	}


}



class Order_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_order_by_clause;
    }

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	sort_specification_list() {
	    return this.getTypedRuleContext(Sort_specification_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrder_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrder_by_clause(this);
		}
	}


}



class Ext_order_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ext_order_by_clause;
    }

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExt_order_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExt_order_by_clause(this);
		}
	}


}



class Group_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_group_by_clause;
    }

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	grouping_element_list() {
	    return this.getTypedRuleContext(Grouping_element_listContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGroup_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGroup_by_clause(this);
		}
	}


}



class Grouping_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_element_list;
    }

	grouping_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Grouping_elementContext);
	    } else {
	        return this.getTypedRuleContext(Grouping_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_element_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_element_list(this);
		}
	}


}



class Grouping_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_element;
    }

	ordinary_grouping_set() {
	    return this.getTypedRuleContext(Ordinary_grouping_setContext,0);
	};

	rollup_list() {
	    return this.getTypedRuleContext(Rollup_listContext,0);
	};

	cube_list() {
	    return this.getTypedRuleContext(Cube_listContext,0);
	};

	grouping_sets_specification() {
	    return this.getTypedRuleContext(Grouping_sets_specificationContext,0);
	};

	hopping_window_specification() {
	    return this.getTypedRuleContext(Hopping_window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_element(this);
		}
	}


}



class Ordinary_grouping_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ordinary_grouping_set;
    }

	named_expr() {
	    return this.getTypedRuleContext(Named_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrdinary_grouping_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrdinary_grouping_set(this);
		}
	}


}



class Ordinary_grouping_set_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ordinary_grouping_set_list;
    }

	ordinary_grouping_set = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordinary_grouping_setContext);
	    } else {
	        return this.getTypedRuleContext(Ordinary_grouping_setContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrdinary_grouping_set_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrdinary_grouping_set_list(this);
		}
	}


}



class Rollup_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rollup_list;
    }

	ROLLUP() {
	    return this.getToken(YQLParser.ROLLUP, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	ordinary_grouping_set_list() {
	    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRollup_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRollup_list(this);
		}
	}


}



class Cube_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cube_list;
    }

	CUBE() {
	    return this.getToken(YQLParser.CUBE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	ordinary_grouping_set_list() {
	    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCube_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCube_list(this);
		}
	}


}



class Grouping_sets_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_sets_specification;
    }

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	grouping_element_list() {
	    return this.getTypedRuleContext(Grouping_element_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_sets_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_sets_specification(this);
		}
	}


}



class Hopping_window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_hopping_window_specification;
    }

	HOP() {
	    return this.getToken(YQLParser.HOP, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterHopping_window_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitHopping_window_specification(this);
		}
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_result_column;
    }

	opt_id_prefix() {
	    return this.getTypedRuleContext(Opt_id_prefixContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	an_id_as_compat() {
	    return this.getTypedRuleContext(An_id_as_compatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitResult_column(this);
		}
	}


}



class Join_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_source;
    }

	flatten_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Flatten_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Flatten_sourceContext,i);
	    }
	};

	ANY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ANY);
	    } else {
	        return this.getToken(YQLParser.ANY, i);
	    }
	};


	join_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_opContext);
	    } else {
	        return this.getTypedRuleContext(Join_opContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_source(this);
		}
	}


}



class Named_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_column(this);
		}
	}


}



class Flatten_by_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_flatten_by_arg;
    }

	named_column() {
	    return this.getTypedRuleContext(Named_columnContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFlatten_by_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFlatten_by_arg(this);
		}
	}


}



class Flatten_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_flatten_source;
    }

	named_single_source() {
	    return this.getTypedRuleContext(Named_single_sourceContext,0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	flatten_by_arg() {
	    return this.getTypedRuleContext(Flatten_by_argContext,0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFlatten_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFlatten_source(this);
		}
	}


}



class Named_single_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_single_source;
    }

	single_source() {
	    return this.getTypedRuleContext(Single_sourceContext,0);
	};

	row_pattern_recognition_clause() {
	    return this.getTypedRuleContext(Row_pattern_recognition_clauseContext,0);
	};

	sample_clause() {
	    return this.getTypedRuleContext(Sample_clauseContext,0);
	};

	tablesample_clause() {
	    return this.getTypedRuleContext(Tablesample_clauseContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	an_id_as_compat() {
	    return this.getTypedRuleContext(An_id_as_compatContext,0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_single_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_single_source(this);
		}
	}


}



class Single_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_single_source;
    }

	table_ref() {
	    return this.getTypedRuleContext(Table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSingle_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSingle_source(this);
		}
	}


}



class Sample_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sample_clause;
    }

	SAMPLE() {
	    return this.getToken(YQLParser.SAMPLE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSample_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSample_clause(this);
		}
	}


}



class Tablesample_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_tablesample_clause;
    }

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	sampling_mode() {
	    return this.getTypedRuleContext(Sampling_modeContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	repeatable_clause() {
	    return this.getTypedRuleContext(Repeatable_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTablesample_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTablesample_clause(this);
		}
	}


}



class Sampling_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sampling_mode;
    }

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSampling_mode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSampling_mode(this);
		}
	}


}



class Repeatable_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_repeatable_clause;
    }

	REPEATABLE() {
	    return this.getToken(YQLParser.REPEATABLE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRepeatable_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRepeatable_clause(this);
		}
	}


}



class Join_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_op;
    }

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	JOIN() {
	    return this.getToken(YQLParser.JOIN, 0);
	};

	INNER() {
	    return this.getToken(YQLParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(YQLParser.CROSS, 0);
	};

	NATURAL() {
	    return this.getToken(YQLParser.NATURAL, 0);
	};

	LEFT() {
	    return this.getToken(YQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(YQLParser.RIGHT, 0);
	};

	EXCLUSION() {
	    return this.getToken(YQLParser.EXCLUSION, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	OUTER() {
	    return this.getToken(YQLParser.OUTER, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	SEMI() {
	    return this.getToken(YQLParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_op(this);
		}
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_constraint;
    }

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	pure_column_or_named_list() {
	    return this.getTypedRuleContext(Pure_column_or_named_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_constraint(this);
		}
	}


}



class Returning_columns_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_returning_columns_list;
    }

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReturning_columns_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReturning_columns_list(this);
		}
	}


}



class Into_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_table_stmt;
    }

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	into_simple_table_ref() {
	    return this.getTypedRuleContext(Into_simple_table_refContext,0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_table_stmt(this);
		}
	}


}



class Into_values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_values_source;
    }

	values_source() {
	    return this.getTypedRuleContext(Values_sourceContext,0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_values_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_values_source(this);
		}
	}


}



class Values_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_stmt;
    }

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	values_source_row_list() {
	    return this.getTypedRuleContext(Values_source_row_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_stmt(this);
		}
	}


}



class Values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source;
    }

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source(this);
		}
	}


}



class Values_source_row_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source_row_list;
    }

	values_source_row = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Values_source_rowContext);
	    } else {
	        return this.getTypedRuleContext(Values_source_rowContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source_row_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source_row_list(this);
		}
	}


}



class Values_source_rowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source_row;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source_row(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source_row(this);
		}
	}


}



class Simple_values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_values_source;
    }

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_values_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_values_source(this);
		}
	}


}



class Create_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_external_data_source_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_external_data_source_stmt(this);
		}
	}


}



class Alter_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_data_source_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_external_data_source_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_external_data_source_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_external_data_source_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_data_source_stmt(this);
		}
	}


}



class Alter_external_data_source_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_data_source_action;
    }

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_data_source_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_data_source_action(this);
		}
	}


}



class Drop_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_external_data_source_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_external_data_source_stmt(this);
		}
	}


}



class Create_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_view_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_view_stmt(this);
		}
	}


}



class Drop_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_view_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_view_stmt(this);
		}
	}


}



class Upsert_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_upsert_object_stmt;
    }

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUpsert_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUpsert_object_stmt(this);
		}
	}


}



class Create_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_object_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_object_stmt(this);
		}
	}


}



class Create_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_object_features;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_object_features(this);
		}
	}


}



class Alter_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_object_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	alter_object_features() {
	    return this.getTypedRuleContext(Alter_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_object_stmt(this);
		}
	}


}



class Alter_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_object_features;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_object_features(this);
		}
	}


}



class Drop_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_object_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	drop_object_features() {
	    return this.getTypedRuleContext(Drop_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_object_stmt(this);
		}
	}


}



class Drop_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_object_features;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_object_features(this);
		}
	}


}



class Object_feature_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_value;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_value(this);
		}
	}


}



class Object_feature_kvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_kv;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	object_feature_value() {
	    return this.getTypedRuleContext(Object_feature_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_kv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_kv(this);
		}
	}


}



class Object_feature_flagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_flag;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_flag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_flag(this);
		}
	}


}



class Object_featureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature;
    }

	object_feature_kv() {
	    return this.getTypedRuleContext(Object_feature_kvContext,0);
	};

	object_feature_flag() {
	    return this.getTypedRuleContext(Object_feature_flagContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature(this);
		}
	}


}



class Object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_features;
    }

	object_feature = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_featureContext);
	    } else {
	        return this.getTypedRuleContext(Object_featureContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_features(this);
		}
	}


}



class Object_type_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_type_ref;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_type_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_type_ref(this);
		}
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_table_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	create_table_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_table_entryContext);
	    } else {
	        return this.getTypedRuleContext(Create_table_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	table_inherits() {
	    return this.getTypedRuleContext(Table_inheritsContext,0);
	};

	table_partition_by() {
	    return this.getTypedRuleContext(Table_partition_byContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	table_tablestore() {
	    return this.getTypedRuleContext(Table_tablestoreContext,0);
	};

	table_as_source() {
	    return this.getTypedRuleContext(Table_as_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}


}



class Create_table_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_table_entry;
    }

	column_schema() {
	    return this.getTypedRuleContext(Column_schemaContext,0);
	};

	table_constraint() {
	    return this.getTypedRuleContext(Table_constraintContext,0);
	};

	table_index() {
	    return this.getTypedRuleContext(Table_indexContext,0);
	};

	family_entry() {
	    return this.getTypedRuleContext(Family_entryContext,0);
	};

	changefeed() {
	    return this.getTypedRuleContext(ChangefeedContext,0);
	};

	an_id_schema() {
	    return this.getTypedRuleContext(An_id_schemaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_table_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_table_entry(this);
		}
	}


}



class Create_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	backup_collection_settings() {
	    return this.getTypedRuleContext(Backup_collection_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	create_backup_collection_entries() {
	    return this.getTypedRuleContext(Create_backup_collection_entriesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_stmt(this);
		}
	}


}



class Alter_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	alter_backup_collection_actions() {
	    return this.getTypedRuleContext(Alter_backup_collection_actionsContext,0);
	};

	alter_backup_collection_entries() {
	    return this.getTypedRuleContext(Alter_backup_collection_entriesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_stmt(this);
		}
	}


}



class Drop_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_backup_collection_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_backup_collection_stmt(this);
		}
	}


}



class Create_backup_collection_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_entries;
    }

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	create_backup_collection_entries_many() {
	    return this.getTypedRuleContext(Create_backup_collection_entries_manyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_entries(this);
		}
	}


}



class Create_backup_collection_entries_manyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_entries_many;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	table_list() {
	    return this.getTypedRuleContext(Table_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_entries_many(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_entries_many(this);
		}
	}


}



class Table_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_list;
    }

	TABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.TABLE);
	    } else {
	        return this.getToken(YQLParser.TABLE, i);
	    }
	};


	an_id_table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_tableContext);
	    } else {
	        return this.getTypedRuleContext(An_id_tableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_list(this);
		}
	}


}



class Alter_backup_collection_actionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_actions;
    }

	alter_backup_collection_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_backup_collection_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_backup_collection_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_actions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_actions(this);
		}
	}


}



class Alter_backup_collection_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_action(this);
		}
	}


}



class Alter_backup_collection_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_entries;
    }

	alter_backup_collection_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_backup_collection_entryContext);
	    } else {
	        return this.getTypedRuleContext(Alter_backup_collection_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_entries(this);
		}
	}


}



class Alter_backup_collection_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_entry;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_entry(this);
		}
	}


}



class Backup_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection;
    }

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection(this);
		}
	}


}



class Backup_collection_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection_settings;
    }

	backup_collection_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Backup_collection_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Backup_collection_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection_settings(this);
		}
	}


}



class Backup_collection_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection_settings_entry(this);
		}
	}


}



class Backup_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_stmt;
    }

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_stmt(this);
		}
	}


}



class Restore_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_restore_stmt;
    }

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRestore_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRestore_stmt(this);
		}
	}


}



class Alter_database_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_database_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	an_id_schema() {
	    return this.getTypedRuleContext(An_id_schemaContext,0);
	};

	OWNER() {
	    return this.getToken(YQLParser.OWNER, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	role_name() {
	    return this.getTypedRuleContext(Role_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_database_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_database_stmt(this);
		}
	}


}



class Table_inheritsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_inherits;
    }

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	simple_table_ref_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_table_ref_coreContext);
	    } else {
	        return this.getTypedRuleContext(Simple_table_ref_coreContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_inherits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_inherits(this);
		}
	}


}



class Table_partition_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_partition_by;
    }

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_partition_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_partition_by(this);
		}
	}


}



class With_table_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_table_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	table_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Table_settings_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_table_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_table_settings(this);
		}
	}


}



class Table_tablestoreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_tablestore;
    }

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	simple_table_ref_core() {
	    return this.getTypedRuleContext(Simple_table_ref_coreContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_tablestore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_tablestore(this);
		}
	}


}



class Table_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_settings_entry(this);
		}
	}


}



class Table_as_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_as_source;
    }

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	values_source() {
	    return this.getTypedRuleContext(Values_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_as_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_as_source(this);
		}
	}


}



class Alter_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	alter_table_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_stmt(this);
		}
	}


}



class Alter_table_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	alter_table_alter_column() {
	    return this.getTypedRuleContext(Alter_table_alter_columnContext,0);
	};

	alter_table_add_column_family() {
	    return this.getTypedRuleContext(Alter_table_add_column_familyContext,0);
	};

	alter_table_alter_column_family() {
	    return this.getTypedRuleContext(Alter_table_alter_column_familyContext,0);
	};

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	alter_table_add_index() {
	    return this.getTypedRuleContext(Alter_table_add_indexContext,0);
	};

	alter_table_drop_index() {
	    return this.getTypedRuleContext(Alter_table_drop_indexContext,0);
	};

	alter_table_rename_to() {
	    return this.getTypedRuleContext(Alter_table_rename_toContext,0);
	};

	alter_table_add_changefeed() {
	    return this.getTypedRuleContext(Alter_table_add_changefeedContext,0);
	};

	alter_table_alter_changefeed() {
	    return this.getTypedRuleContext(Alter_table_alter_changefeedContext,0);
	};

	alter_table_drop_changefeed() {
	    return this.getTypedRuleContext(Alter_table_drop_changefeedContext,0);
	};

	alter_table_rename_index_to() {
	    return this.getTypedRuleContext(Alter_table_rename_index_toContext,0);
	};

	alter_table_alter_index() {
	    return this.getTypedRuleContext(Alter_table_alter_indexContext,0);
	};

	alter_table_alter_column_drop_not_null() {
	    return this.getTypedRuleContext(Alter_table_alter_column_drop_not_nullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_action(this);
		}
	}


}



class Alter_external_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_table_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	alter_external_table_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_external_table_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_external_table_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_table_stmt(this);
		}
	}


}



class Alter_external_table_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_table_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_table_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_table_action(this);
		}
	}


}



class Alter_table_store_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_store_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_table_store_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_store_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_store_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_store_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_store_stmt(this);
		}
	}


}



class Alter_table_store_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_store_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_store_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_store_action(this);
		}
	}


}



class Alter_table_add_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_column;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	column_schema() {
	    return this.getTypedRuleContext(Column_schemaContext,0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_column(this);
		}
	}


}



class Alter_table_drop_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_column;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_column(this);
		}
	}


}



class Alter_table_alter_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	family_relation() {
	    return this.getTypedRuleContext(Family_relationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column(this);
		}
	}


}



class Alter_table_alter_column_drop_not_nullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column_drop_not_null;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column_drop_not_null(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column_drop_not_null(this);
		}
	}


}



class Alter_table_add_column_familyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_column_family;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	family_entry() {
	    return this.getTypedRuleContext(Family_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_column_family(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_column_family(this);
		}
	}


}



class Alter_table_alter_column_familyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column_family;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	family_setting_value() {
	    return this.getTypedRuleContext(Family_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column_family(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column_family(this);
		}
	}


}



class Alter_table_set_table_setting_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_set_table_setting_uncompat;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_set_table_setting_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_set_table_setting_uncompat(this);
		}
	}


}



class Alter_table_set_table_setting_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_set_table_setting_compat;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	alter_table_setting_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_setting_entryContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_setting_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_set_table_setting_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_set_table_setting_compat(this);
		}
	}


}



class Alter_table_reset_table_settingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_reset_table_setting;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_reset_table_setting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_reset_table_setting(this);
		}
	}


}



class Alter_table_add_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_index;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	table_index() {
	    return this.getTypedRuleContext(Table_indexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_index(this);
		}
	}


}



class Alter_table_drop_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_index;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_index(this);
		}
	}


}



class Alter_table_rename_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_rename_to;
    }

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_rename_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_rename_to(this);
		}
	}


}



class Alter_table_rename_index_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_rename_index_to;
    }

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_rename_index_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_rename_index_to(this);
		}
	}


}



class Alter_table_add_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_changefeed;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	changefeed() {
	    return this.getTypedRuleContext(ChangefeedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_changefeed(this);
		}
	}


}



class Alter_table_alter_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_changefeed;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	changefeed_alter_settings() {
	    return this.getTypedRuleContext(Changefeed_alter_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_changefeed(this);
		}
	}


}



class Alter_table_drop_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_changefeed;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_changefeed(this);
		}
	}


}



class Alter_table_alter_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_index;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	alter_table_alter_index_action() {
	    return this.getTypedRuleContext(Alter_table_alter_index_actionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_index(this);
		}
	}


}



class Column_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_schema;
    }

	an_id_schema() {
	    return this.getTypedRuleContext(An_id_schemaContext,0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	opt_column_constraints() {
	    return this.getTypedRuleContext(Opt_column_constraintsContext,0);
	};

	family_relation() {
	    return this.getTypedRuleContext(Family_relationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_schema(this);
		}
	}


}



class Family_relationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_relation;
    }

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_relation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_relation(this);
		}
	}


}



class Opt_column_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_column_constraints;
    }

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_column_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_column_constraints(this);
		}
	}


}



class Column_order_by_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_order_by_specification;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_order_by_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_order_by_specification(this);
		}
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_constraint;
    }

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	column_order_by_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_order_by_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Column_order_by_specificationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_constraint(this);
		}
	}


}



class Table_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_index;
    }

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	table_index_type() {
	    return this.getTypedRuleContext(Table_index_typeContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LPAREN);
	    } else {
	        return this.getToken(YQLParser.LPAREN, i);
	    }
	};


	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.RPAREN);
	    } else {
	        return this.getToken(YQLParser.RPAREN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	with_index_settings() {
	    return this.getTypedRuleContext(With_index_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_index(this);
		}
	}


}



class Table_index_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_index_type;
    }

	global_index() {
	    return this.getTypedRuleContext(Global_indexContext,0);
	};

	local_index() {
	    return this.getTypedRuleContext(Local_indexContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	index_subtype() {
	    return this.getTypedRuleContext(Index_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_index_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_index_type(this);
		}
	}


}



class Global_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_global_index;
    }

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGlobal_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGlobal_index(this);
		}
	}


}



class Local_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_local_index;
    }

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLocal_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLocal_index(this);
		}
	}


}



class Index_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_subtype;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_subtype(this);
		}
	}


}



class With_index_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_index_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	index_setting_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_setting_entryContext);
	    } else {
	        return this.getTypedRuleContext(Index_setting_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_index_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_index_settings(this);
		}
	}


}



class Index_setting_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_setting_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	index_setting_value() {
	    return this.getTypedRuleContext(Index_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_setting_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_setting_entry(this);
		}
	}


}



class Index_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_setting_value;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_setting_value(this);
		}
	}


}



class ChangefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed;
    }

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	changefeed_settings() {
	    return this.getTypedRuleContext(Changefeed_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed(this);
		}
	}


}



class Changefeed_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_settings;
    }

	changefeed_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Changefeed_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Changefeed_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_settings(this);
		}
	}


}



class Changefeed_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	changefeed_setting_value() {
	    return this.getTypedRuleContext(Changefeed_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_settings_entry(this);
		}
	}


}



class Changefeed_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_setting_value(this);
		}
	}


}



class Changefeed_alter_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_alter_settings;
    }

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	changefeed_settings() {
	    return this.getTypedRuleContext(Changefeed_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_alter_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_alter_settings(this);
		}
	}


}



class Alter_table_setting_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_setting_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_setting_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_setting_entry(this);
		}
	}


}



class Table_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_setting_value;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	split_boundaries() {
	    return this.getTypedRuleContext(Split_boundariesContext,0);
	};

	ttl_tier_list() {
	    return this.getTypedRuleContext(Ttl_tier_listContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_setting_value(this);
		}
	}


}



class Ttl_tier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ttl_tier_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ttl_tier_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ttl_tier_actionContext);
	    } else {
	        return this.getTypedRuleContext(Ttl_tier_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTtl_tier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTtl_tier_list(this);
		}
	}


}



class Ttl_tier_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ttl_tier_action;
    }

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTtl_tier_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTtl_tier_action(this);
		}
	}


}



class Family_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_entry;
    }

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	family_settings() {
	    return this.getTypedRuleContext(Family_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_entry(this);
		}
	}


}



class Family_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_settings;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	family_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Family_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Family_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_settings(this);
		}
	}


}



class Family_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	family_setting_value() {
	    return this.getTypedRuleContext(Family_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_settings_entry(this);
		}
	}


}



class Family_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_setting_value;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_setting_value(this);
		}
	}


}



class Split_boundariesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_split_boundaries;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	literal_value_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Literal_value_listContext);
	    } else {
	        return this.getTypedRuleContext(Literal_value_listContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSplit_boundaries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSplit_boundaries(this);
		}
	}


}



class Literal_value_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_literal_value_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	literal_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Literal_valueContext);
	    } else {
	        return this.getTypedRuleContext(Literal_valueContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLiteral_value_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLiteral_value_list(this);
		}
	}


}



class Alter_table_alter_index_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_index_action;
    }

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_index_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_index_action(this);
		}
	}


}



class Drop_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_table_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_table_stmt(this);
		}
	}


}



class Create_user_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_user_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	role_name() {
	    return this.getTypedRuleContext(Role_nameContext,0);
	};

	user_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(User_optionContext);
	    } else {
	        return this.getTypedRuleContext(User_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_user_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_user_stmt(this);
		}
	}


}



class Alter_user_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_user_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	user_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(User_optionContext);
	    } else {
	        return this.getTypedRuleContext(User_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_user_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_user_stmt(this);
		}
	}


}



class Create_group_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_group_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_group_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_group_stmt(this);
		}
	}


}



class Alter_group_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_group_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_group_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_group_stmt(this);
		}
	}


}



class Drop_role_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_role_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_role_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_role_stmt(this);
		}
	}


}



class Role_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_role_name;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRole_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRole_name(this);
		}
	}


}



class User_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_user_option;
    }

	authentication_option() {
	    return this.getTypedRuleContext(Authentication_optionContext,0);
	};

	login_option() {
	    return this.getTypedRuleContext(Login_optionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUser_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUser_option(this);
		}
	}


}



class Authentication_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_authentication_option;
    }

	password_option() {
	    return this.getTypedRuleContext(Password_optionContext,0);
	};

	hash_option() {
	    return this.getTypedRuleContext(Hash_optionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAuthentication_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAuthentication_option(this);
		}
	}


}



class Password_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_password_option;
    }

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	password_value() {
	    return this.getTypedRuleContext(Password_valueContext,0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPassword_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPassword_option(this);
		}
	}


}



class Password_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_password_value;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPassword_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPassword_value(this);
		}
	}


}



class Hash_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_hash_option;
    }

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterHash_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitHash_option(this);
		}
	}


}



class Login_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_login_option;
    }

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLogin_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLogin_option(this);
		}
	}


}



class Grant_permissions_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grant_permissions_stmt;
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GRANT);
	    } else {
	        return this.getToken(YQLParser.GRANT, i);
	    }
	};


	permission_name_target() {
	    return this.getTypedRuleContext(Permission_name_targetContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrant_permissions_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrant_permissions_stmt(this);
		}
	}


}



class Revoke_permissions_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_revoke_permissions_stmt;
    }

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	permission_name_target() {
	    return this.getTypedRuleContext(Permission_name_targetContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRevoke_permissions_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRevoke_permissions_stmt(this);
		}
	}


}



class Permission_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_id;
    }

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_id(this);
		}
	}


}



class Permission_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_name;
    }

	permission_id() {
	    return this.getTypedRuleContext(Permission_idContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_name(this);
		}
	}


}



class Permission_name_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_name_target;
    }

	permission_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Permission_nameContext);
	    } else {
	        return this.getTypedRuleContext(Permission_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_name_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_name_target(this);
		}
	}


}



class Create_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_resource_pool_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_resource_pool_stmt(this);
		}
	}


}



class Alter_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_resource_pool_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_resource_pool_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_resource_pool_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_stmt(this);
		}
	}


}



class Alter_resource_pool_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_action(this);
		}
	}


}



class Drop_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_resource_pool_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_resource_pool_stmt(this);
		}
	}


}



class Create_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_resource_pool_classifier_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_resource_pool_classifier_stmt(this);
		}
	}


}



class Alter_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_classifier_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_resource_pool_classifier_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_resource_pool_classifier_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_resource_pool_classifier_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_classifier_stmt(this);
		}
	}


}



class Alter_resource_pool_classifier_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_classifier_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_classifier_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_classifier_action(this);
		}
	}


}



class Drop_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_resource_pool_classifier_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_resource_pool_classifier_stmt(this);
		}
	}


}



class Create_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_replication_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	replication_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Replication_targetContext);
	    } else {
	        return this.getTypedRuleContext(Replication_targetContext,i);
	    }
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	replication_settings() {
	    return this.getTypedRuleContext(Replication_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_replication_stmt(this);
		}
	}


}



class Replication_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_target;
    }

	object_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_refContext);
	    } else {
	        return this.getTypedRuleContext(Object_refContext,i);
	    }
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_target(this);
		}
	}


}



class Replication_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_settings;
    }

	replication_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Replication_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Replication_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_settings(this);
		}
	}


}



class Replication_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_settings_entry(this);
		}
	}


}



class Alter_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_replication_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_replication_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_replication_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_stmt(this);
		}
	}


}



class Alter_replication_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_action;
    }

	alter_replication_set_setting() {
	    return this.getTypedRuleContext(Alter_replication_set_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_action(this);
		}
	}


}



class Alter_replication_set_settingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_set_setting;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	replication_settings() {
	    return this.getTypedRuleContext(Replication_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_set_setting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_set_setting(this);
		}
	}


}



class Drop_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_replication_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_replication_stmt(this);
		}
	}


}



class Lambda_or_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda_or_parameter;
    }

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda_or_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda_or_parameter(this);
		}
	}


}



class Create_transfer_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_transfer_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	TRANSFER() {
	    return this.getToken(YQLParser.TRANSFER, 0);
	};

	object_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_refContext);
	    } else {
	        return this.getTypedRuleContext(Object_refContext,i);
	    }
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	transfer_settings() {
	    return this.getTypedRuleContext(Transfer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	lambda_or_parameter() {
	    return this.getTypedRuleContext(Lambda_or_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_transfer_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_transfer_stmt(this);
		}
	}


}



class Transfer_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_transfer_settings;
    }

	transfer_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Transfer_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Transfer_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTransfer_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTransfer_settings(this);
		}
	}


}



class Transfer_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_transfer_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTransfer_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTransfer_settings_entry(this);
		}
	}


}



class Alter_transfer_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_transfer_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TRANSFER() {
	    return this.getToken(YQLParser.TRANSFER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_transfer_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_transfer_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_transfer_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_transfer_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_transfer_stmt(this);
		}
	}


}



class Alter_transfer_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_transfer_action;
    }

	alter_transfer_set_setting() {
	    return this.getTypedRuleContext(Alter_transfer_set_settingContext,0);
	};

	alter_transfer_set_using() {
	    return this.getTypedRuleContext(Alter_transfer_set_usingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_transfer_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_transfer_action(this);
		}
	}


}



class Alter_transfer_set_settingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_transfer_set_setting;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	transfer_settings() {
	    return this.getTypedRuleContext(Transfer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_transfer_set_setting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_transfer_set_setting(this);
		}
	}


}



class Alter_transfer_set_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_transfer_set_using;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	lambda_or_parameter() {
	    return this.getTypedRuleContext(Lambda_or_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_transfer_set_using(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_transfer_set_using(this);
		}
	}


}



class Drop_transfer_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_transfer_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	TRANSFER() {
	    return this.getToken(YQLParser.TRANSFER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_transfer_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_transfer_stmt(this);
		}
	}


}



class Action_or_subquery_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_action_or_subquery_args;
    }

	opt_bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opt_bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Opt_bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAction_or_subquery_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAction_or_subquery_args(this);
		}
	}


}



class Define_action_or_subquery_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_define_action_or_subquery_stmt;
    }

	DEFINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DEFINE);
	    } else {
	        return this.getToken(YQLParser.DEFINE, i);
	    }
	};


	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	define_action_or_subquery_body() {
	    return this.getTypedRuleContext(Define_action_or_subquery_bodyContext,0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	action_or_subquery_args() {
	    return this.getTypedRuleContext(Action_or_subquery_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDefine_action_or_subquery_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDefine_action_or_subquery_stmt(this);
		}
	}


}



class Define_action_or_subquery_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_define_action_or_subquery_body;
    }

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	sql_stmt_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_coreContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_coreContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDefine_action_or_subquery_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDefine_action_or_subquery_body(this);
		}
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	do_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Do_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Do_stmtContext,i);
	    }
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIf_stmt(this);
		}
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	do_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Do_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Do_stmtContext,i);
	    }
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFor_stmt(this);
		}
	}


}



class Table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_ref;
    }

	table_key() {
	    return this.getTypedRuleContext(Table_keyContext,0);
	};

	an_id_expr() {
	    return this.getTypedRuleContext(An_id_exprContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	table_hints() {
	    return this.getTypedRuleContext(Table_hintsContext,0);
	};

	table_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_argContext);
	    } else {
	        return this.getTypedRuleContext(Table_argContext,i);
	    }
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_ref(this);
		}
	}


}



class Table_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_key;
    }

	id_table_or_type() {
	    return this.getTypedRuleContext(Id_table_or_typeContext,0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_key(this);
		}
	}


}



class Table_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_arg;
    }

	named_expr() {
	    return this.getTypedRuleContext(Named_exprContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_arg(this);
		}
	}


}



class Table_hintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_hints;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	table_hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_hintContext);
	    } else {
	        return this.getTypedRuleContext(Table_hintContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_hints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_hints(this);
		}
	}


}



class Table_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_hint;
    }

	an_id_hint() {
	    return this.getTypedRuleContext(An_id_hintContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	type_name_tag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_tagContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_tagContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	struct_arg_positional = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_arg_positionalContext);
	    } else {
	        return this.getTypedRuleContext(Struct_arg_positionalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_hint(this);
		}
	}


}



class Object_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_ref;
    }

	id_or_at() {
	    return this.getTypedRuleContext(Id_or_atContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_ref(this);
		}
	}


}



class Simple_table_ref_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_table_ref_core;
    }

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_table_ref_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_table_ref_core(this);
		}
	}


}



class Simple_table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_table_ref;
    }

	simple_table_ref_core() {
	    return this.getTypedRuleContext(Simple_table_ref_coreContext,0);
	};

	table_hints() {
	    return this.getTypedRuleContext(Table_hintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_table_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_table_ref(this);
		}
	}


}



class Into_simple_table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_simple_table_ref;
    }

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_simple_table_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_simple_table_ref(this);
		}
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_delete_stmt;
    }

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDelete_stmt(this);
		}
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_update_stmt;
    }

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	set_clause_choice() {
	    return this.getTypedRuleContext(Set_clause_choiceContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}


}



class Set_clause_choiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause_choice;
    }

	set_clause_list() {
	    return this.getTypedRuleContext(Set_clause_listContext,0);
	};

	multiple_column_assignment() {
	    return this.getTypedRuleContext(Multiple_column_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause_choice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause_choice(this);
		}
	}


}



class Set_clause_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause_list;
    }

	set_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Set_clauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause_list(this);
		}
	}


}



class Set_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause;
    }

	set_target() {
	    return this.getTypedRuleContext(Set_targetContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause(this);
		}
	}


}



class Set_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_target;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_target(this);
		}
	}


}



class Multiple_column_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_multiple_column_assignment;
    }

	set_target_list() {
	    return this.getTypedRuleContext(Set_target_listContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	simple_values_source() {
	    return this.getTypedRuleContext(Simple_values_sourceContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMultiple_column_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMultiple_column_assignment(this);
		}
	}


}



class Set_target_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_target_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	set_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_targetContext);
	    } else {
	        return this.getTypedRuleContext(Set_targetContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_target_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_target_list(this);
		}
	}


}



class Create_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_topic_entries() {
	    return this.getTypedRuleContext(Create_topic_entriesContext,0);
	};

	with_topic_settings() {
	    return this.getTypedRuleContext(With_topic_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_stmt(this);
		}
	}


}



class Create_topic_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_entries;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	create_topic_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_topic_entryContext);
	    } else {
	        return this.getTypedRuleContext(Create_topic_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_entries(this);
		}
	}


}



class Create_topic_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_entry;
    }

	topic_create_consumer_entry() {
	    return this.getTypedRuleContext(Topic_create_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_entry(this);
		}
	}


}



class With_topic_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_topic_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_settings() {
	    return this.getTypedRuleContext(Topic_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_topic_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_topic_settings(this);
		}
	}


}



class Alter_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	alter_topic_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_topic_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_topic_actionContext,i);
	    }
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_stmt(this);
		}
	}


}



class Alter_topic_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_action;
    }

	alter_topic_add_consumer() {
	    return this.getTypedRuleContext(Alter_topic_add_consumerContext,0);
	};

	alter_topic_alter_consumer() {
	    return this.getTypedRuleContext(Alter_topic_alter_consumerContext,0);
	};

	alter_topic_drop_consumer() {
	    return this.getTypedRuleContext(Alter_topic_drop_consumerContext,0);
	};

	alter_topic_set_settings() {
	    return this.getTypedRuleContext(Alter_topic_set_settingsContext,0);
	};

	alter_topic_reset_settings() {
	    return this.getTypedRuleContext(Alter_topic_reset_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_action(this);
		}
	}


}



class Alter_topic_add_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_add_consumer;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	topic_create_consumer_entry() {
	    return this.getTypedRuleContext(Topic_create_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_add_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_add_consumer(this);
		}
	}


}



class Topic_create_consumer_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_create_consumer_entry;
    }

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	topic_consumer_with_settings() {
	    return this.getTypedRuleContext(Topic_consumer_with_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_create_consumer_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_create_consumer_entry(this);
		}
	}


}



class Alter_topic_alter_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_alter_consumer;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	topic_consumer_ref() {
	    return this.getTypedRuleContext(Topic_consumer_refContext,0);
	};

	alter_topic_alter_consumer_entry() {
	    return this.getTypedRuleContext(Alter_topic_alter_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_alter_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_alter_consumer(this);
		}
	}


}



class Alter_topic_alter_consumer_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_alter_consumer_entry;
    }

	topic_alter_consumer_set() {
	    return this.getTypedRuleContext(Topic_alter_consumer_setContext,0);
	};

	topic_alter_consumer_reset() {
	    return this.getTypedRuleContext(Topic_alter_consumer_resetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_alter_consumer_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_alter_consumer_entry(this);
		}
	}


}



class Alter_topic_drop_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_drop_consumer;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	topic_consumer_ref() {
	    return this.getTypedRuleContext(Topic_consumer_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_drop_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_drop_consumer(this);
		}
	}


}



class Topic_alter_consumer_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_alter_consumer_set;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_consumer_settings() {
	    return this.getTypedRuleContext(Topic_consumer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_alter_consumer_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_alter_consumer_set(this);
		}
	}


}



class Topic_alter_consumer_resetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_alter_consumer_reset;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_alter_consumer_reset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_alter_consumer_reset(this);
		}
	}


}



class Alter_topic_set_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_set_settings;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_settings() {
	    return this.getTypedRuleContext(Topic_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_set_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_set_settings(this);
		}
	}


}



class Alter_topic_reset_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_reset_settings;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	an_id_pure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_pureContext);
	    } else {
	        return this.getTypedRuleContext(An_id_pureContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_reset_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_reset_settings(this);
		}
	}


}



class Drop_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_topic_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_topic_stmt(this);
		}
	}


}



class Topic_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_settings;
    }

	topic_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Topic_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Topic_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_settings(this);
		}
	}


}



class Topic_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	topic_setting_value() {
	    return this.getTypedRuleContext(Topic_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_settings_entry(this);
		}
	}


}



class Topic_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_setting_value(this);
		}
	}


}



class Topic_consumer_with_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_with_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_consumer_settings() {
	    return this.getTypedRuleContext(Topic_consumer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_with_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_with_settings(this);
		}
	}


}



class Topic_consumer_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_settings;
    }

	topic_consumer_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Topic_consumer_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Topic_consumer_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_settings(this);
		}
	}


}



class Topic_consumer_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	topic_consumer_setting_value() {
	    return this.getTypedRuleContext(Topic_consumer_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_settings_entry(this);
		}
	}


}



class Topic_consumer_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_setting_value(this);
		}
	}


}



class Topic_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_ref;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_ref(this);
		}
	}


}



class Topic_consumer_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_ref;
    }

	an_id_pure() {
	    return this.getTypedRuleContext(An_id_pureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_ref(this);
		}
	}


}



class Null_treatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_null_treatment;
    }

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNull_treatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNull_treatment(this);
		}
	}


}



class Filter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_filter_clause;
    }

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFilter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFilter_clause(this);
		}
	}


}



class Window_name_or_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_name_or_specification;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_name_or_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_name_or_specification(this);
		}
	}


}



class Window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_name;
    }

	an_id_window() {
	    return this.getTypedRuleContext(An_id_windowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_name(this);
		}
	}


}



class Window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_clause;
    }

	WINDOW() {
	    return this.getToken(YQLParser.WINDOW, 0);
	};

	window_definition_list() {
	    return this.getTypedRuleContext(Window_definition_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_clause(this);
		}
	}


}



class Window_definition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_definition_list;
    }

	window_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Window_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_definition_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_definition_list(this);
		}
	}


}



class Window_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_definition;
    }

	new_window_name() {
	    return this.getTypedRuleContext(New_window_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_definition(this);
		}
	}


}



class New_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_new_window_name;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNew_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNew_window_name(this);
		}
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_specification;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	window_specification_details() {
	    return this.getTypedRuleContext(Window_specification_detailsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_specification(this);
		}
	}


}



class Window_specification_detailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_specification_details;
    }

	existing_window_name() {
	    return this.getTypedRuleContext(Existing_window_nameContext,0);
	};

	window_partition_clause() {
	    return this.getTypedRuleContext(Window_partition_clauseContext,0);
	};

	window_order_clause() {
	    return this.getTypedRuleContext(Window_order_clauseContext,0);
	};

	window_frame_clause() {
	    return this.getTypedRuleContext(Window_frame_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_specification_details(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_specification_details(this);
		}
	}


}



class Existing_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_existing_window_name;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExisting_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExisting_window_name(this);
		}
	}


}



class Window_partition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_partition_clause;
    }

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_partition_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_partition_clause(this);
		}
	}


}



class Window_order_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_order_clause;
    }

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_order_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_order_clause(this);
		}
	}


}



class Window_frame_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_clause;
    }

	window_frame_units() {
	    return this.getTypedRuleContext(Window_frame_unitsContext,0);
	};

	window_frame_extent() {
	    return this.getTypedRuleContext(Window_frame_extentContext,0);
	};

	window_frame_exclusion() {
	    return this.getTypedRuleContext(Window_frame_exclusionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_clause(this);
		}
	}


}



class Window_frame_unitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_units;
    }

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(YQLParser.RANGE, 0);
	};

	GROUPS() {
	    return this.getToken(YQLParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_units(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_units(this);
		}
	}


}



class Window_frame_extentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_extent;
    }

	window_frame_bound() {
	    return this.getTypedRuleContext(Window_frame_boundContext,0);
	};

	window_frame_between() {
	    return this.getTypedRuleContext(Window_frame_betweenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_extent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_extent(this);
		}
	}


}



class Window_frame_betweenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_between;
    }

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	window_frame_bound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundContext,i);
	    }
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_between(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_between(this);
		}
	}


}



class Window_frame_boundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_bound;
    }

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	UNBOUNDED() {
	    return this.getToken(YQLParser.UNBOUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_bound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_bound(this);
		}
	}


}



class Window_frame_exclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_exclusion;
    }

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_exclusion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_exclusion(this);
		}
	}


}



class Use_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_use_stmt;
    }

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUse_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUse_stmt(this);
		}
	}


}



class Subselect_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_subselect_stmt;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	select_unparenthesized_stmt() {
	    return this.getTypedRuleContext(Select_unparenthesized_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSubselect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSubselect_stmt(this);
		}
	}


}



class Named_nodes_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_nodes_stmt;
    }

	bind_parameter_list() {
	    return this.getTypedRuleContext(Bind_parameter_listContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	subselect_stmt() {
	    return this.getTypedRuleContext(Subselect_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_nodes_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_nodes_stmt(this);
		}
	}


}



class Commit_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_commit_stmt;
    }

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCommit_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCommit_stmt(this);
		}
	}


}



class Rollback_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rollback_stmt;
    }

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRollback_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRollback_stmt(this);
		}
	}


}



class Analyze_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_table;
    }

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_table(this);
		}
	}


}



class Analyze_table_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_table_list;
    }

	analyze_table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Analyze_tableContext);
	    } else {
	        return this.getTypedRuleContext(Analyze_tableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_table_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_table_list(this);
		}
	}


}



class Analyze_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_stmt;
    }

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	analyze_table_list() {
	    return this.getTypedRuleContext(Analyze_table_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_stmt(this);
		}
	}


}



class Alter_sequence_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_sequence_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	alter_sequence_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_sequence_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_sequence_actionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_sequence_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_sequence_stmt(this);
		}
	}


}



class Alter_sequence_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_sequence_action;
    }

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_sequence_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_sequence_action(this);
		}
	}


}



class Show_create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_show_create_table_stmt;
    }

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterShow_create_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitShow_create_table_stmt(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_identifier;
    }

	ID_PLAIN() {
	    return this.getToken(YQLParser.ID_PLAIN, 0);
	};

	ID_QUOTED() {
	    return this.getToken(YQLParser.ID_QUOTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class IdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId(this);
		}
	}


}



class Id_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_schema;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_schema(this);
		}
	}


}



class Id_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_expr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_expr(this);
		}
	}


}



class Id_expr_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_expr_in;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_expr_in(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_expr_in(this);
		}
	}


}



class Id_windowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_window;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_window(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_window(this);
		}
	}


}



class Id_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table(this);
		}
	}


}



class Id_withoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_without;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_without(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_without(this);
		}
	}


}



class Id_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_hint;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_hint(this);
		}
	}


}



class Id_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_as_compat;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_as_compat() {
	    return this.getTypedRuleContext(Keyword_as_compatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_as_compat(this);
		}
	}


}



class An_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id(this);
		}
	}


}



class An_id_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_or_type;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_or_type(this);
		}
	}


}



class An_id_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_schema;
    }

	id_schema() {
	    return this.getTypedRuleContext(Id_schemaContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_schema(this);
		}
	}


}



class An_id_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_expr;
    }

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_expr(this);
		}
	}


}



class An_id_expr_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_expr_in;
    }

	id_expr_in() {
	    return this.getTypedRuleContext(Id_expr_inContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_expr_in(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_expr_in(this);
		}
	}


}



class An_id_windowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_window;
    }

	id_window() {
	    return this.getTypedRuleContext(Id_windowContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_window(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_window(this);
		}
	}


}



class An_id_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_table;
    }

	id_table() {
	    return this.getTypedRuleContext(Id_tableContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_table(this);
		}
	}


}



class An_id_withoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_without;
    }

	id_without() {
	    return this.getTypedRuleContext(Id_withoutContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_without(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_without(this);
		}
	}


}



class An_id_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_hint;
    }

	id_hint() {
	    return this.getTypedRuleContext(Id_hintContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_hint(this);
		}
	}


}



class An_id_pureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_pure;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_pure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_pure(this);
		}
	}


}



class An_id_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_as_compat;
    }

	id_as_compat() {
	    return this.getTypedRuleContext(Id_as_compatContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_as_compat(this);
		}
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_view_name;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitView_name(this);
		}
	}


}



class Opt_id_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_id_prefix;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_id_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_id_prefix(this);
		}
	}


}



class Cluster_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cluster_expr;
    }

	pure_column_or_named() {
	    return this.getTypedRuleContext(Pure_column_or_namedContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCluster_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCluster_expr(this);
		}
	}


}



class Id_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_or_type;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	type_id() {
	    return this.getTypedRuleContext(Type_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_or_type(this);
		}
	}


}



class Opt_id_prefix_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_id_prefix_or_type;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_id_prefix_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_id_prefix_or_type(this);
		}
	}


}



class Id_or_atContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_or_at;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_or_at(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_or_at(this);
		}
	}


}



class Id_table_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table_or_type;
    }

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	type_id() {
	    return this.getTypedRuleContext(Type_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table_or_type(this);
		}
	}


}



class Id_table_or_atContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table_or_at;
    }

	id_table_or_type() {
	    return this.getTypedRuleContext(Id_table_or_typeContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table_or_at(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table_or_at(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword;
    }

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class Keyword_expr_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_expr_uncompat;
    }

	ASYMMETRIC() {
	    return this.getToken(YQLParser.ASYMMETRIC, 0);
	};

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	BITCAST() {
	    return this.getToken(YQLParser.BITCAST, 0);
	};

	CASE() {
	    return this.getToken(YQLParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(YQLParser.CAST, 0);
	};

	CUBE() {
	    return this.getToken(YQLParser.CUBE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(YQLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(YQLParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	HOP() {
	    return this.getToken(YQLParser.HOP, 0);
	};

	JSON_EXISTS() {
	    return this.getToken(YQLParser.JSON_EXISTS, 0);
	};

	JSON_VALUE() {
	    return this.getToken(YQLParser.JSON_VALUE, 0);
	};

	JSON_QUERY() {
	    return this.getToken(YQLParser.JSON_QUERY, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	PROCESS() {
	    return this.getToken(YQLParser.PROCESS, 0);
	};

	REDUCE() {
	    return this.getToken(YQLParser.REDUCE, 0);
	};

	RETURN() {
	    return this.getToken(YQLParser.RETURN, 0);
	};

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	ROLLUP() {
	    return this.getToken(YQLParser.ROLLUP, 0);
	};

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	SYMMETRIC() {
	    return this.getToken(YQLParser.SYMMETRIC, 0);
	};

	UNBOUNDED() {
	    return this.getToken(YQLParser.UNBOUNDED, 0);
	};

	WHEN() {
	    return this.getToken(YQLParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_expr_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_expr_uncompat(this);
		}
	}


}



class Keyword_table_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_table_uncompat;
    }

	ANY() {
	    return this.getToken(YQLParser.ANY, 0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_table_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_table_uncompat(this);
		}
	}


}



class Keyword_select_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_select_uncompat;
    }

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	EXCEPT() {
	    return this.getToken(YQLParser.EXCEPT, 0);
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	INTERSECT() {
	    return this.getToken(YQLParser.INTERSECT, 0);
	};

	LIMIT() {
	    return this.getToken(YQLParser.LIMIT, 0);
	};

	UNION() {
	    return this.getToken(YQLParser.UNION, 0);
	};

	WINDOW() {
	    return this.getToken(YQLParser.WINDOW, 0);
	};

	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_select_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_select_uncompat(this);
		}
	}


}



class Keyword_alter_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_alter_uncompat;
    }

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_alter_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_alter_uncompat(this);
		}
	}


}



class Keyword_in_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_in_uncompat;
    }

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_in_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_in_uncompat(this);
		}
	}


}



class Keyword_window_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_window_uncompat;
    }

	GROUPS() {
	    return this.getToken(YQLParser.GROUPS, 0);
	};

	RANGE() {
	    return this.getToken(YQLParser.RANGE, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_window_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_window_uncompat(this);
		}
	}


}



class Keyword_hint_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_hint_uncompat;
    }

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_hint_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_hint_uncompat(this);
		}
	}


}



class Keyword_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_as_compat;
    }

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	ATTACH() {
	    return this.getToken(YQLParser.ATTACH, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	AUTOINCREMENT() {
	    return this.getToken(YQLParser.AUTOINCREMENT, 0);
	};

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	BEFORE() {
	    return this.getToken(YQLParser.BEFORE, 0);
	};

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	CHECK() {
	    return this.getToken(YQLParser.CHECK, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	CONFLICT() {
	    return this.getToken(YQLParser.CONFLICT, 0);
	};

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	CONSTRAINT() {
	    return this.getToken(YQLParser.CONSTRAINT, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	DEFERRABLE() {
	    return this.getToken(YQLParser.DEFERRABLE, 0);
	};

	DEFERRED() {
	    return this.getToken(YQLParser.DEFERRED, 0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	DETACH() {
	    return this.getToken(YQLParser.DETACH, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EACH() {
	    return this.getToken(YQLParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(YQLParser.EXCLUSIVE, 0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FAIL() {
	    return this.getToken(YQLParser.FAIL, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(YQLParser.FOREIGN, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(YQLParser.IMMEDIATE, 0);
	};

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	INDEXED() {
	    return this.getToken(YQLParser.INDEXED, 0);
	};

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	INITIALLY() {
	    return this.getToken(YQLParser.INITIALLY, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	INSTEAD() {
	    return this.getToken(YQLParser.INSTEAD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	OF() {
	    return this.getToken(YQLParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	OWNER() {
	    return this.getToken(YQLParser.OWNER, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	RAISE() {
	    return this.getToken(YQLParser.RAISE, 0);
	};

	REFERENCES() {
	    return this.getToken(YQLParser.REFERENCES, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	REINDEX() {
	    return this.getToken(YQLParser.REINDEX, 0);
	};

	RELEASE() {
	    return this.getToken(YQLParser.RELEASE, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	RESTRICT() {
	    return this.getToken(YQLParser.RESTRICT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	SAVEPOINT() {
	    return this.getToken(YQLParser.SAVEPOINT, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	TRANSACTION() {
	    return this.getToken(YQLParser.TRANSACTION, 0);
	};

	TRANSFER() {
	    return this.getToken(YQLParser.TRANSFER, 0);
	};

	TRIGGER() {
	    return this.getToken(YQLParser.TRIGGER, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	VACUUM() {
	    return this.getToken(YQLParser.VACUUM, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	VIRTUAL() {
	    return this.getToken(YQLParser.VIRTUAL, 0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	XOR() {
	    return this.getToken(YQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_as_compat(this);
		}
	}


}



class Keyword_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_compat;
    }

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	ATTACH() {
	    return this.getToken(YQLParser.ATTACH, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	AUTOINCREMENT() {
	    return this.getToken(YQLParser.AUTOINCREMENT, 0);
	};

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	BEFORE() {
	    return this.getToken(YQLParser.BEFORE, 0);
	};

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	CHECK() {
	    return this.getToken(YQLParser.CHECK, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	COLLATE() {
	    return this.getToken(YQLParser.COLLATE, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	CONFLICT() {
	    return this.getToken(YQLParser.CONFLICT, 0);
	};

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	CONSTRAINT() {
	    return this.getToken(YQLParser.CONSTRAINT, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	CROSS() {
	    return this.getToken(YQLParser.CROSS, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	DEFERRABLE() {
	    return this.getToken(YQLParser.DEFERRABLE, 0);
	};

	DEFERRED() {
	    return this.getToken(YQLParser.DEFERRED, 0);
	};

	DEFINE() {
	    return this.getToken(YQLParser.DEFINE, 0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	DETACH() {
	    return this.getToken(YQLParser.DETACH, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EACH() {
	    return this.getToken(YQLParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	EXCLUSION() {
	    return this.getToken(YQLParser.EXCLUSION, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(YQLParser.EXCLUSIVE, 0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FAIL() {
	    return this.getToken(YQLParser.FAIL, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(YQLParser.FOREIGN, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(YQLParser.IMMEDIATE, 0);
	};

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	INDEXED() {
	    return this.getToken(YQLParser.INDEXED, 0);
	};

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	INITIALLY() {
	    return this.getToken(YQLParser.INITIALLY, 0);
	};

	INNER() {
	    return this.getToken(YQLParser.INNER, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	INSTEAD() {
	    return this.getToken(YQLParser.INSTEAD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	ISNULL() {
	    return this.getToken(YQLParser.ISNULL, 0);
	};

	JOIN() {
	    return this.getToken(YQLParser.JOIN, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	LEFT() {
	    return this.getToken(YQLParser.LEFT, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	NATURAL() {
	    return this.getToken(YQLParser.NATURAL, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	NOTNULL() {
	    return this.getToken(YQLParser.NOTNULL, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	OF() {
	    return this.getToken(YQLParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	OUTER() {
	    return this.getToken(YQLParser.OUTER, 0);
	};

	OVER() {
	    return this.getToken(YQLParser.OVER, 0);
	};

	OWNER() {
	    return this.getToken(YQLParser.OWNER, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	PRESORT() {
	    return this.getToken(YQLParser.PRESORT, 0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	RAISE() {
	    return this.getToken(YQLParser.RAISE, 0);
	};

	REFERENCES() {
	    return this.getToken(YQLParser.REFERENCES, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	REINDEX() {
	    return this.getToken(YQLParser.REINDEX, 0);
	};

	RELEASE() {
	    return this.getToken(YQLParser.RELEASE, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	RESTRICT() {
	    return this.getToken(YQLParser.RESTRICT, 0);
	};

	RESULT() {
	    return this.getToken(YQLParser.RESULT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	RIGHT() {
	    return this.getToken(YQLParser.RIGHT, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	SAMPLE() {
	    return this.getToken(YQLParser.SAMPLE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(YQLParser.SAVEPOINT, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	SEMI() {
	    return this.getToken(YQLParser.SEMI, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	TRANSACTION() {
	    return this.getToken(YQLParser.TRANSACTION, 0);
	};

	TRANSFER() {
	    return this.getToken(YQLParser.TRANSFER, 0);
	};

	TRIGGER() {
	    return this.getToken(YQLParser.TRIGGER, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	VACUUM() {
	    return this.getToken(YQLParser.VACUUM, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	VIRTUAL() {
	    return this.getToken(YQLParser.VIRTUAL, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	XOR() {
	    return this.getToken(YQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_compat(this);
		}
	}


}



class Type_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_id;
    }

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	TUPLE() {
	    return this.getToken(YQLParser.TUPLE, 0);
	};

	STRUCT() {
	    return this.getToken(YQLParser.STRUCT, 0);
	};

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	FLOW() {
	    return this.getToken(YQLParser.FLOW, 0);
	};

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	TAGGED() {
	    return this.getToken(YQLParser.TAGGED, 0);
	};

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_id(this);
		}
	}


}



class Bool_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bool_value;
    }

	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBool_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBool_value(this);
		}
	}


}



class RealContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_real;
    }

	REAL() {
	    return this.getToken(YQLParser.REAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReal(this);
		}
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_integer;
    }

	DIGITS() {
	    return this.getToken(YQLParser.DIGITS, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(YQLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInteger(this);
		}
	}


}




YQLParser.Sql_queryContext = Sql_queryContext; 
YQLParser.Sql_stmt_listContext = Sql_stmt_listContext; 
YQLParser.Ansi_sql_stmt_listContext = Ansi_sql_stmt_listContext; 
YQLParser.Lambda_bodyContext = Lambda_bodyContext; 
YQLParser.Lambda_stmtContext = Lambda_stmtContext; 
YQLParser.Sql_stmtContext = Sql_stmtContext; 
YQLParser.Sql_stmt_coreContext = Sql_stmt_coreContext; 
YQLParser.ExprContext = ExprContext; 
YQLParser.Or_subexprContext = Or_subexprContext; 
YQLParser.And_subexprContext = And_subexprContext; 
YQLParser.Xor_subexprContext = Xor_subexprContext; 
YQLParser.Distinct_from_opContext = Distinct_from_opContext; 
YQLParser.Cond_exprContext = Cond_exprContext; 
YQLParser.Match_opContext = Match_opContext; 
YQLParser.Eq_subexprContext = Eq_subexprContext; 
YQLParser.Shift_rightContext = Shift_rightContext; 
YQLParser.Rot_rightContext = Rot_rightContext; 
YQLParser.Double_questionContext = Double_questionContext; 
YQLParser.Neq_subexprContext = Neq_subexprContext; 
YQLParser.Bit_subexprContext = Bit_subexprContext; 
YQLParser.Add_subexprContext = Add_subexprContext; 
YQLParser.Mul_subexprContext = Mul_subexprContext; 
YQLParser.Con_subexprContext = Con_subexprContext; 
YQLParser.Unary_opContext = Unary_opContext; 
YQLParser.Unary_subexpr_suffixContext = Unary_subexpr_suffixContext; 
YQLParser.Unary_casual_subexprContext = Unary_casual_subexprContext; 
YQLParser.In_unary_casual_subexprContext = In_unary_casual_subexprContext; 
YQLParser.Unary_subexprContext = Unary_subexprContext; 
YQLParser.In_unary_subexprContext = In_unary_subexprContext; 
YQLParser.List_literalContext = List_literalContext; 
YQLParser.Expr_dict_listContext = Expr_dict_listContext; 
YQLParser.Dict_literalContext = Dict_literalContext; 
YQLParser.Expr_struct_listContext = Expr_struct_listContext; 
YQLParser.Struct_literalContext = Struct_literalContext; 
YQLParser.Atom_exprContext = Atom_exprContext; 
YQLParser.In_atom_exprContext = In_atom_exprContext; 
YQLParser.Cast_exprContext = Cast_exprContext; 
YQLParser.Bitcast_exprContext = Bitcast_exprContext; 
YQLParser.Exists_exprContext = Exists_exprContext; 
YQLParser.Case_exprContext = Case_exprContext; 
YQLParser.LambdaContext = LambdaContext; 
YQLParser.In_exprContext = In_exprContext; 
YQLParser.Json_api_exprContext = Json_api_exprContext; 
YQLParser.Jsonpath_specContext = Jsonpath_specContext; 
YQLParser.Json_variable_nameContext = Json_variable_nameContext; 
YQLParser.Json_variableContext = Json_variableContext; 
YQLParser.Json_variablesContext = Json_variablesContext; 
YQLParser.Json_common_argsContext = Json_common_argsContext; 
YQLParser.Json_case_handlerContext = Json_case_handlerContext; 
YQLParser.Json_valueContext = Json_valueContext; 
YQLParser.Json_exists_handlerContext = Json_exists_handlerContext; 
YQLParser.Json_existsContext = Json_existsContext; 
YQLParser.Json_query_wrapperContext = Json_query_wrapperContext; 
YQLParser.Json_query_handlerContext = Json_query_handlerContext; 
YQLParser.Json_queryContext = Json_queryContext; 
YQLParser.Smart_parenthesisContext = Smart_parenthesisContext; 
YQLParser.Expr_listContext = Expr_listContext; 
YQLParser.Pure_column_listContext = Pure_column_listContext; 
YQLParser.Pure_column_or_namedContext = Pure_column_or_namedContext; 
YQLParser.Pure_column_or_named_listContext = Pure_column_or_named_listContext; 
YQLParser.Column_nameContext = Column_nameContext; 
YQLParser.Without_column_nameContext = Without_column_nameContext; 
YQLParser.Column_listContext = Column_listContext; 
YQLParser.Without_column_listContext = Without_column_listContext; 
YQLParser.Named_exprContext = Named_exprContext; 
YQLParser.Named_expr_listContext = Named_expr_listContext; 
YQLParser.Invoke_exprContext = Invoke_exprContext; 
YQLParser.Invoke_expr_tailContext = Invoke_expr_tailContext; 
YQLParser.Using_call_exprContext = Using_call_exprContext; 
YQLParser.Key_exprContext = Key_exprContext; 
YQLParser.When_exprContext = When_exprContext; 
YQLParser.Literal_valueContext = Literal_valueContext; 
YQLParser.Bind_parameterContext = Bind_parameterContext; 
YQLParser.Opt_bind_parameterContext = Opt_bind_parameterContext; 
YQLParser.Bind_parameter_listContext = Bind_parameter_listContext; 
YQLParser.Named_bind_parameterContext = Named_bind_parameterContext; 
YQLParser.Named_bind_parameter_listContext = Named_bind_parameter_listContext; 
YQLParser.Signed_numberContext = Signed_numberContext; 
YQLParser.Type_name_simpleContext = Type_name_simpleContext; 
YQLParser.Integer_or_bindContext = Integer_or_bindContext; 
YQLParser.Type_name_tagContext = Type_name_tagContext; 
YQLParser.Struct_argContext = Struct_argContext; 
YQLParser.Struct_arg_positionalContext = Struct_arg_positionalContext; 
YQLParser.Variant_argContext = Variant_argContext; 
YQLParser.Callable_argContext = Callable_argContext; 
YQLParser.Callable_arg_listContext = Callable_arg_listContext; 
YQLParser.Type_name_decimalContext = Type_name_decimalContext; 
YQLParser.Type_name_optionalContext = Type_name_optionalContext; 
YQLParser.Type_name_tupleContext = Type_name_tupleContext; 
YQLParser.Type_name_structContext = Type_name_structContext; 
YQLParser.Type_name_variantContext = Type_name_variantContext; 
YQLParser.Type_name_listContext = Type_name_listContext; 
YQLParser.Type_name_streamContext = Type_name_streamContext; 
YQLParser.Type_name_flowContext = Type_name_flowContext; 
YQLParser.Type_name_dictContext = Type_name_dictContext; 
YQLParser.Type_name_setContext = Type_name_setContext; 
YQLParser.Type_name_enumContext = Type_name_enumContext; 
YQLParser.Type_name_resourceContext = Type_name_resourceContext; 
YQLParser.Type_name_taggedContext = Type_name_taggedContext; 
YQLParser.Type_name_callableContext = Type_name_callableContext; 
YQLParser.Type_name_compositeContext = Type_name_compositeContext; 
YQLParser.Type_nameContext = Type_nameContext; 
YQLParser.Type_name_or_bindContext = Type_name_or_bindContext; 
YQLParser.Value_constructor_literalContext = Value_constructor_literalContext; 
YQLParser.Value_constructorContext = Value_constructorContext; 
YQLParser.Declare_stmtContext = Declare_stmtContext; 
YQLParser.Module_pathContext = Module_pathContext; 
YQLParser.Import_stmtContext = Import_stmtContext; 
YQLParser.Export_stmtContext = Export_stmtContext; 
YQLParser.Call_actionContext = Call_actionContext; 
YQLParser.Inline_actionContext = Inline_actionContext; 
YQLParser.Do_stmtContext = Do_stmtContext; 
YQLParser.Pragma_stmtContext = Pragma_stmtContext; 
YQLParser.Pragma_valueContext = Pragma_valueContext; 
YQLParser.Sort_specificationContext = Sort_specificationContext; 
YQLParser.Sort_specification_listContext = Sort_specification_listContext; 
YQLParser.Select_stmtContext = Select_stmtContext; 
YQLParser.Select_unparenthesized_stmtContext = Select_unparenthesized_stmtContext; 
YQLParser.Select_kind_parenthesisContext = Select_kind_parenthesisContext; 
YQLParser.Select_opContext = Select_opContext; 
YQLParser.Select_kind_partialContext = Select_kind_partialContext; 
YQLParser.Select_kindContext = Select_kindContext; 
YQLParser.Process_coreContext = Process_coreContext; 
YQLParser.External_call_paramContext = External_call_paramContext; 
YQLParser.External_call_settingsContext = External_call_settingsContext; 
YQLParser.Reduce_coreContext = Reduce_coreContext; 
YQLParser.Opt_set_quantifierContext = Opt_set_quantifierContext; 
YQLParser.Select_coreContext = Select_coreContext; 
YQLParser.Row_pattern_recognition_clauseContext = Row_pattern_recognition_clauseContext; 
YQLParser.Row_pattern_rows_per_matchContext = Row_pattern_rows_per_matchContext; 
YQLParser.Row_pattern_empty_match_handlingContext = Row_pattern_empty_match_handlingContext; 
YQLParser.Row_pattern_measuresContext = Row_pattern_measuresContext; 
YQLParser.Row_pattern_measure_listContext = Row_pattern_measure_listContext; 
YQLParser.Row_pattern_measure_definitionContext = Row_pattern_measure_definitionContext; 
YQLParser.Row_pattern_common_syntaxContext = Row_pattern_common_syntaxContext; 
YQLParser.Row_pattern_skip_toContext = Row_pattern_skip_toContext; 
YQLParser.Row_pattern_skip_to_variable_nameContext = Row_pattern_skip_to_variable_nameContext; 
YQLParser.Row_pattern_initial_or_seekContext = Row_pattern_initial_or_seekContext; 
YQLParser.Row_patternContext = Row_patternContext; 
YQLParser.Row_pattern_termContext = Row_pattern_termContext; 
YQLParser.Row_pattern_factorContext = Row_pattern_factorContext; 
YQLParser.Row_pattern_quantifierContext = Row_pattern_quantifierContext; 
YQLParser.Row_pattern_primaryContext = Row_pattern_primaryContext; 
YQLParser.Row_pattern_primary_variable_nameContext = Row_pattern_primary_variable_nameContext; 
YQLParser.Row_pattern_permuteContext = Row_pattern_permuteContext; 
YQLParser.Row_pattern_subset_clauseContext = Row_pattern_subset_clauseContext; 
YQLParser.Row_pattern_subset_listContext = Row_pattern_subset_listContext; 
YQLParser.Row_pattern_subset_itemContext = Row_pattern_subset_itemContext; 
YQLParser.Row_pattern_subset_item_variable_nameContext = Row_pattern_subset_item_variable_nameContext; 
YQLParser.Row_pattern_subset_rhsContext = Row_pattern_subset_rhsContext; 
YQLParser.Row_pattern_subset_rhs_variable_nameContext = Row_pattern_subset_rhs_variable_nameContext; 
YQLParser.Row_pattern_definition_listContext = Row_pattern_definition_listContext; 
YQLParser.Row_pattern_definitionContext = Row_pattern_definitionContext; 
YQLParser.Row_pattern_definition_variable_nameContext = Row_pattern_definition_variable_nameContext; 
YQLParser.Row_pattern_definition_search_conditionContext = Row_pattern_definition_search_conditionContext; 
YQLParser.Search_conditionContext = Search_conditionContext; 
YQLParser.Row_pattern_variable_nameContext = Row_pattern_variable_nameContext; 
YQLParser.Order_by_clauseContext = Order_by_clauseContext; 
YQLParser.Ext_order_by_clauseContext = Ext_order_by_clauseContext; 
YQLParser.Group_by_clauseContext = Group_by_clauseContext; 
YQLParser.Grouping_element_listContext = Grouping_element_listContext; 
YQLParser.Grouping_elementContext = Grouping_elementContext; 
YQLParser.Ordinary_grouping_setContext = Ordinary_grouping_setContext; 
YQLParser.Ordinary_grouping_set_listContext = Ordinary_grouping_set_listContext; 
YQLParser.Rollup_listContext = Rollup_listContext; 
YQLParser.Cube_listContext = Cube_listContext; 
YQLParser.Grouping_sets_specificationContext = Grouping_sets_specificationContext; 
YQLParser.Hopping_window_specificationContext = Hopping_window_specificationContext; 
YQLParser.Result_columnContext = Result_columnContext; 
YQLParser.Join_sourceContext = Join_sourceContext; 
YQLParser.Named_columnContext = Named_columnContext; 
YQLParser.Flatten_by_argContext = Flatten_by_argContext; 
YQLParser.Flatten_sourceContext = Flatten_sourceContext; 
YQLParser.Named_single_sourceContext = Named_single_sourceContext; 
YQLParser.Single_sourceContext = Single_sourceContext; 
YQLParser.Sample_clauseContext = Sample_clauseContext; 
YQLParser.Tablesample_clauseContext = Tablesample_clauseContext; 
YQLParser.Sampling_modeContext = Sampling_modeContext; 
YQLParser.Repeatable_clauseContext = Repeatable_clauseContext; 
YQLParser.Join_opContext = Join_opContext; 
YQLParser.Join_constraintContext = Join_constraintContext; 
YQLParser.Returning_columns_listContext = Returning_columns_listContext; 
YQLParser.Into_table_stmtContext = Into_table_stmtContext; 
YQLParser.Into_values_sourceContext = Into_values_sourceContext; 
YQLParser.Values_stmtContext = Values_stmtContext; 
YQLParser.Values_sourceContext = Values_sourceContext; 
YQLParser.Values_source_row_listContext = Values_source_row_listContext; 
YQLParser.Values_source_rowContext = Values_source_rowContext; 
YQLParser.Simple_values_sourceContext = Simple_values_sourceContext; 
YQLParser.Create_external_data_source_stmtContext = Create_external_data_source_stmtContext; 
YQLParser.Alter_external_data_source_stmtContext = Alter_external_data_source_stmtContext; 
YQLParser.Alter_external_data_source_actionContext = Alter_external_data_source_actionContext; 
YQLParser.Drop_external_data_source_stmtContext = Drop_external_data_source_stmtContext; 
YQLParser.Create_view_stmtContext = Create_view_stmtContext; 
YQLParser.Drop_view_stmtContext = Drop_view_stmtContext; 
YQLParser.Upsert_object_stmtContext = Upsert_object_stmtContext; 
YQLParser.Create_object_stmtContext = Create_object_stmtContext; 
YQLParser.Create_object_featuresContext = Create_object_featuresContext; 
YQLParser.Alter_object_stmtContext = Alter_object_stmtContext; 
YQLParser.Alter_object_featuresContext = Alter_object_featuresContext; 
YQLParser.Drop_object_stmtContext = Drop_object_stmtContext; 
YQLParser.Drop_object_featuresContext = Drop_object_featuresContext; 
YQLParser.Object_feature_valueContext = Object_feature_valueContext; 
YQLParser.Object_feature_kvContext = Object_feature_kvContext; 
YQLParser.Object_feature_flagContext = Object_feature_flagContext; 
YQLParser.Object_featureContext = Object_featureContext; 
YQLParser.Object_featuresContext = Object_featuresContext; 
YQLParser.Object_type_refContext = Object_type_refContext; 
YQLParser.Create_table_stmtContext = Create_table_stmtContext; 
YQLParser.Create_table_entryContext = Create_table_entryContext; 
YQLParser.Create_backup_collection_stmtContext = Create_backup_collection_stmtContext; 
YQLParser.Alter_backup_collection_stmtContext = Alter_backup_collection_stmtContext; 
YQLParser.Drop_backup_collection_stmtContext = Drop_backup_collection_stmtContext; 
YQLParser.Create_backup_collection_entriesContext = Create_backup_collection_entriesContext; 
YQLParser.Create_backup_collection_entries_manyContext = Create_backup_collection_entries_manyContext; 
YQLParser.Table_listContext = Table_listContext; 
YQLParser.Alter_backup_collection_actionsContext = Alter_backup_collection_actionsContext; 
YQLParser.Alter_backup_collection_actionContext = Alter_backup_collection_actionContext; 
YQLParser.Alter_backup_collection_entriesContext = Alter_backup_collection_entriesContext; 
YQLParser.Alter_backup_collection_entryContext = Alter_backup_collection_entryContext; 
YQLParser.Backup_collectionContext = Backup_collectionContext; 
YQLParser.Backup_collection_settingsContext = Backup_collection_settingsContext; 
YQLParser.Backup_collection_settings_entryContext = Backup_collection_settings_entryContext; 
YQLParser.Backup_stmtContext = Backup_stmtContext; 
YQLParser.Restore_stmtContext = Restore_stmtContext; 
YQLParser.Alter_database_stmtContext = Alter_database_stmtContext; 
YQLParser.Table_inheritsContext = Table_inheritsContext; 
YQLParser.Table_partition_byContext = Table_partition_byContext; 
YQLParser.With_table_settingsContext = With_table_settingsContext; 
YQLParser.Table_tablestoreContext = Table_tablestoreContext; 
YQLParser.Table_settings_entryContext = Table_settings_entryContext; 
YQLParser.Table_as_sourceContext = Table_as_sourceContext; 
YQLParser.Alter_table_stmtContext = Alter_table_stmtContext; 
YQLParser.Alter_table_actionContext = Alter_table_actionContext; 
YQLParser.Alter_external_table_stmtContext = Alter_external_table_stmtContext; 
YQLParser.Alter_external_table_actionContext = Alter_external_table_actionContext; 
YQLParser.Alter_table_store_stmtContext = Alter_table_store_stmtContext; 
YQLParser.Alter_table_store_actionContext = Alter_table_store_actionContext; 
YQLParser.Alter_table_add_columnContext = Alter_table_add_columnContext; 
YQLParser.Alter_table_drop_columnContext = Alter_table_drop_columnContext; 
YQLParser.Alter_table_alter_columnContext = Alter_table_alter_columnContext; 
YQLParser.Alter_table_alter_column_drop_not_nullContext = Alter_table_alter_column_drop_not_nullContext; 
YQLParser.Alter_table_add_column_familyContext = Alter_table_add_column_familyContext; 
YQLParser.Alter_table_alter_column_familyContext = Alter_table_alter_column_familyContext; 
YQLParser.Alter_table_set_table_setting_uncompatContext = Alter_table_set_table_setting_uncompatContext; 
YQLParser.Alter_table_set_table_setting_compatContext = Alter_table_set_table_setting_compatContext; 
YQLParser.Alter_table_reset_table_settingContext = Alter_table_reset_table_settingContext; 
YQLParser.Alter_table_add_indexContext = Alter_table_add_indexContext; 
YQLParser.Alter_table_drop_indexContext = Alter_table_drop_indexContext; 
YQLParser.Alter_table_rename_toContext = Alter_table_rename_toContext; 
YQLParser.Alter_table_rename_index_toContext = Alter_table_rename_index_toContext; 
YQLParser.Alter_table_add_changefeedContext = Alter_table_add_changefeedContext; 
YQLParser.Alter_table_alter_changefeedContext = Alter_table_alter_changefeedContext; 
YQLParser.Alter_table_drop_changefeedContext = Alter_table_drop_changefeedContext; 
YQLParser.Alter_table_alter_indexContext = Alter_table_alter_indexContext; 
YQLParser.Column_schemaContext = Column_schemaContext; 
YQLParser.Family_relationContext = Family_relationContext; 
YQLParser.Opt_column_constraintsContext = Opt_column_constraintsContext; 
YQLParser.Column_order_by_specificationContext = Column_order_by_specificationContext; 
YQLParser.Table_constraintContext = Table_constraintContext; 
YQLParser.Table_indexContext = Table_indexContext; 
YQLParser.Table_index_typeContext = Table_index_typeContext; 
YQLParser.Global_indexContext = Global_indexContext; 
YQLParser.Local_indexContext = Local_indexContext; 
YQLParser.Index_subtypeContext = Index_subtypeContext; 
YQLParser.With_index_settingsContext = With_index_settingsContext; 
YQLParser.Index_setting_entryContext = Index_setting_entryContext; 
YQLParser.Index_setting_valueContext = Index_setting_valueContext; 
YQLParser.ChangefeedContext = ChangefeedContext; 
YQLParser.Changefeed_settingsContext = Changefeed_settingsContext; 
YQLParser.Changefeed_settings_entryContext = Changefeed_settings_entryContext; 
YQLParser.Changefeed_setting_valueContext = Changefeed_setting_valueContext; 
YQLParser.Changefeed_alter_settingsContext = Changefeed_alter_settingsContext; 
YQLParser.Alter_table_setting_entryContext = Alter_table_setting_entryContext; 
YQLParser.Table_setting_valueContext = Table_setting_valueContext; 
YQLParser.Ttl_tier_listContext = Ttl_tier_listContext; 
YQLParser.Ttl_tier_actionContext = Ttl_tier_actionContext; 
YQLParser.Family_entryContext = Family_entryContext; 
YQLParser.Family_settingsContext = Family_settingsContext; 
YQLParser.Family_settings_entryContext = Family_settings_entryContext; 
YQLParser.Family_setting_valueContext = Family_setting_valueContext; 
YQLParser.Split_boundariesContext = Split_boundariesContext; 
YQLParser.Literal_value_listContext = Literal_value_listContext; 
YQLParser.Alter_table_alter_index_actionContext = Alter_table_alter_index_actionContext; 
YQLParser.Drop_table_stmtContext = Drop_table_stmtContext; 
YQLParser.Create_user_stmtContext = Create_user_stmtContext; 
YQLParser.Alter_user_stmtContext = Alter_user_stmtContext; 
YQLParser.Create_group_stmtContext = Create_group_stmtContext; 
YQLParser.Alter_group_stmtContext = Alter_group_stmtContext; 
YQLParser.Drop_role_stmtContext = Drop_role_stmtContext; 
YQLParser.Role_nameContext = Role_nameContext; 
YQLParser.User_optionContext = User_optionContext; 
YQLParser.Authentication_optionContext = Authentication_optionContext; 
YQLParser.Password_optionContext = Password_optionContext; 
YQLParser.Password_valueContext = Password_valueContext; 
YQLParser.Hash_optionContext = Hash_optionContext; 
YQLParser.Login_optionContext = Login_optionContext; 
YQLParser.Grant_permissions_stmtContext = Grant_permissions_stmtContext; 
YQLParser.Revoke_permissions_stmtContext = Revoke_permissions_stmtContext; 
YQLParser.Permission_idContext = Permission_idContext; 
YQLParser.Permission_nameContext = Permission_nameContext; 
YQLParser.Permission_name_targetContext = Permission_name_targetContext; 
YQLParser.Create_resource_pool_stmtContext = Create_resource_pool_stmtContext; 
YQLParser.Alter_resource_pool_stmtContext = Alter_resource_pool_stmtContext; 
YQLParser.Alter_resource_pool_actionContext = Alter_resource_pool_actionContext; 
YQLParser.Drop_resource_pool_stmtContext = Drop_resource_pool_stmtContext; 
YQLParser.Create_resource_pool_classifier_stmtContext = Create_resource_pool_classifier_stmtContext; 
YQLParser.Alter_resource_pool_classifier_stmtContext = Alter_resource_pool_classifier_stmtContext; 
YQLParser.Alter_resource_pool_classifier_actionContext = Alter_resource_pool_classifier_actionContext; 
YQLParser.Drop_resource_pool_classifier_stmtContext = Drop_resource_pool_classifier_stmtContext; 
YQLParser.Create_replication_stmtContext = Create_replication_stmtContext; 
YQLParser.Replication_targetContext = Replication_targetContext; 
YQLParser.Replication_settingsContext = Replication_settingsContext; 
YQLParser.Replication_settings_entryContext = Replication_settings_entryContext; 
YQLParser.Alter_replication_stmtContext = Alter_replication_stmtContext; 
YQLParser.Alter_replication_actionContext = Alter_replication_actionContext; 
YQLParser.Alter_replication_set_settingContext = Alter_replication_set_settingContext; 
YQLParser.Drop_replication_stmtContext = Drop_replication_stmtContext; 
YQLParser.Lambda_or_parameterContext = Lambda_or_parameterContext; 
YQLParser.Create_transfer_stmtContext = Create_transfer_stmtContext; 
YQLParser.Transfer_settingsContext = Transfer_settingsContext; 
YQLParser.Transfer_settings_entryContext = Transfer_settings_entryContext; 
YQLParser.Alter_transfer_stmtContext = Alter_transfer_stmtContext; 
YQLParser.Alter_transfer_actionContext = Alter_transfer_actionContext; 
YQLParser.Alter_transfer_set_settingContext = Alter_transfer_set_settingContext; 
YQLParser.Alter_transfer_set_usingContext = Alter_transfer_set_usingContext; 
YQLParser.Drop_transfer_stmtContext = Drop_transfer_stmtContext; 
YQLParser.Action_or_subquery_argsContext = Action_or_subquery_argsContext; 
YQLParser.Define_action_or_subquery_stmtContext = Define_action_or_subquery_stmtContext; 
YQLParser.Define_action_or_subquery_bodyContext = Define_action_or_subquery_bodyContext; 
YQLParser.If_stmtContext = If_stmtContext; 
YQLParser.For_stmtContext = For_stmtContext; 
YQLParser.Table_refContext = Table_refContext; 
YQLParser.Table_keyContext = Table_keyContext; 
YQLParser.Table_argContext = Table_argContext; 
YQLParser.Table_hintsContext = Table_hintsContext; 
YQLParser.Table_hintContext = Table_hintContext; 
YQLParser.Object_refContext = Object_refContext; 
YQLParser.Simple_table_ref_coreContext = Simple_table_ref_coreContext; 
YQLParser.Simple_table_refContext = Simple_table_refContext; 
YQLParser.Into_simple_table_refContext = Into_simple_table_refContext; 
YQLParser.Delete_stmtContext = Delete_stmtContext; 
YQLParser.Update_stmtContext = Update_stmtContext; 
YQLParser.Set_clause_choiceContext = Set_clause_choiceContext; 
YQLParser.Set_clause_listContext = Set_clause_listContext; 
YQLParser.Set_clauseContext = Set_clauseContext; 
YQLParser.Set_targetContext = Set_targetContext; 
YQLParser.Multiple_column_assignmentContext = Multiple_column_assignmentContext; 
YQLParser.Set_target_listContext = Set_target_listContext; 
YQLParser.Create_topic_stmtContext = Create_topic_stmtContext; 
YQLParser.Create_topic_entriesContext = Create_topic_entriesContext; 
YQLParser.Create_topic_entryContext = Create_topic_entryContext; 
YQLParser.With_topic_settingsContext = With_topic_settingsContext; 
YQLParser.Alter_topic_stmtContext = Alter_topic_stmtContext; 
YQLParser.Alter_topic_actionContext = Alter_topic_actionContext; 
YQLParser.Alter_topic_add_consumerContext = Alter_topic_add_consumerContext; 
YQLParser.Topic_create_consumer_entryContext = Topic_create_consumer_entryContext; 
YQLParser.Alter_topic_alter_consumerContext = Alter_topic_alter_consumerContext; 
YQLParser.Alter_topic_alter_consumer_entryContext = Alter_topic_alter_consumer_entryContext; 
YQLParser.Alter_topic_drop_consumerContext = Alter_topic_drop_consumerContext; 
YQLParser.Topic_alter_consumer_setContext = Topic_alter_consumer_setContext; 
YQLParser.Topic_alter_consumer_resetContext = Topic_alter_consumer_resetContext; 
YQLParser.Alter_topic_set_settingsContext = Alter_topic_set_settingsContext; 
YQLParser.Alter_topic_reset_settingsContext = Alter_topic_reset_settingsContext; 
YQLParser.Drop_topic_stmtContext = Drop_topic_stmtContext; 
YQLParser.Topic_settingsContext = Topic_settingsContext; 
YQLParser.Topic_settings_entryContext = Topic_settings_entryContext; 
YQLParser.Topic_setting_valueContext = Topic_setting_valueContext; 
YQLParser.Topic_consumer_with_settingsContext = Topic_consumer_with_settingsContext; 
YQLParser.Topic_consumer_settingsContext = Topic_consumer_settingsContext; 
YQLParser.Topic_consumer_settings_entryContext = Topic_consumer_settings_entryContext; 
YQLParser.Topic_consumer_setting_valueContext = Topic_consumer_setting_valueContext; 
YQLParser.Topic_refContext = Topic_refContext; 
YQLParser.Topic_consumer_refContext = Topic_consumer_refContext; 
YQLParser.Null_treatmentContext = Null_treatmentContext; 
YQLParser.Filter_clauseContext = Filter_clauseContext; 
YQLParser.Window_name_or_specificationContext = Window_name_or_specificationContext; 
YQLParser.Window_nameContext = Window_nameContext; 
YQLParser.Window_clauseContext = Window_clauseContext; 
YQLParser.Window_definition_listContext = Window_definition_listContext; 
YQLParser.Window_definitionContext = Window_definitionContext; 
YQLParser.New_window_nameContext = New_window_nameContext; 
YQLParser.Window_specificationContext = Window_specificationContext; 
YQLParser.Window_specification_detailsContext = Window_specification_detailsContext; 
YQLParser.Existing_window_nameContext = Existing_window_nameContext; 
YQLParser.Window_partition_clauseContext = Window_partition_clauseContext; 
YQLParser.Window_order_clauseContext = Window_order_clauseContext; 
YQLParser.Window_frame_clauseContext = Window_frame_clauseContext; 
YQLParser.Window_frame_unitsContext = Window_frame_unitsContext; 
YQLParser.Window_frame_extentContext = Window_frame_extentContext; 
YQLParser.Window_frame_betweenContext = Window_frame_betweenContext; 
YQLParser.Window_frame_boundContext = Window_frame_boundContext; 
YQLParser.Window_frame_exclusionContext = Window_frame_exclusionContext; 
YQLParser.Use_stmtContext = Use_stmtContext; 
YQLParser.Subselect_stmtContext = Subselect_stmtContext; 
YQLParser.Named_nodes_stmtContext = Named_nodes_stmtContext; 
YQLParser.Commit_stmtContext = Commit_stmtContext; 
YQLParser.Rollback_stmtContext = Rollback_stmtContext; 
YQLParser.Analyze_tableContext = Analyze_tableContext; 
YQLParser.Analyze_table_listContext = Analyze_table_listContext; 
YQLParser.Analyze_stmtContext = Analyze_stmtContext; 
YQLParser.Alter_sequence_stmtContext = Alter_sequence_stmtContext; 
YQLParser.Alter_sequence_actionContext = Alter_sequence_actionContext; 
YQLParser.Show_create_table_stmtContext = Show_create_table_stmtContext; 
YQLParser.IdentifierContext = IdentifierContext; 
YQLParser.IdContext = IdContext; 
YQLParser.Id_schemaContext = Id_schemaContext; 
YQLParser.Id_exprContext = Id_exprContext; 
YQLParser.Id_expr_inContext = Id_expr_inContext; 
YQLParser.Id_windowContext = Id_windowContext; 
YQLParser.Id_tableContext = Id_tableContext; 
YQLParser.Id_withoutContext = Id_withoutContext; 
YQLParser.Id_hintContext = Id_hintContext; 
YQLParser.Id_as_compatContext = Id_as_compatContext; 
YQLParser.An_idContext = An_idContext; 
YQLParser.An_id_or_typeContext = An_id_or_typeContext; 
YQLParser.An_id_schemaContext = An_id_schemaContext; 
YQLParser.An_id_exprContext = An_id_exprContext; 
YQLParser.An_id_expr_inContext = An_id_expr_inContext; 
YQLParser.An_id_windowContext = An_id_windowContext; 
YQLParser.An_id_tableContext = An_id_tableContext; 
YQLParser.An_id_withoutContext = An_id_withoutContext; 
YQLParser.An_id_hintContext = An_id_hintContext; 
YQLParser.An_id_pureContext = An_id_pureContext; 
YQLParser.An_id_as_compatContext = An_id_as_compatContext; 
YQLParser.View_nameContext = View_nameContext; 
YQLParser.Opt_id_prefixContext = Opt_id_prefixContext; 
YQLParser.Cluster_exprContext = Cluster_exprContext; 
YQLParser.Id_or_typeContext = Id_or_typeContext; 
YQLParser.Opt_id_prefix_or_typeContext = Opt_id_prefix_or_typeContext; 
YQLParser.Id_or_atContext = Id_or_atContext; 
YQLParser.Id_table_or_typeContext = Id_table_or_typeContext; 
YQLParser.Id_table_or_atContext = Id_table_or_atContext; 
YQLParser.KeywordContext = KeywordContext; 
YQLParser.Keyword_expr_uncompatContext = Keyword_expr_uncompatContext; 
YQLParser.Keyword_table_uncompatContext = Keyword_table_uncompatContext; 
YQLParser.Keyword_select_uncompatContext = Keyword_select_uncompatContext; 
YQLParser.Keyword_alter_uncompatContext = Keyword_alter_uncompatContext; 
YQLParser.Keyword_in_uncompatContext = Keyword_in_uncompatContext; 
YQLParser.Keyword_window_uncompatContext = Keyword_window_uncompatContext; 
YQLParser.Keyword_hint_uncompatContext = Keyword_hint_uncompatContext; 
YQLParser.Keyword_as_compatContext = Keyword_as_compatContext; 
YQLParser.Keyword_compatContext = Keyword_compatContext; 
YQLParser.Type_idContext = Type_idContext; 
YQLParser.Bool_valueContext = Bool_valueContext; 
YQLParser.RealContext = RealContext; 
YQLParser.IntegerContext = IntegerContext; 
