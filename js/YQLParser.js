// Generated from YQL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import YQLListener from './YQLListener.js';
const serializedATN = [4,1,333,4574,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,1,0,1,0,1,0,1,0,1,0,3,0,872,8,0,1,1,
5,1,875,8,1,10,1,12,1,878,9,1,1,1,1,1,4,1,882,8,1,11,1,12,1,883,1,1,5,1,
887,8,1,10,1,12,1,890,9,1,1,1,5,1,893,8,1,10,1,12,1,896,9,1,1,1,1,1,1,2,
5,2,901,8,2,10,2,12,2,904,9,2,1,2,1,2,1,3,5,3,909,8,3,10,3,12,3,912,9,3,
1,3,1,3,4,3,916,8,3,11,3,12,3,917,5,3,920,8,3,10,3,12,3,923,9,3,1,3,1,3,
1,3,5,3,928,8,3,10,3,12,3,931,9,3,1,4,1,4,3,4,935,8,4,1,5,1,5,1,5,3,5,940,
8,5,3,5,942,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1003,8,6,1,7,1,7,1,7,5,7,1008,8,
7,10,7,12,7,1011,9,7,1,7,3,7,1014,8,7,1,8,1,8,1,8,5,8,1019,8,8,10,8,12,8,
1022,9,8,1,9,1,9,1,9,5,9,1027,8,9,10,9,12,9,1030,9,9,1,10,1,10,3,10,1034,
8,10,1,11,1,11,3,11,1038,8,11,1,11,1,11,1,11,1,12,3,12,1044,8,12,1,12,1,
12,1,12,1,12,3,12,1050,8,12,1,12,3,12,1053,8,12,1,12,1,12,3,12,1057,8,12,
1,12,1,12,1,12,1,12,1,12,1,12,3,12,1065,8,12,1,12,1,12,3,12,1069,8,12,1,
12,3,12,1072,8,12,1,12,1,12,3,12,1076,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,3,12,1087,8,12,1,12,4,12,1090,8,12,11,12,12,12,1091,3,12,
1094,8,12,1,13,1,13,1,14,1,14,1,14,5,14,1101,8,14,10,14,12,14,1104,9,14,
1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,3,18,1124,8,18,1,18,5,18,1127,8,18,10,18,12,18,1130,9,
18,1,18,1,18,1,18,1,18,4,18,1136,8,18,11,18,12,18,1137,3,18,1140,8,18,1,
19,1,19,1,19,5,19,1145,8,19,10,19,12,19,1148,9,19,1,20,1,20,1,20,5,20,1153,
8,20,10,20,12,20,1156,9,20,1,21,1,21,1,21,5,21,1161,8,21,10,21,12,21,1164,
9,21,1,22,1,22,1,22,1,22,3,22,1170,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
24,1,24,3,24,1180,8,24,3,24,1182,8,24,5,24,1184,8,24,10,24,12,24,1187,9,
24,1,24,1,24,3,24,1191,8,24,1,25,1,25,3,25,1195,8,25,1,25,1,25,1,26,1,26,
3,26,1201,8,26,1,26,1,26,1,27,1,27,3,27,1207,8,27,1,28,1,28,3,28,1211,8,
28,1,29,1,29,3,29,1215,8,29,1,29,3,29,1218,8,29,1,29,1,29,1,30,1,30,1,30,
3,30,1225,8,30,1,30,1,30,1,30,1,30,3,30,1231,8,30,5,30,1233,8,30,10,30,12,
30,1236,9,30,1,31,1,31,3,31,1240,8,31,1,31,3,31,1243,8,31,1,31,1,31,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1255,8,32,10,32,12,32,1258,9,32,
1,33,1,33,3,33,1262,8,33,1,33,3,33,1265,8,33,1,33,1,33,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1279,8,34,1,34,1,34,1,34,1,34,1,34,
3,34,1286,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1297,8,
35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1308,8,35,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
38,1,38,3,38,1328,8,38,1,38,1,38,1,39,1,39,3,39,1334,8,39,1,39,4,39,1337,
8,39,11,39,12,39,1338,1,39,1,39,3,39,1343,8,39,1,39,1,39,1,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1357,8,40,3,40,1359,8,40,1,41,1,
41,1,42,1,42,1,42,3,42,1366,8,42,1,43,1,43,1,44,1,44,3,44,1372,8,44,1,45,
1,45,1,45,1,45,1,46,1,46,1,46,5,46,1381,8,46,10,46,12,46,1384,9,46,1,47,
1,47,1,47,1,47,1,47,3,47,1391,8,47,1,48,1,48,1,48,1,48,3,48,1397,8,48,1,
49,1,49,1,49,1,49,1,49,3,49,1404,8,49,1,49,1,49,1,49,1,49,5,49,1410,8,49,
10,49,12,49,1413,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
3,51,1425,8,51,1,51,1,51,1,52,1,52,3,52,1431,8,52,1,52,1,52,3,52,1435,8,
52,1,52,3,52,1438,8,52,3,52,1440,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
1448,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1456,8,54,1,54,1,54,1,54,1,
54,3,54,1462,8,54,1,54,1,54,1,54,1,54,3,54,1468,8,54,1,54,1,54,1,55,1,55,
3,55,1474,8,55,1,55,3,55,1477,8,55,1,55,1,55,1,56,1,56,1,56,5,56,1484,8,
56,10,56,12,56,1487,9,56,1,57,1,57,1,57,1,57,5,57,1493,8,57,10,57,12,57,
1496,9,57,1,57,1,57,1,58,1,58,3,58,1502,8,58,1,59,1,59,1,59,1,59,5,59,1508,
8,59,10,59,12,59,1511,9,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
1,61,3,61,1523,8,61,1,62,1,62,1,62,5,62,1528,8,62,10,62,12,62,1531,9,62,
1,62,3,62,1534,8,62,1,63,1,63,1,63,5,63,1539,8,63,10,63,12,63,1542,9,63,
1,63,3,63,1545,8,63,1,64,1,64,1,64,3,64,1550,8,64,1,65,1,65,1,65,5,65,1555,
8,65,10,65,12,65,1558,9,65,1,66,1,66,1,66,1,66,3,66,1564,8,66,1,66,3,66,
1567,8,66,1,66,1,66,1,66,1,67,1,67,3,67,1574,8,67,1,67,1,67,3,67,1578,8,
67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1588,8,68,1,68,1,68,1,69,
1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,3,71,1611,8,71,1,72,1,72,1,72,1,72,3,72,1617,8,72,1,73,
1,73,3,73,1621,8,73,1,74,1,74,1,74,5,74,1626,8,74,10,74,12,74,1629,9,74,
1,75,1,75,1,75,3,75,1634,8,75,1,76,1,76,1,76,5,76,1639,8,76,10,76,12,76,
1642,9,76,1,77,3,77,1645,8,77,1,77,1,77,3,77,1649,8,77,1,78,1,78,1,79,1,
79,3,79,1655,8,79,1,80,1,80,1,80,3,80,1660,8,80,1,81,1,81,1,81,1,81,1,82,
1,82,1,82,3,82,1669,8,82,1,82,3,82,1672,8,82,1,82,1,82,1,82,1,82,3,82,1678,
8,82,1,83,1,83,1,83,3,83,1683,8,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1691,
8,84,1,85,1,85,1,85,5,85,1696,8,85,10,85,12,85,1699,9,85,1,86,1,86,1,86,
1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,
88,1718,8,88,10,88,12,88,1721,9,88,1,88,3,88,1724,8,88,3,88,1726,8,88,1,
88,1,88,3,88,1730,8,88,1,89,1,89,1,89,1,89,1,89,5,89,1737,8,89,10,89,12,
89,1740,9,89,1,89,3,89,1743,8,89,3,89,1745,8,89,1,89,1,89,3,89,1749,8,89,
1,90,1,90,1,90,1,90,1,90,5,90,1756,8,90,10,90,12,90,1759,9,90,1,90,3,90,
1762,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,
93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,
1,95,1,95,1,96,1,96,1,96,1,96,1,96,5,96,1798,8,96,10,96,12,96,1801,9,96,
1,96,3,96,1804,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,
98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,3,99,1824,8,99,1,99,3,99,1827,8,99,
1,99,1,99,1,99,1,99,3,99,1833,8,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
1853,8,100,1,100,5,100,1856,8,100,10,100,12,100,1859,9,100,1,101,1,101,1,
101,3,101,1864,8,101,1,101,5,101,1867,8,101,10,101,12,101,1870,9,101,3,101,
1872,8,101,1,102,1,102,3,102,1876,8,102,1,103,1,103,1,104,1,104,1,104,1,
104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,
104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1903,8,104,1,105,1,105,
1,105,1,105,1,105,1,105,3,105,1911,8,105,1,106,3,106,1914,8,106,1,106,1,
106,1,106,5,106,1919,8,106,10,106,12,106,1922,9,106,1,107,1,107,1,107,1,
107,1,107,1,108,1,108,1,108,1,109,1,109,3,109,1934,8,109,1,109,1,109,3,109,
1938,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,3,
111,1950,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,
1961,8,112,10,112,12,112,1964,9,112,1,112,1,112,3,112,1968,8,112,1,113,1,
113,1,113,1,113,1,113,3,113,1975,8,113,1,114,1,114,3,114,1979,8,114,1,115,
1,115,1,115,5,115,1984,8,115,10,115,12,115,1987,9,115,1,116,1,116,1,116,
1,116,5,116,1993,8,116,10,116,12,116,1996,9,116,1,117,1,117,1,117,1,117,
5,117,2002,8,117,10,117,12,117,2005,9,117,1,118,1,118,1,118,1,118,1,118,
3,118,2012,8,118,1,119,1,119,3,119,2016,8,119,1,119,1,119,3,119,2020,8,119,
1,120,1,120,1,120,1,120,1,120,3,120,2027,8,120,3,120,2029,8,120,1,121,3,
121,2032,8,121,1,121,1,121,1,121,3,121,2037,8,121,1,121,1,121,1,121,3,121,
2042,8,121,1,122,1,122,3,122,2046,8,122,1,122,1,122,1,122,5,122,2051,8,122,
10,122,12,122,2054,9,122,1,122,1,122,1,122,1,122,3,122,2060,8,122,1,122,
1,122,3,122,2064,8,122,1,122,1,122,3,122,2068,8,122,1,122,1,122,3,122,2072,
8,122,1,122,1,122,3,122,2076,8,122,3,122,2078,8,122,1,123,1,123,1,123,1,
123,1,124,1,124,1,124,5,124,2087,8,124,10,124,12,124,2090,9,124,1,125,1,
125,1,125,1,125,5,125,2096,8,125,10,125,12,125,2099,9,125,1,125,1,125,3,
125,2103,8,125,1,125,1,125,1,125,1,125,3,125,2109,8,125,1,125,1,125,1,125,
3,125,2114,8,125,1,125,1,125,3,125,2118,8,125,1,125,1,125,3,125,2122,8,125,
1,125,1,125,3,125,2126,8,125,1,126,3,126,2129,8,126,1,127,1,127,3,127,2133,
8,127,1,127,1,127,3,127,2137,8,127,1,127,1,127,1,127,1,127,5,127,2143,8,
127,10,127,12,127,2146,9,127,1,127,3,127,2149,8,127,1,127,1,127,3,127,2153,
8,127,1,127,1,127,3,127,2157,8,127,1,127,1,127,3,127,2161,8,127,1,127,3,
127,2164,8,127,1,127,1,127,3,127,2168,8,127,1,127,3,127,2171,8,127,1,127,
3,127,2174,8,127,1,128,1,128,1,128,3,128,2179,8,128,1,128,3,128,2182,8,128,
1,128,3,128,2185,8,128,1,128,3,128,2188,8,128,1,128,1,128,1,128,1,129,1,
129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,2202,8,129,3,129,2204,
8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2215,8,
130,1,131,1,131,1,131,1,132,1,132,1,132,5,132,2223,8,132,10,132,12,132,2226,
9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,2235,8,134,1,134,3,
134,2238,8,134,1,134,1,134,1,134,1,134,1,134,3,134,2245,8,134,1,134,1,134,
1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2269,8,135,1,136,1,
136,1,137,1,137,1,138,1,138,1,138,5,138,2278,8,138,10,138,12,138,2281,9,
138,1,139,4,139,2284,8,139,11,139,12,139,2285,1,140,1,140,3,140,2290,8,140,
1,141,1,141,3,141,2294,8,141,1,141,1,141,3,141,2298,8,141,1,141,1,141,3,
141,2302,8,141,1,141,1,141,3,141,2306,8,141,1,141,1,141,3,141,2310,8,141,
1,141,1,141,3,141,2314,8,141,1,141,1,141,1,141,1,141,3,141,2320,8,141,1,
142,1,142,1,142,1,142,1,142,3,142,2327,8,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,1,142,3,142,2337,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,
144,5,144,2346,8,144,10,144,12,144,2349,9,144,1,144,1,144,1,145,1,145,1,
145,1,146,1,146,1,146,5,146,2359,8,146,10,146,12,146,2362,9,146,1,147,1,
147,1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,1,149,5,149,2375,8,149,
10,149,12,149,2378,9,149,1,150,1,150,1,151,1,151,1,151,5,151,2385,8,151,
10,151,12,151,2388,9,151,1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,
1,155,1,155,1,156,1,156,1,157,1,157,1,157,1,157,1,158,3,158,2407,8,158,1,
158,1,158,1,159,1,159,3,159,2413,8,159,1,159,1,159,1,159,1,159,1,159,3,159,
2420,8,159,1,160,1,160,1,160,5,160,2425,8,160,10,160,12,160,2428,9,160,1,
161,1,161,1,161,1,161,1,161,3,161,2435,8,161,1,162,1,162,1,163,1,163,1,163,
5,163,2442,8,163,10,163,12,163,2445,9,163,1,164,1,164,1,164,1,164,1,164,
1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,
1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
1,168,1,168,1,168,1,168,1,168,3,168,2481,8,168,3,168,2483,8,168,1,169,3,
169,2486,8,169,1,169,1,169,1,169,3,169,2491,8,169,1,169,1,169,3,169,2495,
8,169,5,169,2497,8,169,10,169,12,169,2500,9,169,1,170,1,170,1,170,3,170,
2505,8,170,1,171,1,171,1,171,1,171,3,171,2511,8,171,1,171,1,171,3,171,2515,
8,171,1,172,1,172,1,172,3,172,2520,8,172,1,172,1,172,1,172,3,172,2525,8,
172,3,172,2527,8,172,1,173,1,173,3,173,2531,8,173,1,173,1,173,1,173,3,173,
2536,8,173,1,173,3,173,2539,8,173,3,173,2541,8,173,1,173,1,173,3,173,2545,
8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2556,8,
174,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2567,8,176,
1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,2578,8,179,1,
179,1,179,3,179,2582,8,179,1,179,1,179,3,179,2586,8,179,1,179,1,179,3,179,
2590,8,179,1,179,3,179,2593,8,179,1,179,1,179,3,179,2597,8,179,1,179,3,179,
2600,8,179,1,180,1,180,1,180,1,180,3,180,2606,8,180,1,181,1,181,1,181,1,
181,1,181,5,181,2613,8,181,10,181,12,181,2616,9,181,3,181,2618,8,181,1,182,
1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,
2632,8,182,1,182,1,182,1,182,1,182,3,182,2638,8,182,1,183,3,183,2641,8,183,
1,183,1,183,1,183,3,183,2646,8,183,1,184,1,184,1,184,1,185,1,185,3,185,2653,
8,185,1,186,1,186,1,186,5,186,2658,8,186,10,186,12,186,2661,9,186,1,187,
1,187,1,187,1,187,1,188,1,188,3,188,2669,8,188,1,189,1,189,1,189,3,189,2674,
8,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,2682,8,189,1,189,1,189,1,
189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,5,190,2695,8,190,10,
190,12,190,2698,9,190,1,191,1,191,1,191,3,191,2703,8,191,1,192,1,192,1,192,
1,192,1,192,1,192,3,192,2711,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,
193,3,193,2720,8,193,1,193,1,193,3,193,2724,8,193,1,193,1,193,1,193,1,194,
1,194,1,194,1,194,3,194,2733,8,194,1,194,1,194,1,195,1,195,1,195,1,195,1,
195,1,195,1,195,1,195,3,195,2745,8,195,1,196,1,196,1,196,1,196,1,196,3,196,
2752,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2760,8,196,1,197,1,
197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,1,
199,1,199,1,200,1,200,1,200,1,200,3,200,2781,8,200,1,200,1,200,1,200,1,200,
1,200,1,200,3,200,2789,8,200,1,201,1,201,1,201,1,202,1,202,1,202,1,202,3,
202,2798,8,202,1,203,1,203,1,203,1,203,1,204,1,204,1,205,1,205,3,205,2808,
8,205,1,206,1,206,1,206,1,206,1,206,5,206,2815,8,206,10,206,12,206,2818,
9,206,1,206,1,206,3,206,2822,8,206,1,207,1,207,1,208,1,208,1,208,3,208,2829,
8,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2839,8,208,1,
208,1,208,1,208,3,208,2844,8,208,1,208,1,208,1,208,1,208,1,208,5,208,2851,
8,208,10,208,12,208,2854,9,208,1,208,3,208,2857,8,208,1,208,1,208,3,208,
2861,8,208,1,208,3,208,2864,8,208,1,208,3,208,2867,8,208,1,208,3,208,2870,
8,208,1,208,3,208,2873,8,208,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2881,
8,209,1,210,1,210,1,210,3,210,2886,8,210,1,210,1,210,1,210,1,210,1,210,1,
211,1,211,1,211,1,211,3,211,2897,8,211,1,212,1,212,1,212,1,213,1,213,3,213,
2904,8,213,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,5,215,2915,
8,215,10,215,12,215,2918,9,215,1,216,1,216,1,216,5,216,2923,8,216,10,216,
12,216,2926,9,216,1,217,1,217,3,217,2930,8,217,1,218,1,218,1,218,5,218,2935,
8,218,10,218,12,218,2938,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
1,219,1,219,1,219,3,219,2950,8,219,1,220,1,220,1,220,1,220,1,221,1,221,1,
221,5,221,2959,8,221,10,221,12,221,2962,9,221,1,222,1,222,1,222,1,222,1,
223,1,223,1,223,3,223,2971,8,223,1,224,1,224,1,224,1,224,3,224,2977,8,224,
1,225,1,225,1,225,1,225,1,225,5,225,2984,8,225,10,225,12,225,2987,9,225,
1,225,1,225,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,227,
5,227,3001,8,227,10,227,12,227,3004,9,227,1,227,1,227,1,228,1,228,1,228,
1,229,1,229,1,229,1,229,1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,231,
1,231,5,231,3024,8,231,10,231,12,231,3027,9,231,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,3,232,3046,8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,5,233,3055,
8,233,10,233,12,233,3058,9,233,1,234,1,234,1,234,1,234,1,234,3,234,3065,
8,234,1,235,1,235,1,235,1,235,1,235,1,235,5,235,3073,8,235,10,235,12,235,
3076,9,235,1,236,1,236,3,236,3080,8,236,1,237,1,237,3,237,3084,8,237,1,237,
1,237,1,238,1,238,3,238,3090,8,238,1,238,1,238,1,239,1,239,1,239,1,239,1,
239,1,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,241,1,241,1,241,1,
242,1,242,1,242,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,
244,1,244,1,244,1,244,5,244,3126,8,244,10,244,12,244,3129,9,244,1,244,1,
244,1,245,1,245,1,245,1,245,1,245,5,245,3138,8,245,10,245,12,245,3141,9,
245,1,245,1,245,1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,248,1,248,1,
248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,250,1,250,1,250,1,251,1,
251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,253,1,253,1,253,1,253,1,
253,1,254,1,254,1,254,3,254,3182,8,254,1,254,1,254,1,255,1,255,1,255,1,256,
3,256,3190,8,256,1,256,3,256,3193,8,256,1,256,1,256,3,256,3197,8,256,1,257,
1,257,3,257,3201,8,257,1,258,1,258,1,258,1,258,1,258,1,258,5,258,3209,8,
258,10,258,12,258,3212,9,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,
258,5,258,3222,8,258,10,258,12,258,3225,9,258,1,258,1,258,1,258,1,258,1,
258,1,258,1,258,1,258,5,258,3235,8,258,10,258,12,258,3238,9,258,1,258,1,
258,3,258,3242,8,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,5,259,
3252,8,259,10,259,12,259,3255,9,259,1,259,1,259,1,259,1,259,1,259,1,259,
5,259,3263,8,259,10,259,12,259,3266,9,259,1,259,1,259,3,259,3270,8,259,1,
259,3,259,3273,8,259,1,260,1,260,3,260,3277,8,260,1,260,1,260,3,260,3281,
8,260,1,261,1,261,3,261,3285,8,261,1,261,3,261,3288,8,261,1,262,1,262,1,
263,1,263,1,264,1,264,1,264,1,264,1,264,5,264,3299,8,264,10,264,12,264,3302,
9,264,1,264,3,264,3305,8,264,1,264,1,264,1,265,1,265,1,265,1,265,1,266,1,
266,1,266,1,266,3,266,3317,8,266,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
1,268,1,268,1,268,5,268,3329,8,268,10,268,12,268,3332,9,268,1,269,1,269,
1,269,1,269,1,270,1,270,1,271,1,271,1,271,1,271,1,271,1,271,3,271,3346,8,
271,1,272,1,272,1,272,1,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,
273,1,273,3,273,3361,8,273,1,273,3,273,3364,8,273,1,274,1,274,1,274,1,274,
1,274,1,274,5,274,3372,8,274,10,274,12,274,3375,9,274,3,274,3377,8,274,1,
275,1,275,1,275,1,275,1,275,1,275,3,275,3385,8,275,1,276,1,276,1,276,1,276,
1,277,1,277,1,277,1,277,5,277,3395,8,277,10,277,12,277,3398,9,277,3,277,
3400,8,277,1,277,1,277,1,278,1,278,1,278,1,278,1,279,1,279,3,279,3410,8,
279,1,280,1,280,1,280,1,280,5,280,3416,8,280,10,280,12,280,3419,9,280,1,
280,1,280,1,280,3,280,3424,8,280,1,281,1,281,1,281,1,281,5,281,3430,8,281,
10,281,12,281,3433,9,281,1,281,1,281,1,282,1,282,1,282,3,282,3440,8,282,
1,283,1,283,1,283,1,283,1,283,3,283,3447,8,283,1,283,1,283,3,283,3451,8,
283,1,283,1,283,1,284,1,284,1,284,1,284,5,284,3459,8,284,10,284,12,284,3462,
9,284,1,285,1,285,1,285,1,285,3,285,3468,8,285,1,285,4,285,3471,8,285,11,
285,12,285,3472,1,285,1,285,1,285,3,285,3478,8,285,1,286,1,286,1,286,1,286,
1,286,1,286,1,286,1,286,5,286,3488,8,286,10,286,12,286,3491,9,286,1,286,
3,286,3494,8,286,3,286,3496,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,
287,1,287,5,287,3506,8,287,10,287,12,287,3509,9,287,1,287,3,287,3512,8,287,
1,287,1,287,1,287,3,287,3517,8,287,1,288,1,288,1,288,1,288,3,288,3523,8,
288,1,288,1,288,1,288,5,288,3528,8,288,10,288,12,288,3531,9,288,1,288,3,
288,3534,8,288,1,289,1,289,3,289,3538,8,289,1,290,1,290,3,290,3542,8,290,
1,291,3,291,3545,8,291,1,291,1,291,1,291,1,292,1,292,1,293,1,293,1,293,1,
293,1,293,1,293,5,293,3558,8,293,10,293,12,293,3561,9,293,1,293,1,293,1,
293,1,293,5,293,3567,8,293,10,293,12,293,3570,9,293,1,293,3,293,3573,8,293,
1,293,1,293,1,293,3,293,3578,8,293,1,294,1,294,1,294,1,294,3,294,3584,8,
294,1,294,1,294,1,294,1,294,1,294,5,294,3591,8,294,10,294,12,294,3594,9,
294,1,294,1,294,1,294,1,294,5,294,3600,8,294,10,294,12,294,3603,9,294,1,
295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,
295,1,295,3,295,3619,8,295,1,295,1,295,3,295,3623,8,295,1,295,1,295,3,295,
3627,8,295,3,295,3629,8,295,1,296,1,296,3,296,3633,8,296,1,297,1,297,1,297,
5,297,3638,8,297,10,297,12,297,3641,9,297,1,297,3,297,3644,8,297,1,297,1,
297,3,297,3648,8,297,3,297,3650,8,297,1,298,1,298,1,298,1,298,1,298,1,298,
1,299,1,299,1,299,1,299,1,299,1,299,1,299,5,299,3665,8,299,10,299,12,299,
3668,9,299,1,300,1,300,3,300,3672,8,300,1,301,1,301,1,301,1,301,1,301,1,
302,1,302,1,302,1,302,1,302,1,302,1,302,1,303,1,303,1,303,1,303,1,303,1,
303,1,303,1,303,5,303,3694,8,303,10,303,12,303,3697,9,303,1,304,1,304,3,
304,3701,8,304,1,305,1,305,1,305,1,305,1,305,1,305,1,306,1,306,1,306,1,306,
1,306,1,306,1,306,1,306,5,306,3717,8,306,10,306,12,306,3720,9,306,1,306,
1,306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,1,308,1,308,1,308,5,308,
3734,8,308,10,308,12,308,3737,9,308,1,309,1,309,1,309,1,309,1,310,1,310,
1,310,1,310,1,310,1,310,1,310,5,310,3750,8,310,10,310,12,310,3753,9,310,
1,311,1,311,1,312,1,312,1,312,1,312,1,312,1,313,1,313,1,313,1,313,1,313,
3,313,3767,8,313,1,314,1,314,1,314,5,314,3772,8,314,10,314,12,314,3775,9,
314,1,315,1,315,1,315,1,315,1,315,3,315,3782,8,315,1,315,1,315,1,315,1,315,
1,315,1,315,1,316,5,316,3791,8,316,10,316,12,316,3794,9,316,1,316,1,316,
4,316,3798,8,316,11,316,12,316,3799,1,316,5,316,3803,8,316,10,316,12,316,
3806,9,316,1,316,5,316,3809,8,316,10,316,12,316,3812,9,316,3,316,3814,8,
316,1,317,3,317,3817,8,317,1,317,1,317,1,317,1,317,1,317,3,317,3824,8,317,
1,318,3,318,3827,8,318,1,318,3,318,3830,8,318,1,318,1,318,1,318,1,318,1,
318,1,318,1,318,3,318,3839,8,318,1,319,1,319,1,319,3,319,3844,8,319,1,319,
3,319,3847,8,319,1,319,1,319,1,319,1,319,1,319,1,319,5,319,3855,8,319,10,
319,12,319,3858,9,319,1,319,3,319,3861,8,319,3,319,3863,8,319,1,319,1,319,
1,319,1,319,1,319,3,319,3870,8,319,1,319,3,319,3873,8,319,1,319,1,319,3,
319,3877,8,319,3,319,3879,8,319,1,319,3,319,3882,8,319,1,320,1,320,1,320,
3,320,3887,8,320,1,321,3,321,3890,8,321,1,321,1,321,1,321,3,321,3895,8,321,
1,322,1,322,1,322,1,322,1,322,1,322,5,322,3903,8,322,10,322,12,322,3906,
9,322,1,322,1,322,3,322,3910,8,322,1,323,1,323,1,323,1,323,1,323,1,323,1,
323,5,323,3919,8,323,10,323,12,323,3922,9,323,1,323,3,323,3925,8,323,1,323,
1,323,3,323,3929,8,323,3,323,3931,8,323,1,323,1,323,3,323,3935,8,323,1,323,
1,323,1,323,3,323,3940,8,323,1,323,1,323,1,323,1,323,5,323,3946,8,323,10,
323,12,323,3949,9,323,3,323,3951,8,323,1,323,3,323,3954,8,323,1,323,3,323,
3957,8,323,1,324,1,324,1,324,3,324,3962,8,324,1,324,1,324,1,325,1,325,3,
325,3968,8,325,1,325,3,325,3971,8,325,1,326,1,326,3,326,3975,8,326,1,327,
1,327,1,327,1,327,3,327,3981,8,327,1,328,3,328,3984,8,328,1,328,1,328,1,
328,1,328,1,328,1,328,1,328,3,328,3993,8,328,1,328,3,328,3996,8,328,1,329,
3,329,3999,8,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4007,8,329,1,
329,1,329,3,329,4011,8,329,1,329,3,329,4014,8,329,1,330,1,330,3,330,4018,
8,330,1,331,1,331,1,331,5,331,4023,8,331,10,331,12,331,4026,9,331,1,332,
1,332,1,332,1,332,1,333,1,333,1,334,1,334,1,334,1,334,1,334,1,334,1,335,
1,335,1,335,1,335,5,335,4044,8,335,10,335,12,335,4047,9,335,1,335,1,335,
1,336,1,336,1,336,1,336,1,336,3,336,4056,8,336,1,336,1,336,3,336,4060,8,
336,1,336,3,336,4063,8,336,1,337,1,337,1,337,1,337,5,337,4069,8,337,10,337,
12,337,4072,9,337,1,337,1,337,1,338,1,338,1,339,1,339,1,339,1,339,1,339,
1,340,1,340,1,340,1,340,3,340,4087,8,340,1,340,1,340,1,340,1,340,5,340,4093,
8,340,10,340,12,340,4096,9,340,1,341,1,341,1,341,1,341,1,341,3,341,4103,
8,341,1,342,1,342,1,342,1,343,1,343,1,343,3,343,4111,8,343,1,344,1,344,1,
344,1,344,1,344,1,345,1,345,3,345,4120,8,345,1,346,1,346,1,346,1,346,1,347,
1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,1,348,5,348,4136,8,348,10,
348,12,348,4139,9,348,1,348,1,348,1,349,1,349,1,349,1,349,1,349,1,350,1,
350,1,350,1,350,1,350,5,350,4153,8,350,10,350,12,350,4156,9,350,1,350,1,
350,1,351,1,351,1,351,1,351,3,351,4164,8,351,1,351,1,351,1,352,1,352,1,352,
5,352,4171,8,352,10,352,12,352,4174,9,352,1,353,1,353,1,353,1,353,1,354,
1,354,1,355,1,355,1,355,1,355,1,355,1,356,1,356,1,356,5,356,4190,8,356,10,
356,12,356,4193,9,356,1,357,1,357,1,357,1,357,1,358,1,358,1,359,1,359,1,
359,3,359,4204,8,359,1,359,1,359,1,360,1,360,1,361,1,361,1,361,1,361,3,361,
4214,8,361,1,362,1,362,1,362,1,362,1,362,1,362,1,363,1,363,3,363,4224,8,
363,1,364,1,364,1,365,1,365,1,365,1,366,1,366,1,366,5,366,4234,8,366,10,
366,12,366,4237,9,366,1,367,1,367,1,367,1,367,1,368,1,368,1,369,1,369,1,
369,1,369,1,370,3,370,4250,8,370,1,370,3,370,4253,8,370,1,370,3,370,4256,
8,370,1,370,3,370,4259,8,370,1,371,1,371,1,372,1,372,3,372,4265,8,372,1,
372,1,372,1,372,1,373,1,373,1,374,1,374,1,374,3,374,4275,8,374,1,375,1,375,
1,376,1,376,3,376,4281,8,376,1,377,1,377,1,377,1,377,1,377,1,378,1,378,1,
378,1,378,3,378,4292,8,378,1,378,3,378,4295,8,378,1,379,1,379,1,379,1,379,
1,379,1,379,1,379,1,379,1,379,1,379,3,379,4307,8,379,1,380,1,380,1,380,1,
381,1,381,1,381,1,381,1,381,3,381,4317,8,381,1,382,1,382,1,382,1,382,3,382,
4323,8,382,1,383,1,383,1,384,1,384,1,385,1,385,1,385,1,385,1,385,3,385,4334,
8,385,1,386,1,386,1,386,5,386,4339,8,386,10,386,12,386,4342,9,386,1,386,
3,386,4345,8,386,1,387,1,387,1,387,1,388,1,388,1,388,1,388,3,388,4354,8,
388,1,388,1,388,4,388,4358,8,388,11,388,12,388,4359,1,389,1,389,3,389,4364,
8,389,1,389,1,389,1,389,3,389,4369,8,389,1,389,1,389,1,389,1,389,3,389,4375,
8,389,1,389,3,389,4378,8,389,1,390,1,390,1,391,1,391,3,391,4384,8,391,1,
392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,4393,8,392,1,393,1,393,1,393,
1,393,1,393,1,393,3,393,4401,8,393,1,394,1,394,1,394,1,394,1,394,3,394,4408,
8,394,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,3,395,4418,8,395,1,
396,1,396,1,396,1,396,1,396,1,396,1,396,3,396,4427,8,396,1,397,1,397,1,397,
1,397,1,397,1,397,1,397,3,397,4436,8,397,1,398,1,398,1,398,1,398,1,398,1,
398,1,398,1,398,3,398,4446,8,398,1,399,1,399,3,399,4450,8,399,1,400,1,400,
3,400,4454,8,400,1,401,1,401,3,401,4458,8,401,1,402,1,402,3,402,4462,8,402,
1,403,1,403,3,403,4466,8,403,1,404,1,404,3,404,4470,8,404,1,405,1,405,3,
405,4474,8,405,1,406,1,406,3,406,4478,8,406,1,407,1,407,3,407,4482,8,407,
1,408,1,408,3,408,4486,8,408,1,409,1,409,3,409,4490,8,409,1,410,1,410,3,
410,4494,8,410,1,411,1,411,1,411,3,411,4499,8,411,1,412,1,412,1,412,3,412,
4504,8,412,1,413,1,413,1,413,3,413,4509,8,413,1,413,1,413,3,413,4513,8,413,
1,414,1,414,3,414,4517,8,414,1,415,1,415,1,415,3,415,4522,8,415,1,416,3,
416,4525,8,416,1,416,1,416,1,417,1,417,3,417,4531,8,417,1,418,3,418,4534,
8,418,1,418,1,418,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,3,419,
4546,8,419,1,420,1,420,1,421,1,421,1,422,1,422,1,423,1,423,1,424,1,424,1,
425,1,425,1,426,1,426,1,427,1,427,1,428,1,428,1,429,1,429,1,430,1,430,1,
431,1,431,1,432,1,432,1,432,0,0,433,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,
478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,
586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,
622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,
658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,
694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,
766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,
802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,
838,840,842,844,846,848,850,852,854,856,858,860,862,864,0,40,2,0,52,52,283,
283,6,0,144,144,155,155,181,181,187,187,239,239,259,259,1,0,5,8,1,0,16,17,
1,0,19,21,2,0,16,18,199,199,2,0,114,114,120,120,4,0,120,120,132,132,299,
299,306,306,2,0,80,80,303,303,2,0,50,50,102,102,2,0,24,24,205,205,2,0,42,
42,109,109,2,0,164,164,268,268,3,0,105,105,183,183,211,211,2,0,64,64,285,
285,2,0,209,209,270,270,2,0,53,53,284,284,3,0,191,192,194,194,267,267,2,
0,40,40,111,111,2,0,147,147,311,311,2,0,185,185,198,198,2,0,56,56,287,287,
2,0,119,119,308,308,3,0,43,43,103,103,242,242,3,0,56,56,262,262,287,287,
2,0,142,142,310,310,3,0,106,106,234,234,286,286,2,0,39,39,280,280,2,0,77,
77,266,266,3,0,149,149,236,236,263,263,2,0,138,138,228,228,1,0,326,327,20,
0,52,52,65,66,70,71,88,88,90,92,115,115,127,127,141,142,152,152,174,176,
199,199,201,201,232,232,237,237,254,255,261,261,269,269,283,283,302,302,
318,319,3,0,47,47,119,119,278,278,11,0,42,42,49,49,51,51,109,109,123,123,
151,151,169,169,182,182,304,304,320,320,322,322,56,0,38,41,43,46,48,48,50,
50,53,57,59,64,67,67,69,69,72,74,78,78,80,86,89,89,93,99,101,104,106,108,
111,114,116,117,120,122,124,124,126,126,128,131,133,136,138,140,143,148,
150,150,153,165,167,168,170,171,178,178,180,181,184,194,196,198,202,206,
208,210,212,214,217,228,230,231,233,235,238,243,245,247,249,252,256,257,
259,260,262,262,265,265,267,268,272,277,280,282,284,289,291,298,301,301,
303,303,305,311,313,314,317,317,323,324,49,0,38,41,43,46,48,48,50,50,53,
57,59,64,67,67,69,69,72,75,78,78,80,87,89,89,93,104,106,108,110,114,116,
117,120,122,124,126,128,131,133,136,138,140,143,148,150,150,153,168,170,
173,177,181,184,198,200,200,202,210,212,231,233,235,238,243,245,247,249,
253,256,260,262,262,264,265,267,268,270,270,272,277,280,282,284,289,291,
298,301,301,303,303,305,314,316,317,321,321,323,324,12,0,68,68,105,105,118,
118,137,137,183,183,211,211,248,248,271,271,279,279,290,290,300,300,315,
315,2,0,132,132,299,299,1,0,328,329,4898,0,871,1,0,0,0,2,876,1,0,0,0,4,902,
1,0,0,0,6,910,1,0,0,0,8,934,1,0,0,0,10,941,1,0,0,0,12,1002,1,0,0,0,14,1013,
1,0,0,0,16,1015,1,0,0,0,18,1023,1,0,0,0,20,1031,1,0,0,0,22,1035,1,0,0,0,
24,1093,1,0,0,0,26,1095,1,0,0,0,28,1097,1,0,0,0,30,1105,1,0,0,0,32,1108,
1,0,0,0,34,1112,1,0,0,0,36,1115,1,0,0,0,38,1141,1,0,0,0,40,1149,1,0,0,0,
42,1157,1,0,0,0,44,1169,1,0,0,0,46,1171,1,0,0,0,48,1185,1,0,0,0,50,1194,
1,0,0,0,52,1200,1,0,0,0,54,1206,1,0,0,0,56,1210,1,0,0,0,58,1212,1,0,0,0,
60,1221,1,0,0,0,62,1237,1,0,0,0,64,1246,1,0,0,0,66,1259,1,0,0,0,68,1285,
1,0,0,0,70,1307,1,0,0,0,72,1309,1,0,0,0,74,1316,1,0,0,0,76,1323,1,0,0,0,
78,1331,1,0,0,0,80,1346,1,0,0,0,82,1360,1,0,0,0,84,1365,1,0,0,0,86,1367,
1,0,0,0,88,1371,1,0,0,0,90,1373,1,0,0,0,92,1377,1,0,0,0,94,1385,1,0,0,0,
96,1396,1,0,0,0,98,1398,1,0,0,0,100,1416,1,0,0,0,102,1420,1,0,0,0,104,1439,
1,0,0,0,106,1447,1,0,0,0,108,1449,1,0,0,0,110,1471,1,0,0,0,112,1480,1,0,
0,0,114,1488,1,0,0,0,116,1501,1,0,0,0,118,1503,1,0,0,0,120,1514,1,0,0,0,
122,1522,1,0,0,0,124,1524,1,0,0,0,126,1535,1,0,0,0,128,1546,1,0,0,0,130,
1551,1,0,0,0,132,1559,1,0,0,0,134,1573,1,0,0,0,136,1587,1,0,0,0,138,1591,
1,0,0,0,140,1595,1,0,0,0,142,1610,1,0,0,0,144,1612,1,0,0,0,146,1618,1,0,
0,0,148,1622,1,0,0,0,150,1630,1,0,0,0,152,1635,1,0,0,0,154,1644,1,0,0,0,
156,1650,1,0,0,0,158,1654,1,0,0,0,160,1659,1,0,0,0,162,1661,1,0,0,0,164,
1677,1,0,0,0,166,1682,1,0,0,0,168,1686,1,0,0,0,170,1692,1,0,0,0,172,1700,
1,0,0,0,174,1707,1,0,0,0,176,1712,1,0,0,0,178,1731,1,0,0,0,180,1750,1,0,
0,0,182,1765,1,0,0,0,184,1770,1,0,0,0,186,1775,1,0,0,0,188,1780,1,0,0,0,
190,1787,1,0,0,0,192,1792,1,0,0,0,194,1807,1,0,0,0,196,1812,1,0,0,0,198,
1819,1,0,0,0,200,1852,1,0,0,0,202,1871,1,0,0,0,204,1875,1,0,0,0,206,1877,
1,0,0,0,208,1902,1,0,0,0,210,1904,1,0,0,0,212,1913,1,0,0,0,214,1923,1,0,
0,0,216,1928,1,0,0,0,218,1933,1,0,0,0,220,1941,1,0,0,0,222,1946,1,0,0,0,
224,1951,1,0,0,0,226,1974,1,0,0,0,228,1976,1,0,0,0,230,1980,1,0,0,0,232,
1988,1,0,0,0,234,1997,1,0,0,0,236,2011,1,0,0,0,238,2019,1,0,0,0,240,2021,
1,0,0,0,242,2031,1,0,0,0,244,2043,1,0,0,0,246,2079,1,0,0,0,248,2083,1,0,
0,0,250,2091,1,0,0,0,252,2128,1,0,0,0,254,2132,1,0,0,0,256,2175,1,0,0,0,
258,2203,1,0,0,0,260,2214,1,0,0,0,262,2216,1,0,0,0,264,2219,1,0,0,0,266,
2227,1,0,0,0,268,2234,1,0,0,0,270,2268,1,0,0,0,272,2270,1,0,0,0,274,2272,
1,0,0,0,276,2274,1,0,0,0,278,2283,1,0,0,0,280,2287,1,0,0,0,282,2319,1,0,
0,0,284,2336,1,0,0,0,286,2338,1,0,0,0,288,2340,1,0,0,0,290,2352,1,0,0,0,
292,2355,1,0,0,0,294,2363,1,0,0,0,296,2369,1,0,0,0,298,2371,1,0,0,0,300,
2379,1,0,0,0,302,2381,1,0,0,0,304,2389,1,0,0,0,306,2393,1,0,0,0,308,2395,
1,0,0,0,310,2397,1,0,0,0,312,2399,1,0,0,0,314,2401,1,0,0,0,316,2406,1,0,
0,0,318,2410,1,0,0,0,320,2421,1,0,0,0,322,2434,1,0,0,0,324,2436,1,0,0,0,
326,2438,1,0,0,0,328,2446,1,0,0,0,330,2451,1,0,0,0,332,2456,1,0,0,0,334,
2462,1,0,0,0,336,2482,1,0,0,0,338,2485,1,0,0,0,340,2501,1,0,0,0,342,2514,
1,0,0,0,344,2516,1,0,0,0,346,2528,1,0,0,0,348,2555,1,0,0,0,350,2557,1,0,
0,0,352,2560,1,0,0,0,354,2568,1,0,0,0,356,2570,1,0,0,0,358,2599,1,0,0,0,
360,2605,1,0,0,0,362,2607,1,0,0,0,364,2631,1,0,0,0,366,2645,1,0,0,0,368,
2647,1,0,0,0,370,2652,1,0,0,0,372,2654,1,0,0,0,374,2662,1,0,0,0,376,2668,
1,0,0,0,378,2670,1,0,0,0,380,2686,1,0,0,0,382,2702,1,0,0,0,384,2704,1,0,
0,0,386,2714,1,0,0,0,388,2728,1,0,0,0,390,2736,1,0,0,0,392,2746,1,0,0,0,
394,2761,1,0,0,0,396,2764,1,0,0,0,398,2773,1,0,0,0,400,2776,1,0,0,0,402,
2790,1,0,0,0,404,2797,1,0,0,0,406,2799,1,0,0,0,408,2803,1,0,0,0,410,2807,
1,0,0,0,412,2821,1,0,0,0,414,2823,1,0,0,0,416,2825,1,0,0,0,418,2880,1,0,
0,0,420,2882,1,0,0,0,422,2892,1,0,0,0,424,2898,1,0,0,0,426,2903,1,0,0,0,
428,2905,1,0,0,0,430,2909,1,0,0,0,432,2919,1,0,0,0,434,2929,1,0,0,0,436,
2931,1,0,0,0,438,2949,1,0,0,0,440,2951,1,0,0,0,442,2955,1,0,0,0,444,2963,
1,0,0,0,446,2967,1,0,0,0,448,2972,1,0,0,0,450,2978,1,0,0,0,452,2990,1,0,
0,0,454,2995,1,0,0,0,456,3007,1,0,0,0,458,3010,1,0,0,0,460,3014,1,0,0,0,
462,3017,1,0,0,0,464,3045,1,0,0,0,466,3047,1,0,0,0,468,3064,1,0,0,0,470,
3066,1,0,0,0,472,3079,1,0,0,0,474,3081,1,0,0,0,476,3087,1,0,0,0,478,3093,
1,0,0,0,480,3099,1,0,0,0,482,3106,1,0,0,0,484,3109,1,0,0,0,486,3116,1,0,
0,0,488,3120,1,0,0,0,490,3132,1,0,0,0,492,3144,1,0,0,0,494,3147,1,0,0,0,
496,3151,1,0,0,0,498,3155,1,0,0,0,500,3161,1,0,0,0,502,3164,1,0,0,0,504,
3169,1,0,0,0,506,3173,1,0,0,0,508,3178,1,0,0,0,510,3185,1,0,0,0,512,3192,
1,0,0,0,514,3198,1,0,0,0,516,3241,1,0,0,0,518,3243,1,0,0,0,520,3276,1,0,
0,0,522,3282,1,0,0,0,524,3289,1,0,0,0,526,3291,1,0,0,0,528,3293,1,0,0,0,
530,3308,1,0,0,0,532,3316,1,0,0,0,534,3318,1,0,0,0,536,3325,1,0,0,0,538,
3333,1,0,0,0,540,3337,1,0,0,0,542,3345,1,0,0,0,544,3347,1,0,0,0,546,3363,
1,0,0,0,548,3365,1,0,0,0,550,3384,1,0,0,0,552,3386,1,0,0,0,554,3390,1,0,
0,0,556,3403,1,0,0,0,558,3409,1,0,0,0,560,3423,1,0,0,0,562,3425,1,0,0,0,
564,3439,1,0,0,0,566,3441,1,0,0,0,568,3454,1,0,0,0,570,3463,1,0,0,0,572,
3479,1,0,0,0,574,3497,1,0,0,0,576,3518,1,0,0,0,578,3537,1,0,0,0,580,3541,
1,0,0,0,582,3544,1,0,0,0,584,3549,1,0,0,0,586,3551,1,0,0,0,588,3579,1,0,
0,0,590,3628,1,0,0,0,592,3632,1,0,0,0,594,3649,1,0,0,0,596,3651,1,0,0,0,
598,3657,1,0,0,0,600,3671,1,0,0,0,602,3673,1,0,0,0,604,3678,1,0,0,0,606,
3685,1,0,0,0,608,3700,1,0,0,0,610,3702,1,0,0,0,612,3708,1,0,0,0,614,3726,
1,0,0,0,616,3730,1,0,0,0,618,3738,1,0,0,0,620,3742,1,0,0,0,622,3754,1,0,
0,0,624,3756,1,0,0,0,626,3761,1,0,0,0,628,3768,1,0,0,0,630,3776,1,0,0,0,
632,3792,1,0,0,0,634,3816,1,0,0,0,636,3826,1,0,0,0,638,3843,1,0,0,0,640,
3883,1,0,0,0,642,3889,1,0,0,0,644,3896,1,0,0,0,646,3956,1,0,0,0,648,3961,
1,0,0,0,650,3970,1,0,0,0,652,3972,1,0,0,0,654,3976,1,0,0,0,656,3983,1,0,
0,0,658,3998,1,0,0,0,660,4017,1,0,0,0,662,4019,1,0,0,0,664,4027,1,0,0,0,
666,4031,1,0,0,0,668,4033,1,0,0,0,670,4039,1,0,0,0,672,4050,1,0,0,0,674,
4064,1,0,0,0,676,4075,1,0,0,0,678,4077,1,0,0,0,680,4082,1,0,0,0,682,4102,
1,0,0,0,684,4104,1,0,0,0,686,4107,1,0,0,0,688,4112,1,0,0,0,690,4119,1,0,
0,0,692,4121,1,0,0,0,694,4125,1,0,0,0,696,4130,1,0,0,0,698,4142,1,0,0,0,
700,4147,1,0,0,0,702,4159,1,0,0,0,704,4167,1,0,0,0,706,4175,1,0,0,0,708,
4179,1,0,0,0,710,4181,1,0,0,0,712,4186,1,0,0,0,714,4194,1,0,0,0,716,4198,
1,0,0,0,718,4203,1,0,0,0,720,4207,1,0,0,0,722,4213,1,0,0,0,724,4215,1,0,
0,0,726,4223,1,0,0,0,728,4225,1,0,0,0,730,4227,1,0,0,0,732,4230,1,0,0,0,
734,4238,1,0,0,0,736,4242,1,0,0,0,738,4244,1,0,0,0,740,4249,1,0,0,0,742,
4260,1,0,0,0,744,4262,1,0,0,0,746,4269,1,0,0,0,748,4271,1,0,0,0,750,4276,
1,0,0,0,752,4280,1,0,0,0,754,4282,1,0,0,0,756,4294,1,0,0,0,758,4306,1,0,
0,0,760,4308,1,0,0,0,762,4316,1,0,0,0,764,4318,1,0,0,0,766,4324,1,0,0,0,
768,4326,1,0,0,0,770,4328,1,0,0,0,772,4335,1,0,0,0,774,4346,1,0,0,0,776,
4349,1,0,0,0,778,4377,1,0,0,0,780,4379,1,0,0,0,782,4383,1,0,0,0,784,4392,
1,0,0,0,786,4400,1,0,0,0,788,4407,1,0,0,0,790,4417,1,0,0,0,792,4426,1,0,
0,0,794,4435,1,0,0,0,796,4445,1,0,0,0,798,4449,1,0,0,0,800,4453,1,0,0,0,
802,4457,1,0,0,0,804,4461,1,0,0,0,806,4465,1,0,0,0,808,4469,1,0,0,0,810,
4473,1,0,0,0,812,4477,1,0,0,0,814,4481,1,0,0,0,816,4485,1,0,0,0,818,4489,
1,0,0,0,820,4493,1,0,0,0,822,4498,1,0,0,0,824,4503,1,0,0,0,826,4508,1,0,
0,0,828,4516,1,0,0,0,830,4521,1,0,0,0,832,4524,1,0,0,0,834,4530,1,0,0,0,
836,4533,1,0,0,0,838,4545,1,0,0,0,840,4547,1,0,0,0,842,4549,1,0,0,0,844,
4551,1,0,0,0,846,4553,1,0,0,0,848,4555,1,0,0,0,850,4557,1,0,0,0,852,4559,
1,0,0,0,854,4561,1,0,0,0,856,4563,1,0,0,0,858,4565,1,0,0,0,860,4567,1,0,
0,0,862,4569,1,0,0,0,864,4571,1,0,0,0,866,872,3,2,1,0,867,868,5,227,0,0,
868,869,5,46,0,0,869,870,5,328,0,0,870,872,3,4,2,0,871,866,1,0,0,0,871,867,
1,0,0,0,872,1,1,0,0,0,873,875,5,22,0,0,874,873,1,0,0,0,875,878,1,0,0,0,876,
874,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,888,3,10,
5,0,880,882,5,22,0,0,881,880,1,0,0,0,882,883,1,0,0,0,883,881,1,0,0,0,883,
884,1,0,0,0,884,885,1,0,0,0,885,887,3,10,5,0,886,881,1,0,0,0,887,890,1,0,
0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,894,1,0,0,0,890,888,1,0,0,0,891,
893,5,22,0,0,892,891,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,
0,0,895,897,1,0,0,0,896,894,1,0,0,0,897,898,5,0,0,1,898,3,1,0,0,0,899,901,
5,22,0,0,900,899,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,
903,905,1,0,0,0,904,902,1,0,0,0,905,906,5,0,0,1,906,5,1,0,0,0,907,909,5,
22,0,0,908,907,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,
921,1,0,0,0,912,910,1,0,0,0,913,915,3,8,4,0,914,916,5,22,0,0,915,914,1,0,
0,0,916,917,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,
913,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,
0,0,923,921,1,0,0,0,924,925,5,254,0,0,925,929,3,14,7,0,926,928,5,22,0,0,
927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,7,1,
0,0,0,931,929,1,0,0,0,932,935,3,764,382,0,933,935,3,214,107,0,934,932,1,
0,0,0,934,933,1,0,0,0,935,9,1,0,0,0,936,939,5,128,0,0,937,938,5,233,0,0,
938,940,5,225,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,936,
1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,3,12,6,0,944,11,1,0,0,0,
945,1003,3,224,112,0,946,1003,3,232,116,0,947,1003,3,764,382,0,948,1003,
3,416,208,0,949,1003,3,566,283,0,950,1003,3,760,380,0,951,1003,3,364,182,
0,952,1003,3,766,383,0,953,1003,3,658,329,0,954,1003,3,656,328,0,955,1003,
3,768,384,0,956,1003,3,210,105,0,957,1003,3,214,107,0,958,1003,3,216,108,
0,959,1003,3,462,231,0,960,1003,3,466,233,0,961,1003,3,222,111,0,962,1003,
3,630,315,0,963,1003,3,634,317,0,964,1003,3,636,318,0,965,1003,3,368,184,
0,966,1003,3,568,284,0,967,1003,3,570,285,0,968,1003,3,572,286,0,969,1003,
3,574,287,0,970,1003,3,576,288,0,971,1003,3,392,196,0,972,1003,3,396,198,
0,973,1003,3,400,200,0,974,1003,3,378,189,0,975,1003,3,380,190,0,976,1003,
3,384,192,0,977,1003,3,612,306,0,978,1003,3,626,313,0,979,1003,3,672,336,
0,980,1003,3,680,340,0,981,1003,3,702,351,0,982,1003,3,586,293,0,983,1003,
3,588,294,0,984,1003,3,470,235,0,985,1003,3,390,195,0,986,1003,3,386,193,
0,987,1003,3,388,194,0,988,1003,3,620,310,0,989,1003,3,596,298,0,990,1003,
3,598,299,0,991,1003,3,602,301,0,992,1003,3,420,210,0,993,1003,3,422,211,
0,994,1003,3,424,212,0,995,1003,3,774,387,0,996,1003,3,604,302,0,997,1003,
3,606,303,0,998,1003,3,610,305,0,999,1003,3,446,223,0,1000,1003,3,448,224,
0,1001,1003,3,776,388,0,1002,945,1,0,0,0,1002,946,1,0,0,0,1002,947,1,0,0,
0,1002,948,1,0,0,0,1002,949,1,0,0,0,1002,950,1,0,0,0,1002,951,1,0,0,0,1002,
952,1,0,0,0,1002,953,1,0,0,0,1002,954,1,0,0,0,1002,955,1,0,0,0,1002,956,
1,0,0,0,1002,957,1,0,0,0,1002,958,1,0,0,0,1002,959,1,0,0,0,1002,960,1,0,
0,0,1002,961,1,0,0,0,1002,962,1,0,0,0,1002,963,1,0,0,0,1002,964,1,0,0,0,
1002,965,1,0,0,0,1002,966,1,0,0,0,1002,967,1,0,0,0,1002,968,1,0,0,0,1002,
969,1,0,0,0,1002,970,1,0,0,0,1002,971,1,0,0,0,1002,972,1,0,0,0,1002,973,
1,0,0,0,1002,974,1,0,0,0,1002,975,1,0,0,0,1002,976,1,0,0,0,1002,977,1,0,
0,0,1002,978,1,0,0,0,1002,979,1,0,0,0,1002,980,1,0,0,0,1002,981,1,0,0,0,
1002,982,1,0,0,0,1002,983,1,0,0,0,1002,984,1,0,0,0,1002,985,1,0,0,0,1002,
986,1,0,0,0,1002,987,1,0,0,0,1002,988,1,0,0,0,1002,989,1,0,0,0,1002,990,
1,0,0,0,1002,991,1,0,0,0,1002,992,1,0,0,0,1002,993,1,0,0,0,1002,994,1,0,
0,0,1002,995,1,0,0,0,1002,996,1,0,0,0,1002,997,1,0,0,0,1002,998,1,0,0,0,
1002,999,1,0,0,0,1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,13,1,0,0,0,1004,
1009,3,16,8,0,1005,1006,5,212,0,0,1006,1008,3,16,8,0,1007,1005,1,0,0,0,1008,
1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1014,1,0,0,0,1011,
1009,1,0,0,0,1012,1014,3,200,100,0,1013,1004,1,0,0,0,1013,1012,1,0,0,0,1014,
15,1,0,0,0,1015,1020,3,18,9,0,1016,1017,5,45,0,0,1017,1019,3,18,9,0,1018,
1016,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,
17,1,0,0,0,1022,1020,1,0,0,0,1023,1028,3,20,10,0,1024,1025,5,324,0,0,1025,
1027,3,20,10,0,1026,1024,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,
1029,1,0,0,0,1029,19,1,0,0,0,1030,1028,1,0,0,0,1031,1033,3,28,14,0,1032,
1034,3,24,12,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,21,1,0,0,0,1035,
1037,5,171,0,0,1036,1038,5,199,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
1039,1,0,0,0,1039,1040,5,109,0,0,1040,1041,5,141,0,0,1041,23,1,0,0,0,1042,
1044,5,199,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
1046,3,26,13,0,1046,1049,3,28,14,0,1047,1048,5,121,0,0,1048,1050,3,28,14,
0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1094,1,0,0,0,1051,1053,5,199,
0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1056,5,158,
0,0,1055,1057,5,79,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1058,1,0,
0,0,1058,1094,3,82,41,0,1059,1069,5,172,0,0,1060,1069,5,200,0,0,1061,1062,
5,171,0,0,1062,1069,5,201,0,0,1063,1065,5,171,0,0,1064,1063,1,0,0,0,1064,
1065,1,0,0,0,1065,1066,1,0,0,0,1066,1067,5,199,0,0,1067,1069,5,201,0,0,1068,
1059,1,0,0,0,1068,1060,1,0,0,0,1068,1061,1,0,0,0,1068,1064,1,0,0,0,1069,
1094,1,0,0,0,1070,1072,5,199,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,
1073,1,0,0,0,1073,1075,5,65,0,0,1074,1076,7,0,0,0,1075,1074,1,0,0,0,1075,
1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,28,14,0,1078,1079,5,45,0,0,1079,
1080,3,28,14,0,1080,1094,1,0,0,0,1081,1087,5,1,0,0,1082,1087,5,2,0,0,1083,
1087,5,3,0,0,1084,1087,5,4,0,0,1085,1087,3,22,11,0,1086,1081,1,0,0,0,1086,
1082,1,0,0,0,1086,1083,1,0,0,0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1087,
1088,1,0,0,0,1088,1090,3,28,14,0,1089,1086,1,0,0,0,1090,1091,1,0,0,0,1091,
1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,1043,1,0,0,0,1093,
1052,1,0,0,0,1093,1068,1,0,0,0,1093,1071,1,0,0,0,1093,1089,1,0,0,0,1094,
25,1,0,0,0,1095,1096,7,1,0,0,1096,27,1,0,0,0,1097,1102,3,36,18,0,1098,1099,
7,2,0,0,1099,1101,3,36,18,0,1100,1098,1,0,0,0,1101,1104,1,0,0,0,1102,1100,
1,0,0,0,1102,1103,1,0,0,0,1103,29,1,0,0,0,1104,1102,1,0,0,0,1105,1106,5,
7,0,0,1106,1107,5,7,0,0,1107,31,1,0,0,0,1108,1109,5,7,0,0,1109,1110,5,7,
0,0,1110,1111,5,12,0,0,1111,33,1,0,0,0,1112,1113,5,27,0,0,1113,1114,5,27,
0,0,1114,35,1,0,0,0,1115,1128,3,38,19,0,1116,1124,5,9,0,0,1117,1124,3,30,
15,0,1118,1124,5,10,0,0,1119,1124,3,32,16,0,1120,1124,5,11,0,0,1121,1124,
5,12,0,0,1122,1124,5,33,0,0,1123,1116,1,0,0,0,1123,1117,1,0,0,0,1123,1118,
1,0,0,0,1123,1119,1,0,0,0,1123,1120,1,0,0,0,1123,1121,1,0,0,0,1123,1122,
1,0,0,0,1124,1125,1,0,0,0,1125,1127,3,38,19,0,1126,1123,1,0,0,0,1127,1130,
1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,1139,1,0,0,0,1130,1128,
1,0,0,0,1131,1132,3,34,17,0,1132,1133,3,36,18,0,1133,1140,1,0,0,0,1134,1136,
5,27,0,0,1135,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1135,1,0,0,0,1137,1138,
1,0,0,0,1138,1140,1,0,0,0,1139,1131,1,0,0,0,1139,1135,1,0,0,0,1139,1140,
1,0,0,0,1140,37,1,0,0,0,1141,1146,3,40,20,0,1142,1143,7,3,0,0,1143,1145,
3,40,20,0,1144,1142,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,
1,0,0,0,1147,39,1,0,0,0,1148,1146,1,0,0,0,1149,1154,3,42,21,0,1150,1151,
7,4,0,0,1151,1153,3,42,21,0,1152,1150,1,0,0,0,1153,1156,1,0,0,0,1154,1152,
1,0,0,0,1154,1155,1,0,0,0,1155,41,1,0,0,0,1156,1154,1,0,0,0,1157,1162,3,
44,22,0,1158,1159,5,13,0,0,1159,1161,3,44,22,0,1160,1158,1,0,0,0,1161,1164,
1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,43,1,0,0,0,1164,1162,1,
0,0,0,1165,1170,3,54,27,0,1166,1167,3,46,23,0,1167,1168,3,54,27,0,1168,1170,
1,0,0,0,1169,1165,1,0,0,0,1169,1166,1,0,0,0,1170,45,1,0,0,0,1171,1172,7,
5,0,0,1172,47,1,0,0,0,1173,1182,3,138,69,0,1174,1182,3,132,66,0,1175,1179,
5,23,0,0,1176,1180,3,144,72,0,1177,1180,5,328,0,0,1178,1180,3,802,401,0,
1179,1176,1,0,0,0,1179,1177,1,0,0,0,1179,1178,1,0,0,0,1180,1182,1,0,0,0,
1181,1173,1,0,0,0,1181,1174,1,0,0,0,1181,1175,1,0,0,0,1182,1184,1,0,0,0,
1183,1181,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,
1186,1190,1,0,0,0,1187,1185,1,0,0,0,1188,1189,5,75,0,0,1189,1191,3,800,400,
0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,49,1,0,0,0,1192,1195,3,786,393,
0,1193,1195,3,68,34,0,1194,1192,1,0,0,0,1194,1193,1,0,0,0,1195,1196,1,0,
0,0,1196,1197,3,48,24,0,1197,51,1,0,0,0,1198,1201,3,788,394,0,1199,1201,
3,70,35,0,1200,1198,1,0,0,0,1200,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1203,
3,48,24,0,1203,53,1,0,0,0,1204,1207,3,50,25,0,1205,1207,3,84,42,0,1206,1204,
1,0,0,0,1206,1205,1,0,0,0,1207,55,1,0,0,0,1208,1211,3,52,26,0,1209,1211,
3,84,42,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,57,1,0,0,0,1212,1214,
5,37,0,0,1213,1215,3,112,56,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,
1,0,0,0,1216,1218,5,24,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,
1,0,0,0,1219,1220,5,36,0,0,1220,59,1,0,0,0,1221,1224,3,14,7,0,1222,1223,
5,28,0,0,1223,1225,3,14,7,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,1234,
1,0,0,0,1226,1227,5,24,0,0,1227,1230,3,14,7,0,1228,1229,5,28,0,0,1229,1231,
3,14,7,0,1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,1233,1,0,0,0,1232,1226,
1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,61,1,
0,0,0,1236,1234,1,0,0,0,1237,1239,5,31,0,0,1238,1240,3,60,30,0,1239,1238,
1,0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,1243,5,24,0,0,1242,1241,
1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1245,5,32,0,0,1245,63,1,
0,0,0,1246,1247,3,14,7,0,1247,1248,5,28,0,0,1248,1256,3,14,7,0,1249,1250,
5,24,0,0,1250,1251,3,14,7,0,1251,1252,5,28,0,0,1252,1253,3,14,7,0,1253,1255,
1,0,0,0,1254,1249,1,0,0,0,1255,1258,1,0,0,0,1256,1254,1,0,0,0,1256,1257,
1,0,0,0,1257,65,1,0,0,0,1258,1256,1,0,0,0,1259,1261,5,14,0,0,1260,1262,3,
64,32,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,1265,
5,24,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,
5,15,0,0,1267,67,1,0,0,0,1268,1286,3,142,71,0,1269,1286,3,144,72,0,1270,
1286,3,80,40,0,1271,1286,3,72,36,0,1272,1286,3,76,38,0,1273,1286,3,78,39,
0,1274,1275,3,802,401,0,1275,1278,5,34,0,0,1276,1279,3,828,414,0,1277,1279,
5,325,0,0,1278,1276,1,0,0,0,1278,1277,1,0,0,0,1279,1286,1,0,0,0,1280,1286,
3,208,104,0,1281,1286,3,74,37,0,1282,1286,3,58,29,0,1283,1286,3,62,31,0,
1284,1286,3,66,33,0,1285,1268,1,0,0,0,1285,1269,1,0,0,0,1285,1270,1,0,0,
0,1285,1271,1,0,0,0,1285,1272,1,0,0,0,1285,1273,1,0,0,0,1285,1274,1,0,0,
0,1285,1280,1,0,0,0,1285,1281,1,0,0,0,1285,1282,1,0,0,0,1285,1283,1,0,0,
0,1285,1284,1,0,0,0,1286,69,1,0,0,0,1287,1308,3,142,71,0,1288,1308,3,144,
72,0,1289,1308,3,80,40,0,1290,1308,3,72,36,0,1291,1308,3,78,39,0,1292,1293,
3,802,401,0,1293,1296,5,34,0,0,1294,1297,3,828,414,0,1295,1297,5,325,0,0,
1296,1294,1,0,0,0,1296,1295,1,0,0,0,1297,1308,1,0,0,0,1298,1299,5,25,0,0,
1299,1300,3,232,116,0,1300,1301,5,26,0,0,1301,1308,1,0,0,0,1302,1308,3,208,
104,0,1303,1308,3,74,37,0,1304,1308,3,58,29,0,1305,1308,3,62,31,0,1306,1308,
3,66,33,0,1307,1287,1,0,0,0,1307,1288,1,0,0,0,1307,1289,1,0,0,0,1307,1290,
1,0,0,0,1307,1291,1,0,0,0,1307,1292,1,0,0,0,1307,1298,1,0,0,0,1307,1302,
1,0,0,0,1307,1303,1,0,0,0,1307,1304,1,0,0,0,1307,1305,1,0,0,0,1307,1306,
1,0,0,0,1308,71,1,0,0,0,1309,1310,5,71,0,0,1310,1311,5,25,0,0,1311,1312,
3,14,7,0,1312,1313,5,49,0,0,1313,1314,3,204,102,0,1314,1315,5,26,0,0,1315,
73,1,0,0,0,1316,1317,5,66,0,0,1317,1318,5,25,0,0,1318,1319,3,14,7,0,1319,
1320,5,49,0,0,1320,1321,3,156,78,0,1321,1322,5,26,0,0,1322,75,1,0,0,0,1323,
1324,5,127,0,0,1324,1327,5,25,0,0,1325,1328,3,232,116,0,1326,1328,3,368,
184,0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1330,5,
26,0,0,1330,77,1,0,0,0,1331,1333,5,70,0,0,1332,1334,3,14,7,0,1333,1332,1,
0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1337,3,140,70,0,1336,1335,
1,0,0,0,1337,1338,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,1342,
1,0,0,0,1340,1341,5,113,0,0,1341,1343,3,14,7,0,1342,1340,1,0,0,0,1342,1343,
1,0,0,0,1343,1344,1,0,0,0,1344,1345,5,117,0,0,1345,79,1,0,0,0,1346,1358,
3,110,55,0,1347,1356,5,35,0,0,1348,1349,5,25,0,0,1349,1350,3,14,7,0,1350,
1351,5,26,0,0,1351,1357,1,0,0,0,1352,1353,5,31,0,0,1353,1354,3,6,3,0,1354,
1355,5,32,0,0,1355,1357,1,0,0,0,1356,1348,1,0,0,0,1356,1352,1,0,0,0,1357,
1359,1,0,0,0,1358,1347,1,0,0,0,1358,1359,1,0,0,0,1359,81,1,0,0,0,1360,1361,
3,56,28,0,1361,83,1,0,0,0,1362,1366,3,98,49,0,1363,1366,3,102,51,0,1364,
1366,3,108,54,0,1365,1362,1,0,0,0,1365,1363,1,0,0,0,1365,1364,1,0,0,0,1366,
85,1,0,0,0,1367,1368,5,325,0,0,1368,87,1,0,0,0,1369,1372,3,786,393,0,1370,
1372,5,325,0,0,1371,1369,1,0,0,0,1371,1370,1,0,0,0,1372,89,1,0,0,0,1373,
1374,3,14,7,0,1374,1375,5,49,0,0,1375,1376,3,88,44,0,1376,91,1,0,0,0,1377,
1382,3,90,45,0,1378,1379,5,24,0,0,1379,1381,3,90,45,0,1380,1378,1,0,0,0,
1381,1384,1,0,0,0,1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,93,1,0,0,0,1384,
1382,1,0,0,0,1385,1386,3,14,7,0,1386,1387,5,24,0,0,1387,1390,3,86,43,0,1388,
1389,5,219,0,0,1389,1391,3,92,46,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,
95,1,0,0,0,1392,1397,5,120,0,0,1393,1397,5,201,0,0,1394,1395,5,97,0,0,1395,
1397,3,14,7,0,1396,1392,1,0,0,0,1396,1393,1,0,0,0,1396,1394,1,0,0,0,1397,
97,1,0,0,0,1398,1399,5,176,0,0,1399,1400,5,25,0,0,1400,1403,3,94,47,0,1401,
1402,5,255,0,0,1402,1404,3,156,78,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,
1404,1411,1,0,0,0,1405,1406,3,96,48,0,1406,1407,5,207,0,0,1407,1408,7,6,
0,0,1408,1410,1,0,0,0,1409,1405,1,0,0,0,1410,1413,1,0,0,0,1411,1409,1,0,
0,0,1411,1412,1,0,0,0,1412,1414,1,0,0,0,1413,1411,1,0,0,0,1414,1415,5,26,
0,0,1415,99,1,0,0,0,1416,1417,7,7,0,0,1417,1418,5,207,0,0,1418,1419,5,120,
0,0,1419,101,1,0,0,0,1420,1421,5,174,0,0,1421,1422,5,25,0,0,1422,1424,3,
94,47,0,1423,1425,3,100,50,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,
1,0,0,0,1426,1427,5,26,0,0,1427,103,1,0,0,0,1428,1430,5,322,0,0,1429,1431,
5,48,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1440,1,0,0,0,1432,1434,
5,321,0,0,1433,1435,7,8,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1437,
1,0,0,0,1436,1438,5,48,0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1440,
1,0,0,0,1439,1428,1,0,0,0,1439,1432,1,0,0,0,1440,105,1,0,0,0,1441,1448,5,
120,0,0,1442,1448,5,201,0,0,1443,1444,5,114,0,0,1444,1448,5,48,0,0,1445,
1446,5,114,0,0,1446,1448,5,203,0,0,1447,1441,1,0,0,0,1447,1442,1,0,0,0,1447,
1443,1,0,0,0,1447,1445,1,0,0,0,1448,107,1,0,0,0,1449,1450,5,175,0,0,1450,
1451,5,25,0,0,1451,1455,3,94,47,0,1452,1453,3,104,52,0,1453,1454,5,323,0,
0,1454,1456,1,0,0,0,1455,1452,1,0,0,0,1455,1456,1,0,0,0,1456,1461,1,0,0,
0,1457,1458,3,106,53,0,1458,1459,5,207,0,0,1459,1460,5,114,0,0,1460,1462,
1,0,0,0,1461,1457,1,0,0,0,1461,1462,1,0,0,0,1462,1467,1,0,0,0,1463,1464,
3,106,53,0,1464,1465,5,207,0,0,1465,1466,5,120,0,0,1466,1468,1,0,0,0,1467,
1463,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1470,5,26,0,0,1470,
109,1,0,0,0,1471,1473,5,25,0,0,1472,1474,3,130,65,0,1473,1472,1,0,0,0,1473,
1474,1,0,0,0,1474,1476,1,0,0,0,1475,1477,5,24,0,0,1476,1475,1,0,0,0,1476,
1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,5,26,0,0,1479,111,1,0,0,0,1480,
1485,3,14,7,0,1481,1482,5,24,0,0,1482,1484,3,14,7,0,1483,1481,1,0,0,0,1484,
1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,113,1,0,0,0,1487,1485,
1,0,0,0,1488,1489,5,25,0,0,1489,1494,3,800,400,0,1490,1491,5,24,0,0,1491,
1493,3,800,400,0,1492,1490,1,0,0,0,1493,1496,1,0,0,0,1494,1492,1,0,0,0,1494,
1495,1,0,0,0,1495,1497,1,0,0,0,1496,1494,1,0,0,0,1497,1498,5,26,0,0,1498,
115,1,0,0,0,1499,1502,3,144,72,0,1500,1502,3,800,400,0,1501,1499,1,0,0,0,
1501,1500,1,0,0,0,1502,117,1,0,0,0,1503,1504,5,25,0,0,1504,1509,3,116,58,
0,1505,1506,5,24,0,0,1506,1508,3,116,58,0,1507,1505,1,0,0,0,1508,1511,1,
0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1512,1,0,0,0,1511,1509,1,
0,0,0,1512,1513,5,26,0,0,1513,119,1,0,0,0,1514,1515,3,824,412,0,1515,1516,
3,800,400,0,1516,121,1,0,0,0,1517,1518,3,800,400,0,1518,1519,5,23,0,0,1519,
1520,3,800,400,0,1520,1523,1,0,0,0,1521,1523,3,814,407,0,1522,1517,1,0,0,
0,1522,1521,1,0,0,0,1523,123,1,0,0,0,1524,1529,3,120,60,0,1525,1526,5,24,
0,0,1526,1528,3,120,60,0,1527,1525,1,0,0,0,1528,1531,1,0,0,0,1529,1527,1,
0,0,0,1529,1530,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1532,1534,5,
24,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,125,1,0,0,0,1535,1540,3,
122,61,0,1536,1537,5,24,0,0,1537,1539,3,122,61,0,1538,1536,1,0,0,0,1539,
1542,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1544,1,0,0,0,1542,
1540,1,0,0,0,1543,1545,5,24,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,
127,1,0,0,0,1546,1549,3,14,7,0,1547,1548,5,49,0,0,1548,1550,3,802,401,0,
1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,129,1,0,0,0,1551,1556,3,128,64,
0,1552,1553,5,24,0,0,1553,1555,3,128,64,0,1554,1552,1,0,0,0,1555,1558,1,
0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,131,1,0,0,0,1558,1556,1,0,
0,0,1559,1566,5,25,0,0,1560,1561,3,252,126,0,1561,1563,3,130,65,0,1562,1564,
5,24,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1567,1,0,0,0,1565,1567,
5,19,0,0,1566,1560,1,0,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1568,
1,0,0,0,1568,1569,5,26,0,0,1569,1570,3,134,67,0,1570,133,1,0,0,0,1571,1574,
3,722,361,0,1572,1574,3,724,362,0,1573,1571,1,0,0,0,1573,1572,1,0,0,0,1573,
1574,1,0,0,0,1574,1577,1,0,0,0,1575,1576,5,216,0,0,1576,1578,3,726,363,0,
1577,1575,1,0,0,0,1577,1578,1,0,0,0,1578,135,1,0,0,0,1579,1580,3,802,401,
0,1580,1581,5,34,0,0,1581,1582,3,802,401,0,1582,1588,1,0,0,0,1583,1588,3,
806,403,0,1584,1588,3,144,72,0,1585,1586,5,130,0,0,1586,1588,5,143,0,0,1587,
1579,1,0,0,0,1587,1583,1,0,0,0,1587,1584,1,0,0,0,1587,1585,1,0,0,0,1588,
1589,1,0,0,0,1589,1590,3,132,66,0,1590,137,1,0,0,0,1591,1592,5,37,0,0,1592,
1593,3,14,7,0,1593,1594,5,36,0,0,1594,139,1,0,0,0,1595,1596,5,318,0,0,1596,
1597,3,14,7,0,1597,1598,5,293,0,0,1598,1599,3,14,7,0,1599,141,1,0,0,0,1600,
1611,3,864,432,0,1601,1611,3,862,431,0,1602,1611,5,325,0,0,1603,1611,5,331,
0,0,1604,1611,5,201,0,0,1605,1611,5,91,0,0,1606,1611,5,90,0,0,1607,1611,
5,92,0,0,1608,1611,3,860,430,0,1609,1611,5,115,0,0,1610,1600,1,0,0,0,1610,
1601,1,0,0,0,1610,1602,1,0,0,0,1610,1603,1,0,0,0,1610,1604,1,0,0,0,1610,
1605,1,0,0,0,1610,1606,1,0,0,0,1610,1607,1,0,0,0,1610,1608,1,0,0,0,1610,
1609,1,0,0,0,1611,143,1,0,0,0,1612,1616,5,30,0,0,1613,1617,3,802,401,0,1614,
1617,5,299,0,0,1615,1617,5,132,0,0,1616,1613,1,0,0,0,1616,1614,1,0,0,0,1616,
1615,1,0,0,0,1617,145,1,0,0,0,1618,1620,3,144,72,0,1619,1621,5,27,0,0,1620,
1619,1,0,0,0,1620,1621,1,0,0,0,1621,147,1,0,0,0,1622,1627,3,144,72,0,1623,
1624,5,24,0,0,1624,1626,3,144,72,0,1625,1623,1,0,0,0,1626,1629,1,0,0,0,1627,
1625,1,0,0,0,1627,1628,1,0,0,0,1628,149,1,0,0,0,1629,1627,1,0,0,0,1630,1633,
3,144,72,0,1631,1632,5,49,0,0,1632,1634,3,144,72,0,1633,1631,1,0,0,0,1633,
1634,1,0,0,0,1634,151,1,0,0,0,1635,1640,3,150,75,0,1636,1637,5,24,0,0,1637,
1639,3,150,75,0,1638,1636,1,0,0,0,1639,1642,1,0,0,0,1640,1638,1,0,0,0,1640,
1641,1,0,0,0,1641,153,1,0,0,0,1642,1640,1,0,0,0,1643,1645,7,3,0,0,1644,1643,
1,0,0,0,1644,1645,1,0,0,0,1645,1648,1,0,0,0,1646,1649,3,864,432,0,1647,1649,
3,862,431,0,1648,1646,1,0,0,0,1648,1647,1,0,0,0,1649,155,1,0,0,0,1650,1651,
3,818,409,0,1651,157,1,0,0,0,1652,1655,3,864,432,0,1653,1655,3,144,72,0,
1654,1652,1,0,0,0,1654,1653,1,0,0,0,1655,159,1,0,0,0,1656,1660,3,782,391,
0,1657,1660,5,325,0,0,1658,1660,3,144,72,0,1659,1656,1,0,0,0,1659,1657,1,
0,0,0,1659,1658,1,0,0,0,1660,161,1,0,0,0,1661,1662,3,160,80,0,1662,1663,
5,28,0,0,1663,1664,3,204,102,0,1664,163,1,0,0,0,1665,1666,3,160,80,0,1666,
1671,3,204,102,0,1667,1669,5,199,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,
1669,1670,1,0,0,0,1670,1672,5,201,0,0,1671,1668,1,0,0,0,1671,1672,1,0,0,
0,1672,1678,1,0,0,0,1673,1674,3,204,102,0,1674,1675,5,49,0,0,1675,1676,3,
160,80,0,1676,1678,1,0,0,0,1677,1665,1,0,0,0,1677,1673,1,0,0,0,1678,165,
1,0,0,0,1679,1680,3,160,80,0,1680,1681,5,28,0,0,1681,1683,1,0,0,0,1682,1679,
1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1685,3,204,102,0,1685,167,
1,0,0,0,1686,1690,3,166,83,0,1687,1688,5,31,0,0,1688,1689,5,58,0,0,1689,
1691,5,32,0,0,1690,1687,1,0,0,0,1690,1691,1,0,0,0,1691,169,1,0,0,0,1692,
1697,3,168,84,0,1693,1694,5,24,0,0,1694,1696,3,168,84,0,1695,1693,1,0,0,
0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,171,1,0,0,0,
1699,1697,1,0,0,0,1700,1701,5,95,0,0,1701,1702,5,25,0,0,1702,1703,3,158,
79,0,1703,1704,5,24,0,0,1704,1705,3,158,79,0,1705,1706,5,26,0,0,1706,173,
1,0,0,0,1707,1708,5,211,0,0,1708,1709,5,5,0,0,1709,1710,3,204,102,0,1710,
1711,5,7,0,0,1711,175,1,0,0,0,1712,1729,5,300,0,0,1713,1725,5,5,0,0,1714,
1719,3,204,102,0,1715,1716,5,24,0,0,1716,1718,3,204,102,0,1717,1715,1,0,
0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,1723,1,0,
0,0,1721,1719,1,0,0,0,1722,1724,5,24,0,0,1723,1722,1,0,0,0,1723,1724,1,0,
0,0,1724,1726,1,0,0,0,1725,1714,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,
0,0,1727,1730,5,7,0,0,1728,1730,5,4,0,0,1729,1713,1,0,0,0,1729,1728,1,0,
0,0,1730,177,1,0,0,0,1731,1748,5,279,0,0,1732,1744,5,5,0,0,1733,1738,3,162,
81,0,1734,1735,5,24,0,0,1735,1737,3,162,81,0,1736,1734,1,0,0,0,1737,1740,
1,0,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,0,1739,1742,1,0,0,0,1740,1738,
1,0,0,0,1741,1743,5,24,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1745,
1,0,0,0,1744,1733,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1749,
5,7,0,0,1747,1749,5,4,0,0,1748,1732,1,0,0,0,1748,1747,1,0,0,0,1749,179,1,
0,0,0,1750,1751,5,315,0,0,1751,1752,5,5,0,0,1752,1757,3,166,83,0,1753,1754,
5,24,0,0,1754,1756,3,166,83,0,1755,1753,1,0,0,0,1756,1759,1,0,0,0,1757,1755,
1,0,0,0,1757,1758,1,0,0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,1760,1762,
5,24,0,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1764,
5,7,0,0,1764,181,1,0,0,0,1765,1766,5,183,0,0,1766,1767,5,5,0,0,1767,1768,
3,204,102,0,1768,1769,5,7,0,0,1769,183,1,0,0,0,1770,1771,5,278,0,0,1771,
1772,5,5,0,0,1772,1773,3,204,102,0,1773,1774,5,7,0,0,1774,185,1,0,0,0,1775,
1776,5,137,0,0,1776,1777,5,5,0,0,1777,1778,3,204,102,0,1778,1779,5,7,0,0,
1779,187,1,0,0,0,1780,1781,5,105,0,0,1781,1782,5,5,0,0,1782,1783,3,204,102,
0,1783,1784,5,24,0,0,1784,1785,3,204,102,0,1785,1786,5,7,0,0,1786,189,1,
0,0,0,1787,1788,5,271,0,0,1788,1789,5,5,0,0,1789,1790,3,204,102,0,1790,1791,
5,7,0,0,1791,191,1,0,0,0,1792,1793,5,118,0,0,1793,1794,5,5,0,0,1794,1799,
3,160,80,0,1795,1796,5,24,0,0,1796,1798,3,160,80,0,1797,1795,1,0,0,0,1798,
1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1803,1,0,0,0,1801,
1799,1,0,0,0,1802,1804,5,24,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,
1805,1,0,0,0,1805,1806,5,7,0,0,1806,193,1,0,0,0,1807,1808,5,248,0,0,1808,
1809,5,5,0,0,1809,1810,3,160,80,0,1810,1811,5,7,0,0,1811,195,1,0,0,0,1812,
1813,5,290,0,0,1813,1814,5,5,0,0,1814,1815,3,204,102,0,1815,1816,5,24,0,
0,1816,1817,3,160,80,0,1817,1818,5,7,0,0,1818,197,1,0,0,0,1819,1820,5,68,
0,0,1820,1821,5,5,0,0,1821,1823,5,25,0,0,1822,1824,3,170,85,0,1823,1822,
1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,1827,5,24,0,0,1826,1825,
1,0,0,0,1826,1827,1,0,0,0,1827,1832,1,0,0,0,1828,1829,5,37,0,0,1829,1830,
3,170,85,0,1830,1831,5,36,0,0,1831,1833,1,0,0,0,1832,1828,1,0,0,0,1832,1833,
1,0,0,0,1833,1834,1,0,0,0,1834,1835,5,26,0,0,1835,1836,5,35,0,0,1836,1837,
3,204,102,0,1837,1838,5,7,0,0,1838,199,1,0,0,0,1839,1853,3,174,87,0,1840,
1853,3,176,88,0,1841,1853,3,178,89,0,1842,1853,3,180,90,0,1843,1853,3,182,
91,0,1844,1853,3,184,92,0,1845,1853,3,186,93,0,1846,1853,3,188,94,0,1847,
1853,3,190,95,0,1848,1853,3,192,96,0,1849,1853,3,194,97,0,1850,1853,3,196,
98,0,1851,1853,3,198,99,0,1852,1839,1,0,0,0,1852,1840,1,0,0,0,1852,1841,
1,0,0,0,1852,1842,1,0,0,0,1852,1843,1,0,0,0,1852,1844,1,0,0,0,1852,1845,
1,0,0,0,1852,1846,1,0,0,0,1852,1847,1,0,0,0,1852,1848,1,0,0,0,1852,1849,
1,0,0,0,1852,1850,1,0,0,0,1852,1851,1,0,0,0,1853,1857,1,0,0,0,1854,1856,
5,27,0,0,1855,1854,1,0,0,0,1856,1859,1,0,0,0,1857,1855,1,0,0,0,1857,1858,
1,0,0,0,1858,201,1,0,0,0,1859,1857,1,0,0,0,1860,1872,3,200,100,0,1861,1864,
3,172,86,0,1862,1864,3,156,78,0,1863,1861,1,0,0,0,1863,1862,1,0,0,0,1864,
1868,1,0,0,0,1865,1867,5,27,0,0,1866,1865,1,0,0,0,1867,1870,1,0,0,0,1868,
1866,1,0,0,0,1868,1869,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1871,
1860,1,0,0,0,1871,1863,1,0,0,0,1872,203,1,0,0,0,1873,1876,3,202,101,0,1874,
1876,3,144,72,0,1875,1873,1,0,0,0,1875,1874,1,0,0,0,1876,205,1,0,0,0,1877,
1878,5,325,0,0,1878,207,1,0,0,0,1879,1880,5,315,0,0,1880,1881,5,25,0,0,1881,
1882,3,14,7,0,1882,1883,5,24,0,0,1883,1884,3,14,7,0,1884,1885,5,24,0,0,1885,
1886,3,14,7,0,1886,1887,5,26,0,0,1887,1903,1,0,0,0,1888,1889,5,118,0,0,1889,
1890,5,25,0,0,1890,1891,3,14,7,0,1891,1892,5,24,0,0,1892,1893,3,14,7,0,1893,
1894,5,26,0,0,1894,1903,1,0,0,0,1895,1896,5,68,0,0,1896,1897,5,25,0,0,1897,
1898,3,14,7,0,1898,1899,5,24,0,0,1899,1900,3,14,7,0,1900,1901,5,26,0,0,1901,
1903,1,0,0,0,1902,1879,1,0,0,0,1902,1888,1,0,0,0,1902,1895,1,0,0,0,1903,
209,1,0,0,0,1904,1905,5,96,0,0,1905,1906,3,144,72,0,1906,1907,5,49,0,0,1907,
1910,3,202,101,0,1908,1909,5,1,0,0,1909,1911,3,142,71,0,1910,1908,1,0,0,
0,1910,1911,1,0,0,0,1911,211,1,0,0,0,1912,1914,5,23,0,0,1913,1912,1,0,0,
0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1920,3,800,400,0,1916,1917,5,
23,0,0,1917,1919,3,800,400,0,1918,1916,1,0,0,0,1919,1922,1,0,0,0,1920,1918,
1,0,0,0,1920,1921,1,0,0,0,1921,213,1,0,0,0,1922,1920,1,0,0,0,1923,1924,5,
157,0,0,1924,1925,3,212,106,0,1925,1926,5,282,0,0,1926,1927,3,152,76,0,1927,
215,1,0,0,0,1928,1929,5,129,0,0,1929,1930,3,148,74,0,1930,217,1,0,0,0,1931,
1934,3,144,72,0,1932,1934,5,115,0,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,
1934,1935,1,0,0,0,1935,1937,5,25,0,0,1936,1938,3,112,56,0,1937,1936,1,0,
0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,5,26,0,0,1940,219,1,0,
0,0,1941,1942,5,63,0,0,1942,1943,3,632,316,0,1943,1944,5,117,0,0,1944,1945,
5,110,0,0,1945,221,1,0,0,0,1946,1949,5,110,0,0,1947,1950,3,218,109,0,1948,
1950,3,220,110,0,1949,1947,1,0,0,0,1949,1948,1,0,0,0,1950,223,1,0,0,0,1951,
1952,5,227,0,0,1952,1953,3,830,415,0,1953,1967,3,800,400,0,1954,1955,5,1,
0,0,1955,1968,3,226,113,0,1956,1957,5,25,0,0,1957,1962,3,226,113,0,1958,
1959,5,24,0,0,1959,1961,3,226,113,0,1960,1958,1,0,0,0,1961,1964,1,0,0,0,
1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1965,1,0,0,0,1964,1962,1,0,0,0,
1965,1966,5,26,0,0,1966,1968,1,0,0,0,1967,1954,1,0,0,0,1967,1956,1,0,0,0,
1967,1968,1,0,0,0,1968,225,1,0,0,0,1969,1975,3,154,77,0,1970,1975,3,782,
391,0,1971,1975,5,325,0,0,1972,1975,3,860,430,0,1973,1975,3,144,72,0,1974,
1969,1,0,0,0,1974,1970,1,0,0,0,1974,1971,1,0,0,0,1974,1972,1,0,0,0,1974,
1973,1,0,0,0,1975,227,1,0,0,0,1976,1978,3,14,7,0,1977,1979,7,9,0,0,1978,
1977,1,0,0,0,1978,1979,1,0,0,0,1979,229,1,0,0,0,1980,1985,3,228,114,0,1981,
1982,5,24,0,0,1982,1984,3,228,114,0,1983,1981,1,0,0,0,1984,1987,1,0,0,0,
1985,1983,1,0,0,0,1985,1986,1,0,0,0,1986,231,1,0,0,0,1987,1985,1,0,0,0,1988,
1994,3,236,118,0,1989,1990,3,238,119,0,1990,1991,3,236,118,0,1991,1993,1,
0,0,0,1992,1989,1,0,0,0,1993,1996,1,0,0,0,1994,1992,1,0,0,0,1994,1995,1,
0,0,0,1995,233,1,0,0,0,1996,1994,1,0,0,0,1997,2003,3,240,120,0,1998,1999,
3,238,119,0,1999,2000,3,236,118,0,2000,2002,1,0,0,0,2001,1998,1,0,0,0,2002,
2005,1,0,0,0,2003,2001,1,0,0,0,2003,2004,1,0,0,0,2004,235,1,0,0,0,2005,2003,
1,0,0,0,2006,2012,3,240,120,0,2007,2008,5,25,0,0,2008,2009,3,240,120,0,2009,
2010,5,26,0,0,2010,2012,1,0,0,0,2011,2006,1,0,0,0,2011,2007,1,0,0,0,2012,
237,1,0,0,0,2013,2015,5,304,0,0,2014,2016,5,42,0,0,2015,2014,1,0,0,0,2015,
2016,1,0,0,0,2016,2020,1,0,0,0,2017,2020,5,169,0,0,2018,2020,5,123,0,0,2019,
2013,1,0,0,0,2019,2017,1,0,0,0,2019,2018,1,0,0,0,2020,239,1,0,0,0,2021,2028,
3,242,121,0,2022,2023,5,182,0,0,2023,2026,3,14,7,0,2024,2025,7,10,0,0,2025,
2027,3,14,7,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,
2022,1,0,0,0,2028,2029,1,0,0,0,2029,241,1,0,0,0,2030,2032,5,108,0,0,2031,
2030,1,0,0,0,2031,2032,1,0,0,0,2032,2036,1,0,0,0,2033,2037,3,244,122,0,2034,
2037,3,250,125,0,2035,2037,3,254,127,0,2036,2033,1,0,0,0,2036,2034,1,0,0,
0,2036,2035,1,0,0,0,2037,2041,1,0,0,0,2038,2039,5,170,0,0,2039,2040,5,253,
0,0,2040,2042,3,116,58,0,2041,2038,1,0,0,0,2041,2042,1,0,0,0,2042,243,1,
0,0,0,2043,2045,5,232,0,0,2044,2046,5,278,0,0,2045,2044,1,0,0,0,2045,2046,
1,0,0,0,2046,2047,1,0,0,0,2047,2052,3,346,173,0,2048,2049,5,24,0,0,2049,
2051,3,346,173,0,2050,2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,
2053,1,0,0,0,2053,2077,1,0,0,0,2054,2052,1,0,0,0,2055,2056,5,312,0,0,2056,
2059,3,136,68,0,2057,2058,5,49,0,0,2058,2060,3,800,400,0,2059,2057,1,0,0,
0,2059,2060,1,0,0,0,2060,2063,1,0,0,0,2061,2062,5,321,0,0,2062,2064,3,248,
124,0,2063,2061,1,0,0,0,2063,2064,1,0,0,0,2064,2067,1,0,0,0,2065,2066,5,
319,0,0,2066,2068,3,14,7,0,2067,2065,1,0,0,0,2067,2068,1,0,0,0,2068,2071,
1,0,0,0,2069,2070,5,151,0,0,2070,2072,3,14,7,0,2071,2069,1,0,0,0,2071,2072,
1,0,0,0,2072,2075,1,0,0,0,2073,2074,5,51,0,0,2074,2076,3,314,157,0,2075,
2073,1,0,0,0,2075,2076,1,0,0,0,2076,2078,1,0,0,0,2077,2055,1,0,0,0,2077,
2078,1,0,0,0,2078,245,1,0,0,0,2079,2080,3,800,400,0,2080,2081,5,1,0,0,2081,
2082,3,14,7,0,2082,247,1,0,0,0,2083,2088,3,246,123,0,2084,2085,5,24,0,0,
2085,2087,3,246,123,0,2086,2084,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,
0,0,2088,2089,1,0,0,0,2089,249,1,0,0,0,2090,2088,1,0,0,0,2091,2092,5,237,
0,0,2092,2097,3,346,173,0,2093,2094,5,24,0,0,2094,2096,3,346,173,0,2095,
2093,1,0,0,0,2096,2099,1,0,0,0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,
2102,1,0,0,0,2099,2097,1,0,0,0,2100,2101,5,229,0,0,2101,2103,3,230,115,0,
2102,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,2105,5,207,0,
0,2105,2106,3,124,62,0,2106,2108,5,312,0,0,2107,2109,5,42,0,0,2108,2107,
1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2113,3,136,68,0,2111,2112,
5,49,0,0,2112,2114,3,800,400,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,
2117,1,0,0,0,2115,2116,5,319,0,0,2116,2118,3,14,7,0,2117,2115,1,0,0,0,2117,
2118,1,0,0,0,2118,2121,1,0,0,0,2119,2120,5,151,0,0,2120,2122,3,14,7,0,2121,
2119,1,0,0,0,2121,2122,1,0,0,0,2122,2125,1,0,0,0,2123,2124,5,51,0,0,2124,
2126,3,314,157,0,2125,2123,1,0,0,0,2125,2126,1,0,0,0,2126,251,1,0,0,0,2127,
2129,7,11,0,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,253,1,0,0,0,2130,
2131,5,141,0,0,2131,2133,3,338,169,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,
2133,2134,1,0,0,0,2134,2136,5,269,0,0,2135,2137,5,278,0,0,2136,2135,1,0,
0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2139,3,252,126,0,2139,2144,
3,336,168,0,2140,2141,5,24,0,0,2141,2143,3,336,168,0,2142,2140,1,0,0,0,2143,
2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,
2144,1,0,0,0,2147,2149,5,24,0,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,
2152,1,0,0,0,2150,2151,5,322,0,0,2151,2153,3,126,63,0,2152,2150,1,0,0,0,
2152,2153,1,0,0,0,2153,2156,1,0,0,0,2154,2155,5,141,0,0,2155,2157,3,338,
169,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,2160,1,0,0,0,2158,2159,5,
319,0,0,2159,2161,3,14,7,0,2160,2158,1,0,0,0,2160,2161,1,0,0,0,2161,2163,
1,0,0,0,2162,2164,3,318,159,0,2163,2162,1,0,0,0,2163,2164,1,0,0,0,2164,2167,
1,0,0,0,2165,2166,5,151,0,0,2166,2168,3,14,7,0,2167,2165,1,0,0,0,2167,2168,
1,0,0,0,2168,2170,1,0,0,0,2169,2171,3,730,365,0,2170,2169,1,0,0,0,2170,2171,
1,0,0,0,2171,2173,1,0,0,0,2172,2174,3,316,158,0,2173,2172,1,0,0,0,2173,2174,
1,0,0,0,2174,255,1,0,0,0,2175,2176,5,189,0,0,2176,2178,5,25,0,0,2177,2179,
3,744,372,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2182,
3,314,157,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2184,1,0,0,0,2183,2185,
3,262,131,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2187,1,0,0,0,2186,2188,
3,258,129,0,2187,2186,1,0,0,0,2187,2188,1,0,0,0,2188,2189,1,0,0,0,2189,2190,
3,268,134,0,2190,2191,5,26,0,0,2191,257,1,0,0,0,2192,2193,5,208,0,0,2193,
2194,5,262,0,0,2194,2195,5,223,0,0,2195,2204,5,187,0,0,2196,2197,5,42,0,
0,2197,2198,5,263,0,0,2198,2199,5,223,0,0,2199,2201,5,187,0,0,2200,2202,
3,260,130,0,2201,2200,1,0,0,0,2201,2202,1,0,0,0,2202,2204,1,0,0,0,2203,2192,
1,0,0,0,2203,2196,1,0,0,0,2204,259,1,0,0,0,2205,2206,5,273,0,0,2206,2207,
5,114,0,0,2207,2215,5,188,0,0,2208,2209,5,206,0,0,2209,2210,5,114,0,0,2210,
2215,5,188,0,0,2211,2212,5,321,0,0,2212,2213,5,307,0,0,2213,2215,5,263,0,
0,2214,2205,1,0,0,0,2214,2208,1,0,0,0,2214,2211,1,0,0,0,2215,261,1,0,0,0,
2216,2217,5,190,0,0,2217,2218,3,264,132,0,2218,263,1,0,0,0,2219,2224,3,266,
133,0,2220,2221,5,24,0,0,2221,2223,3,266,133,0,2222,2220,1,0,0,0,2223,2226,
1,0,0,0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,265,1,0,0,0,2226,2224,1,
0,0,0,2227,2228,3,14,7,0,2228,2229,5,49,0,0,2229,2230,3,800,400,0,2230,267,
1,0,0,0,2231,2232,5,41,0,0,2232,2233,5,187,0,0,2233,2235,3,270,135,0,2234,
2231,1,0,0,0,2234,2235,1,0,0,0,2235,2237,1,0,0,0,2236,2238,3,274,137,0,2237,
2236,1,0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2240,5,222,0,0,2240,
2241,5,25,0,0,2241,2242,3,276,138,0,2242,2244,5,26,0,0,2243,2245,3,290,145,
0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,0,2246,2247,5,100,
0,0,2247,2248,3,302,151,0,2248,269,1,0,0,0,2249,2250,5,274,0,0,2250,2251,
5,295,0,0,2251,2252,5,196,0,0,2252,2269,5,262,0,0,2253,2254,5,274,0,0,2254,
2255,5,221,0,0,2255,2256,5,178,0,0,2256,2269,5,262,0,0,2257,2258,5,274,0,
0,2258,2259,5,295,0,0,2259,2260,5,135,0,0,2260,2269,3,272,136,0,2261,2262,
5,274,0,0,2262,2263,5,295,0,0,2263,2264,5,178,0,0,2264,2269,3,272,136,0,
2265,2266,5,274,0,0,2266,2267,5,295,0,0,2267,2269,3,272,136,0,2268,2249,
1,0,0,0,2268,2253,1,0,0,0,2268,2257,1,0,0,0,2268,2261,1,0,0,0,2268,2265,
1,0,0,0,2269,271,1,0,0,0,2270,2271,3,312,156,0,2271,273,1,0,0,0,2272,2273,
7,12,0,0,2273,275,1,0,0,0,2274,2279,3,278,139,0,2275,2276,5,12,0,0,2276,
2278,3,278,139,0,2277,2275,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,0,2279,
2280,1,0,0,0,2280,277,1,0,0,0,2281,2279,1,0,0,0,2282,2284,3,280,140,0,2283,
2282,1,0,0,0,2284,2285,1,0,0,0,2285,2283,1,0,0,0,2285,2286,1,0,0,0,2286,
279,1,0,0,0,2287,2289,3,284,142,0,2288,2290,3,282,141,0,2289,2288,1,0,0,
0,2289,2290,1,0,0,0,2290,281,1,0,0,0,2291,2293,5,19,0,0,2292,2294,5,27,0,
0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2320,1,0,0,0,2295,2297,5,16,0,
0,2296,2298,5,27,0,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,2320,1,0,0,
0,2299,2301,5,27,0,0,2300,2302,5,27,0,0,2301,2300,1,0,0,0,2301,2302,1,0,
0,0,2302,2320,1,0,0,0,2303,2305,5,31,0,0,2304,2306,3,864,432,0,2305,2304,
1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,2309,5,24,0,0,2308,2310,
3,864,432,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2313,
5,32,0,0,2312,2314,5,27,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2320,
1,0,0,0,2315,2316,5,31,0,0,2316,2317,3,864,432,0,2317,2318,5,32,0,0,2318,
2320,1,0,0,0,2319,2291,1,0,0,0,2319,2295,1,0,0,0,2319,2299,1,0,0,0,2319,
2303,1,0,0,0,2319,2315,1,0,0,0,2320,283,1,0,0,0,2321,2337,3,286,143,0,2322,
2337,5,30,0,0,2323,2337,5,33,0,0,2324,2326,5,25,0,0,2325,2327,3,276,138,
0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,0,0,2328,2337,5,26,0,
0,2329,2330,5,31,0,0,2330,2331,5,17,0,0,2331,2332,3,276,138,0,2332,2333,
5,17,0,0,2333,2334,5,32,0,0,2334,2337,1,0,0,0,2335,2337,3,288,144,0,2336,
2321,1,0,0,0,2336,2322,1,0,0,0,2336,2323,1,0,0,0,2336,2324,1,0,0,0,2336,
2329,1,0,0,0,2336,2335,1,0,0,0,2337,285,1,0,0,0,2338,2339,3,312,156,0,2339,
287,1,0,0,0,2340,2341,5,224,0,0,2341,2342,5,25,0,0,2342,2347,3,276,138,0,
2343,2344,5,24,0,0,2344,2346,3,276,138,0,2345,2343,1,0,0,0,2346,2349,1,0,
0,0,2347,2345,1,0,0,0,2347,2348,1,0,0,0,2348,2350,1,0,0,0,2349,2347,1,0,
0,0,2350,2351,5,26,0,0,2351,289,1,0,0,0,2352,2353,5,281,0,0,2353,2354,3,
292,146,0,2354,291,1,0,0,0,2355,2360,3,294,147,0,2356,2357,5,24,0,0,2357,
2359,3,294,147,0,2358,2356,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,
2361,1,0,0,0,2361,293,1,0,0,0,2362,2360,1,0,0,0,2363,2364,3,296,148,0,2364,
2365,5,1,0,0,2365,2366,5,25,0,0,2366,2367,3,298,149,0,2367,2368,5,26,0,0,
2368,295,1,0,0,0,2369,2370,3,312,156,0,2370,297,1,0,0,0,2371,2376,3,300,
150,0,2372,2373,5,24,0,0,2373,2375,3,300,150,0,2374,2372,1,0,0,0,2375,2378,
1,0,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,299,1,0,0,0,2378,2376,1,
0,0,0,2379,2380,3,312,156,0,2380,301,1,0,0,0,2381,2386,3,304,152,0,2382,
2383,5,24,0,0,2383,2385,3,304,152,0,2384,2382,1,0,0,0,2385,2388,1,0,0,0,
2386,2384,1,0,0,0,2386,2387,1,0,0,0,2387,303,1,0,0,0,2388,2386,1,0,0,0,2389,
2390,3,306,153,0,2390,2391,5,49,0,0,2391,2392,3,308,154,0,2392,305,1,0,0,
0,2393,2394,3,312,156,0,2394,307,1,0,0,0,2395,2396,3,310,155,0,2396,309,
1,0,0,0,2397,2398,3,14,7,0,2398,311,1,0,0,0,2399,2400,3,780,390,0,2400,313,
1,0,0,0,2401,2402,5,213,0,0,2402,2403,5,67,0,0,2403,2404,3,230,115,0,2404,
315,1,0,0,0,2405,2407,5,51,0,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,
2408,1,0,0,0,2408,2409,3,314,157,0,2409,317,1,0,0,0,2410,2412,5,147,0,0,
2411,2413,5,79,0,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,
2414,2415,5,67,0,0,2415,2416,3,252,126,0,2416,2419,3,320,160,0,2417,2418,
5,321,0,0,2418,2420,3,800,400,0,2419,2417,1,0,0,0,2419,2420,1,0,0,0,2420,
319,1,0,0,0,2421,2426,3,322,161,0,2422,2423,5,24,0,0,2423,2425,3,322,161,
0,2424,2422,1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,0,0,0,2426,2427,1,0,0,
0,2427,321,1,0,0,0,2428,2426,1,0,0,0,2429,2435,3,324,162,0,2430,2435,3,328,
164,0,2431,2435,3,330,165,0,2432,2435,3,332,166,0,2433,2435,3,334,167,0,
2434,2429,1,0,0,0,2434,2430,1,0,0,0,2434,2431,1,0,0,0,2434,2432,1,0,0,0,
2434,2433,1,0,0,0,2435,323,1,0,0,0,2436,2437,3,128,64,0,2437,325,1,0,0,0,
2438,2443,3,324,162,0,2439,2440,5,24,0,0,2440,2442,3,324,162,0,2441,2439,
1,0,0,0,2442,2445,1,0,0,0,2443,2441,1,0,0,0,2443,2444,1,0,0,0,2444,327,1,
0,0,0,2445,2443,1,0,0,0,2446,2447,5,261,0,0,2447,2448,5,25,0,0,2448,2449,
3,326,163,0,2449,2450,5,26,0,0,2450,329,1,0,0,0,2451,2452,5,88,0,0,2452,
2453,5,25,0,0,2453,2454,3,326,163,0,2454,2455,5,26,0,0,2455,331,1,0,0,0,
2456,2457,5,148,0,0,2457,2458,5,272,0,0,2458,2459,5,25,0,0,2459,2460,3,320,
160,0,2460,2461,5,26,0,0,2461,333,1,0,0,0,2462,2463,5,152,0,0,2463,2464,
5,25,0,0,2464,2465,3,14,7,0,2465,2466,5,24,0,0,2466,2467,3,14,7,0,2467,2468,
5,24,0,0,2468,2469,3,14,7,0,2469,2470,5,24,0,0,2470,2471,3,14,7,0,2471,2472,
5,26,0,0,2472,335,1,0,0,0,2473,2474,3,824,412,0,2474,2475,5,19,0,0,2475,
2483,1,0,0,0,2476,2480,3,14,7,0,2477,2478,5,49,0,0,2478,2481,3,802,401,0,
2479,2481,3,820,410,0,2480,2477,1,0,0,0,2480,2479,1,0,0,0,2480,2481,1,0,
0,0,2481,2483,1,0,0,0,2482,2473,1,0,0,0,2482,2476,1,0,0,0,2483,337,1,0,0,
0,2484,2486,5,47,0,0,2485,2484,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,
0,2487,2498,3,344,172,0,2488,2490,3,358,179,0,2489,2491,5,47,0,0,2490,2489,
1,0,0,0,2490,2491,1,0,0,0,2491,2492,1,0,0,0,2492,2494,3,344,172,0,2493,2495,
3,360,180,0,2494,2493,1,0,0,0,2494,2495,1,0,0,0,2495,2497,1,0,0,0,2496,2488,
1,0,0,0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,339,1,
0,0,0,2500,2498,1,0,0,0,2501,2504,3,120,60,0,2502,2503,5,49,0,0,2503,2505,
3,800,400,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,341,1,0,0,0,2506,2515,
3,340,170,0,2507,2508,5,25,0,0,2508,2510,3,130,65,0,2509,2511,5,24,0,0,2510,
2509,1,0,0,0,2510,2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,5,26,0,0,2513,
2515,1,0,0,0,2514,2506,1,0,0,0,2514,2507,1,0,0,0,2515,343,1,0,0,0,2516,2526,
3,346,173,0,2517,2524,5,136,0,0,2518,2520,7,13,0,0,2519,2518,1,0,0,0,2519,
2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,5,67,0,0,2522,2525,3,342,171,0,
2523,2525,5,77,0,0,2524,2519,1,0,0,0,2524,2523,1,0,0,0,2525,2527,1,0,0,0,
2526,2517,1,0,0,0,2526,2527,1,0,0,0,2527,345,1,0,0,0,2528,2530,3,348,174,
0,2529,2531,3,256,128,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,2540,1,
0,0,0,2532,2533,5,49,0,0,2533,2536,3,800,400,0,2534,2536,3,820,410,0,2535,
2532,1,0,0,0,2535,2534,1,0,0,0,2536,2538,1,0,0,0,2537,2539,3,114,57,0,2538,
2537,1,0,0,0,2538,2539,1,0,0,0,2539,2541,1,0,0,0,2540,2535,1,0,0,0,2540,
2541,1,0,0,0,2541,2544,1,0,0,0,2542,2545,3,350,175,0,2543,2545,3,352,176,
0,2544,2542,1,0,0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,347,1,0,0,0,
2546,2556,3,638,319,0,2547,2548,5,25,0,0,2548,2549,3,232,116,0,2549,2550,
5,26,0,0,2550,2556,1,0,0,0,2551,2552,5,25,0,0,2552,2553,3,368,184,0,2553,
2554,5,26,0,0,2554,2556,1,0,0,0,2555,2546,1,0,0,0,2555,2547,1,0,0,0,2555,
2551,1,0,0,0,2556,349,1,0,0,0,2557,2558,5,264,0,0,2558,2559,3,14,7,0,2559,
351,1,0,0,0,2560,2561,5,288,0,0,2561,2562,3,354,177,0,2562,2563,5,25,0,0,
2563,2564,3,14,7,0,2564,2566,5,26,0,0,2565,2567,3,356,178,0,2566,2565,1,
0,0,0,2566,2567,1,0,0,0,2567,353,1,0,0,0,2568,2569,7,14,0,0,2569,355,1,0,
0,0,2570,2571,5,244,0,0,2571,2572,5,25,0,0,2572,2573,3,14,7,0,2573,2574,
5,26,0,0,2574,357,1,0,0,0,2575,2600,5,24,0,0,2576,2578,5,195,0,0,2577,2576,
1,0,0,0,2577,2578,1,0,0,0,2578,2596,1,0,0,0,2579,2581,5,179,0,0,2580,2582,
7,15,0,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,2590,1,0,0,0,2583,2585,
5,258,0,0,2584,2586,7,15,0,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2590,
1,0,0,0,2587,2590,5,125,0,0,2588,2590,5,142,0,0,2589,2579,1,0,0,0,2589,2583,
1,0,0,0,2589,2587,1,0,0,0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2592,
1,0,0,0,2591,2593,5,215,0,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2597,
1,0,0,0,2594,2597,5,166,0,0,2595,2597,5,87,0,0,2596,2589,1,0,0,0,2596,2594,
1,0,0,0,2596,2595,1,0,0,0,2597,2598,1,0,0,0,2598,2600,5,173,0,0,2599,2575,
1,0,0,0,2599,2577,1,0,0,0,2600,359,1,0,0,0,2601,2602,5,207,0,0,2602,2606,
3,14,7,0,2603,2604,5,312,0,0,2604,2606,3,118,59,0,2605,2601,1,0,0,0,2605,
2603,1,0,0,0,2606,361,1,0,0,0,2607,2617,5,255,0,0,2608,2618,5,19,0,0,2609,
2614,3,800,400,0,2610,2611,5,24,0,0,2611,2613,3,800,400,0,2612,2610,1,0,
0,0,2613,2616,1,0,0,0,2614,2612,1,0,0,0,2614,2615,1,0,0,0,2615,2618,1,0,
0,0,2616,2614,1,0,0,0,2617,2608,1,0,0,0,2617,2609,1,0,0,0,2618,363,1,0,0,
0,2619,2632,5,167,0,0,2620,2621,5,167,0,0,2621,2622,5,212,0,0,2622,2632,
5,38,0,0,2623,2624,5,167,0,0,2624,2625,5,212,0,0,2625,2632,5,256,0,0,2626,
2627,5,167,0,0,2627,2628,5,212,0,0,2628,2632,5,154,0,0,2629,2632,5,309,0,
0,2630,2632,5,245,0,0,2631,2619,1,0,0,0,2631,2620,1,0,0,0,2631,2623,1,0,
0,0,2631,2626,1,0,0,0,2631,2629,1,0,0,0,2631,2630,1,0,0,0,2632,2633,1,0,
0,0,2633,2634,5,170,0,0,2634,2635,3,654,327,0,2635,2637,3,366,183,0,2636,
2638,3,362,181,0,2637,2636,1,0,0,0,2637,2638,1,0,0,0,2638,365,1,0,0,0,2639,
2641,3,114,57,0,2640,2639,1,0,0,0,2640,2641,1,0,0,0,2641,2642,1,0,0,0,2642,
2646,3,370,185,0,2643,2644,5,97,0,0,2644,2646,5,314,0,0,2645,2640,1,0,0,
0,2645,2643,1,0,0,0,2646,367,1,0,0,0,2647,2648,5,314,0,0,2648,2649,3,372,
186,0,2649,369,1,0,0,0,2650,2653,3,368,184,0,2651,2653,3,232,116,0,2652,
2650,1,0,0,0,2652,2651,1,0,0,0,2653,371,1,0,0,0,2654,2659,3,374,187,0,2655,
2656,5,24,0,0,2656,2658,3,374,187,0,2657,2655,1,0,0,0,2658,2661,1,0,0,0,
2659,2657,1,0,0,0,2659,2660,1,0,0,0,2660,373,1,0,0,0,2661,2659,1,0,0,0,2662,
2663,5,25,0,0,2663,2664,3,112,56,0,2664,2665,5,26,0,0,2665,375,1,0,0,0,2666,
2669,3,112,56,0,2667,2669,3,232,116,0,2668,2666,1,0,0,0,2668,2667,1,0,0,
0,2669,377,1,0,0,0,2670,2673,5,86,0,0,2671,2672,5,212,0,0,2672,2674,5,245,
0,0,2673,2671,1,0,0,0,2673,2674,1,0,0,0,2674,2675,1,0,0,0,2675,2676,5,130,
0,0,2676,2677,5,93,0,0,2677,2681,5,276,0,0,2678,2679,5,153,0,0,2679,2680,
5,199,0,0,2680,2682,5,127,0,0,2681,2678,1,0,0,0,2681,2682,1,0,0,0,2682,2683,
1,0,0,0,2683,2684,3,648,324,0,2684,2685,3,454,227,0,2685,379,1,0,0,0,2686,
2687,5,43,0,0,2687,2688,5,130,0,0,2688,2689,5,93,0,0,2689,2690,5,276,0,0,
2690,2691,3,648,324,0,2691,2696,3,382,191,0,2692,2693,5,24,0,0,2693,2695,
3,382,191,0,2694,2692,1,0,0,0,2695,2698,1,0,0,0,2696,2694,1,0,0,0,2696,2697,
1,0,0,0,2697,381,1,0,0,0,2698,2696,1,0,0,0,2699,2703,3,486,243,0,2700,2703,
3,488,244,0,2701,2703,3,490,245,0,2702,2699,1,0,0,0,2702,2700,1,0,0,0,2702,
2701,1,0,0,0,2703,383,1,0,0,0,2704,2705,5,111,0,0,2705,2706,5,130,0,0,2706,
2707,5,93,0,0,2707,2710,5,276,0,0,2708,2709,5,153,0,0,2709,2711,5,127,0,
0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,2713,3,648,
324,0,2713,385,1,0,0,0,2714,2715,5,86,0,0,2715,2719,5,316,0,0,2716,2717,
5,153,0,0,2717,2718,5,199,0,0,2718,2720,5,127,0,0,2719,2716,1,0,0,0,2719,
2720,1,0,0,0,2720,2721,1,0,0,0,2721,2723,3,648,324,0,2722,2724,3,394,197,
0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2725,1,0,0,0,2725,2726,5,49,0,
0,2726,2727,3,232,116,0,2727,387,1,0,0,0,2728,2729,5,111,0,0,2729,2732,5,
316,0,0,2730,2731,5,153,0,0,2731,2733,5,127,0,0,2732,2730,1,0,0,0,2732,2733,
1,0,0,0,2733,2734,1,0,0,0,2734,2735,3,648,324,0,2735,389,1,0,0,0,2736,2737,
5,309,0,0,2737,2738,5,203,0,0,2738,2739,3,648,324,0,2739,2740,5,25,0,0,2740,
2741,5,301,0,0,2741,2742,3,414,207,0,2742,2744,5,26,0,0,2743,2745,3,394,
197,0,2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,391,1,0,0,0,2746,2747,5,86,
0,0,2747,2751,5,203,0,0,2748,2749,5,153,0,0,2749,2750,5,199,0,0,2750,2752,
5,127,0,0,2751,2748,1,0,0,0,2751,2752,1,0,0,0,2752,2753,1,0,0,0,2753,2754,
3,648,324,0,2754,2755,5,25,0,0,2755,2756,5,301,0,0,2756,2757,3,414,207,0,
2757,2759,5,26,0,0,2758,2760,3,394,197,0,2759,2758,1,0,0,0,2759,2760,1,0,
0,0,2760,393,1,0,0,0,2761,2762,5,321,0,0,2762,2763,3,412,206,0,2763,395,
1,0,0,0,2764,2765,5,43,0,0,2765,2766,5,203,0,0,2766,2767,3,648,324,0,2767,
2768,5,25,0,0,2768,2769,5,301,0,0,2769,2770,3,414,207,0,2770,2771,5,26,0,
0,2771,2772,3,398,199,0,2772,397,1,0,0,0,2773,2774,5,271,0,0,2774,2775,3,
412,206,0,2775,399,1,0,0,0,2776,2777,5,111,0,0,2777,2780,5,203,0,0,2778,
2779,5,153,0,0,2779,2781,5,127,0,0,2780,2778,1,0,0,0,2780,2781,1,0,0,0,2781,
2782,1,0,0,0,2782,2783,3,648,324,0,2783,2784,5,25,0,0,2784,2785,5,301,0,
0,2785,2786,3,414,207,0,2786,2788,5,26,0,0,2787,2789,3,402,201,0,2788,2787,
1,0,0,0,2788,2789,1,0,0,0,2789,401,1,0,0,0,2790,2791,5,321,0,0,2791,2792,
3,412,206,0,2792,403,1,0,0,0,2793,2798,3,828,414,0,2794,2798,3,144,72,0,
2795,2798,5,325,0,0,2796,2798,3,860,430,0,2797,2793,1,0,0,0,2797,2794,1,
0,0,0,2797,2795,1,0,0,0,2797,2796,1,0,0,0,2798,405,1,0,0,0,2799,2800,3,802,
401,0,2800,2801,5,1,0,0,2801,2802,3,404,202,0,2802,407,1,0,0,0,2803,2804,
3,802,401,0,2804,409,1,0,0,0,2805,2808,3,406,203,0,2806,2808,3,408,204,0,
2807,2805,1,0,0,0,2807,2806,1,0,0,0,2808,411,1,0,0,0,2809,2822,3,410,205,
0,2810,2811,5,25,0,0,2811,2816,3,410,205,0,2812,2813,5,24,0,0,2813,2815,
3,410,205,0,2814,2812,1,0,0,0,2815,2818,1,0,0,0,2816,2814,1,0,0,0,2816,2817,
1,0,0,0,2817,2819,1,0,0,0,2818,2816,1,0,0,0,2819,2820,5,26,0,0,2820,2822,
1,0,0,0,2821,2809,1,0,0,0,2821,2810,1,0,0,0,2822,413,1,0,0,0,2823,2824,3,
802,401,0,2824,415,1,0,0,0,2825,2828,5,86,0,0,2826,2827,5,212,0,0,2827,2829,
5,245,0,0,2828,2826,1,0,0,0,2828,2829,1,0,0,0,2829,2838,1,0,0,0,2830,2839,
5,286,0,0,2831,2839,5,289,0,0,2832,2833,5,130,0,0,2833,2839,5,286,0,0,2834,
2835,5,291,0,0,2835,2839,5,286,0,0,2836,2837,5,292,0,0,2837,2839,5,286,0,
0,2838,2830,1,0,0,0,2838,2831,1,0,0,0,2838,2832,1,0,0,0,2838,2834,1,0,0,
0,2838,2836,1,0,0,0,2839,2843,1,0,0,0,2840,2841,5,153,0,0,2841,2842,5,199,
0,0,2842,2844,5,127,0,0,2843,2840,1,0,0,0,2843,2844,1,0,0,0,2844,2845,1,
0,0,0,2845,2846,3,652,326,0,2846,2847,5,25,0,0,2847,2852,3,418,209,0,2848,
2849,5,24,0,0,2849,2851,3,418,209,0,2850,2848,1,0,0,0,2851,2854,1,0,0,0,
2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,
2855,2857,5,24,0,0,2856,2855,1,0,0,0,2856,2857,1,0,0,0,2857,2858,1,0,0,0,
2858,2860,5,26,0,0,2859,2861,3,450,225,0,2860,2859,1,0,0,0,2860,2861,1,0,
0,0,2861,2863,1,0,0,0,2862,2864,3,452,226,0,2863,2862,1,0,0,0,2863,2864,
1,0,0,0,2864,2866,1,0,0,0,2865,2867,3,454,227,0,2866,2865,1,0,0,0,2866,2867,
1,0,0,0,2867,2869,1,0,0,0,2868,2870,3,456,228,0,2869,2868,1,0,0,0,2869,2870,
1,0,0,0,2870,2872,1,0,0,0,2871,2873,3,460,230,0,2872,2871,1,0,0,0,2872,2873,
1,0,0,0,2873,417,1,0,0,0,2874,2881,3,508,254,0,2875,2881,3,516,258,0,2876,
2881,3,518,259,0,2877,2881,3,552,276,0,2878,2881,3,534,267,0,2879,2881,3,
804,402,0,2880,2874,1,0,0,0,2880,2875,1,0,0,0,2880,2876,1,0,0,0,2880,2877,
1,0,0,0,2880,2878,1,0,0,0,2880,2879,1,0,0,0,2881,419,1,0,0,0,2882,2883,5,
86,0,0,2883,2885,3,440,220,0,2884,2886,3,426,213,0,2885,2884,1,0,0,0,2885,
2886,1,0,0,0,2886,2887,1,0,0,0,2887,2888,5,321,0,0,2888,2889,5,25,0,0,2889,
2890,3,442,221,0,2890,2891,5,26,0,0,2891,421,1,0,0,0,2892,2893,5,43,0,0,
2893,2896,3,440,220,0,2894,2897,3,432,216,0,2895,2897,3,436,218,0,2896,2894,
1,0,0,0,2896,2895,1,0,0,0,2897,423,1,0,0,0,2898,2899,5,111,0,0,2899,2900,
3,440,220,0,2900,425,1,0,0,0,2901,2904,5,94,0,0,2902,2904,3,428,214,0,2903,
2901,1,0,0,0,2903,2902,1,0,0,0,2904,427,1,0,0,0,2905,2906,5,25,0,0,2906,
2907,3,430,215,0,2907,2908,5,26,0,0,2908,429,1,0,0,0,2909,2910,5,286,0,0,
2910,2916,3,812,406,0,2911,2912,5,24,0,0,2912,2913,5,286,0,0,2913,2915,3,
812,406,0,2914,2911,1,0,0,0,2915,2918,1,0,0,0,2916,2914,1,0,0,0,2916,2917,
1,0,0,0,2917,431,1,0,0,0,2918,2916,1,0,0,0,2919,2924,3,434,217,0,2920,2921,
5,24,0,0,2921,2923,3,434,217,0,2922,2920,1,0,0,0,2923,2926,1,0,0,0,2924,
2922,1,0,0,0,2924,2925,1,0,0,0,2925,433,1,0,0,0,2926,2924,1,0,0,0,2927,2930,
3,488,244,0,2928,2930,3,490,245,0,2929,2927,1,0,0,0,2929,2928,1,0,0,0,2930,
435,1,0,0,0,2931,2936,3,438,219,0,2932,2933,5,24,0,0,2933,2935,3,438,219,
0,2934,2932,1,0,0,0,2935,2938,1,0,0,0,2936,2934,1,0,0,0,2936,2937,1,0,0,
0,2937,437,1,0,0,0,2938,2936,1,0,0,0,2939,2940,5,40,0,0,2940,2950,5,94,0,
0,2941,2942,5,111,0,0,2942,2950,5,94,0,0,2943,2944,5,40,0,0,2944,2945,5,
286,0,0,2945,2950,3,812,406,0,2946,2947,5,111,0,0,2947,2948,5,286,0,0,2948,
2950,3,812,406,0,2949,2939,1,0,0,0,2949,2941,1,0,0,0,2949,2943,1,0,0,0,2949,
2946,1,0,0,0,2950,439,1,0,0,0,2951,2952,5,59,0,0,2952,2953,5,61,0,0,2953,
2954,3,648,324,0,2954,441,1,0,0,0,2955,2960,3,444,222,0,2956,2957,5,24,0,
0,2957,2959,3,444,222,0,2958,2956,1,0,0,0,2959,2962,1,0,0,0,2960,2958,1,
0,0,0,2960,2961,1,0,0,0,2961,443,1,0,0,0,2962,2960,1,0,0,0,2963,2964,3,800,
400,0,2964,2965,5,1,0,0,2965,2966,3,546,273,0,2966,445,1,0,0,0,2967,2968,
5,59,0,0,2968,2970,3,648,324,0,2969,2971,5,160,0,0,2970,2969,1,0,0,0,2970,
2971,1,0,0,0,2971,447,1,0,0,0,2972,2973,5,251,0,0,2973,2976,3,648,324,0,
2974,2975,5,54,0,0,2975,2977,5,325,0,0,2976,2974,1,0,0,0,2976,2977,1,0,0,
0,2977,449,1,0,0,0,2978,2979,5,163,0,0,2979,2980,5,25,0,0,2980,2985,3,650,
325,0,2981,2982,5,24,0,0,2982,2984,3,650,325,0,2983,2981,1,0,0,0,2984,2987,
1,0,0,0,2985,2983,1,0,0,0,2985,2986,1,0,0,0,2986,2988,1,0,0,0,2987,2985,
1,0,0,0,2988,2989,5,26,0,0,2989,451,1,0,0,0,2990,2991,5,218,0,0,2991,2992,
5,67,0,0,2992,2993,5,150,0,0,2993,2994,3,114,57,0,2994,453,1,0,0,0,2995,
2996,5,321,0,0,2996,2997,5,25,0,0,2997,3002,3,458,229,0,2998,2999,5,24,0,
0,2999,3001,3,458,229,0,3000,2998,1,0,0,0,3001,3004,1,0,0,0,3002,3000,1,
0,0,0,3002,3003,1,0,0,0,3003,3005,1,0,0,0,3004,3002,1,0,0,0,3005,3006,5,
26,0,0,3006,455,1,0,0,0,3007,3008,5,289,0,0,3008,3009,3,650,325,0,3009,457,
1,0,0,0,3010,3011,3,800,400,0,3011,3012,5,1,0,0,3012,3013,3,546,273,0,3013,
459,1,0,0,0,3014,3015,5,49,0,0,3015,3016,3,370,185,0,3016,461,1,0,0,0,3017,
3018,5,43,0,0,3018,3019,5,286,0,0,3019,3020,3,652,326,0,3020,3025,3,464,
232,0,3021,3022,5,24,0,0,3022,3024,3,464,232,0,3023,3021,1,0,0,0,3024,3027,
1,0,0,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,463,1,0,0,0,3027,3025,1,
0,0,0,3028,3046,3,474,237,0,3029,3046,3,476,238,0,3030,3046,3,478,239,0,
3031,3046,3,482,241,0,3032,3046,3,484,242,0,3033,3046,3,486,243,0,3034,3046,
3,488,244,0,3035,3046,3,490,245,0,3036,3046,3,492,246,0,3037,3046,3,494,
247,0,3038,3046,3,496,248,0,3039,3046,3,500,250,0,3040,3046,3,502,251,0,
3041,3046,3,504,252,0,3042,3046,3,498,249,0,3043,3046,3,506,253,0,3044,3046,
3,480,240,0,3045,3028,1,0,0,0,3045,3029,1,0,0,0,3045,3030,1,0,0,0,3045,3031,
1,0,0,0,3045,3032,1,0,0,0,3045,3033,1,0,0,0,3045,3034,1,0,0,0,3045,3035,
1,0,0,0,3045,3036,1,0,0,0,3045,3037,1,0,0,0,3045,3038,1,0,0,0,3045,3039,
1,0,0,0,3045,3040,1,0,0,0,3045,3041,1,0,0,0,3045,3042,1,0,0,0,3045,3043,
1,0,0,0,3045,3044,1,0,0,0,3046,465,1,0,0,0,3047,3048,5,43,0,0,3048,3049,
5,130,0,0,3049,3050,5,286,0,0,3050,3051,3,652,326,0,3051,3056,3,468,234,
0,3052,3053,5,24,0,0,3053,3055,3,468,234,0,3054,3052,1,0,0,0,3055,3058,1,
0,0,0,3056,3054,1,0,0,0,3056,3057,1,0,0,0,3057,467,1,0,0,0,3058,3056,1,0,
0,0,3059,3065,3,474,237,0,3060,3065,3,476,238,0,3061,3065,3,486,243,0,3062,
3065,3,488,244,0,3063,3065,3,490,245,0,3064,3059,1,0,0,0,3064,3060,1,0,0,
0,3064,3061,1,0,0,0,3064,3062,1,0,0,0,3064,3063,1,0,0,0,3065,469,1,0,0,0,
3066,3067,5,43,0,0,3067,3068,5,289,0,0,3068,3069,3,648,324,0,3069,3074,3,
472,236,0,3070,3071,5,24,0,0,3071,3073,3,472,236,0,3072,3070,1,0,0,0,3073,
3076,1,0,0,0,3074,3072,1,0,0,0,3074,3075,1,0,0,0,3075,471,1,0,0,0,3076,3074,
1,0,0,0,3077,3080,3,474,237,0,3078,3080,3,476,238,0,3079,3077,1,0,0,0,3079,
3078,1,0,0,0,3080,473,1,0,0,0,3081,3083,5,40,0,0,3082,3084,5,76,0,0,3083,
3082,1,0,0,0,3083,3084,1,0,0,0,3084,3085,1,0,0,0,3085,3086,3,508,254,0,3086,
475,1,0,0,0,3087,3089,5,111,0,0,3088,3090,5,76,0,0,3089,3088,1,0,0,0,3089,
3090,1,0,0,0,3090,3091,1,0,0,0,3091,3092,3,800,400,0,3092,477,1,0,0,0,3093,
3094,5,43,0,0,3094,3095,5,76,0,0,3095,3096,3,800,400,0,3096,3097,5,271,0,
0,3097,3098,3,510,255,0,3098,479,1,0,0,0,3099,3100,5,43,0,0,3100,3101,5,
76,0,0,3101,3102,3,800,400,0,3102,3103,5,111,0,0,3103,3104,5,199,0,0,3104,
3105,5,201,0,0,3105,481,1,0,0,0,3106,3107,5,40,0,0,3107,3108,3,552,276,0,
3108,483,1,0,0,0,3109,3110,5,43,0,0,3110,3111,5,133,0,0,3111,3112,3,800,
400,0,3112,3113,5,271,0,0,3113,3114,3,800,400,0,3114,3115,3,558,279,0,3115,
485,1,0,0,0,3116,3117,5,271,0,0,3117,3118,3,800,400,0,3118,3119,3,546,273,
0,3119,487,1,0,0,0,3120,3121,5,271,0,0,3121,3122,5,25,0,0,3122,3127,3,544,
272,0,3123,3124,5,24,0,0,3124,3126,3,544,272,0,3125,3123,1,0,0,0,3126,3129,
1,0,0,0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,3130,1,0,0,0,3129,3127,
1,0,0,0,3130,3131,5,26,0,0,3131,489,1,0,0,0,3132,3133,5,247,0,0,3133,3134,
5,25,0,0,3134,3139,3,800,400,0,3135,3136,5,24,0,0,3136,3138,3,800,400,0,
3137,3135,1,0,0,0,3138,3141,1,0,0,0,3139,3137,1,0,0,0,3139,3140,1,0,0,0,
3140,3142,1,0,0,0,3141,3139,1,0,0,0,3142,3143,5,26,0,0,3143,491,1,0,0,0,
3144,3145,5,40,0,0,3145,3146,3,518,259,0,3146,493,1,0,0,0,3147,3148,5,111,
0,0,3148,3149,5,161,0,0,3149,3150,3,800,400,0,3150,495,1,0,0,0,3151,3152,
5,243,0,0,3152,3153,5,295,0,0,3153,3154,3,812,406,0,3154,497,1,0,0,0,3155,
3156,5,243,0,0,3156,3157,5,161,0,0,3157,3158,3,800,400,0,3158,3159,5,295,
0,0,3159,3160,3,800,400,0,3160,499,1,0,0,0,3161,3162,5,40,0,0,3162,3163,
3,534,267,0,3163,501,1,0,0,0,3164,3165,5,43,0,0,3165,3166,5,72,0,0,3166,
3167,3,800,400,0,3167,3168,3,542,271,0,3168,503,1,0,0,0,3169,3170,5,111,
0,0,3170,3171,5,72,0,0,3171,3172,3,800,400,0,3172,505,1,0,0,0,3173,3174,
5,43,0,0,3174,3175,5,161,0,0,3175,3176,3,800,400,0,3176,3177,3,564,282,0,
3177,507,1,0,0,0,3178,3179,3,804,402,0,3179,3181,3,204,102,0,3180,3182,3,
510,255,0,3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,3183,1,0,0,0,3183,3184,
3,512,256,0,3184,509,1,0,0,0,3185,3186,5,133,0,0,3186,3187,3,800,400,0,3187,
511,1,0,0,0,3188,3190,5,199,0,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,
3191,1,0,0,0,3191,3193,5,201,0,0,3192,3189,1,0,0,0,3192,3193,1,0,0,0,3193,
3196,1,0,0,0,3194,3195,5,97,0,0,3195,3197,3,14,7,0,3196,3194,1,0,0,0,3196,
3197,1,0,0,0,3197,513,1,0,0,0,3198,3200,3,800,400,0,3199,3201,7,9,0,0,3200,
3199,1,0,0,0,3200,3201,1,0,0,0,3201,515,1,0,0,0,3202,3203,5,230,0,0,3203,
3204,5,177,0,0,3204,3205,5,25,0,0,3205,3210,3,800,400,0,3206,3207,5,24,0,
0,3207,3209,3,800,400,0,3208,3206,1,0,0,0,3209,3212,1,0,0,0,3210,3208,1,
0,0,0,3210,3211,1,0,0,0,3211,3213,1,0,0,0,3212,3210,1,0,0,0,3213,3214,5,
26,0,0,3214,3242,1,0,0,0,3215,3216,5,218,0,0,3216,3217,5,67,0,0,3217,3218,
5,25,0,0,3218,3223,3,800,400,0,3219,3220,5,24,0,0,3220,3222,3,800,400,0,
3221,3219,1,0,0,0,3222,3225,1,0,0,0,3223,3221,1,0,0,0,3223,3224,1,0,0,0,
3224,3226,1,0,0,0,3225,3223,1,0,0,0,3226,3227,5,26,0,0,3227,3242,1,0,0,0,
3228,3229,5,213,0,0,3229,3230,5,67,0,0,3230,3231,5,25,0,0,3231,3236,3,514,
257,0,3232,3233,5,24,0,0,3233,3235,3,514,257,0,3234,3232,1,0,0,0,3235,3238,
1,0,0,0,3236,3234,1,0,0,0,3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,3236,
1,0,0,0,3239,3240,5,26,0,0,3240,3242,1,0,0,0,3241,3202,1,0,0,0,3241,3215,
1,0,0,0,3241,3228,1,0,0,0,3242,517,1,0,0,0,3243,3244,5,161,0,0,3244,3245,
3,800,400,0,3245,3246,3,520,260,0,3246,3247,5,207,0,0,3247,3248,5,25,0,0,
3248,3253,3,804,402,0,3249,3250,5,24,0,0,3250,3252,3,804,402,0,3251,3249,
1,0,0,0,3252,3255,1,0,0,0,3253,3251,1,0,0,0,3253,3254,1,0,0,0,3254,3256,
1,0,0,0,3255,3253,1,0,0,0,3256,3269,5,26,0,0,3257,3258,5,85,0,0,3258,3259,
5,25,0,0,3259,3264,3,804,402,0,3260,3261,5,24,0,0,3261,3263,3,804,402,0,
3262,3260,1,0,0,0,3263,3266,1,0,0,0,3264,3262,1,0,0,0,3264,3265,1,0,0,0,
3265,3267,1,0,0,0,3266,3264,1,0,0,0,3267,3268,5,26,0,0,3268,3270,1,0,0,0,
3269,3257,1,0,0,0,3269,3270,1,0,0,0,3270,3272,1,0,0,0,3271,3273,3,528,264,
0,3272,3271,1,0,0,0,3272,3273,1,0,0,0,3273,519,1,0,0,0,3274,3277,3,522,261,
0,3275,3277,3,524,262,0,3276,3274,1,0,0,0,3276,3275,1,0,0,0,3277,3280,1,
0,0,0,3278,3279,5,312,0,0,3279,3281,3,526,263,0,3280,3278,1,0,0,0,3280,3281,
1,0,0,0,3281,521,1,0,0,0,3282,3284,5,145,0,0,3283,3285,5,305,0,0,3284,3283,
1,0,0,0,3284,3285,1,0,0,0,3285,3287,1,0,0,0,3286,3288,7,16,0,0,3287,3286,
1,0,0,0,3287,3288,1,0,0,0,3288,523,1,0,0,0,3289,3290,5,184,0,0,3290,525,
1,0,0,0,3291,3292,3,800,400,0,3292,527,1,0,0,0,3293,3294,5,321,0,0,3294,
3295,5,25,0,0,3295,3300,3,530,265,0,3296,3297,5,24,0,0,3297,3299,3,530,265,
0,3298,3296,1,0,0,0,3299,3302,1,0,0,0,3300,3298,1,0,0,0,3300,3301,1,0,0,
0,3301,3304,1,0,0,0,3302,3300,1,0,0,0,3303,3305,5,24,0,0,3304,3303,1,0,0,
0,3304,3305,1,0,0,0,3305,3306,1,0,0,0,3306,3307,5,26,0,0,3307,529,1,0,0,
0,3308,3309,3,800,400,0,3309,3310,5,1,0,0,3310,3311,3,532,266,0,3311,531,
1,0,0,0,3312,3317,3,828,414,0,3313,3317,5,325,0,0,3314,3317,3,864,432,0,
3315,3317,3,860,430,0,3316,3312,1,0,0,0,3316,3313,1,0,0,0,3316,3314,1,0,
0,0,3316,3315,1,0,0,0,3317,533,1,0,0,0,3318,3319,5,72,0,0,3319,3320,3,800,
400,0,3320,3321,5,321,0,0,3321,3322,5,25,0,0,3322,3323,3,536,268,0,3323,
3324,5,26,0,0,3324,535,1,0,0,0,3325,3330,3,538,269,0,3326,3327,5,24,0,0,
3327,3329,3,538,269,0,3328,3326,1,0,0,0,3329,3332,1,0,0,0,3330,3328,1,0,
0,0,3330,3331,1,0,0,0,3331,537,1,0,0,0,3332,3330,1,0,0,0,3333,3334,3,800,
400,0,3334,3335,5,1,0,0,3335,3336,3,540,270,0,3336,539,1,0,0,0,3337,3338,
3,14,7,0,3338,541,1,0,0,0,3339,3346,5,107,0,0,3340,3341,5,271,0,0,3341,3342,
5,25,0,0,3342,3343,3,536,268,0,3343,3344,5,26,0,0,3344,3346,1,0,0,0,3345,
3339,1,0,0,0,3345,3340,1,0,0,0,3346,543,1,0,0,0,3347,3348,3,800,400,0,3348,
3349,5,1,0,0,3349,3350,3,546,273,0,3350,545,1,0,0,0,3351,3364,3,782,391,
0,3352,3364,5,325,0,0,3353,3364,3,864,432,0,3354,3364,3,560,280,0,3355,3356,
3,548,274,0,3356,3357,5,207,0,0,3357,3360,3,800,400,0,3358,3359,5,49,0,0,
3359,3361,7,17,0,0,3360,3358,1,0,0,0,3360,3361,1,0,0,0,3361,3364,1,0,0,0,
3362,3364,3,860,430,0,3363,3351,1,0,0,0,3363,3352,1,0,0,0,3363,3353,1,0,
0,0,3363,3354,1,0,0,0,3363,3355,1,0,0,0,3363,3362,1,0,0,0,3364,547,1,0,0,
0,3365,3376,3,14,7,0,3366,3373,3,550,275,0,3367,3368,5,24,0,0,3368,3369,
3,14,7,0,3369,3370,3,550,275,0,3370,3372,1,0,0,0,3371,3367,1,0,0,0,3372,
3375,1,0,0,0,3373,3371,1,0,0,0,3373,3374,1,0,0,0,3374,3377,1,0,0,0,3375,
3373,1,0,0,0,3376,3366,1,0,0,0,3376,3377,1,0,0,0,3377,549,1,0,0,0,3378,3379,
5,295,0,0,3379,3380,5,130,0,0,3380,3381,5,93,0,0,3381,3382,5,276,0,0,3382,
3385,3,800,400,0,3383,3385,5,101,0,0,3384,3378,1,0,0,0,3384,3383,1,0,0,0,
3385,551,1,0,0,0,3386,3387,5,133,0,0,3387,3388,3,800,400,0,3388,3389,3,554,
277,0,3389,553,1,0,0,0,3390,3399,5,25,0,0,3391,3396,3,556,278,0,3392,3393,
5,24,0,0,3393,3395,3,556,278,0,3394,3392,1,0,0,0,3395,3398,1,0,0,0,3396,
3394,1,0,0,0,3396,3397,1,0,0,0,3397,3400,1,0,0,0,3398,3396,1,0,0,0,3399,
3391,1,0,0,0,3399,3400,1,0,0,0,3400,3401,1,0,0,0,3401,3402,5,26,0,0,3402,
555,1,0,0,0,3403,3404,3,800,400,0,3404,3405,5,1,0,0,3405,3406,3,558,279,
0,3406,557,1,0,0,0,3407,3410,5,325,0,0,3408,3410,3,864,432,0,3409,3407,1,
0,0,0,3409,3408,1,0,0,0,3410,559,1,0,0,0,3411,3412,5,25,0,0,3412,3417,3,
562,281,0,3413,3414,5,24,0,0,3414,3416,3,562,281,0,3415,3413,1,0,0,0,3416,
3419,1,0,0,0,3417,3415,1,0,0,0,3417,3418,1,0,0,0,3418,3420,1,0,0,0,3419,
3417,1,0,0,0,3420,3421,5,26,0,0,3421,3424,1,0,0,0,3422,3424,3,562,281,0,
3423,3411,1,0,0,0,3423,3422,1,0,0,0,3424,561,1,0,0,0,3425,3426,5,25,0,0,
3426,3431,3,142,71,0,3427,3428,5,24,0,0,3428,3430,3,142,71,0,3429,3427,1,
0,0,0,3430,3433,1,0,0,0,3431,3429,1,0,0,0,3431,3432,1,0,0,0,3432,3434,1,
0,0,0,3433,3431,1,0,0,0,3434,3435,5,26,0,0,3435,563,1,0,0,0,3436,3440,3,
486,243,0,3437,3440,3,488,244,0,3438,3440,3,490,245,0,3439,3436,1,0,0,0,
3439,3437,1,0,0,0,3439,3438,1,0,0,0,3440,565,1,0,0,0,3441,3446,5,111,0,0,
3442,3447,5,286,0,0,3443,3447,5,289,0,0,3444,3445,5,130,0,0,3445,3447,5,
286,0,0,3446,3442,1,0,0,0,3446,3443,1,0,0,0,3446,3444,1,0,0,0,3447,3450,
1,0,0,0,3448,3449,5,153,0,0,3449,3451,5,127,0,0,3450,3448,1,0,0,0,3450,3451,
1,0,0,0,3451,3452,1,0,0,0,3452,3453,3,652,326,0,3453,567,1,0,0,0,3454,3455,
5,86,0,0,3455,3456,5,311,0,0,3456,3460,3,578,289,0,3457,3459,3,580,290,0,
3458,3457,1,0,0,0,3459,3462,1,0,0,0,3460,3458,1,0,0,0,3460,3461,1,0,0,0,
3461,569,1,0,0,0,3462,3460,1,0,0,0,3463,3464,5,43,0,0,3464,3465,5,311,0,
0,3465,3477,3,578,289,0,3466,3468,5,321,0,0,3467,3466,1,0,0,0,3467,3468,
1,0,0,0,3468,3470,1,0,0,0,3469,3471,3,580,290,0,3470,3469,1,0,0,0,3471,3472,
1,0,0,0,3472,3470,1,0,0,0,3472,3473,1,0,0,0,3473,3478,1,0,0,0,3474,3475,
5,243,0,0,3475,3476,5,295,0,0,3476,3478,3,578,289,0,3477,3467,1,0,0,0,3477,
3474,1,0,0,0,3478,571,1,0,0,0,3479,3480,5,86,0,0,3480,3481,5,147,0,0,3481,
3495,3,578,289,0,3482,3483,5,321,0,0,3483,3484,5,311,0,0,3484,3489,3,578,
289,0,3485,3486,5,24,0,0,3486,3488,3,578,289,0,3487,3485,1,0,0,0,3488,3491,
1,0,0,0,3489,3487,1,0,0,0,3489,3490,1,0,0,0,3490,3493,1,0,0,0,3491,3489,
1,0,0,0,3492,3494,5,24,0,0,3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3496,
1,0,0,0,3495,3482,1,0,0,0,3495,3496,1,0,0,0,3496,573,1,0,0,0,3497,3498,5,
43,0,0,3498,3499,5,147,0,0,3499,3516,3,578,289,0,3500,3501,7,18,0,0,3501,
3502,5,311,0,0,3502,3507,3,578,289,0,3503,3504,5,24,0,0,3504,3506,3,578,
289,0,3505,3503,1,0,0,0,3506,3509,1,0,0,0,3507,3505,1,0,0,0,3507,3508,1,
0,0,0,3508,3511,1,0,0,0,3509,3507,1,0,0,0,3510,3512,5,24,0,0,3511,3510,1,
0,0,0,3511,3512,1,0,0,0,3512,3517,1,0,0,0,3513,3514,5,243,0,0,3514,3515,
5,295,0,0,3515,3517,3,578,289,0,3516,3500,1,0,0,0,3516,3513,1,0,0,0,3517,
575,1,0,0,0,3518,3519,5,111,0,0,3519,3522,7,19,0,0,3520,3521,5,153,0,0,3521,
3523,5,127,0,0,3522,3520,1,0,0,0,3522,3523,1,0,0,0,3523,3524,1,0,0,0,3524,
3529,3,578,289,0,3525,3526,5,24,0,0,3526,3528,3,578,289,0,3527,3525,1,0,
0,0,3528,3531,1,0,0,0,3529,3527,1,0,0,0,3529,3530,1,0,0,0,3530,3533,1,0,
0,0,3531,3529,1,0,0,0,3532,3534,5,24,0,0,3533,3532,1,0,0,0,3533,3534,1,0,
0,0,3534,577,1,0,0,0,3535,3538,3,802,401,0,3536,3538,3,144,72,0,3537,3535,
1,0,0,0,3537,3536,1,0,0,0,3538,579,1,0,0,0,3539,3542,3,582,291,0,3540,3542,
3,584,292,0,3541,3539,1,0,0,0,3541,3540,1,0,0,0,3542,581,1,0,0,0,3543,3545,
5,116,0,0,3544,3543,1,0,0,0,3544,3545,1,0,0,0,3545,3546,1,0,0,0,3546,3547,
5,220,0,0,3547,3548,3,14,7,0,3548,583,1,0,0,0,3549,3550,7,20,0,0,3550,585,
1,0,0,0,3551,3552,5,146,0,0,3552,3553,3,594,297,0,3553,3554,5,207,0,0,3554,
3559,3,804,402,0,3555,3556,5,24,0,0,3556,3558,3,804,402,0,3557,3555,1,0,
0,0,3558,3561,1,0,0,0,3559,3557,1,0,0,0,3559,3560,1,0,0,0,3560,3562,1,0,
0,0,3561,3559,1,0,0,0,3562,3563,5,295,0,0,3563,3568,3,578,289,0,3564,3565,
5,24,0,0,3565,3567,3,578,289,0,3566,3564,1,0,0,0,3567,3570,1,0,0,0,3568,
3566,1,0,0,0,3568,3569,1,0,0,0,3569,3572,1,0,0,0,3570,3568,1,0,0,0,3571,
3573,5,24,0,0,3572,3571,1,0,0,0,3572,3573,1,0,0,0,3573,3577,1,0,0,0,3574,
3575,5,321,0,0,3575,3576,5,146,0,0,3576,3578,5,210,0,0,3577,3574,1,0,0,0,
3577,3578,1,0,0,0,3578,587,1,0,0,0,3579,3583,5,257,0,0,3580,3581,5,146,0,
0,3581,3582,5,210,0,0,3582,3584,5,139,0,0,3583,3580,1,0,0,0,3583,3584,1,
0,0,0,3584,3585,1,0,0,0,3585,3586,3,594,297,0,3586,3587,5,207,0,0,3587,3592,
3,804,402,0,3588,3589,5,24,0,0,3589,3591,3,804,402,0,3590,3588,1,0,0,0,3591,
3594,1,0,0,0,3592,3590,1,0,0,0,3592,3593,1,0,0,0,3593,3595,1,0,0,0,3594,
3592,1,0,0,0,3595,3596,5,141,0,0,3596,3601,3,578,289,0,3597,3598,5,24,0,
0,3598,3600,3,578,289,0,3599,3597,1,0,0,0,3600,3603,1,0,0,0,3601,3599,1,
0,0,0,3601,3602,1,0,0,0,3602,589,1,0,0,0,3603,3601,1,0,0,0,3604,3629,5,82,
0,0,3605,3629,5,183,0,0,3606,3629,5,167,0,0,3607,3629,5,186,0,0,3608,3629,
5,111,0,0,3609,3629,5,146,0,0,3610,3611,5,193,0,0,3611,3629,7,21,0,0,3612,
3613,7,22,0,0,3613,3629,5,262,0,0,3614,3615,7,23,0,0,3615,3629,5,266,0,0,
3616,3618,5,269,0,0,3617,3619,7,24,0,0,3618,3617,1,0,0,0,3618,3619,1,0,0,
0,3619,3629,1,0,0,0,3620,3622,7,25,0,0,3621,3623,5,180,0,0,3622,3621,1,0,
0,0,3622,3623,1,0,0,0,3623,3629,1,0,0,0,3624,3626,5,86,0,0,3625,3627,7,26,
0,0,3626,3625,1,0,0,0,3626,3627,1,0,0,0,3627,3629,1,0,0,0,3628,3604,1,0,
0,0,3628,3605,1,0,0,0,3628,3606,1,0,0,0,3628,3607,1,0,0,0,3628,3608,1,0,
0,0,3628,3609,1,0,0,0,3628,3610,1,0,0,0,3628,3612,1,0,0,0,3628,3614,1,0,
0,0,3628,3616,1,0,0,0,3628,3620,1,0,0,0,3628,3624,1,0,0,0,3629,591,1,0,0,
0,3630,3633,3,590,295,0,3631,3633,5,325,0,0,3632,3630,1,0,0,0,3632,3631,
1,0,0,0,3633,593,1,0,0,0,3634,3639,3,592,296,0,3635,3636,5,24,0,0,3636,3638,
3,592,296,0,3637,3635,1,0,0,0,3638,3641,1,0,0,0,3639,3637,1,0,0,0,3639,3640,
1,0,0,0,3640,3643,1,0,0,0,3641,3639,1,0,0,0,3642,3644,5,24,0,0,3643,3642,
1,0,0,0,3643,3644,1,0,0,0,3644,3650,1,0,0,0,3645,3647,5,42,0,0,3646,3648,
5,231,0,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3650,1,0,0,0,3649,3634,
1,0,0,0,3649,3645,1,0,0,0,3650,595,1,0,0,0,3651,3652,5,86,0,0,3652,3653,
5,248,0,0,3653,3654,5,226,0,0,3654,3655,3,648,324,0,3655,3656,3,454,227,
0,3656,597,1,0,0,0,3657,3658,5,43,0,0,3658,3659,5,248,0,0,3659,3660,5,226,
0,0,3660,3661,3,648,324,0,3661,3666,3,600,300,0,3662,3663,5,24,0,0,3663,
3665,3,600,300,0,3664,3662,1,0,0,0,3665,3668,1,0,0,0,3666,3664,1,0,0,0,3666,
3667,1,0,0,0,3667,599,1,0,0,0,3668,3666,1,0,0,0,3669,3672,3,488,244,0,3670,
3672,3,490,245,0,3671,3669,1,0,0,0,3671,3670,1,0,0,0,3672,601,1,0,0,0,3673,
3674,5,111,0,0,3674,3675,5,248,0,0,3675,3676,5,226,0,0,3676,3677,3,648,324,
0,3677,603,1,0,0,0,3678,3679,5,86,0,0,3679,3680,5,248,0,0,3680,3681,5,226,
0,0,3681,3682,5,74,0,0,3682,3683,3,648,324,0,3683,3684,3,454,227,0,3684,
605,1,0,0,0,3685,3686,5,43,0,0,3686,3687,5,248,0,0,3687,3688,5,226,0,0,3688,
3689,5,74,0,0,3689,3690,3,648,324,0,3690,3695,3,608,304,0,3691,3692,5,24,
0,0,3692,3694,3,608,304,0,3693,3691,1,0,0,0,3694,3697,1,0,0,0,3695,3693,
1,0,0,0,3695,3696,1,0,0,0,3696,607,1,0,0,0,3697,3695,1,0,0,0,3698,3701,3,
488,244,0,3699,3701,3,490,245,0,3700,3698,1,0,0,0,3700,3699,1,0,0,0,3701,
609,1,0,0,0,3702,3703,5,111,0,0,3703,3704,5,248,0,0,3704,3705,5,226,0,0,
3705,3706,5,74,0,0,3706,3707,3,648,324,0,3707,611,1,0,0,0,3708,3709,5,86,
0,0,3709,3710,5,53,0,0,3710,3711,5,246,0,0,3711,3712,3,648,324,0,3712,3713,
5,139,0,0,3713,3718,3,614,307,0,3714,3715,5,24,0,0,3715,3717,3,614,307,0,
3716,3714,1,0,0,0,3717,3720,1,0,0,0,3718,3716,1,0,0,0,3718,3719,1,0,0,0,
3719,3721,1,0,0,0,3720,3718,1,0,0,0,3721,3722,5,321,0,0,3722,3723,5,25,0,
0,3723,3724,3,616,308,0,3724,3725,5,26,0,0,3725,613,1,0,0,0,3726,3727,3,
648,324,0,3727,3728,5,49,0,0,3728,3729,3,648,324,0,3729,615,1,0,0,0,3730,
3735,3,618,309,0,3731,3732,5,24,0,0,3732,3734,3,618,309,0,3733,3731,1,0,
0,0,3734,3737,1,0,0,0,3735,3733,1,0,0,0,3735,3736,1,0,0,0,3736,617,1,0,0,
0,3737,3735,1,0,0,0,3738,3739,3,800,400,0,3739,3740,5,1,0,0,3740,3741,3,
14,7,0,3741,619,1,0,0,0,3742,3743,5,43,0,0,3743,3744,5,53,0,0,3744,3745,
5,246,0,0,3745,3746,3,648,324,0,3746,3751,3,622,311,0,3747,3748,5,24,0,0,
3748,3750,3,622,311,0,3749,3747,1,0,0,0,3750,3753,1,0,0,0,3751,3749,1,0,
0,0,3751,3752,1,0,0,0,3752,621,1,0,0,0,3753,3751,1,0,0,0,3754,3755,3,624,
312,0,3755,623,1,0,0,0,3756,3757,5,271,0,0,3757,3758,5,25,0,0,3758,3759,
3,616,308,0,3759,3760,5,26,0,0,3760,625,1,0,0,0,3761,3762,5,111,0,0,3762,
3763,5,53,0,0,3763,3764,5,246,0,0,3764,3766,3,648,324,0,3765,3767,5,69,0,
0,3766,3765,1,0,0,0,3766,3767,1,0,0,0,3767,627,1,0,0,0,3768,3773,3,146,73,
0,3769,3770,5,24,0,0,3770,3772,3,146,73,0,3771,3769,1,0,0,0,3772,3775,1,
0,0,0,3773,3771,1,0,0,0,3773,3774,1,0,0,0,3774,629,1,0,0,0,3775,3773,1,0,
0,0,3776,3777,5,100,0,0,3777,3778,7,27,0,0,3778,3779,3,144,72,0,3779,3781,
5,25,0,0,3780,3782,3,628,314,0,3781,3780,1,0,0,0,3781,3782,1,0,0,0,3782,
3783,1,0,0,0,3783,3784,5,26,0,0,3784,3785,5,49,0,0,3785,3786,3,632,316,0,
3786,3787,5,117,0,0,3787,3788,5,100,0,0,3788,631,1,0,0,0,3789,3791,5,22,
0,0,3790,3789,1,0,0,0,3791,3794,1,0,0,0,3792,3790,1,0,0,0,3792,3793,1,0,
0,0,3793,3813,1,0,0,0,3794,3792,1,0,0,0,3795,3804,3,12,6,0,3796,3798,5,22,
0,0,3797,3796,1,0,0,0,3798,3799,1,0,0,0,3799,3797,1,0,0,0,3799,3800,1,0,
0,0,3800,3801,1,0,0,0,3801,3803,3,12,6,0,3802,3797,1,0,0,0,3803,3806,1,0,
0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,0,3805,3810,1,0,0,0,3806,3804,1,0,
0,0,3807,3809,5,22,0,0,3808,3807,1,0,0,0,3809,3812,1,0,0,0,3810,3808,1,0,
0,0,3810,3811,1,0,0,0,3811,3814,1,0,0,0,3812,3810,1,0,0,0,3813,3795,1,0,
0,0,3813,3814,1,0,0,0,3814,633,1,0,0,0,3815,3817,5,122,0,0,3816,3815,1,0,
0,0,3816,3817,1,0,0,0,3817,3818,1,0,0,0,3818,3819,5,153,0,0,3819,3820,3,
14,7,0,3820,3823,3,222,111,0,3821,3822,5,113,0,0,3822,3824,3,222,111,0,3823,
3821,1,0,0,0,3823,3824,1,0,0,0,3824,635,1,0,0,0,3825,3827,5,122,0,0,3826,
3825,1,0,0,0,3826,3827,1,0,0,0,3827,3829,1,0,0,0,3828,3830,5,217,0,0,3829,
3828,1,0,0,0,3829,3830,1,0,0,0,3830,3831,1,0,0,0,3831,3832,5,139,0,0,3832,
3833,3,144,72,0,3833,3834,5,158,0,0,3834,3835,3,14,7,0,3835,3838,3,222,111,
0,3836,3837,5,113,0,0,3837,3839,3,222,111,0,3838,3836,1,0,0,0,3838,3839,
1,0,0,0,3839,637,1,0,0,0,3840,3841,3,826,413,0,3841,3842,5,23,0,0,3842,3844,
1,0,0,0,3843,3840,1,0,0,0,3843,3844,1,0,0,0,3844,3846,1,0,0,0,3845,3847,
5,29,0,0,3846,3845,1,0,0,0,3846,3847,1,0,0,0,3847,3878,1,0,0,0,3848,3879,
3,640,320,0,3849,3850,3,806,403,0,3850,3862,5,25,0,0,3851,3856,3,642,321,
0,3852,3853,5,24,0,0,3853,3855,3,642,321,0,3854,3852,1,0,0,0,3855,3858,1,
0,0,0,3856,3854,1,0,0,0,3856,3857,1,0,0,0,3857,3860,1,0,0,0,3858,3856,1,
0,0,0,3859,3861,5,24,0,0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,3861,3863,1,
0,0,0,3862,3851,1,0,0,0,3862,3863,1,0,0,0,3863,3864,1,0,0,0,3864,3865,5,
26,0,0,3865,3879,1,0,0,0,3866,3872,3,144,72,0,3867,3869,5,25,0,0,3868,3870,
3,112,56,0,3869,3868,1,0,0,0,3869,3870,1,0,0,0,3870,3871,1,0,0,0,3871,3873,
5,26,0,0,3872,3867,1,0,0,0,3872,3873,1,0,0,0,3873,3876,1,0,0,0,3874,3875,
5,316,0,0,3875,3877,3,822,411,0,3876,3874,1,0,0,0,3876,3877,1,0,0,0,3877,
3879,1,0,0,0,3878,3848,1,0,0,0,3878,3849,1,0,0,0,3878,3866,1,0,0,0,3879,
3881,1,0,0,0,3880,3882,3,644,322,0,3881,3880,1,0,0,0,3881,3882,1,0,0,0,3882,
639,1,0,0,0,3883,3886,3,834,417,0,3884,3885,5,316,0,0,3885,3887,3,822,411,
0,3886,3884,1,0,0,0,3886,3887,1,0,0,0,3887,641,1,0,0,0,3888,3890,5,29,0,
0,3889,3888,1,0,0,0,3889,3890,1,0,0,0,3890,3891,1,0,0,0,3891,3894,3,128,
64,0,3892,3893,5,316,0,0,3893,3895,3,822,411,0,3894,3892,1,0,0,0,3894,3895,
1,0,0,0,3895,643,1,0,0,0,3896,3909,5,321,0,0,3897,3910,3,646,323,0,3898,
3899,5,25,0,0,3899,3904,3,646,323,0,3900,3901,5,24,0,0,3901,3903,3,646,323,
0,3902,3900,1,0,0,0,3903,3906,1,0,0,0,3904,3902,1,0,0,0,3904,3905,1,0,0,
0,3905,3907,1,0,0,0,3906,3904,1,0,0,0,3907,3908,5,26,0,0,3908,3910,1,0,0,
0,3909,3897,1,0,0,0,3909,3898,1,0,0,0,3910,645,1,0,0,0,3911,3930,3,816,408,
0,3912,3928,5,1,0,0,3913,3929,3,160,80,0,3914,3915,5,25,0,0,3915,3920,3,
160,80,0,3916,3917,5,24,0,0,3917,3919,3,160,80,0,3918,3916,1,0,0,0,3919,
3922,1,0,0,0,3920,3918,1,0,0,0,3920,3921,1,0,0,0,3921,3924,1,0,0,0,3922,
3920,1,0,0,0,3923,3925,5,24,0,0,3924,3923,1,0,0,0,3924,3925,1,0,0,0,3925,
3926,1,0,0,0,3926,3927,5,26,0,0,3927,3929,1,0,0,0,3928,3913,1,0,0,0,3928,
3914,1,0,0,0,3929,3931,1,0,0,0,3930,3912,1,0,0,0,3930,3931,1,0,0,0,3931,
3957,1,0,0,0,3932,3934,7,28,0,0,3933,3935,5,1,0,0,3934,3933,1,0,0,0,3934,
3935,1,0,0,0,3935,3936,1,0,0,0,3936,3957,3,204,102,0,3937,3939,5,266,0,0,
3938,3940,5,1,0,0,3939,3938,1,0,0,0,3939,3940,1,0,0,0,3940,3941,1,0,0,0,
3941,3950,5,25,0,0,3942,3947,3,164,82,0,3943,3944,5,24,0,0,3944,3946,3,164,
82,0,3945,3943,1,0,0,0,3946,3949,1,0,0,0,3947,3945,1,0,0,0,3947,3948,1,0,
0,0,3948,3951,1,0,0,0,3949,3947,1,0,0,0,3950,3942,1,0,0,0,3950,3951,1,0,
0,0,3951,3953,1,0,0,0,3952,3954,5,24,0,0,3953,3952,1,0,0,0,3953,3954,1,0,
0,0,3954,3955,1,0,0,0,3955,3957,5,26,0,0,3956,3911,1,0,0,0,3956,3932,1,0,
0,0,3956,3937,1,0,0,0,3957,647,1,0,0,0,3958,3959,3,826,413,0,3959,3960,5,
23,0,0,3960,3962,1,0,0,0,3961,3958,1,0,0,0,3961,3962,1,0,0,0,3962,3963,1,
0,0,0,3963,3964,3,832,416,0,3964,649,1,0,0,0,3965,3971,3,648,324,0,3966,
3968,5,29,0,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,0,0,3969,
3971,3,144,72,0,3970,3965,1,0,0,0,3970,3967,1,0,0,0,3971,651,1,0,0,0,3972,
3974,3,650,325,0,3973,3975,3,644,322,0,3974,3973,1,0,0,0,3974,3975,1,0,0,
0,3975,653,1,0,0,0,3976,3980,3,652,326,0,3977,3978,5,119,0,0,3978,3979,5,
67,0,0,3979,3981,3,114,57,0,3980,3977,1,0,0,0,3980,3981,1,0,0,0,3981,655,
1,0,0,0,3982,3984,5,60,0,0,3983,3982,1,0,0,0,3983,3984,1,0,0,0,3984,3985,
1,0,0,0,3985,3986,5,101,0,0,3986,3987,5,141,0,0,3987,3992,3,652,326,0,3988,
3989,5,319,0,0,3989,3993,3,14,7,0,3990,3991,5,207,0,0,3991,3993,3,366,183,
0,3992,3988,1,0,0,0,3992,3990,1,0,0,0,3992,3993,1,0,0,0,3993,3995,1,0,0,
0,3994,3996,3,362,181,0,3995,3994,1,0,0,0,3995,3996,1,0,0,0,3996,657,1,0,
0,0,3997,3999,5,60,0,0,3998,3997,1,0,0,0,3998,3999,1,0,0,0,3999,4000,1,0,
0,0,4000,4001,5,308,0,0,4001,4010,3,652,326,0,4002,4003,5,271,0,0,4003,4006,
3,660,330,0,4004,4005,5,319,0,0,4005,4007,3,14,7,0,4006,4004,1,0,0,0,4006,
4007,1,0,0,0,4007,4011,1,0,0,0,4008,4009,5,207,0,0,4009,4011,3,366,183,0,
4010,4002,1,0,0,0,4010,4008,1,0,0,0,4011,4013,1,0,0,0,4012,4014,3,362,181,
0,4013,4012,1,0,0,0,4013,4014,1,0,0,0,4014,659,1,0,0,0,4015,4018,3,662,331,
0,4016,4018,3,668,334,0,4017,4015,1,0,0,0,4017,4016,1,0,0,0,4018,661,1,0,
0,0,4019,4024,3,664,332,0,4020,4021,5,24,0,0,4021,4023,3,664,332,0,4022,
4020,1,0,0,0,4023,4026,1,0,0,0,4024,4022,1,0,0,0,4024,4025,1,0,0,0,4025,
663,1,0,0,0,4026,4024,1,0,0,0,4027,4028,3,666,333,0,4028,4029,5,1,0,0,4029,
4030,3,14,7,0,4030,665,1,0,0,0,4031,4032,3,120,60,0,4032,667,1,0,0,0,4033,
4034,3,670,335,0,4034,4035,5,1,0,0,4035,4036,5,25,0,0,4036,4037,3,376,188,
0,4037,4038,5,26,0,0,4038,669,1,0,0,0,4039,4040,5,25,0,0,4040,4045,3,666,
333,0,4041,4042,5,24,0,0,4042,4044,3,666,333,0,4043,4041,1,0,0,0,4044,4047,
1,0,0,0,4045,4043,1,0,0,0,4045,4046,1,0,0,0,4046,4048,1,0,0,0,4047,4045,
1,0,0,0,4048,4049,5,26,0,0,4049,671,1,0,0,0,4050,4051,5,86,0,0,4051,4055,
5,296,0,0,4052,4053,5,153,0,0,4053,4054,5,199,0,0,4054,4056,5,127,0,0,4055,
4052,1,0,0,0,4055,4056,1,0,0,0,4056,4057,1,0,0,0,4057,4059,3,718,359,0,4058,
4060,3,674,337,0,4059,4058,1,0,0,0,4059,4060,1,0,0,0,4060,4062,1,0,0,0,4061,
4063,3,678,339,0,4062,4061,1,0,0,0,4062,4063,1,0,0,0,4063,673,1,0,0,0,4064,
4065,5,25,0,0,4065,4070,3,676,338,0,4066,4067,5,24,0,0,4067,4069,3,676,338,
0,4068,4066,1,0,0,0,4069,4072,1,0,0,0,4070,4068,1,0,0,0,4070,4071,1,0,0,
0,4071,4073,1,0,0,0,4072,4070,1,0,0,0,4073,4074,5,26,0,0,4074,675,1,0,0,
0,4075,4076,3,686,343,0,4076,677,1,0,0,0,4077,4078,5,321,0,0,4078,4079,5,
25,0,0,4079,4080,3,704,352,0,4080,4081,5,26,0,0,4081,679,1,0,0,0,4082,4083,
5,43,0,0,4083,4086,5,296,0,0,4084,4085,5,153,0,0,4085,4087,5,127,0,0,4086,
4084,1,0,0,0,4086,4087,1,0,0,0,4087,4088,1,0,0,0,4088,4089,3,718,359,0,4089,
4094,3,682,341,0,4090,4091,5,24,0,0,4091,4093,3,682,341,0,4092,4090,1,0,
0,0,4093,4096,1,0,0,0,4094,4092,1,0,0,0,4094,4095,1,0,0,0,4095,681,1,0,0,
0,4096,4094,1,0,0,0,4097,4103,3,684,342,0,4098,4103,3,688,344,0,4099,4103,
3,692,346,0,4100,4103,3,698,349,0,4101,4103,3,700,350,0,4102,4097,1,0,0,
0,4102,4098,1,0,0,0,4102,4099,1,0,0,0,4102,4100,1,0,0,0,4102,4101,1,0,0,
0,4103,683,1,0,0,0,4104,4105,5,40,0,0,4105,4106,3,686,343,0,4106,685,1,0,
0,0,4107,4108,5,84,0,0,4108,4110,3,800,400,0,4109,4111,3,710,355,0,4110,
4109,1,0,0,0,4110,4111,1,0,0,0,4111,687,1,0,0,0,4112,4113,5,43,0,0,4113,
4114,5,84,0,0,4114,4115,3,720,360,0,4115,4116,3,690,345,0,4116,689,1,0,0,
0,4117,4120,3,694,347,0,4118,4120,3,696,348,0,4119,4117,1,0,0,0,4119,4118,
1,0,0,0,4120,691,1,0,0,0,4121,4122,5,111,0,0,4122,4123,5,84,0,0,4123,4124,
3,720,360,0,4124,693,1,0,0,0,4125,4126,5,271,0,0,4126,4127,5,25,0,0,4127,
4128,3,712,356,0,4128,4129,5,26,0,0,4129,695,1,0,0,0,4130,4131,5,247,0,0,
4131,4132,5,25,0,0,4132,4137,3,800,400,0,4133,4134,5,24,0,0,4134,4136,3,
800,400,0,4135,4133,1,0,0,0,4136,4139,1,0,0,0,4137,4135,1,0,0,0,4137,4138,
1,0,0,0,4138,4140,1,0,0,0,4139,4137,1,0,0,0,4140,4141,5,26,0,0,4141,697,
1,0,0,0,4142,4143,5,271,0,0,4143,4144,5,25,0,0,4144,4145,3,704,352,0,4145,
4146,5,26,0,0,4146,699,1,0,0,0,4147,4148,5,247,0,0,4148,4149,5,25,0,0,4149,
4154,3,800,400,0,4150,4151,5,24,0,0,4151,4153,3,818,409,0,4152,4150,1,0,
0,0,4153,4156,1,0,0,0,4154,4152,1,0,0,0,4154,4155,1,0,0,0,4155,4157,1,0,
0,0,4156,4154,1,0,0,0,4157,4158,5,26,0,0,4158,701,1,0,0,0,4159,4160,5,111,
0,0,4160,4163,5,296,0,0,4161,4162,5,153,0,0,4162,4164,5,127,0,0,4163,4161,
1,0,0,0,4163,4164,1,0,0,0,4164,4165,1,0,0,0,4165,4166,3,718,359,0,4166,703,
1,0,0,0,4167,4172,3,706,353,0,4168,4169,5,24,0,0,4169,4171,3,706,353,0,4170,
4168,1,0,0,0,4171,4174,1,0,0,0,4172,4170,1,0,0,0,4172,4173,1,0,0,0,4173,
705,1,0,0,0,4174,4172,1,0,0,0,4175,4176,3,800,400,0,4176,4177,5,1,0,0,4177,
4178,3,708,354,0,4178,707,1,0,0,0,4179,4180,3,14,7,0,4180,709,1,0,0,0,4181,
4182,5,321,0,0,4182,4183,5,25,0,0,4183,4184,3,712,356,0,4184,4185,5,26,0,
0,4185,711,1,0,0,0,4186,4191,3,714,357,0,4187,4188,5,24,0,0,4188,4190,3,
714,357,0,4189,4187,1,0,0,0,4190,4193,1,0,0,0,4191,4189,1,0,0,0,4191,4192,
1,0,0,0,4192,713,1,0,0,0,4193,4191,1,0,0,0,4194,4195,3,800,400,0,4195,4196,
5,1,0,0,4196,4197,3,716,358,0,4197,715,1,0,0,0,4198,4199,3,14,7,0,4199,717,
1,0,0,0,4200,4201,3,826,413,0,4201,4202,5,23,0,0,4202,4204,1,0,0,0,4203,
4200,1,0,0,0,4203,4204,1,0,0,0,4204,4205,1,0,0,0,4205,4206,3,800,400,0,4206,
719,1,0,0,0,4207,4208,3,818,409,0,4208,721,1,0,0,0,4209,4210,5,249,0,0,4210,
4214,5,202,0,0,4211,4212,5,154,0,0,4212,4214,5,202,0,0,4213,4209,1,0,0,0,
4213,4211,1,0,0,0,4214,723,1,0,0,0,4215,4216,5,134,0,0,4216,4217,5,25,0,
0,4217,4218,5,319,0,0,4218,4219,3,14,7,0,4219,4220,5,26,0,0,4220,725,1,0,
0,0,4221,4224,3,728,364,0,4222,4224,3,738,369,0,4223,4221,1,0,0,0,4223,4222,
1,0,0,0,4224,727,1,0,0,0,4225,4226,3,810,405,0,4226,729,1,0,0,0,4227,4228,
5,320,0,0,4228,4229,3,732,366,0,4229,731,1,0,0,0,4230,4235,3,734,367,0,4231,
4232,5,24,0,0,4232,4234,3,734,367,0,4233,4231,1,0,0,0,4234,4237,1,0,0,0,
4235,4233,1,0,0,0,4235,4236,1,0,0,0,4236,733,1,0,0,0,4237,4235,1,0,0,0,4238,
4239,3,736,368,0,4239,4240,5,49,0,0,4240,4241,3,738,369,0,4241,735,1,0,0,
0,4242,4243,3,728,364,0,4243,737,1,0,0,0,4244,4245,5,25,0,0,4245,4246,3,
740,370,0,4246,4247,5,26,0,0,4247,739,1,0,0,0,4248,4250,3,742,371,0,4249,
4248,1,0,0,0,4249,4250,1,0,0,0,4250,4252,1,0,0,0,4251,4253,3,744,372,0,4252,
4251,1,0,0,0,4252,4253,1,0,0,0,4253,4255,1,0,0,0,4254,4256,3,746,373,0,4255,
4254,1,0,0,0,4255,4256,1,0,0,0,4256,4258,1,0,0,0,4257,4259,3,748,374,0,4258,
4257,1,0,0,0,4258,4259,1,0,0,0,4259,741,1,0,0,0,4260,4261,3,728,364,0,4261,
743,1,0,0,0,4262,4264,5,218,0,0,4263,4265,5,79,0,0,4264,4263,1,0,0,0,4264,
4265,1,0,0,0,4265,4266,1,0,0,0,4266,4267,5,67,0,0,4267,4268,3,130,65,0,4268,
745,1,0,0,0,4269,4270,3,314,157,0,4270,747,1,0,0,0,4271,4272,3,750,375,0,
4272,4274,3,752,376,0,4273,4275,3,758,379,0,4274,4273,1,0,0,0,4274,4275,
1,0,0,0,4275,749,1,0,0,0,4276,4277,7,29,0,0,4277,751,1,0,0,0,4278,4281,3,
756,378,0,4279,4281,3,754,377,0,4280,4278,1,0,0,0,4280,4279,1,0,0,0,4281,
753,1,0,0,0,4282,4283,5,65,0,0,4283,4284,3,756,378,0,4284,4285,5,45,0,0,
4285,4286,3,756,378,0,4286,755,1,0,0,0,4287,4288,5,89,0,0,4288,4295,5,262,
0,0,4289,4292,3,14,7,0,4290,4292,5,302,0,0,4291,4289,1,0,0,0,4291,4290,1,
0,0,0,4292,4293,1,0,0,0,4293,4295,7,30,0,0,4294,4287,1,0,0,0,4294,4291,1,
0,0,0,4295,757,1,0,0,0,4296,4297,5,124,0,0,4297,4298,5,89,0,0,4298,4307,
5,262,0,0,4299,4300,5,124,0,0,4300,4307,5,147,0,0,4301,4302,5,124,0,0,4302,
4307,5,294,0,0,4303,4304,5,124,0,0,4304,4305,5,197,0,0,4305,4307,5,214,0,
0,4306,4296,1,0,0,0,4306,4299,1,0,0,0,4306,4301,1,0,0,0,4306,4303,1,0,0,
0,4307,759,1,0,0,0,4308,4309,5,310,0,0,4309,4310,3,826,413,0,4310,761,1,
0,0,0,4311,4312,5,25,0,0,4312,4313,3,232,116,0,4313,4314,5,26,0,0,4314,4317,
1,0,0,0,4315,4317,3,234,117,0,4316,4311,1,0,0,0,4316,4315,1,0,0,0,4317,763,
1,0,0,0,4318,4319,3,148,74,0,4319,4322,5,1,0,0,4320,4323,3,14,7,0,4321,4323,
3,762,381,0,4322,4320,1,0,0,0,4322,4321,1,0,0,0,4323,765,1,0,0,0,4324,4325,
5,78,0,0,4325,767,1,0,0,0,4326,4327,5,260,0,0,4327,769,1,0,0,0,4328,4333,
3,652,326,0,4329,4330,5,25,0,0,4330,4331,3,124,62,0,4331,4332,5,26,0,0,4332,
4334,1,0,0,0,4333,4329,1,0,0,0,4333,4334,1,0,0,0,4334,771,1,0,0,0,4335,4340,
3,770,385,0,4336,4337,5,24,0,0,4337,4339,3,770,385,0,4338,4336,1,0,0,0,4339,
4342,1,0,0,0,4340,4338,1,0,0,0,4340,4341,1,0,0,0,4341,4344,1,0,0,0,4342,
4340,1,0,0,0,4343,4345,5,24,0,0,4344,4343,1,0,0,0,4344,4345,1,0,0,0,4345,
773,1,0,0,0,4346,4347,5,44,0,0,4347,4348,3,772,386,0,4348,775,1,0,0,0,4349,
4350,5,43,0,0,4350,4353,5,275,0,0,4351,4352,5,153,0,0,4352,4354,5,127,0,
0,4353,4351,1,0,0,0,4353,4354,1,0,0,0,4354,4355,1,0,0,0,4355,4357,3,648,
324,0,4356,4358,3,778,389,0,4357,4356,1,0,0,0,4358,4359,1,0,0,0,4359,4357,
1,0,0,0,4359,4360,1,0,0,0,4360,777,1,0,0,0,4361,4363,5,277,0,0,4362,4364,
5,321,0,0,4363,4362,1,0,0,0,4363,4364,1,0,0,0,4364,4365,1,0,0,0,4365,4378,
3,864,432,0,4366,4368,5,250,0,0,4367,4369,5,321,0,0,4368,4367,1,0,0,0,4368,
4369,1,0,0,0,4369,4370,1,0,0,0,4370,4378,3,864,432,0,4371,4378,5,250,0,0,
4372,4374,5,159,0,0,4373,4375,5,67,0,0,4374,4373,1,0,0,0,4374,4375,1,0,0,
0,4375,4376,1,0,0,0,4376,4378,3,864,432,0,4377,4361,1,0,0,0,4377,4366,1,
0,0,0,4377,4371,1,0,0,0,4377,4372,1,0,0,0,4378,779,1,0,0,0,4379,4380,7,31,
0,0,4380,781,1,0,0,0,4381,4384,3,780,390,0,4382,4384,3,838,419,0,4383,4381,
1,0,0,0,4383,4382,1,0,0,0,4384,783,1,0,0,0,4385,4393,3,780,390,0,4386,4393,
3,856,428,0,4387,4393,3,840,420,0,4388,4393,3,844,422,0,4389,4393,3,848,
424,0,4390,4393,3,850,425,0,4391,4393,3,852,426,0,4392,4385,1,0,0,0,4392,
4386,1,0,0,0,4392,4387,1,0,0,0,4392,4388,1,0,0,0,4392,4389,1,0,0,0,4392,
4390,1,0,0,0,4392,4391,1,0,0,0,4393,785,1,0,0,0,4394,4401,3,780,390,0,4395,
4401,3,856,428,0,4396,4401,3,846,423,0,4397,4401,3,848,424,0,4398,4401,3,
850,425,0,4399,4401,3,852,426,0,4400,4394,1,0,0,0,4400,4395,1,0,0,0,4400,
4396,1,0,0,0,4400,4397,1,0,0,0,4400,4398,1,0,0,0,4400,4399,1,0,0,0,4401,
787,1,0,0,0,4402,4408,3,780,390,0,4403,4408,3,856,428,0,4404,4408,3,846,
423,0,4405,4408,3,850,425,0,4406,4408,3,852,426,0,4407,4402,1,0,0,0,4407,
4403,1,0,0,0,4407,4404,1,0,0,0,4407,4405,1,0,0,0,4407,4406,1,0,0,0,4408,
789,1,0,0,0,4409,4418,3,780,390,0,4410,4418,3,856,428,0,4411,4418,3,840,
420,0,4412,4418,3,842,421,0,4413,4418,3,844,422,0,4414,4418,3,846,423,0,
4415,4418,3,848,424,0,4416,4418,3,852,426,0,4417,4409,1,0,0,0,4417,4410,
1,0,0,0,4417,4411,1,0,0,0,4417,4412,1,0,0,0,4417,4413,1,0,0,0,4417,4414,
1,0,0,0,4417,4415,1,0,0,0,4417,4416,1,0,0,0,4418,791,1,0,0,0,4419,4427,3,
780,390,0,4420,4427,3,856,428,0,4421,4427,3,840,420,0,4422,4427,3,844,422,
0,4423,4427,3,848,424,0,4424,4427,3,850,425,0,4425,4427,3,852,426,0,4426,
4419,1,0,0,0,4426,4420,1,0,0,0,4426,4421,1,0,0,0,4426,4422,1,0,0,0,4426,
4423,1,0,0,0,4426,4424,1,0,0,0,4426,4425,1,0,0,0,4427,793,1,0,0,0,4428,4436,
3,780,390,0,4429,4436,3,856,428,0,4430,4436,3,842,421,0,4431,4436,3,846,
423,0,4432,4436,3,848,424,0,4433,4436,3,850,425,0,4434,4436,3,852,426,0,
4435,4428,1,0,0,0,4435,4429,1,0,0,0,4435,4430,1,0,0,0,4435,4431,1,0,0,0,
4435,4432,1,0,0,0,4435,4433,1,0,0,0,4435,4434,1,0,0,0,4436,795,1,0,0,0,4437,
4446,3,780,390,0,4438,4446,3,856,428,0,4439,4446,3,840,420,0,4440,4446,3,
842,421,0,4441,4446,3,844,422,0,4442,4446,3,846,423,0,4443,4446,3,848,424,
0,4444,4446,3,850,425,0,4445,4437,1,0,0,0,4445,4438,1,0,0,0,4445,4439,1,
0,0,0,4445,4440,1,0,0,0,4445,4441,1,0,0,0,4445,4442,1,0,0,0,4445,4443,1,
0,0,0,4445,4444,1,0,0,0,4446,797,1,0,0,0,4447,4450,3,780,390,0,4448,4450,
3,854,427,0,4449,4447,1,0,0,0,4449,4448,1,0,0,0,4450,799,1,0,0,0,4451,4454,
3,782,391,0,4452,4454,5,325,0,0,4453,4451,1,0,0,0,4453,4452,1,0,0,0,4454,
801,1,0,0,0,4455,4458,3,828,414,0,4456,4458,5,325,0,0,4457,4455,1,0,0,0,
4457,4456,1,0,0,0,4458,803,1,0,0,0,4459,4462,3,784,392,0,4460,4462,5,325,
0,0,4461,4459,1,0,0,0,4461,4460,1,0,0,0,4462,805,1,0,0,0,4463,4466,3,786,
393,0,4464,4466,5,325,0,0,4465,4463,1,0,0,0,4465,4464,1,0,0,0,4466,807,1,
0,0,0,4467,4470,3,788,394,0,4468,4470,5,325,0,0,4469,4467,1,0,0,0,4469,4468,
1,0,0,0,4470,809,1,0,0,0,4471,4474,3,790,395,0,4472,4474,5,325,0,0,4473,
4471,1,0,0,0,4473,4472,1,0,0,0,4474,811,1,0,0,0,4475,4478,3,792,396,0,4476,
4478,5,325,0,0,4477,4475,1,0,0,0,4477,4476,1,0,0,0,4478,813,1,0,0,0,4479,
4482,3,794,397,0,4480,4482,5,325,0,0,4481,4479,1,0,0,0,4481,4480,1,0,0,0,
4482,815,1,0,0,0,4483,4486,3,796,398,0,4484,4486,5,325,0,0,4485,4483,1,0,
0,0,4485,4484,1,0,0,0,4486,817,1,0,0,0,4487,4490,3,780,390,0,4488,4490,5,
325,0,0,4489,4487,1,0,0,0,4489,4488,1,0,0,0,4490,819,1,0,0,0,4491,4494,3,
798,399,0,4492,4494,5,325,0,0,4493,4491,1,0,0,0,4493,4492,1,0,0,0,4494,821,
1,0,0,0,4495,4499,3,800,400,0,4496,4497,5,230,0,0,4497,4499,5,177,0,0,4498,
4495,1,0,0,0,4498,4496,1,0,0,0,4499,823,1,0,0,0,4500,4501,3,800,400,0,4501,
4502,5,23,0,0,4502,4504,1,0,0,0,4503,4500,1,0,0,0,4503,4504,1,0,0,0,4504,
825,1,0,0,0,4505,4506,3,800,400,0,4506,4507,5,28,0,0,4507,4509,1,0,0,0,4508,
4505,1,0,0,0,4508,4509,1,0,0,0,4509,4512,1,0,0,0,4510,4513,3,116,58,0,4511,
4513,5,19,0,0,4512,4510,1,0,0,0,4512,4511,1,0,0,0,4513,827,1,0,0,0,4514,
4517,3,782,391,0,4515,4517,3,858,429,0,4516,4514,1,0,0,0,4516,4515,1,0,0,
0,4517,829,1,0,0,0,4518,4519,3,802,401,0,4519,4520,5,23,0,0,4520,4522,1,
0,0,0,4521,4518,1,0,0,0,4521,4522,1,0,0,0,4522,831,1,0,0,0,4523,4525,5,29,
0,0,4524,4523,1,0,0,0,4524,4525,1,0,0,0,4525,4526,1,0,0,0,4526,4527,3,802,
401,0,4527,833,1,0,0,0,4528,4531,3,812,406,0,4529,4531,3,858,429,0,4530,
4528,1,0,0,0,4530,4529,1,0,0,0,4531,835,1,0,0,0,4532,4534,5,29,0,0,4533,
4532,1,0,0,0,4533,4534,1,0,0,0,4534,4535,1,0,0,0,4535,4536,3,834,417,0,4536,
837,1,0,0,0,4537,4546,3,856,428,0,4538,4546,3,840,420,0,4539,4546,3,842,
421,0,4540,4546,3,844,422,0,4541,4546,3,846,423,0,4542,4546,3,848,424,0,
4543,4546,3,850,425,0,4544,4546,3,852,426,0,4545,4537,1,0,0,0,4545,4538,
1,0,0,0,4545,4539,1,0,0,0,4545,4540,1,0,0,0,4545,4541,1,0,0,0,4545,4542,
1,0,0,0,4545,4543,1,0,0,0,4545,4544,1,0,0,0,4546,839,1,0,0,0,4547,4548,7,
32,0,0,4548,841,1,0,0,0,4549,4550,7,33,0,0,4550,843,1,0,0,0,4551,4552,7,
34,0,0,4552,845,1,0,0,0,4553,4554,5,76,0,0,4554,847,1,0,0,0,4555,4556,5,
79,0,0,4556,849,1,0,0,0,4557,4558,7,29,0,0,4558,851,1,0,0,0,4559,4560,7,
28,0,0,4560,853,1,0,0,0,4561,4562,7,35,0,0,4562,855,1,0,0,0,4563,4564,7,
36,0,0,4564,857,1,0,0,0,4565,4566,7,37,0,0,4566,859,1,0,0,0,4567,4568,7,
38,0,0,4568,861,1,0,0,0,4569,4570,5,330,0,0,4570,863,1,0,0,0,4571,4572,7,
39,0,0,4572,865,1,0,0,0,507,871,876,883,888,894,902,910,917,921,929,934,
939,941,1002,1009,1013,1020,1028,1033,1037,1043,1049,1052,1056,1064,1068,
1071,1075,1086,1091,1093,1102,1123,1128,1137,1139,1146,1154,1162,1169,1179,
1181,1185,1190,1194,1200,1206,1210,1214,1217,1224,1230,1234,1239,1242,1256,
1261,1264,1278,1285,1296,1307,1327,1333,1338,1342,1356,1358,1365,1371,1382,
1390,1396,1403,1411,1424,1430,1434,1437,1439,1447,1455,1461,1467,1473,1476,
1485,1494,1501,1509,1522,1529,1533,1540,1544,1549,1556,1563,1566,1573,1577,
1587,1610,1616,1620,1627,1633,1640,1644,1648,1654,1659,1668,1671,1677,1682,
1690,1697,1719,1723,1725,1729,1738,1742,1744,1748,1757,1761,1799,1803,1823,
1826,1832,1852,1857,1863,1868,1871,1875,1902,1910,1913,1920,1933,1937,1949,
1962,1967,1974,1978,1985,1994,2003,2011,2015,2019,2026,2028,2031,2036,2041,
2045,2052,2059,2063,2067,2071,2075,2077,2088,2097,2102,2108,2113,2117,2121,
2125,2128,2132,2136,2144,2148,2152,2156,2160,2163,2167,2170,2173,2178,2181,
2184,2187,2201,2203,2214,2224,2234,2237,2244,2268,2279,2285,2289,2293,2297,
2301,2305,2309,2313,2319,2326,2336,2347,2360,2376,2386,2406,2412,2419,2426,
2434,2443,2480,2482,2485,2490,2494,2498,2504,2510,2514,2519,2524,2526,2530,
2535,2538,2540,2544,2555,2566,2577,2581,2585,2589,2592,2596,2599,2605,2614,
2617,2631,2637,2640,2645,2652,2659,2668,2673,2681,2696,2702,2710,2719,2723,
2732,2744,2751,2759,2780,2788,2797,2807,2816,2821,2828,2838,2843,2852,2856,
2860,2863,2866,2869,2872,2880,2885,2896,2903,2916,2924,2929,2936,2949,2960,
2970,2976,2985,3002,3025,3045,3056,3064,3074,3079,3083,3089,3127,3139,3181,
3189,3192,3196,3200,3210,3223,3236,3241,3253,3264,3269,3272,3276,3280,3284,
3287,3300,3304,3316,3330,3345,3360,3363,3373,3376,3384,3396,3399,3409,3417,
3423,3431,3439,3446,3450,3460,3467,3472,3477,3489,3493,3495,3507,3511,3516,
3522,3529,3533,3537,3541,3544,3559,3568,3572,3577,3583,3592,3601,3618,3622,
3626,3628,3632,3639,3643,3647,3649,3666,3671,3695,3700,3718,3735,3751,3766,
3773,3781,3792,3799,3804,3810,3813,3816,3823,3826,3829,3838,3843,3846,3856,
3860,3862,3869,3872,3876,3878,3881,3886,3889,3894,3904,3909,3920,3924,3928,
3930,3934,3939,3947,3950,3953,3956,3961,3967,3970,3974,3980,3983,3992,3995,
3998,4006,4010,4013,4017,4024,4045,4055,4059,4062,4070,4086,4094,4102,4110,
4119,4137,4154,4163,4172,4191,4203,4213,4223,4235,4249,4252,4255,4258,4264,
4274,4280,4291,4294,4306,4316,4322,4333,4340,4344,4353,4359,4363,4368,4374,
4377,4383,4392,4400,4407,4417,4426,4435,4445,4449,4453,4457,4461,4465,4469,
4473,4477,4481,4485,4489,4493,4498,4503,4508,4512,4516,4521,4524,4530,4533,
4545];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class YQLParser extends antlr4.Parser {

    static grammarFileName = "YQL.g4";
    static literalNames = [ null, "'='", "'=='", "'!='", "'<>'", "'<'", 
                            "'<='", "'>'", "'>='", "'<<'", "'|<<'", "'&'", 
                            "'|'", "'||'", "'<|'", "'|>'", "'+'", "'-'", 
                            "'~'", "'*'", "'/'", "'%'", "';'", "'.'", "','", 
                            "'('", "')'", "'?'", "':'", "'@'", "'$'", "'{'", 
                            "'}'", "'^'", "'::'", "'->'", "']'", "'['" ];
    static symbolicNames = [ null, "EQUALS", "EQUALS2", "NOT_EQUALS", "NOT_EQUALS2", 
                             "LESS", "LESS_OR_EQ", "GREATER", "GREATER_OR_EQ", 
                             "SHIFT_LEFT", "ROT_LEFT", "AMPERSAND", "PIPE", 
                             "DOUBLE_PIPE", "STRUCT_OPEN", "STRUCT_CLOSE", 
                             "PLUS", "MINUS", "TILDA", "ASTERISK", "SLASH", 
                             "PERCENT", "SEMICOLON", "DOT", "COMMA", "LPAREN", 
                             "RPAREN", "QUESTION", "COLON", "COMMAT", "DOLLAR", 
                             "LBRACE_CURLY", "RBRACE_CURLY", "CARET", "NAMESPACE", 
                             "ARROW", "RBRACE_SQUARE", "LBRACE_SQUARE", 
                             "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
                             "ANALYZE", "AND", "ANSI", "ANY", "ARRAY", "AS", 
                             "ASC", "ASSUME", "ASYMMETRIC", "ASYNC", "AT", 
                             "ATTACH", "ATTRIBUTES", "AUTOINCREMENT", "AUTOMAP", 
                             "BACKUP", "BATCH", "COLLECTION", "BEFORE", 
                             "BEGIN", "BERNOULLI", "BETWEEN", "BITCAST", 
                             "BY", "CALLABLE", "CASCADE", "CASE", "CAST", 
                             "CHANGEFEED", "CHECK", "CLASSIFIER", "COLLATE", 
                             "COLUMN", "COLUMNS", "COMMIT", "COMPACT", "CONDITIONAL", 
                             "CONFLICT", "CONNECT", "CONSTRAINT", "CONSUMER", 
                             "COVER", "CREATE", "CROSS", "CUBE", "CURRENT", 
                             "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                             "DATA", "DATABASE", "DECIMAL", "DECLARE", "DEFAULT", 
                             "DEFERRABLE", "DEFERRED", "DEFINE", "DELETE", 
                             "DESC", "DESCRIBE", "DETACH", "DICT", "DIRECTORY", 
                             "DISABLE", "DISCARD", "DISTINCT", "DO", "DROP", 
                             "EACH", "ELSE", "EMPTY", "EMPTY_ACTION", "ENCRYPTED", 
                             "END", "ENUM", "ERASE", "ERROR", "ESCAPE", 
                             "EVALUATE", "EXCEPT", "EXCLUDE", "EXCLUSION", 
                             "EXCLUSIVE", "EXISTS", "EXPLAIN", "EXPORT", 
                             "EXTERNAL", "FAIL", "FALSE", "FAMILY", "FILTER", 
                             "FIRST", "FLATTEN", "FLOW", "FOLLOWING", "FOR", 
                             "FOREIGN", "FROM", "FULL", "FUNCTION", "GLOB", 
                             "GLOBAL", "GRANT", "GROUP", "GROUPING", "GROUPS", 
                             "HASH", "HAVING", "HOP", "IF", "IGNORE", "ILIKE", 
                             "IMMEDIATE", "IMPORT", "IN", "INCREMENT", "INCREMENTAL", 
                             "INDEX", "INDEXED", "INHERITS", "INITIAL", 
                             "INITIALLY", "INNER", "INSERT", "INSTEAD", 
                             "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
                             "JSON_EXISTS", "JSON_QUERY", "JSON_VALUE", 
                             "KEY", "LAST", "LEFT", "LEGACY", "LIKE", "LIMIT", 
                             "LIST", "LOCAL", "LOGIN", "MANAGE", "MATCH", 
                             "MATCHES", "MATCH_RECOGNIZE", "MEASURES", "MICROSECONDS", 
                             "MILLISECONDS", "MODIFY", "NANOSECONDS", "NATURAL", 
                             "NEXT", "NO", "NOLOGIN", "NOT", "NOTNULL", 
                             "NULL", "NULLS", "OBJECT", "OF", "OFFSET", 
                             "OMIT", "ON", "ONE", "ONLY", "OPTION", "OPTIONAL", 
                             "OR", "ORDER", "OTHERS", "OUTER", "OVER", "PARALLEL", 
                             "PARTITION", "PASSING", "PASSWORD", "PAST", 
                             "PATTERN", "PER", "PERMUTE", "PLAN", "POOL", 
                             "PRAGMA", "PRECEDING", "PRESORT", "PRIMARY", 
                             "PRIVILEGES", "PROCESS", "QUERY", "QUEUE", 
                             "RAISE", "RANGE", "REDUCE", "REFERENCES", "REGEXP", 
                             "REINDEX", "RELEASE", "REMOVE", "RENAME", "REPEATABLE", 
                             "REPLACE", "REPLICATION", "RESET", "RESOURCE", 
                             "RESPECT", "RESTART", "RESTORE", "RESTRICT", 
                             "RESULT", "RETURN", "RETURNING", "REVERT", 
                             "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP", 
                             "ROW", "ROWS", "SAMPLE", "SAVEPOINT", "SCHEMA", 
                             "SECONDS", "SEEK", "SELECT", "SEMI", "SET", 
                             "SETS", "SHOW", "TSKIP", "SEQUENCE", "SOURCE", 
                             "START", "STREAM", "STRUCT", "SUBQUERY", "SUBSET", 
                             "SYMBOLS", "SYMMETRIC", "SYNC", "SYSTEM", "TABLE", 
                             "TABLES", "TABLESAMPLE", "TABLESTORE", "TAGGED", 
                             "TEMP", "TEMPORARY", "THEN", "TIES", "TO", 
                             "TOPIC", "TRANSACTION", "TRIGGER", "TRUE", 
                             "TUPLE", "TYPE", "UNBOUNDED", "UNCONDITIONAL", 
                             "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", 
                             "UPDATE", "UPSERT", "USE", "USER", "USING", 
                             "VACUUM", "VALUES", "VARIANT", "VIEW", "VIRTUAL", 
                             "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", 
                             "WRAPPER", "XOR", "STRING_VALUE", "ID_PLAIN", 
                             "ID_QUOTED", "DIGITS", "INTEGER_VALUE", "REAL", 
                             "BLOB", "WS", "COMMENT" ];
    static ruleNames = [ "sql_query", "sql_stmt_list", "ansi_sql_stmt_list", 
                         "lambda_body", "lambda_stmt", "sql_stmt", "sql_stmt_core", 
                         "expr", "or_subexpr", "and_subexpr", "xor_subexpr", 
                         "distinct_from_op", "cond_expr", "match_op", "eq_subexpr", 
                         "shift_right", "rot_right", "double_question", 
                         "neq_subexpr", "bit_subexpr", "add_subexpr", "mul_subexpr", 
                         "con_subexpr", "unary_op", "unary_subexpr_suffix", 
                         "unary_casual_subexpr", "in_unary_casual_subexpr", 
                         "unary_subexpr", "in_unary_subexpr", "list_literal", 
                         "expr_dict_list", "dict_literal", "expr_struct_list", 
                         "struct_literal", "atom_expr", "in_atom_expr", 
                         "cast_expr", "bitcast_expr", "exists_expr", "case_expr", 
                         "lambda", "in_expr", "json_api_expr", "jsonpath_spec", 
                         "json_variable_name", "json_variable", "json_variables", 
                         "json_common_args", "json_case_handler", "json_value", 
                         "json_exists_handler", "json_exists", "json_query_wrapper", 
                         "json_query_handler", "json_query", "smart_parenthesis", 
                         "expr_list", "pure_column_list", "pure_column_or_named", 
                         "pure_column_or_named_list", "column_name", "without_column_name", 
                         "column_list", "without_column_list", "named_expr", 
                         "named_expr_list", "invoke_expr", "invoke_expr_tail", 
                         "using_call_expr", "key_expr", "when_expr", "literal_value", 
                         "bind_parameter", "opt_bind_parameter", "bind_parameter_list", 
                         "named_bind_parameter", "named_bind_parameter_list", 
                         "signed_number", "type_name_simple", "integer_or_bind", 
                         "type_name_tag", "struct_arg", "struct_arg_positional", 
                         "variant_arg", "callable_arg", "callable_arg_list", 
                         "type_name_decimal", "type_name_optional", "type_name_tuple", 
                         "type_name_struct", "type_name_variant", "type_name_list", 
                         "type_name_stream", "type_name_flow", "type_name_dict", 
                         "type_name_set", "type_name_enum", "type_name_resource", 
                         "type_name_tagged", "type_name_callable", "type_name_composite", 
                         "type_name", "type_name_or_bind", "value_constructor_literal", 
                         "value_constructor", "declare_stmt", "module_path", 
                         "import_stmt", "export_stmt", "call_action", "inline_action", 
                         "do_stmt", "pragma_stmt", "pragma_value", "sort_specification", 
                         "sort_specification_list", "select_stmt", "select_unparenthesized_stmt", 
                         "select_kind_parenthesis", "select_op", "select_kind_partial", 
                         "select_kind", "process_core", "external_call_param", 
                         "external_call_settings", "reduce_core", "opt_set_quantifier", 
                         "select_core", "row_pattern_recognition_clause", 
                         "row_pattern_rows_per_match", "row_pattern_empty_match_handling", 
                         "row_pattern_measures", "row_pattern_measure_list", 
                         "row_pattern_measure_definition", "row_pattern_common_syntax", 
                         "row_pattern_skip_to", "row_pattern_skip_to_variable_name", 
                         "row_pattern_initial_or_seek", "row_pattern", "row_pattern_term", 
                         "row_pattern_factor", "row_pattern_quantifier", 
                         "row_pattern_primary", "row_pattern_primary_variable_name", 
                         "row_pattern_permute", "row_pattern_subset_clause", 
                         "row_pattern_subset_list", "row_pattern_subset_item", 
                         "row_pattern_subset_item_variable_name", "row_pattern_subset_rhs", 
                         "row_pattern_subset_rhs_variable_name", "row_pattern_definition_list", 
                         "row_pattern_definition", "row_pattern_definition_variable_name", 
                         "row_pattern_definition_search_condition", "search_condition", 
                         "row_pattern_variable_name", "order_by_clause", 
                         "ext_order_by_clause", "group_by_clause", "grouping_element_list", 
                         "grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
                         "rollup_list", "cube_list", "grouping_sets_specification", 
                         "hopping_window_specification", "result_column", 
                         "join_source", "named_column", "flatten_by_arg", 
                         "flatten_source", "named_single_source", "single_source", 
                         "sample_clause", "tablesample_clause", "sampling_mode", 
                         "repeatable_clause", "join_op", "join_constraint", 
                         "returning_columns_list", "into_table_stmt", "into_values_source", 
                         "values_stmt", "values_source", "values_source_row_list", 
                         "values_source_row", "simple_values_source", "create_external_data_source_stmt", 
                         "alter_external_data_source_stmt", "alter_external_data_source_action", 
                         "drop_external_data_source_stmt", "create_view_stmt", 
                         "drop_view_stmt", "upsert_object_stmt", "create_object_stmt", 
                         "create_object_features", "alter_object_stmt", 
                         "alter_object_features", "drop_object_stmt", "drop_object_features", 
                         "object_feature_value", "object_feature_kv", "object_feature_flag", 
                         "object_feature", "object_features", "object_type_ref", 
                         "create_table_stmt", "create_table_entry", "create_backup_collection_stmt", 
                         "alter_backup_collection_stmt", "drop_backup_collection_stmt", 
                         "create_backup_collection_entries", "create_backup_collection_entries_many", 
                         "table_list", "alter_backup_collection_actions", 
                         "alter_backup_collection_action", "alter_backup_collection_entries", 
                         "alter_backup_collection_entry", "backup_collection", 
                         "backup_collection_settings", "backup_collection_settings_entry", 
                         "backup_stmt", "restore_stmt", "table_inherits", 
                         "table_partition_by", "with_table_settings", "table_tablestore", 
                         "table_settings_entry", "table_as_source", "alter_table_stmt", 
                         "alter_table_action", "alter_external_table_stmt", 
                         "alter_external_table_action", "alter_table_store_stmt", 
                         "alter_table_store_action", "alter_table_add_column", 
                         "alter_table_drop_column", "alter_table_alter_column", 
                         "alter_table_alter_column_drop_not_null", "alter_table_add_column_family", 
                         "alter_table_alter_column_family", "alter_table_set_table_setting_uncompat", 
                         "alter_table_set_table_setting_compat", "alter_table_reset_table_setting", 
                         "alter_table_add_index", "alter_table_drop_index", 
                         "alter_table_rename_to", "alter_table_rename_index_to", 
                         "alter_table_add_changefeed", "alter_table_alter_changefeed", 
                         "alter_table_drop_changefeed", "alter_table_alter_index", 
                         "column_schema", "family_relation", "opt_column_constraints", 
                         "column_order_by_specification", "table_constraint", 
                         "table_index", "table_index_type", "global_index", 
                         "local_index", "index_subtype", "with_index_settings", 
                         "index_setting_entry", "index_setting_value", "changefeed", 
                         "changefeed_settings", "changefeed_settings_entry", 
                         "changefeed_setting_value", "changefeed_alter_settings", 
                         "alter_table_setting_entry", "table_setting_value", 
                         "ttl_tier_list", "ttl_tier_action", "family_entry", 
                         "family_settings", "family_settings_entry", "family_setting_value", 
                         "split_boundaries", "literal_value_list", "alter_table_alter_index_action", 
                         "drop_table_stmt", "create_user_stmt", "alter_user_stmt", 
                         "create_group_stmt", "alter_group_stmt", "drop_role_stmt", 
                         "role_name", "create_user_option", "password_option", 
                         "login_option", "grant_permissions_stmt", "revoke_permissions_stmt", 
                         "permission_id", "permission_name", "permission_name_target", 
                         "create_resource_pool_stmt", "alter_resource_pool_stmt", 
                         "alter_resource_pool_action", "drop_resource_pool_stmt", 
                         "create_resource_pool_classifier_stmt", "alter_resource_pool_classifier_stmt", 
                         "alter_resource_pool_classifier_action", "drop_resource_pool_classifier_stmt", 
                         "create_replication_stmt", "replication_target", 
                         "replication_settings", "replication_settings_entry", 
                         "alter_replication_stmt", "alter_replication_action", 
                         "alter_replication_set_setting", "drop_replication_stmt", 
                         "action_or_subquery_args", "define_action_or_subquery_stmt", 
                         "define_action_or_subquery_body", "if_stmt", "for_stmt", 
                         "table_ref", "table_key", "table_arg", "table_hints", 
                         "table_hint", "object_ref", "simple_table_ref_core", 
                         "simple_table_ref", "into_simple_table_ref", "delete_stmt", 
                         "update_stmt", "set_clause_choice", "set_clause_list", 
                         "set_clause", "set_target", "multiple_column_assignment", 
                         "set_target_list", "create_topic_stmt", "create_topic_entries", 
                         "create_topic_entry", "with_topic_settings", "alter_topic_stmt", 
                         "alter_topic_action", "alter_topic_add_consumer", 
                         "topic_create_consumer_entry", "alter_topic_alter_consumer", 
                         "alter_topic_alter_consumer_entry", "alter_topic_drop_consumer", 
                         "topic_alter_consumer_set", "topic_alter_consumer_reset", 
                         "alter_topic_set_settings", "alter_topic_reset_settings", 
                         "drop_topic_stmt", "topic_settings", "topic_settings_entry", 
                         "topic_setting_value", "topic_consumer_with_settings", 
                         "topic_consumer_settings", "topic_consumer_settings_entry", 
                         "topic_consumer_setting_value", "topic_ref", "topic_consumer_ref", 
                         "null_treatment", "filter_clause", "window_name_or_specification", 
                         "window_name", "window_clause", "window_definition_list", 
                         "window_definition", "new_window_name", "window_specification", 
                         "window_specification_details", "existing_window_name", 
                         "window_partition_clause", "window_order_clause", 
                         "window_frame_clause", "window_frame_units", "window_frame_extent", 
                         "window_frame_between", "window_frame_bound", "window_frame_exclusion", 
                         "use_stmt", "subselect_stmt", "named_nodes_stmt", 
                         "commit_stmt", "rollback_stmt", "analyze_table", 
                         "analyze_table_list", "analyze_stmt", "alter_sequence_stmt", 
                         "alter_sequence_action", "identifier", "id", "id_schema", 
                         "id_expr", "id_expr_in", "id_window", "id_table", 
                         "id_without", "id_hint", "id_as_compat", "an_id", 
                         "an_id_or_type", "an_id_schema", "an_id_expr", 
                         "an_id_expr_in", "an_id_window", "an_id_table", 
                         "an_id_without", "an_id_hint", "an_id_pure", "an_id_as_compat", 
                         "view_name", "opt_id_prefix", "cluster_expr", "id_or_type", 
                         "opt_id_prefix_or_type", "id_or_at", "id_table_or_type", 
                         "id_table_or_at", "keyword", "keyword_expr_uncompat", 
                         "keyword_table_uncompat", "keyword_select_uncompat", 
                         "keyword_alter_uncompat", "keyword_in_uncompat", 
                         "keyword_window_uncompat", "keyword_hint_uncompat", 
                         "keyword_as_compat", "keyword_compat", "type_id", 
                         "bool_value", "real", "integer" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = YQLParser.ruleNames;
        this.literalNames = YQLParser.literalNames;
        this.symbolicNames = YQLParser.symbolicNames;
    }



	sql_query() {
	    let localctx = new Sql_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, YQLParser.RULE_sql_query);
	    try {
	        this.state = 871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 866;
	            this.sql_stmt_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 867;
	            this.match(YQLParser.PRAGMA);
	            this.state = 868;
	            this.match(YQLParser.ANSI);
	            this.state = 869;
	            this.match(YQLParser.DIGITS);
	            this.state = 870;
	            this.ansi_sql_stmt_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, YQLParser.RULE_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 873;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 879;
	        this.sql_stmt();
	        this.state = 888;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 881; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 880;
	                    this.match(YQLParser.SEMICOLON);
	                    this.state = 883; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===22);
	                this.state = 885;
	                this.sql_stmt(); 
	            }
	            this.state = 890;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 891;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 896;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 897;
	        this.match(YQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ansi_sql_stmt_list() {
	    let localctx = new Ansi_sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, YQLParser.RULE_ansi_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 899;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 905;
	        this.match(YQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_body() {
	    let localctx = new Lambda_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, YQLParser.RULE_lambda_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 907;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===30 || _la===157) {
	            this.state = 913;
	            this.lambda_stmt();
	            this.state = 915; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 914;
	                this.match(YQLParser.SEMICOLON);
	                this.state = 917; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===22);
	            this.state = 923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 924;
	        this.match(YQLParser.RETURN);
	        this.state = 925;
	        this.expr();
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 926;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 931;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_stmt() {
	    let localctx = new Lambda_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, YQLParser.RULE_lambda_stmt);
	    try {
	        this.state = 934;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 932;
	            this.named_nodes_stmt();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 933;
	            this.import_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, YQLParser.RULE_sql_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 936;
	            this.match(YQLParser.EXPLAIN);
	            this.state = 939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===233) {
	                this.state = 937;
	                this.match(YQLParser.QUERY);
	                this.state = 938;
	                this.match(YQLParser.PLAN);
	            }

	        }

	        this.state = 943;
	        this.sql_stmt_core();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_core() {
	    let localctx = new Sql_stmt_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, YQLParser.RULE_sql_stmt_core);
	    try {
	        this.state = 1002;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 945;
	            this.pragma_stmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 946;
	            this.select_stmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 947;
	            this.named_nodes_stmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 948;
	            this.create_table_stmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 949;
	            this.drop_table_stmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 950;
	            this.use_stmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 951;
	            this.into_table_stmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 952;
	            this.commit_stmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 953;
	            this.update_stmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 954;
	            this.delete_stmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 955;
	            this.rollback_stmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 956;
	            this.declare_stmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 957;
	            this.import_stmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 958;
	            this.export_stmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 959;
	            this.alter_table_stmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 960;
	            this.alter_external_table_stmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 961;
	            this.do_stmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 962;
	            this.define_action_or_subquery_stmt();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 963;
	            this.if_stmt();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 964;
	            this.for_stmt();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 965;
	            this.values_stmt();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 966;
	            this.create_user_stmt();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 967;
	            this.alter_user_stmt();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 968;
	            this.create_group_stmt();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 969;
	            this.alter_group_stmt();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 970;
	            this.drop_role_stmt();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 971;
	            this.create_object_stmt();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 972;
	            this.alter_object_stmt();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 973;
	            this.drop_object_stmt();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 974;
	            this.create_external_data_source_stmt();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 975;
	            this.alter_external_data_source_stmt();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 976;
	            this.drop_external_data_source_stmt();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 977;
	            this.create_replication_stmt();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 978;
	            this.drop_replication_stmt();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 979;
	            this.create_topic_stmt();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 980;
	            this.alter_topic_stmt();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 981;
	            this.drop_topic_stmt();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 982;
	            this.grant_permissions_stmt();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 983;
	            this.revoke_permissions_stmt();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 984;
	            this.alter_table_store_stmt();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 985;
	            this.upsert_object_stmt();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 986;
	            this.create_view_stmt();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 987;
	            this.drop_view_stmt();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 988;
	            this.alter_replication_stmt();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 989;
	            this.create_resource_pool_stmt();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 990;
	            this.alter_resource_pool_stmt();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 991;
	            this.drop_resource_pool_stmt();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 992;
	            this.create_backup_collection_stmt();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 993;
	            this.alter_backup_collection_stmt();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 994;
	            this.drop_backup_collection_stmt();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 995;
	            this.analyze_stmt();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 996;
	            this.create_resource_pool_classifier_stmt();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 997;
	            this.alter_resource_pool_classifier_stmt();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 998;
	            this.drop_resource_pool_classifier_stmt();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 999;
	            this.backup_stmt();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 1000;
	            this.restore_stmt();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 1001;
	            this.alter_sequence_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, YQLParser.RULE_expr);
	    try {
	        this.state = 1013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.or_subexpr();
	            this.state = 1009;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1005;
	                    this.match(YQLParser.OR);
	                    this.state = 1006;
	                    this.or_subexpr(); 
	                }
	                this.state = 1011;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1012;
	            this.type_name_composite();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_subexpr() {
	    let localctx = new Or_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, YQLParser.RULE_or_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1015;
	        this.and_subexpr();
	        this.state = 1020;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1016;
	                this.match(YQLParser.AND);
	                this.state = 1017;
	                this.and_subexpr(); 
	            }
	            this.state = 1022;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_subexpr() {
	    let localctx = new And_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, YQLParser.RULE_and_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1023;
	        this.xor_subexpr();
	        this.state = 1028;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1024;
	                this.match(YQLParser.XOR);
	                this.state = 1025;
	                this.xor_subexpr(); 
	            }
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xor_subexpr() {
	    let localctx = new Xor_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, YQLParser.RULE_xor_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.eq_subexpr();
	        this.state = 1033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 1032;
	            this.cond_expr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distinct_from_op() {
	    let localctx = new Distinct_from_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, YQLParser.RULE_distinct_from_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1035;
	        this.match(YQLParser.IS);
	        this.state = 1037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===199) {
	            this.state = 1036;
	            this.match(YQLParser.NOT);
	        }

	        this.state = 1039;
	        this.match(YQLParser.DISTINCT);
	        this.state = 1040;
	        this.match(YQLParser.FROM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cond_expr() {
	    let localctx = new Cond_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, YQLParser.RULE_cond_expr);
	    var _la = 0;
	    try {
	        this.state = 1093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1042;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1045;
	            this.match_op();
	            this.state = 1046;
	            this.eq_subexpr();
	            this.state = 1049;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            if(la_===1) {
	                this.state = 1047;
	                this.match(YQLParser.ESCAPE);
	                this.state = 1048;
	                this.eq_subexpr();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1052;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1051;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1054;
	            this.match(YQLParser.IN);
	            this.state = 1056;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 1055;
	                this.match(YQLParser.COMPACT);

	            }
	            this.state = 1058;
	            this.in_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1068;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1059;
	                this.match(YQLParser.ISNULL);
	                break;

	            case 2:
	                this.state = 1060;
	                this.match(YQLParser.NOTNULL);
	                break;

	            case 3:
	                this.state = 1061;
	                this.match(YQLParser.IS);
	                this.state = 1062;
	                this.match(YQLParser.NULL);
	                break;

	            case 4:
	                this.state = 1064;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===171) {
	                    this.state = 1063;
	                    this.match(YQLParser.IS);
	                }

	                this.state = 1066;
	                this.match(YQLParser.NOT);
	                this.state = 1067;
	                this.match(YQLParser.NULL);
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 1070;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 1073;
	            this.match(YQLParser.BETWEEN);
	            this.state = 1075;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 1074;
	                _la = this._input.LA(1);
	                if(!(_la===52 || _la===283)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1077;
	            this.eq_subexpr();
	            this.state = 1078;
	            this.match(YQLParser.AND);
	            this.state = 1079;
	            this.eq_subexpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1089; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1086;
	            		this._errHandler.sync(this);
	            		switch(this._input.LA(1)) {
	            		case 1:
	            		    this.state = 1081;
	            		    this.match(YQLParser.EQUALS);
	            		    break;
	            		case 2:
	            		    this.state = 1082;
	            		    this.match(YQLParser.EQUALS2);
	            		    break;
	            		case 3:
	            		    this.state = 1083;
	            		    this.match(YQLParser.NOT_EQUALS);
	            		    break;
	            		case 4:
	            		    this.state = 1084;
	            		    this.match(YQLParser.NOT_EQUALS2);
	            		    break;
	            		case 171:
	            		    this.state = 1085;
	            		    this.distinct_from_op();
	            		    break;
	            		default:
	            		    throw new antlr4.error.NoViableAltException(this);
	            		}
	            		this.state = 1088;
	            		this.eq_subexpr();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1091; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_op() {
	    let localctx = new Match_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, YQLParser.RULE_match_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1095;
	        _la = this._input.LA(1);
	        if(!(_la===144 || _la===155 || _la===181 || _la===187 || _la===239 || _la===259)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eq_subexpr() {
	    let localctx = new Eq_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, YQLParser.RULE_eq_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.neq_subexpr();
	        this.state = 1102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 480) !== 0)) {
	            this.state = 1098;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 480) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1099;
	            this.neq_subexpr();
	            this.state = 1104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_right() {
	    let localctx = new Shift_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, YQLParser.RULE_shift_right);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this.match(YQLParser.GREATER);
	        this.state = 1106;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rot_right() {
	    let localctx = new Rot_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, YQLParser.RULE_rot_right);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this.match(YQLParser.GREATER);
	        this.state = 1109;
	        this.match(YQLParser.GREATER);
	        this.state = 1110;
	        this.match(YQLParser.PIPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_question() {
	    let localctx = new Double_questionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, YQLParser.RULE_double_question);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.match(YQLParser.QUESTION);
	        this.state = 1113;
	        this.match(YQLParser.QUESTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	neq_subexpr() {
	    let localctx = new Neq_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, YQLParser.RULE_neq_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.bit_subexpr();
	        this.state = 1128;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1123;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1116;
	                    this.match(YQLParser.SHIFT_LEFT);
	                    break;

	                case 2:
	                    this.state = 1117;
	                    this.shift_right();
	                    break;

	                case 3:
	                    this.state = 1118;
	                    this.match(YQLParser.ROT_LEFT);
	                    break;

	                case 4:
	                    this.state = 1119;
	                    this.rot_right();
	                    break;

	                case 5:
	                    this.state = 1120;
	                    this.match(YQLParser.AMPERSAND);
	                    break;

	                case 6:
	                    this.state = 1121;
	                    this.match(YQLParser.PIPE);
	                    break;

	                case 7:
	                    this.state = 1122;
	                    this.match(YQLParser.CARET);
	                    break;

	                }
	                this.state = 1125;
	                this.bit_subexpr(); 
	            }
	            this.state = 1130;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	        this.state = 1139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 1131;
	            this.double_question();
	            this.state = 1132;
	            this.neq_subexpr();

	        } else if(la_===2) {
	            this.state = 1135; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1134;
	                this.match(YQLParser.QUESTION);
	                this.state = 1137; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===27);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bit_subexpr() {
	    let localctx = new Bit_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, YQLParser.RULE_bit_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1141;
	        this.add_subexpr();
	        this.state = 1146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16 || _la===17) {
	            this.state = 1142;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===17)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1143;
	            this.add_subexpr();
	            this.state = 1148;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_subexpr() {
	    let localctx = new Add_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, YQLParser.RULE_add_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1149;
	        this.mul_subexpr();
	        this.state = 1154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3670016) !== 0)) {
	            this.state = 1150;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3670016) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1151;
	            this.mul_subexpr();
	            this.state = 1156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mul_subexpr() {
	    let localctx = new Mul_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, YQLParser.RULE_mul_subexpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.con_subexpr();
	        this.state = 1162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===13) {
	            this.state = 1158;
	            this.match(YQLParser.DOUBLE_PIPE);
	            this.state = 1159;
	            this.con_subexpr();
	            this.state = 1164;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	con_subexpr() {
	    let localctx = new Con_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, YQLParser.RULE_con_subexpr);
	    try {
	        this.state = 1169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1165;
	            this.unary_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1166;
	            this.unary_op();
	            this.state = 1167;
	            this.unary_subexpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_op() {
	    let localctx = new Unary_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, YQLParser.RULE_unary_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1171;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 458752) !== 0) || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_subexpr_suffix() {
	    let localctx = new Unary_subexpr_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, YQLParser.RULE_unary_subexpr_suffix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 23)) & ~0x1f) === 0 && ((1 << (_la - 23)) & 16389) !== 0)) {
	            this.state = 1181;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 37:
	                this.state = 1173;
	                this.key_expr();
	                break;
	            case 25:
	                this.state = 1174;
	                this.invoke_expr();
	                break;
	            case 23:
	                this.state = 1175;
	                this.match(YQLParser.DOT);
	                this.state = 1179;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 30:
	                    this.state = 1176;
	                    this.bind_parameter();
	                    break;
	                case 328:
	                    this.state = 1177;
	                    this.match(YQLParser.DIGITS);
	                    break;
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 142:
	                case 143:
	                case 144:
	                case 145:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 152:
	                case 153:
	                case 154:
	                case 155:
	                case 156:
	                case 157:
	                case 158:
	                case 159:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 164:
	                case 165:
	                case 166:
	                case 167:
	                case 168:
	                case 169:
	                case 170:
	                case 171:
	                case 172:
	                case 173:
	                case 174:
	                case 175:
	                case 176:
	                case 177:
	                case 178:
	                case 179:
	                case 180:
	                case 181:
	                case 182:
	                case 183:
	                case 184:
	                case 185:
	                case 186:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 193:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 200:
	                case 201:
	                case 202:
	                case 203:
	                case 204:
	                case 205:
	                case 206:
	                case 207:
	                case 208:
	                case 209:
	                case 210:
	                case 211:
	                case 212:
	                case 213:
	                case 214:
	                case 215:
	                case 216:
	                case 217:
	                case 218:
	                case 219:
	                case 220:
	                case 221:
	                case 222:
	                case 223:
	                case 224:
	                case 225:
	                case 226:
	                case 227:
	                case 228:
	                case 229:
	                case 230:
	                case 231:
	                case 232:
	                case 233:
	                case 234:
	                case 235:
	                case 236:
	                case 237:
	                case 238:
	                case 239:
	                case 240:
	                case 241:
	                case 242:
	                case 243:
	                case 245:
	                case 246:
	                case 247:
	                case 248:
	                case 249:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 255:
	                case 256:
	                case 257:
	                case 258:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 264:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 271:
	                case 272:
	                case 273:
	                case 274:
	                case 275:
	                case 276:
	                case 277:
	                case 278:
	                case 279:
	                case 280:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 285:
	                case 286:
	                case 287:
	                case 288:
	                case 289:
	                case 290:
	                case 291:
	                case 292:
	                case 293:
	                case 294:
	                case 295:
	                case 296:
	                case 297:
	                case 298:
	                case 300:
	                case 301:
	                case 302:
	                case 303:
	                case 304:
	                case 305:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 315:
	                case 316:
	                case 317:
	                case 318:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 323:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                    this.state = 1178;
	                    this.an_id_or_type();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 1188;
	            this.match(YQLParser.COLLATE);
	            this.state = 1189;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_casual_subexpr() {
	    let localctx = new Unary_casual_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, YQLParser.RULE_unary_casual_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1192;
	            this.id_expr();
	            break;

	        case 2:
	            this.state = 1193;
	            this.atom_expr();
	            break;

	        }
	        this.state = 1196;
	        this.unary_subexpr_suffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_unary_casual_subexpr() {
	    let localctx = new In_unary_casual_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, YQLParser.RULE_in_unary_casual_subexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1200;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1198;
	            this.id_expr_in();
	            break;

	        case 2:
	            this.state = 1199;
	            this.in_atom_expr();
	            break;

	        }
	        this.state = 1202;
	        this.unary_subexpr_suffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_subexpr() {
	    let localctx = new Unary_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, YQLParser.RULE_unary_subexpr);
	    try {
	        this.state = 1206;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1204;
	            this.unary_casual_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.json_api_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_unary_subexpr() {
	    let localctx = new In_unary_subexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, YQLParser.RULE_in_unary_subexpr);
	    try {
	        this.state = 1210;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1208;
	            this.in_unary_casual_subexpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1209;
	            this.json_api_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list_literal() {
	    let localctx = new List_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, YQLParser.RULE_list_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1212;
	        this.match(YQLParser.LBRACE_SQUARE);
	        this.state = 1214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	            this.state = 1213;
	            this.expr_list();
	        }

	        this.state = 1217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1216;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1219;
	        this.match(YQLParser.RBRACE_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_dict_list() {
	    let localctx = new Expr_dict_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, YQLParser.RULE_expr_dict_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1221;
	        this.expr();
	        this.state = 1224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28) {
	            this.state = 1222;
	            this.match(YQLParser.COLON);
	            this.state = 1223;
	            this.expr();
	        }

	        this.state = 1234;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1226;
	                this.match(YQLParser.COMMA);
	                this.state = 1227;
	                this.expr();
	                this.state = 1230;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===28) {
	                    this.state = 1228;
	                    this.match(YQLParser.COLON);
	                    this.state = 1229;
	                    this.expr();
	                }
	         
	            }
	            this.state = 1236;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict_literal() {
	    let localctx = new Dict_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, YQLParser.RULE_dict_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.match(YQLParser.LBRACE_CURLY);
	        this.state = 1239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	            this.state = 1238;
	            this.expr_dict_list();
	        }

	        this.state = 1242;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1241;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1244;
	        this.match(YQLParser.RBRACE_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_struct_list() {
	    let localctx = new Expr_struct_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, YQLParser.RULE_expr_struct_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this.expr();
	        this.state = 1247;
	        this.match(YQLParser.COLON);
	        this.state = 1248;
	        this.expr();
	        this.state = 1256;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1249;
	                this.match(YQLParser.COMMA);
	                this.state = 1250;
	                this.expr();
	                this.state = 1251;
	                this.match(YQLParser.COLON);
	                this.state = 1252;
	                this.expr(); 
	            }
	            this.state = 1258;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_literal() {
	    let localctx = new Struct_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, YQLParser.RULE_struct_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1259;
	        this.match(YQLParser.STRUCT_OPEN);
	        this.state = 1261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	            this.state = 1260;
	            this.expr_struct_list();
	        }

	        this.state = 1264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1263;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1266;
	        this.match(YQLParser.STRUCT_CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom_expr() {
	    let localctx = new Atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, YQLParser.RULE_atom_expr);
	    try {
	        this.state = 1285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1268;
	            this.literal_value();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1269;
	            this.bind_parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1270;
	            this.lambda();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1271;
	            this.cast_expr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1272;
	            this.exists_expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1273;
	            this.case_expr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1274;
	            this.an_id_or_type();
	            this.state = 1275;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1278;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 326:
	            case 327:
	                this.state = 1276;
	                this.id_or_type();
	                break;
	            case 325:
	                this.state = 1277;
	                this.match(YQLParser.STRING_VALUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1280;
	            this.value_constructor();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1281;
	            this.bitcast_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1282;
	            this.list_literal();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1283;
	            this.dict_literal();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1284;
	            this.struct_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_atom_expr() {
	    let localctx = new In_atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, YQLParser.RULE_in_atom_expr);
	    try {
	        this.state = 1307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1287;
	            this.literal_value();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1288;
	            this.bind_parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1289;
	            this.lambda();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1290;
	            this.cast_expr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1291;
	            this.case_expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1292;
	            this.an_id_or_type();
	            this.state = 1293;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1296;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 170:
	            case 171:
	            case 172:
	            case 173:
	            case 174:
	            case 175:
	            case 176:
	            case 177:
	            case 178:
	            case 179:
	            case 180:
	            case 181:
	            case 182:
	            case 183:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 195:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 210:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 326:
	            case 327:
	                this.state = 1294;
	                this.id_or_type();
	                break;
	            case 325:
	                this.state = 1295;
	                this.match(YQLParser.STRING_VALUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1298;
	            this.match(YQLParser.LPAREN);
	            this.state = 1299;
	            this.select_stmt();
	            this.state = 1300;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1302;
	            this.value_constructor();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1303;
	            this.bitcast_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1304;
	            this.list_literal();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1305;
	            this.dict_literal();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1306;
	            this.struct_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cast_expr() {
	    let localctx = new Cast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, YQLParser.RULE_cast_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1309;
	        this.match(YQLParser.CAST);
	        this.state = 1310;
	        this.match(YQLParser.LPAREN);
	        this.state = 1311;
	        this.expr();
	        this.state = 1312;
	        this.match(YQLParser.AS);
	        this.state = 1313;
	        this.type_name_or_bind();
	        this.state = 1314;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitcast_expr() {
	    let localctx = new Bitcast_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, YQLParser.RULE_bitcast_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        this.match(YQLParser.BITCAST);
	        this.state = 1317;
	        this.match(YQLParser.LPAREN);
	        this.state = 1318;
	        this.expr();
	        this.state = 1319;
	        this.match(YQLParser.AS);
	        this.state = 1320;
	        this.type_name_simple();
	        this.state = 1321;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exists_expr() {
	    let localctx = new Exists_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, YQLParser.RULE_exists_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1323;
	        this.match(YQLParser.EXISTS);
	        this.state = 1324;
	        this.match(YQLParser.LPAREN);
	        this.state = 1327;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 108:
	        case 141:
	        case 232:
	        case 237:
	        case 269:
	            this.state = 1325;
	            this.select_stmt();
	            break;
	        case 314:
	            this.state = 1326;
	            this.values_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1329;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_expr() {
	    let localctx = new Case_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, YQLParser.RULE_case_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1331;
	        this.match(YQLParser.CASE);
	        this.state = 1333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 1332;
	            this.expr();

	        }
	        this.state = 1336; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1335;
	            this.when_expr();
	            this.state = 1338; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===318);
	        this.state = 1342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 1340;
	            this.match(YQLParser.ELSE);
	            this.state = 1341;
	            this.expr();
	        }

	        this.state = 1344;
	        this.match(YQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda() {
	    let localctx = new LambdaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, YQLParser.RULE_lambda);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.smart_parenthesis();
	        this.state = 1358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 1347;
	            this.match(YQLParser.ARROW);
	            this.state = 1356;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 25:
	                this.state = 1348;
	                this.match(YQLParser.LPAREN);
	                this.state = 1349;
	                this.expr();
	                this.state = 1350;
	                this.match(YQLParser.RPAREN);
	                break;
	            case 31:
	                this.state = 1352;
	                this.match(YQLParser.LBRACE_CURLY);
	                this.state = 1353;
	                this.lambda_body();
	                this.state = 1354;
	                this.match(YQLParser.RBRACE_CURLY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_expr() {
	    let localctx = new In_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, YQLParser.RULE_in_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360;
	        this.in_unary_subexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_api_expr() {
	    let localctx = new Json_api_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, YQLParser.RULE_json_api_expr);
	    try {
	        this.state = 1365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 176:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1362;
	            this.json_value();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1363;
	            this.json_exists();
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1364;
	            this.json_query();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonpath_spec() {
	    let localctx = new Jsonpath_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, YQLParser.RULE_jsonpath_spec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this.match(YQLParser.STRING_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variable_name() {
	    let localctx = new Json_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, YQLParser.RULE_json_variable_name);
	    try {
	        this.state = 1371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1369;
	            this.id_expr();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1370;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variable() {
	    let localctx = new Json_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, YQLParser.RULE_json_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.expr();
	        this.state = 1374;
	        this.match(YQLParser.AS);
	        this.state = 1375;
	        this.json_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_variables() {
	    let localctx = new Json_variablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, YQLParser.RULE_json_variables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1377;
	        this.json_variable();
	        this.state = 1382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1378;
	            this.match(YQLParser.COMMA);
	            this.state = 1379;
	            this.json_variable();
	            this.state = 1384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_common_args() {
	    let localctx = new Json_common_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, YQLParser.RULE_json_common_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this.expr();
	        this.state = 1386;
	        this.match(YQLParser.COMMA);
	        this.state = 1387;
	        this.jsonpath_spec();
	        this.state = 1390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===219) {
	            this.state = 1388;
	            this.match(YQLParser.PASSING);
	            this.state = 1389;
	            this.json_variables();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_case_handler() {
	    let localctx = new Json_case_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, YQLParser.RULE_json_case_handler);
	    try {
	        this.state = 1396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 120:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1392;
	            this.match(YQLParser.ERROR);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1393;
	            this.match(YQLParser.NULL);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1394;
	            this.match(YQLParser.DEFAULT);
	            this.state = 1395;
	            this.expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_value() {
	    let localctx = new Json_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, YQLParser.RULE_json_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1398;
	        this.match(YQLParser.JSON_VALUE);
	        this.state = 1399;
	        this.match(YQLParser.LPAREN);
	        this.state = 1400;
	        this.json_common_args();
	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255) {
	            this.state = 1401;
	            this.match(YQLParser.RETURNING);
	            this.state = 1402;
	            this.type_name_simple();
	        }

	        this.state = 1411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===97 || _la===120 || _la===201) {
	            this.state = 1405;
	            this.json_case_handler();
	            this.state = 1406;
	            this.match(YQLParser.ON);
	            this.state = 1407;
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===120)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1414;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_exists_handler() {
	    let localctx = new Json_exists_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, YQLParser.RULE_json_exists_handler);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        _la = this._input.LA(1);
	        if(!(_la===120 || _la===132 || _la===299 || _la===306)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1417;
	        this.match(YQLParser.ON);
	        this.state = 1418;
	        this.match(YQLParser.ERROR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_exists() {
	    let localctx = new Json_existsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, YQLParser.RULE_json_exists);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.match(YQLParser.JSON_EXISTS);
	        this.state = 1421;
	        this.match(YQLParser.LPAREN);
	        this.state = 1422;
	        this.json_common_args();
	        this.state = 1424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===120 || _la===132 || _la===299 || _la===306) {
	            this.state = 1423;
	            this.json_exists_handler();
	        }

	        this.state = 1426;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query_wrapper() {
	    let localctx = new Json_query_wrapperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, YQLParser.RULE_json_query_wrapper);
	    var _la = 0;
	    try {
	        this.state = 1439;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 322:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1428;
	            this.match(YQLParser.WITHOUT);
	            this.state = 1430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1429;
	                this.match(YQLParser.ARRAY);
	            }

	            break;
	        case 321:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1432;
	            this.match(YQLParser.WITH);
	            this.state = 1434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80 || _la===303) {
	                this.state = 1433;
	                _la = this._input.LA(1);
	                if(!(_la===80 || _la===303)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1436;
	                this.match(YQLParser.ARRAY);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query_handler() {
	    let localctx = new Json_query_handlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, YQLParser.RULE_json_query_handler);
	    try {
	        this.state = 1447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1441;
	            this.match(YQLParser.ERROR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1442;
	            this.match(YQLParser.NULL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1443;
	            this.match(YQLParser.EMPTY);
	            this.state = 1444;
	            this.match(YQLParser.ARRAY);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1445;
	            this.match(YQLParser.EMPTY);
	            this.state = 1446;
	            this.match(YQLParser.OBJECT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	json_query() {
	    let localctx = new Json_queryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, YQLParser.RULE_json_query);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        this.match(YQLParser.JSON_QUERY);
	        this.state = 1450;
	        this.match(YQLParser.LPAREN);
	        this.state = 1451;
	        this.json_common_args();
	        this.state = 1455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321 || _la===322) {
	            this.state = 1452;
	            this.json_query_wrapper();
	            this.state = 1453;
	            this.match(YQLParser.WRAPPER);
	        }

	        this.state = 1461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1457;
	            this.json_query_handler();
	            this.state = 1458;
	            this.match(YQLParser.ON);
	            this.state = 1459;
	            this.match(YQLParser.EMPTY);

	        }
	        this.state = 1467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114 || _la===120 || _la===201) {
	            this.state = 1463;
	            this.json_query_handler();
	            this.state = 1464;
	            this.match(YQLParser.ON);
	            this.state = 1465;
	            this.match(YQLParser.ERROR);
	        }

	        this.state = 1469;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	smart_parenthesis() {
	    let localctx = new Smart_parenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, YQLParser.RULE_smart_parenthesis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(YQLParser.LPAREN);
	        this.state = 1473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	            this.state = 1472;
	            this.named_expr_list();
	        }

	        this.state = 1476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1475;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1478;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_list() {
	    let localctx = new Expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, YQLParser.RULE_expr_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.expr();
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1481;
	                this.match(YQLParser.COMMA);
	                this.state = 1482;
	                this.expr(); 
	            }
	            this.state = 1487;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_list() {
	    let localctx = new Pure_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, YQLParser.RULE_pure_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        this.match(YQLParser.LPAREN);
	        this.state = 1489;
	        this.an_id();
	        this.state = 1494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1490;
	            this.match(YQLParser.COMMA);
	            this.state = 1491;
	            this.an_id();
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1497;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_or_named() {
	    let localctx = new Pure_column_or_namedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, YQLParser.RULE_pure_column_or_named);
	    try {
	        this.state = 1501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.bind_parameter();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this.an_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pure_column_or_named_list() {
	    let localctx = new Pure_column_or_named_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, YQLParser.RULE_pure_column_or_named_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1503;
	        this.match(YQLParser.LPAREN);
	        this.state = 1504;
	        this.pure_column_or_named();
	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1505;
	            this.match(YQLParser.COMMA);
	            this.state = 1506;
	            this.pure_column_or_named();
	            this.state = 1511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1512;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, YQLParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1514;
	        this.opt_id_prefix();
	        this.state = 1515;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	without_column_name() {
	    let localctx = new Without_column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, YQLParser.RULE_without_column_name);
	    try {
	        this.state = 1522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1517;
	            this.an_id();
	            this.state = 1518;
	            this.match(YQLParser.DOT);
	            this.state = 1519;
	            this.an_id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1521;
	            this.an_id_without();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_list() {
	    let localctx = new Column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, YQLParser.RULE_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.column_name();
	        this.state = 1529;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1525;
	                this.match(YQLParser.COMMA);
	                this.state = 1526;
	                this.column_name(); 
	            }
	            this.state = 1531;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	        this.state = 1533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1532;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	without_column_list() {
	    let localctx = new Without_column_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, YQLParser.RULE_without_column_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1535;
	        this.without_column_name();
	        this.state = 1540;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1536;
	                this.match(YQLParser.COMMA);
	                this.state = 1537;
	                this.without_column_name(); 
	            }
	            this.state = 1542;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	        this.state = 1544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1543;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_expr() {
	    let localctx = new Named_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, YQLParser.RULE_named_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.expr();
	        this.state = 1549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1547;
	            this.match(YQLParser.AS);
	            this.state = 1548;
	            this.an_id_or_type();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_expr_list() {
	    let localctx = new Named_expr_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, YQLParser.RULE_named_expr_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1551;
	        this.named_expr();
	        this.state = 1556;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1552;
	                this.match(YQLParser.COMMA);
	                this.state = 1553;
	                this.named_expr(); 
	            }
	            this.state = 1558;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invoke_expr() {
	    let localctx = new Invoke_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, YQLParser.RULE_invoke_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1559;
	        this.match(YQLParser.LPAREN);
	        this.state = 1566;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 14:
	        case 16:
	        case 17:
	        case 18:
	        case 25:
	        case 30:
	        case 31:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        	this.state = 1560;
	        	this.opt_set_quantifier();
	        	this.state = 1561;
	        	this.named_expr_list();
	        	this.state = 1563;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===24) {
	        	    this.state = 1562;
	        	    this.match(YQLParser.COMMA);
	        	}

	        	break;
	        case 19:
	        	this.state = 1565;
	        	this.match(YQLParser.ASTERISK);
	        	break;
	        case 26:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1568;
	        this.match(YQLParser.RPAREN);
	        this.state = 1569;
	        this.invoke_expr_tail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invoke_expr_tail() {
	    let localctx = new Invoke_expr_tailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, YQLParser.RULE_invoke_expr_tail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1571;
	            this.null_treatment();

	        } else if(la_===2) {
	            this.state = 1572;
	            this.filter_clause();

	        }
	        this.state = 1577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===216) {
	            this.state = 1575;
	            this.match(YQLParser.OVER);
	            this.state = 1576;
	            this.window_name_or_specification();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_call_expr() {
	    let localctx = new Using_call_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, YQLParser.RULE_using_call_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1579;
	            this.an_id_or_type();
	            this.state = 1580;
	            this.match(YQLParser.NAMESPACE);
	            this.state = 1581;
	            this.an_id_or_type();
	            break;

	        case 2:
	            this.state = 1583;
	            this.an_id_expr();
	            break;

	        case 3:
	            this.state = 1584;
	            this.bind_parameter();
	            break;

	        case 4:
	            this.state = 1585;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 1586;
	            this.match(YQLParser.FUNCTION);
	            break;

	        }
	        this.state = 1589;
	        this.invoke_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_expr() {
	    let localctx = new Key_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, YQLParser.RULE_key_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1591;
	        this.match(YQLParser.LBRACE_SQUARE);
	        this.state = 1592;
	        this.expr();
	        this.state = 1593;
	        this.match(YQLParser.RBRACE_SQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	when_expr() {
	    let localctx = new When_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, YQLParser.RULE_when_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(YQLParser.WHEN);
	        this.state = 1596;
	        this.expr();
	        this.state = 1597;
	        this.match(YQLParser.THEN);
	        this.state = 1598;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, YQLParser.RULE_literal_value);
	    try {
	        this.state = 1610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1600;
	            this.integer();
	            break;
	        case 330:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1601;
	            this.real();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1602;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 331:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1603;
	            this.match(YQLParser.BLOB);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1604;
	            this.match(YQLParser.NULL);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1605;
	            this.match(YQLParser.CURRENT_TIME);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1606;
	            this.match(YQLParser.CURRENT_DATE);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1607;
	            this.match(YQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 132:
	        case 299:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1608;
	            this.bool_value();
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1609;
	            this.match(YQLParser.EMPTY_ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_parameter() {
	    let localctx = new Bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, YQLParser.RULE_bind_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612;
	        this.match(YQLParser.DOLLAR);
	        this.state = 1616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.state = 1613;
	            this.an_id_or_type();
	            break;
	        case 299:
	            this.state = 1614;
	            this.match(YQLParser.TRUE);
	            break;
	        case 132:
	            this.state = 1615;
	            this.match(YQLParser.FALSE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_bind_parameter() {
	    let localctx = new Opt_bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, YQLParser.RULE_opt_bind_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618;
	        this.bind_parameter();
	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 1619;
	            this.match(YQLParser.QUESTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind_parameter_list() {
	    let localctx = new Bind_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, YQLParser.RULE_bind_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1622;
	        this.bind_parameter();
	        this.state = 1627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1623;
	            this.match(YQLParser.COMMA);
	            this.state = 1624;
	            this.bind_parameter();
	            this.state = 1629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_bind_parameter() {
	    let localctx = new Named_bind_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, YQLParser.RULE_named_bind_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1630;
	        this.bind_parameter();
	        this.state = 1633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1631;
	            this.match(YQLParser.AS);
	            this.state = 1632;
	            this.bind_parameter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_bind_parameter_list() {
	    let localctx = new Named_bind_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, YQLParser.RULE_named_bind_parameter_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1635;
	        this.named_bind_parameter();
	        this.state = 1640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1636;
	            this.match(YQLParser.COMMA);
	            this.state = 1637;
	            this.named_bind_parameter();
	            this.state = 1642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, YQLParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16 || _la===17) {
	            this.state = 1643;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===17)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1648;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.state = 1646;
	            this.integer();
	            break;
	        case 330:
	            this.state = 1647;
	            this.real();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_simple() {
	    let localctx = new Type_name_simpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, YQLParser.RULE_type_name_simple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1650;
	        this.an_id_pure();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer_or_bind() {
	    let localctx = new Integer_or_bindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, YQLParser.RULE_integer_or_bind);
	    try {
	        this.state = 1654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1652;
	            this.integer();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1653;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tag() {
	    let localctx = new Type_name_tagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, YQLParser.RULE_type_name_tag);
	    try {
	        this.state = 1659;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1656;
	            this.id();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1657;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1658;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_arg() {
	    let localctx = new Struct_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, YQLParser.RULE_struct_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1661;
	        this.type_name_tag();
	        this.state = 1662;
	        this.match(YQLParser.COLON);
	        this.state = 1663;
	        this.type_name_or_bind();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_arg_positional() {
	    let localctx = new Struct_arg_positionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, YQLParser.RULE_struct_arg_positional);
	    var _la = 0;
	    try {
	        this.state = 1677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1665;
	            this.type_name_tag();
	            this.state = 1666;
	            this.type_name_or_bind();
	            this.state = 1671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199 || _la===201) {
	                this.state = 1668;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===199) {
	                    this.state = 1667;
	                    this.match(YQLParser.NOT);
	                }

	                this.state = 1670;
	                this.match(YQLParser.NULL);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1673;
	            this.type_name_or_bind();
	            this.state = 1674;
	            this.match(YQLParser.AS);
	            this.state = 1675;
	            this.type_name_tag();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_arg() {
	    let localctx = new Variant_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, YQLParser.RULE_variant_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1682;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 1679;
	            this.type_name_tag();
	            this.state = 1680;
	            this.match(YQLParser.COLON);

	        }
	        this.state = 1684;
	        this.type_name_or_bind();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callable_arg() {
	    let localctx = new Callable_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, YQLParser.RULE_callable_arg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1686;
	        this.variant_arg();
	        this.state = 1690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 1687;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 1688;
	            this.match(YQLParser.AUTOMAP);
	            this.state = 1689;
	            this.match(YQLParser.RBRACE_CURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callable_arg_list() {
	    let localctx = new Callable_arg_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, YQLParser.RULE_callable_arg_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1692;
	        this.callable_arg();
	        this.state = 1697;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1693;
	                this.match(YQLParser.COMMA);
	                this.state = 1694;
	                this.callable_arg(); 
	            }
	            this.state = 1699;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_decimal() {
	    let localctx = new Type_name_decimalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, YQLParser.RULE_type_name_decimal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.match(YQLParser.DECIMAL);
	        this.state = 1701;
	        this.match(YQLParser.LPAREN);
	        this.state = 1702;
	        this.integer_or_bind();
	        this.state = 1703;
	        this.match(YQLParser.COMMA);
	        this.state = 1704;
	        this.integer_or_bind();
	        this.state = 1705;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_optional() {
	    let localctx = new Type_name_optionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, YQLParser.RULE_type_name_optional);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1707;
	        this.match(YQLParser.OPTIONAL);
	        this.state = 1708;
	        this.match(YQLParser.LESS);
	        this.state = 1709;
	        this.type_name_or_bind();
	        this.state = 1710;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tuple() {
	    let localctx = new Type_name_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, YQLParser.RULE_type_name_tuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1712;
	        this.match(YQLParser.TUPLE);
	        this.state = 1729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1713;
	            this.match(YQLParser.LESS);
	            this.state = 1725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30 || _la===68 || _la===95 || _la===105 || _la===118 || _la===137 || _la===183 || _la===211 || ((((_la - 248)) & ~0x1f) === 0 && ((1 << (_la - 248)) & 3229614081) !== 0) || ((((_la - 290)) & ~0x1f) === 0 && ((1 << (_la - 290)) & 33555457) !== 0) || ((((_la - 325)) & ~0x1f) === 0 && ((1 << (_la - 325)) & 7) !== 0)) {
	                this.state = 1714;
	                this.type_name_or_bind();
	                this.state = 1719;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1715;
	                        this.match(YQLParser.COMMA);
	                        this.state = 1716;
	                        this.type_name_or_bind(); 
	                    }
	                    this.state = 1721;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
	                }

	                this.state = 1723;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 1722;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 1727;
	            this.match(YQLParser.GREATER);
	            break;
	        case 4:
	            this.state = 1728;
	            this.match(YQLParser.NOT_EQUALS2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_struct() {
	    let localctx = new Type_name_structContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, YQLParser.RULE_type_name_struct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.match(YQLParser.STRUCT);
	        this.state = 1748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1732;
	            this.match(YQLParser.LESS);
	            this.state = 1744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967231) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4278188031) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294965183) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4261412863) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4292870143) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4223664127) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4261281791) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 3758071791) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 1023) !== 0)) {
	                this.state = 1733;
	                this.struct_arg();
	                this.state = 1738;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1734;
	                        this.match(YQLParser.COMMA);
	                        this.state = 1735;
	                        this.struct_arg(); 
	                    }
	                    this.state = 1740;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	                }

	                this.state = 1742;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 1741;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 1746;
	            this.match(YQLParser.GREATER);
	            break;
	        case 4:
	            this.state = 1747;
	            this.match(YQLParser.NOT_EQUALS2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_variant() {
	    let localctx = new Type_name_variantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, YQLParser.RULE_type_name_variant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1750;
	        this.match(YQLParser.VARIANT);
	        this.state = 1751;
	        this.match(YQLParser.LESS);
	        this.state = 1752;
	        this.variant_arg();
	        this.state = 1757;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1753;
	                this.match(YQLParser.COMMA);
	                this.state = 1754;
	                this.variant_arg(); 
	            }
	            this.state = 1759;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
	        }

	        this.state = 1761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1760;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1763;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_list() {
	    let localctx = new Type_name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, YQLParser.RULE_type_name_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1765;
	        this.match(YQLParser.LIST);
	        this.state = 1766;
	        this.match(YQLParser.LESS);
	        this.state = 1767;
	        this.type_name_or_bind();
	        this.state = 1768;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_stream() {
	    let localctx = new Type_name_streamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, YQLParser.RULE_type_name_stream);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        this.match(YQLParser.STREAM);
	        this.state = 1771;
	        this.match(YQLParser.LESS);
	        this.state = 1772;
	        this.type_name_or_bind();
	        this.state = 1773;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_flow() {
	    let localctx = new Type_name_flowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, YQLParser.RULE_type_name_flow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this.match(YQLParser.FLOW);
	        this.state = 1776;
	        this.match(YQLParser.LESS);
	        this.state = 1777;
	        this.type_name_or_bind();
	        this.state = 1778;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_dict() {
	    let localctx = new Type_name_dictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, YQLParser.RULE_type_name_dict);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        this.match(YQLParser.DICT);
	        this.state = 1781;
	        this.match(YQLParser.LESS);
	        this.state = 1782;
	        this.type_name_or_bind();
	        this.state = 1783;
	        this.match(YQLParser.COMMA);
	        this.state = 1784;
	        this.type_name_or_bind();
	        this.state = 1785;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_set() {
	    let localctx = new Type_name_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, YQLParser.RULE_type_name_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1787;
	        this.match(YQLParser.SET);
	        this.state = 1788;
	        this.match(YQLParser.LESS);
	        this.state = 1789;
	        this.type_name_or_bind();
	        this.state = 1790;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_enum() {
	    let localctx = new Type_name_enumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, YQLParser.RULE_type_name_enum);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1792;
	        this.match(YQLParser.ENUM);
	        this.state = 1793;
	        this.match(YQLParser.LESS);
	        this.state = 1794;
	        this.type_name_tag();
	        this.state = 1799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1795;
	                this.match(YQLParser.COMMA);
	                this.state = 1796;
	                this.type_name_tag(); 
	            }
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	        this.state = 1803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1802;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1805;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_resource() {
	    let localctx = new Type_name_resourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, YQLParser.RULE_type_name_resource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1807;
	        this.match(YQLParser.RESOURCE);
	        this.state = 1808;
	        this.match(YQLParser.LESS);
	        this.state = 1809;
	        this.type_name_tag();
	        this.state = 1810;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_tagged() {
	    let localctx = new Type_name_taggedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, YQLParser.RULE_type_name_tagged);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        this.match(YQLParser.TAGGED);
	        this.state = 1813;
	        this.match(YQLParser.LESS);
	        this.state = 1814;
	        this.type_name_or_bind();
	        this.state = 1815;
	        this.match(YQLParser.COMMA);
	        this.state = 1816;
	        this.type_name_tag();
	        this.state = 1817;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_callable() {
	    let localctx = new Type_name_callableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, YQLParser.RULE_type_name_callable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1819;
	        this.match(YQLParser.CALLABLE);
	        this.state = 1820;
	        this.match(YQLParser.LESS);
	        this.state = 1821;
	        this.match(YQLParser.LPAREN);
	        this.state = 1823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967295) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4294967295) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294967231) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4294967295) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4294967295) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4290772991) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4294967295) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 4294959103) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 1023) !== 0)) {
	            this.state = 1822;
	            this.callable_arg_list();
	        }

	        this.state = 1826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 1825;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 1832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37) {
	            this.state = 1828;
	            this.match(YQLParser.LBRACE_SQUARE);
	            this.state = 1829;
	            this.callable_arg_list();
	            this.state = 1830;
	            this.match(YQLParser.RBRACE_SQUARE);
	        }

	        this.state = 1834;
	        this.match(YQLParser.RPAREN);
	        this.state = 1835;
	        this.match(YQLParser.ARROW);
	        this.state = 1836;
	        this.type_name_or_bind();
	        this.state = 1837;
	        this.match(YQLParser.GREATER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_composite() {
	    let localctx = new Type_name_compositeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, YQLParser.RULE_type_name_composite);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1852;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 211:
	            this.state = 1839;
	            this.type_name_optional();
	            break;
	        case 300:
	            this.state = 1840;
	            this.type_name_tuple();
	            break;
	        case 279:
	            this.state = 1841;
	            this.type_name_struct();
	            break;
	        case 315:
	            this.state = 1842;
	            this.type_name_variant();
	            break;
	        case 183:
	            this.state = 1843;
	            this.type_name_list();
	            break;
	        case 278:
	            this.state = 1844;
	            this.type_name_stream();
	            break;
	        case 137:
	            this.state = 1845;
	            this.type_name_flow();
	            break;
	        case 105:
	            this.state = 1846;
	            this.type_name_dict();
	            break;
	        case 271:
	            this.state = 1847;
	            this.type_name_set();
	            break;
	        case 118:
	            this.state = 1848;
	            this.type_name_enum();
	            break;
	        case 248:
	            this.state = 1849;
	            this.type_name_resource();
	            break;
	        case 290:
	            this.state = 1850;
	            this.type_name_tagged();
	            break;
	        case 68:
	            this.state = 1851;
	            this.type_name_callable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 1854;
	            this.match(YQLParser.QUESTION);
	            this.state = 1859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, YQLParser.RULE_type_name);
	    var _la = 0;
	    try {
	        this.state = 1871;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 248:
	        case 271:
	        case 278:
	        case 279:
	        case 290:
	        case 300:
	        case 315:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1860;
	            this.type_name_composite();
	            break;
	        case 95:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1863;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 95:
	                this.state = 1861;
	                this.type_name_decimal();
	                break;
	            case 325:
	            case 326:
	            case 327:
	                this.state = 1862;
	                this.type_name_simple();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 1865;
	                this.match(YQLParser.QUESTION);
	                this.state = 1870;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name_or_bind() {
	    let localctx = new Type_name_or_bindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, YQLParser.RULE_type_name_or_bind);
	    try {
	        this.state = 1875;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 95:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 248:
	        case 271:
	        case 278:
	        case 279:
	        case 290:
	        case 300:
	        case 315:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1873;
	            this.type_name();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1874;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_constructor_literal() {
	    let localctx = new Value_constructor_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, YQLParser.RULE_value_constructor_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1877;
	        this.match(YQLParser.STRING_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_constructor() {
	    let localctx = new Value_constructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, YQLParser.RULE_value_constructor);
	    try {
	        this.state = 1902;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 315:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1879;
	            this.match(YQLParser.VARIANT);
	            this.state = 1880;
	            this.match(YQLParser.LPAREN);
	            this.state = 1881;
	            this.expr();
	            this.state = 1882;
	            this.match(YQLParser.COMMA);
	            this.state = 1883;
	            this.expr();
	            this.state = 1884;
	            this.match(YQLParser.COMMA);
	            this.state = 1885;
	            this.expr();
	            this.state = 1886;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1888;
	            this.match(YQLParser.ENUM);
	            this.state = 1889;
	            this.match(YQLParser.LPAREN);
	            this.state = 1890;
	            this.expr();
	            this.state = 1891;
	            this.match(YQLParser.COMMA);
	            this.state = 1892;
	            this.expr();
	            this.state = 1893;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1895;
	            this.match(YQLParser.CALLABLE);
	            this.state = 1896;
	            this.match(YQLParser.LPAREN);
	            this.state = 1897;
	            this.expr();
	            this.state = 1898;
	            this.match(YQLParser.COMMA);
	            this.state = 1899;
	            this.expr();
	            this.state = 1900;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declare_stmt() {
	    let localctx = new Declare_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, YQLParser.RULE_declare_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this.match(YQLParser.DECLARE);
	        this.state = 1905;
	        this.bind_parameter();
	        this.state = 1906;
	        this.match(YQLParser.AS);
	        this.state = 1907;
	        this.type_name();
	        this.state = 1910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 1908;
	            this.match(YQLParser.EQUALS);
	            this.state = 1909;
	            this.literal_value();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_path() {
	    let localctx = new Module_pathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, YQLParser.RULE_module_path);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 1912;
	            this.match(YQLParser.DOT);
	        }

	        this.state = 1915;
	        this.an_id();
	        this.state = 1920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 1916;
	            this.match(YQLParser.DOT);
	            this.state = 1917;
	            this.an_id();
	            this.state = 1922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, YQLParser.RULE_import_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1923;
	        this.match(YQLParser.IMPORT);
	        this.state = 1924;
	        this.module_path();
	        this.state = 1925;
	        this.match(YQLParser.SYMBOLS);
	        this.state = 1926;
	        this.named_bind_parameter_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	export_stmt() {
	    let localctx = new Export_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, YQLParser.RULE_export_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this.match(YQLParser.EXPORT);
	        this.state = 1929;
	        this.bind_parameter_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_action() {
	    let localctx = new Call_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, YQLParser.RULE_call_action);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1933;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	            this.state = 1931;
	            this.bind_parameter();
	            break;
	        case 115:
	            this.state = 1932;
	            this.match(YQLParser.EMPTY_ACTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1935;
	        this.match(YQLParser.LPAREN);
	        this.state = 1937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	            this.state = 1936;
	            this.expr_list();
	        }

	        this.state = 1939;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inline_action() {
	    let localctx = new Inline_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, YQLParser.RULE_inline_action);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1941;
	        this.match(YQLParser.BEGIN);
	        this.state = 1942;
	        this.define_action_or_subquery_body();
	        this.state = 1943;
	        this.match(YQLParser.END);
	        this.state = 1944;
	        this.match(YQLParser.DO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_stmt() {
	    let localctx = new Do_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, YQLParser.RULE_do_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1946;
	        this.match(YQLParser.DO);
	        this.state = 1949;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 115:
	            this.state = 1947;
	            this.call_action();
	            break;
	        case 63:
	            this.state = 1948;
	            this.inline_action();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_stmt() {
	    let localctx = new Pragma_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, YQLParser.RULE_pragma_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1951;
	        this.match(YQLParser.PRAGMA);
	        this.state = 1952;
	        this.opt_id_prefix_or_type();
	        this.state = 1953;
	        this.an_id();
	        this.state = 1967;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 1:
	        	this.state = 1954;
	        	this.match(YQLParser.EQUALS);
	        	this.state = 1955;
	        	this.pragma_value();
	        	break;
	        case 25:
	        	this.state = 1956;
	        	this.match(YQLParser.LPAREN);
	        	this.state = 1957;
	        	this.pragma_value();
	        	this.state = 1962;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===24) {
	        	    this.state = 1958;
	        	    this.match(YQLParser.COMMA);
	        	    this.state = 1959;
	        	    this.pragma_value();
	        	    this.state = 1964;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1965;
	        	this.match(YQLParser.RPAREN);
	        	break;
	        case -1:
	        case 22:
	        case 117:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, YQLParser.RULE_pragma_value);
	    try {
	        this.state = 1974;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 17:
	        case 328:
	        case 329:
	        case 330:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1969;
	            this.signed_number();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1970;
	            this.id();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1971;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 132:
	        case 299:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1972;
	            this.bool_value();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1973;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_specification() {
	    let localctx = new Sort_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, YQLParser.RULE_sort_specification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1976;
	        this.expr();
	        this.state = 1978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===102) {
	            this.state = 1977;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort_specification_list() {
	    let localctx = new Sort_specification_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, YQLParser.RULE_sort_specification_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1980;
	        this.sort_specification();
	        this.state = 1985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 1981;
	            this.match(YQLParser.COMMA);
	            this.state = 1982;
	            this.sort_specification();
	            this.state = 1987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, YQLParser.RULE_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1988;
	        this.select_kind_parenthesis();
	        this.state = 1994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===169 || _la===304) {
	            this.state = 1989;
	            this.select_op();
	            this.state = 1990;
	            this.select_kind_parenthesis();
	            this.state = 1996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_unparenthesized_stmt() {
	    let localctx = new Select_unparenthesized_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, YQLParser.RULE_select_unparenthesized_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1997;
	        this.select_kind_partial();
	        this.state = 2003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===169 || _la===304) {
	            this.state = 1998;
	            this.select_op();
	            this.state = 1999;
	            this.select_kind_parenthesis();
	            this.state = 2005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind_parenthesis() {
	    let localctx = new Select_kind_parenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, YQLParser.RULE_select_kind_parenthesis);
	    try {
	        this.state = 2011;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 141:
	        case 232:
	        case 237:
	        case 269:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2006;
	            this.select_kind_partial();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2007;
	            this.match(YQLParser.LPAREN);
	            this.state = 2008;
	            this.select_kind_partial();
	            this.state = 2009;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_op() {
	    let localctx = new Select_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, YQLParser.RULE_select_op);
	    var _la = 0;
	    try {
	        this.state = 2019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 304:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2013;
	            this.match(YQLParser.UNION);
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 2014;
	                this.match(YQLParser.ALL);
	            }

	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2017;
	            this.match(YQLParser.INTERSECT);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2018;
	            this.match(YQLParser.EXCEPT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind_partial() {
	    let localctx = new Select_kind_partialContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, YQLParser.RULE_select_kind_partial);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        this.select_kind();
	        this.state = 2028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===182) {
	            this.state = 2022;
	            this.match(YQLParser.LIMIT);
	            this.state = 2023;
	            this.expr();
	            this.state = 2026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || _la===205) {
	                this.state = 2024;
	                _la = this._input.LA(1);
	                if(!(_la===24 || _la===205)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2025;
	                this.expr();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_kind() {
	    let localctx = new Select_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, YQLParser.RULE_select_kind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 2030;
	            this.match(YQLParser.DISCARD);
	        }

	        this.state = 2036;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 232:
	            this.state = 2033;
	            this.process_core();
	            break;
	        case 237:
	            this.state = 2034;
	            this.reduce_core();
	            break;
	        case 141:
	        case 269:
	            this.state = 2035;
	            this.select_core();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===170) {
	            this.state = 2038;
	            this.match(YQLParser.INTO);
	            this.state = 2039;
	            this.match(YQLParser.RESULT);
	            this.state = 2040;
	            this.pure_column_or_named();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	process_core() {
	    let localctx = new Process_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, YQLParser.RULE_process_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.match(YQLParser.PROCESS);
	        this.state = 2045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 2044;
	            this.match(YQLParser.STREAM);

	        }
	        this.state = 2047;
	        this.named_single_source();
	        this.state = 2052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2048;
	            this.match(YQLParser.COMMA);
	            this.state = 2049;
	            this.named_single_source();
	            this.state = 2054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2077;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 2055;
	            this.match(YQLParser.USING);
	            this.state = 2056;
	            this.using_call_expr();
	            this.state = 2059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 2057;
	                this.match(YQLParser.AS);
	                this.state = 2058;
	                this.an_id();
	            }

	            this.state = 2063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 2061;
	                this.match(YQLParser.WITH);
	                this.state = 2062;
	                this.external_call_settings();
	            }

	            this.state = 2067;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===319) {
	                this.state = 2065;
	                this.match(YQLParser.WHERE);
	                this.state = 2066;
	                this.expr();
	            }

	            this.state = 2071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===151) {
	                this.state = 2069;
	                this.match(YQLParser.HAVING);
	                this.state = 2070;
	                this.expr();
	            }

	            this.state = 2075;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 2073;
	                this.match(YQLParser.ASSUME);
	                this.state = 2074;
	                this.order_by_clause();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_call_param() {
	    let localctx = new External_call_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, YQLParser.RULE_external_call_param);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2079;
	        this.an_id();
	        this.state = 2080;
	        this.match(YQLParser.EQUALS);
	        this.state = 2081;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_call_settings() {
	    let localctx = new External_call_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, YQLParser.RULE_external_call_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2083;
	        this.external_call_param();
	        this.state = 2088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2084;
	            this.match(YQLParser.COMMA);
	            this.state = 2085;
	            this.external_call_param();
	            this.state = 2090;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reduce_core() {
	    let localctx = new Reduce_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, YQLParser.RULE_reduce_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2091;
	        this.match(YQLParser.REDUCE);
	        this.state = 2092;
	        this.named_single_source();
	        this.state = 2097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2093;
	            this.match(YQLParser.COMMA);
	            this.state = 2094;
	            this.named_single_source();
	            this.state = 2099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===229) {
	            this.state = 2100;
	            this.match(YQLParser.PRESORT);
	            this.state = 2101;
	            this.sort_specification_list();
	        }

	        this.state = 2104;
	        this.match(YQLParser.ON);
	        this.state = 2105;
	        this.column_list();
	        this.state = 2106;
	        this.match(YQLParser.USING);
	        this.state = 2108;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        if(la_===1) {
	            this.state = 2107;
	            this.match(YQLParser.ALL);

	        }
	        this.state = 2110;
	        this.using_call_expr();
	        this.state = 2113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2111;
	            this.match(YQLParser.AS);
	            this.state = 2112;
	            this.an_id();
	        }

	        this.state = 2117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===319) {
	            this.state = 2115;
	            this.match(YQLParser.WHERE);
	            this.state = 2116;
	            this.expr();
	        }

	        this.state = 2121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===151) {
	            this.state = 2119;
	            this.match(YQLParser.HAVING);
	            this.state = 2120;
	            this.expr();
	        }

	        this.state = 2125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 2123;
	            this.match(YQLParser.ASSUME);
	            this.state = 2124;
	            this.order_by_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_set_quantifier() {
	    let localctx = new Opt_set_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, YQLParser.RULE_opt_set_quantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        if(la_===1) {
	            this.state = 2127;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===109)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, YQLParser.RULE_select_core);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===141) {
	            this.state = 2130;
	            this.match(YQLParser.FROM);
	            this.state = 2131;
	            this.join_source();
	        }

	        this.state = 2134;
	        this.match(YQLParser.SELECT);
	        this.state = 2136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 2135;
	            this.match(YQLParser.STREAM);

	        }
	        this.state = 2138;
	        this.opt_set_quantifier();
	        this.state = 2139;
	        this.result_column();
	        this.state = 2144;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2140;
	                this.match(YQLParser.COMMA);
	                this.state = 2141;
	                this.result_column(); 
	            }
	            this.state = 2146;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	        }

	        this.state = 2148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2147;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 2152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===322) {
	            this.state = 2150;
	            this.match(YQLParser.WITHOUT);
	            this.state = 2151;
	            this.without_column_list();
	        }

	        this.state = 2156;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===141) {
	            this.state = 2154;
	            this.match(YQLParser.FROM);
	            this.state = 2155;
	            this.join_source();
	        }

	        this.state = 2160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===319) {
	            this.state = 2158;
	            this.match(YQLParser.WHERE);
	            this.state = 2159;
	            this.expr();
	        }

	        this.state = 2163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 2162;
	            this.group_by_clause();
	        }

	        this.state = 2167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===151) {
	            this.state = 2165;
	            this.match(YQLParser.HAVING);
	            this.state = 2166;
	            this.expr();
	        }

	        this.state = 2170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===320) {
	            this.state = 2169;
	            this.window_clause();
	        }

	        this.state = 2173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51 || _la===213) {
	            this.state = 2172;
	            this.ext_order_by_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_recognition_clause() {
	    let localctx = new Row_pattern_recognition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, YQLParser.RULE_row_pattern_recognition_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2175;
	        this.match(YQLParser.MATCH_RECOGNIZE);
	        this.state = 2176;
	        this.match(YQLParser.LPAREN);
	        this.state = 2178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===218) {
	            this.state = 2177;
	            this.window_partition_clause();
	        }

	        this.state = 2181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===213) {
	            this.state = 2180;
	            this.order_by_clause();
	        }

	        this.state = 2184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 2183;
	            this.row_pattern_measures();
	        }

	        this.state = 2187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42 || _la===208) {
	            this.state = 2186;
	            this.row_pattern_rows_per_match();
	        }

	        this.state = 2189;
	        this.row_pattern_common_syntax();
	        this.state = 2190;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_rows_per_match() {
	    let localctx = new Row_pattern_rows_per_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, YQLParser.RULE_row_pattern_rows_per_match);
	    var _la = 0;
	    try {
	        this.state = 2203;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 208:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2192;
	            this.match(YQLParser.ONE);
	            this.state = 2193;
	            this.match(YQLParser.ROW);
	            this.state = 2194;
	            this.match(YQLParser.PER);
	            this.state = 2195;
	            this.match(YQLParser.MATCH);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2196;
	            this.match(YQLParser.ALL);
	            this.state = 2197;
	            this.match(YQLParser.ROWS);
	            this.state = 2198;
	            this.match(YQLParser.PER);
	            this.state = 2199;
	            this.match(YQLParser.MATCH);
	            this.state = 2201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===206 || _la===273 || _la===321) {
	                this.state = 2200;
	                this.row_pattern_empty_match_handling();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_empty_match_handling() {
	    let localctx = new Row_pattern_empty_match_handlingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, YQLParser.RULE_row_pattern_empty_match_handling);
	    try {
	        this.state = 2214;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 273:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2205;
	            this.match(YQLParser.SHOW);
	            this.state = 2206;
	            this.match(YQLParser.EMPTY);
	            this.state = 2207;
	            this.match(YQLParser.MATCHES);
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2208;
	            this.match(YQLParser.OMIT);
	            this.state = 2209;
	            this.match(YQLParser.EMPTY);
	            this.state = 2210;
	            this.match(YQLParser.MATCHES);
	            break;
	        case 321:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2211;
	            this.match(YQLParser.WITH);
	            this.state = 2212;
	            this.match(YQLParser.UNMATCHED);
	            this.state = 2213;
	            this.match(YQLParser.ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measures() {
	    let localctx = new Row_pattern_measuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, YQLParser.RULE_row_pattern_measures);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2216;
	        this.match(YQLParser.MEASURES);
	        this.state = 2217;
	        this.row_pattern_measure_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measure_list() {
	    let localctx = new Row_pattern_measure_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, YQLParser.RULE_row_pattern_measure_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        this.row_pattern_measure_definition();
	        this.state = 2224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2220;
	            this.match(YQLParser.COMMA);
	            this.state = 2221;
	            this.row_pattern_measure_definition();
	            this.state = 2226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_measure_definition() {
	    let localctx = new Row_pattern_measure_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, YQLParser.RULE_row_pattern_measure_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2227;
	        this.expr();
	        this.state = 2228;
	        this.match(YQLParser.AS);
	        this.state = 2229;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_common_syntax() {
	    let localctx = new Row_pattern_common_syntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, YQLParser.RULE_row_pattern_common_syntax);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 2231;
	            this.match(YQLParser.AFTER);
	            this.state = 2232;
	            this.match(YQLParser.MATCH);
	            this.state = 2233;
	            this.row_pattern_skip_to();
	        }

	        this.state = 2237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164 || _la===268) {
	            this.state = 2236;
	            this.row_pattern_initial_or_seek();
	        }

	        this.state = 2239;
	        this.match(YQLParser.PATTERN);
	        this.state = 2240;
	        this.match(YQLParser.LPAREN);
	        this.state = 2241;
	        this.row_pattern();
	        this.state = 2242;
	        this.match(YQLParser.RPAREN);
	        this.state = 2244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===281) {
	            this.state = 2243;
	            this.row_pattern_subset_clause();
	        }

	        this.state = 2246;
	        this.match(YQLParser.DEFINE);
	        this.state = 2247;
	        this.row_pattern_definition_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_skip_to() {
	    let localctx = new Row_pattern_skip_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, YQLParser.RULE_row_pattern_skip_to);
	    try {
	        this.state = 2268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2249;
	            this.match(YQLParser.TSKIP);
	            this.state = 2250;
	            this.match(YQLParser.TO);
	            this.state = 2251;
	            this.match(YQLParser.NEXT);
	            this.state = 2252;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2253;
	            this.match(YQLParser.TSKIP);
	            this.state = 2254;
	            this.match(YQLParser.PAST);
	            this.state = 2255;
	            this.match(YQLParser.LAST);
	            this.state = 2256;
	            this.match(YQLParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2257;
	            this.match(YQLParser.TSKIP);
	            this.state = 2258;
	            this.match(YQLParser.TO);
	            this.state = 2259;
	            this.match(YQLParser.FIRST);
	            this.state = 2260;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2261;
	            this.match(YQLParser.TSKIP);
	            this.state = 2262;
	            this.match(YQLParser.TO);
	            this.state = 2263;
	            this.match(YQLParser.LAST);
	            this.state = 2264;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2265;
	            this.match(YQLParser.TSKIP);
	            this.state = 2266;
	            this.match(YQLParser.TO);
	            this.state = 2267;
	            this.row_pattern_skip_to_variable_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_skip_to_variable_name() {
	    let localctx = new Row_pattern_skip_to_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, YQLParser.RULE_row_pattern_skip_to_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2270;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_initial_or_seek() {
	    let localctx = new Row_pattern_initial_or_seekContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, YQLParser.RULE_row_pattern_initial_or_seek);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2272;
	        _la = this._input.LA(1);
	        if(!(_la===164 || _la===268)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern() {
	    let localctx = new Row_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, YQLParser.RULE_row_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2274;
	        this.row_pattern_term();
	        this.state = 2279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 2275;
	            this.match(YQLParser.PIPE);
	            this.state = 2276;
	            this.row_pattern_term();
	            this.state = 2281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_term() {
	    let localctx = new Row_pattern_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, YQLParser.RULE_row_pattern_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2283; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2282;
	            this.row_pattern_factor();
	            this.state = 2285; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 353) !== 0) || _la===224 || _la===326 || _la===327);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_factor() {
	    let localctx = new Row_pattern_factorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, YQLParser.RULE_row_pattern_factor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2287;
	        this.row_pattern_primary();
	        this.state = 2289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        if(la_===1) {
	            this.state = 2288;
	            this.row_pattern_quantifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_quantifier() {
	    let localctx = new Row_pattern_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, YQLParser.RULE_row_pattern_quantifier);
	    var _la = 0;
	    try {
	        this.state = 2319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2291;
	            this.match(YQLParser.ASTERISK);
	            this.state = 2293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2292;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2295;
	            this.match(YQLParser.PLUS);
	            this.state = 2297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2296;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2299;
	            this.match(YQLParser.QUESTION);
	            this.state = 2301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2300;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2303;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===328 || _la===329) {
	                this.state = 2304;
	                this.integer();
	            }

	            this.state = 2307;
	            this.match(YQLParser.COMMA);
	            this.state = 2309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===328 || _la===329) {
	                this.state = 2308;
	                this.integer();
	            }

	            this.state = 2311;
	            this.match(YQLParser.RBRACE_CURLY);
	            this.state = 2313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2312;
	                this.match(YQLParser.QUESTION);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2315;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2316;
	            this.integer();
	            this.state = 2317;
	            this.match(YQLParser.RBRACE_CURLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_primary() {
	    let localctx = new Row_pattern_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, YQLParser.RULE_row_pattern_primary);
	    var _la = 0;
	    try {
	        this.state = 2336;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2321;
	            this.row_pattern_primary_variable_name();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2322;
	            this.match(YQLParser.DOLLAR);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2323;
	            this.match(YQLParser.CARET);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2324;
	            this.match(YQLParser.LPAREN);
	            this.state = 2326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 353) !== 0) || _la===224 || _la===326 || _la===327) {
	                this.state = 2325;
	                this.row_pattern();
	            }

	            this.state = 2328;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2329;
	            this.match(YQLParser.LBRACE_CURLY);
	            this.state = 2330;
	            this.match(YQLParser.MINUS);
	            this.state = 2331;
	            this.row_pattern();
	            this.state = 2332;
	            this.match(YQLParser.MINUS);
	            this.state = 2333;
	            this.match(YQLParser.RBRACE_CURLY);
	            break;
	        case 224:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2335;
	            this.row_pattern_permute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_primary_variable_name() {
	    let localctx = new Row_pattern_primary_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, YQLParser.RULE_row_pattern_primary_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2338;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_permute() {
	    let localctx = new Row_pattern_permuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, YQLParser.RULE_row_pattern_permute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2340;
	        this.match(YQLParser.PERMUTE);
	        this.state = 2341;
	        this.match(YQLParser.LPAREN);
	        this.state = 2342;
	        this.row_pattern();
	        this.state = 2347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2343;
	            this.match(YQLParser.COMMA);
	            this.state = 2344;
	            this.row_pattern();
	            this.state = 2349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2350;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_clause() {
	    let localctx = new Row_pattern_subset_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, YQLParser.RULE_row_pattern_subset_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2352;
	        this.match(YQLParser.SUBSET);
	        this.state = 2353;
	        this.row_pattern_subset_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_list() {
	    let localctx = new Row_pattern_subset_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, YQLParser.RULE_row_pattern_subset_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2355;
	        this.row_pattern_subset_item();
	        this.state = 2360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2356;
	            this.match(YQLParser.COMMA);
	            this.state = 2357;
	            this.row_pattern_subset_item();
	            this.state = 2362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_item() {
	    let localctx = new Row_pattern_subset_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, YQLParser.RULE_row_pattern_subset_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2363;
	        this.row_pattern_subset_item_variable_name();
	        this.state = 2364;
	        this.match(YQLParser.EQUALS);
	        this.state = 2365;
	        this.match(YQLParser.LPAREN);
	        this.state = 2366;
	        this.row_pattern_subset_rhs();
	        this.state = 2367;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_item_variable_name() {
	    let localctx = new Row_pattern_subset_item_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, YQLParser.RULE_row_pattern_subset_item_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_rhs() {
	    let localctx = new Row_pattern_subset_rhsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, YQLParser.RULE_row_pattern_subset_rhs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2371;
	        this.row_pattern_subset_rhs_variable_name();
	        this.state = 2376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2372;
	            this.match(YQLParser.COMMA);
	            this.state = 2373;
	            this.row_pattern_subset_rhs_variable_name();
	            this.state = 2378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_subset_rhs_variable_name() {
	    let localctx = new Row_pattern_subset_rhs_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, YQLParser.RULE_row_pattern_subset_rhs_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2379;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_list() {
	    let localctx = new Row_pattern_definition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, YQLParser.RULE_row_pattern_definition_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2381;
	        this.row_pattern_definition();
	        this.state = 2386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2382;
	            this.match(YQLParser.COMMA);
	            this.state = 2383;
	            this.row_pattern_definition();
	            this.state = 2388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition() {
	    let localctx = new Row_pattern_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, YQLParser.RULE_row_pattern_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2389;
	        this.row_pattern_definition_variable_name();
	        this.state = 2390;
	        this.match(YQLParser.AS);
	        this.state = 2391;
	        this.row_pattern_definition_search_condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_variable_name() {
	    let localctx = new Row_pattern_definition_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, YQLParser.RULE_row_pattern_definition_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2393;
	        this.row_pattern_variable_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_definition_search_condition() {
	    let localctx = new Row_pattern_definition_search_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, YQLParser.RULE_row_pattern_definition_search_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2395;
	        this.search_condition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	search_condition() {
	    let localctx = new Search_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, YQLParser.RULE_search_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2397;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	row_pattern_variable_name() {
	    let localctx = new Row_pattern_variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, YQLParser.RULE_row_pattern_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2399;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by_clause() {
	    let localctx = new Order_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, YQLParser.RULE_order_by_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2401;
	        this.match(YQLParser.ORDER);
	        this.state = 2402;
	        this.match(YQLParser.BY);
	        this.state = 2403;
	        this.sort_specification_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ext_order_by_clause() {
	    let localctx = new Ext_order_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, YQLParser.RULE_ext_order_by_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 2405;
	            this.match(YQLParser.ASSUME);
	        }

	        this.state = 2408;
	        this.order_by_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_by_clause() {
	    let localctx = new Group_by_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, YQLParser.RULE_group_by_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2410;
	        this.match(YQLParser.GROUP);
	        this.state = 2412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 2411;
	            this.match(YQLParser.COMPACT);
	        }

	        this.state = 2414;
	        this.match(YQLParser.BY);
	        this.state = 2415;
	        this.opt_set_quantifier();
	        this.state = 2416;
	        this.grouping_element_list();
	        this.state = 2419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2417;
	            this.match(YQLParser.WITH);
	            this.state = 2418;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_element_list() {
	    let localctx = new Grouping_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, YQLParser.RULE_grouping_element_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2421;
	        this.grouping_element();
	        this.state = 2426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2422;
	            this.match(YQLParser.COMMA);
	            this.state = 2423;
	            this.grouping_element();
	            this.state = 2428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_element() {
	    let localctx = new Grouping_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, YQLParser.RULE_grouping_element);
	    try {
	        this.state = 2434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2429;
	            this.ordinary_grouping_set();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2430;
	            this.rollup_list();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2431;
	            this.cube_list();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2432;
	            this.grouping_sets_specification();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2433;
	            this.hopping_window_specification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinary_grouping_set() {
	    let localctx = new Ordinary_grouping_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, YQLParser.RULE_ordinary_grouping_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2436;
	        this.named_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinary_grouping_set_list() {
	    let localctx = new Ordinary_grouping_set_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, YQLParser.RULE_ordinary_grouping_set_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2438;
	        this.ordinary_grouping_set();
	        this.state = 2443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2439;
	            this.match(YQLParser.COMMA);
	            this.state = 2440;
	            this.ordinary_grouping_set();
	            this.state = 2445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollup_list() {
	    let localctx = new Rollup_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, YQLParser.RULE_rollup_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2446;
	        this.match(YQLParser.ROLLUP);
	        this.state = 2447;
	        this.match(YQLParser.LPAREN);
	        this.state = 2448;
	        this.ordinary_grouping_set_list();
	        this.state = 2449;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cube_list() {
	    let localctx = new Cube_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, YQLParser.RULE_cube_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.match(YQLParser.CUBE);
	        this.state = 2452;
	        this.match(YQLParser.LPAREN);
	        this.state = 2453;
	        this.ordinary_grouping_set_list();
	        this.state = 2454;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grouping_sets_specification() {
	    let localctx = new Grouping_sets_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, YQLParser.RULE_grouping_sets_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2456;
	        this.match(YQLParser.GROUPING);
	        this.state = 2457;
	        this.match(YQLParser.SETS);
	        this.state = 2458;
	        this.match(YQLParser.LPAREN);
	        this.state = 2459;
	        this.grouping_element_list();
	        this.state = 2460;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hopping_window_specification() {
	    let localctx = new Hopping_window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, YQLParser.RULE_hopping_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2462;
	        this.match(YQLParser.HOP);
	        this.state = 2463;
	        this.match(YQLParser.LPAREN);
	        this.state = 2464;
	        this.expr();
	        this.state = 2465;
	        this.match(YQLParser.COMMA);
	        this.state = 2466;
	        this.expr();
	        this.state = 2467;
	        this.match(YQLParser.COMMA);
	        this.state = 2468;
	        this.expr();
	        this.state = 2469;
	        this.match(YQLParser.COMMA);
	        this.state = 2470;
	        this.expr();
	        this.state = 2471;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, YQLParser.RULE_result_column);
	    try {
	        this.state = 2482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2473;
	            this.opt_id_prefix();
	            this.state = 2474;
	            this.match(YQLParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2476;
	            this.expr();
	            this.state = 2480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	            if(la_===1) {
	                this.state = 2477;
	                this.match(YQLParser.AS);
	                this.state = 2478;
	                this.an_id_or_type();

	            } else if(la_===2) {
	                this.state = 2479;
	                this.an_id_as_compat();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_source() {
	    let localctx = new Join_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, YQLParser.RULE_join_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        if(la_===1) {
	            this.state = 2484;
	            this.match(YQLParser.ANY);

	        }
	        this.state = 2487;
	        this.flatten_source();
	        this.state = 2498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24 || _la===87 || _la===125 || _la===142 || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 536879233) !== 0) || _la===215 || _la===258) {
	            this.state = 2488;
	            this.join_op();
	            this.state = 2490;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	            if(la_===1) {
	                this.state = 2489;
	                this.match(YQLParser.ANY);

	            }
	            this.state = 2492;
	            this.flatten_source();
	            this.state = 2494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207 || _la===312) {
	                this.state = 2493;
	                this.join_constraint();
	            }

	            this.state = 2500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_column() {
	    let localctx = new Named_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, YQLParser.RULE_named_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.column_name();
	        this.state = 2504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2502;
	            this.match(YQLParser.AS);
	            this.state = 2503;
	            this.an_id();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_by_arg() {
	    let localctx = new Flatten_by_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, YQLParser.RULE_flatten_by_arg);
	    var _la = 0;
	    try {
	        this.state = 2514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2506;
	            this.named_column();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2507;
	            this.match(YQLParser.LPAREN);
	            this.state = 2508;
	            this.named_expr_list();
	            this.state = 2510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 2509;
	                this.match(YQLParser.COMMA);
	            }

	            this.state = 2512;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flatten_source() {
	    let localctx = new Flatten_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, YQLParser.RULE_flatten_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2516;
	        this.named_single_source();
	        this.state = 2526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136) {
	            this.state = 2517;
	            this.match(YQLParser.FLATTEN);
	            this.state = 2524;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 67:
	            case 105:
	            case 183:
	            case 211:
	                this.state = 2519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===105 || _la===183 || _la===211) {
	                    this.state = 2518;
	                    _la = this._input.LA(1);
	                    if(!(_la===105 || _la===183 || _la===211)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 2521;
	                this.match(YQLParser.BY);
	                this.state = 2522;
	                this.flatten_by_arg();
	                break;
	            case 77:
	                this.state = 2523;
	                this.match(YQLParser.COLUMNS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_single_source() {
	    let localctx = new Named_single_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, YQLParser.RULE_named_single_source);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2528;
	        this.single_source();
	        this.state = 2530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        if(la_===1) {
	            this.state = 2529;
	            this.row_pattern_recognition_clause();

	        }
	        this.state = 2540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        if(la_===1) {
	            this.state = 2535;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 49:
	                this.state = 2532;
	                this.match(YQLParser.AS);
	                this.state = 2533;
	                this.an_id();
	                break;
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 48:
	            case 50:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 67:
	            case 69:
	            case 72:
	            case 73:
	            case 74:
	            case 78:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 89:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 106:
	            case 107:
	            case 108:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 116:
	            case 117:
	            case 120:
	            case 121:
	            case 122:
	            case 124:
	            case 126:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 138:
	            case 139:
	            case 140:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 150:
	            case 153:
	            case 154:
	            case 155:
	            case 156:
	            case 157:
	            case 158:
	            case 159:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 164:
	            case 165:
	            case 167:
	            case 168:
	            case 170:
	            case 171:
	            case 178:
	            case 180:
	            case 181:
	            case 184:
	            case 185:
	            case 186:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 193:
	            case 194:
	            case 196:
	            case 197:
	            case 198:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 208:
	            case 209:
	            case 210:
	            case 212:
	            case 213:
	            case 214:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 230:
	            case 231:
	            case 233:
	            case 234:
	            case 235:
	            case 238:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 243:
	            case 245:
	            case 246:
	            case 247:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 256:
	            case 257:
	            case 259:
	            case 260:
	            case 262:
	            case 265:
	            case 267:
	            case 268:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 280:
	            case 281:
	            case 282:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 301:
	            case 303:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 313:
	            case 314:
	            case 317:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	                this.state = 2534;
	                this.an_id_as_compat();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 2537;
	                this.pure_column_list();
	            }


	        }
	        this.state = 2544;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 264:
	        	this.state = 2542;
	        	this.sample_clause();
	        	break;
	        case 288:
	        	this.state = 2543;
	        	this.tablesample_clause();
	        	break;
	        case -1:
	        case 22:
	        case 24:
	        case 26:
	        case 51:
	        case 87:
	        case 117:
	        case 123:
	        case 125:
	        case 136:
	        case 142:
	        case 147:
	        case 151:
	        case 166:
	        case 169:
	        case 170:
	        case 173:
	        case 179:
	        case 182:
	        case 195:
	        case 207:
	        case 213:
	        case 215:
	        case 229:
	        case 255:
	        case 258:
	        case 269:
	        case 304:
	        case 312:
	        case 319:
	        case 320:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_source() {
	    let localctx = new Single_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, YQLParser.RULE_single_source);
	    try {
	        this.state = 2555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2546;
	            this.table_ref();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2547;
	            this.match(YQLParser.LPAREN);
	            this.state = 2548;
	            this.select_stmt();
	            this.state = 2549;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2551;
	            this.match(YQLParser.LPAREN);
	            this.state = 2552;
	            this.values_stmt();
	            this.state = 2553;
	            this.match(YQLParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample_clause() {
	    let localctx = new Sample_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, YQLParser.RULE_sample_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2557;
	        this.match(YQLParser.SAMPLE);
	        this.state = 2558;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablesample_clause() {
	    let localctx = new Tablesample_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, YQLParser.RULE_tablesample_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2560;
	        this.match(YQLParser.TABLESAMPLE);
	        this.state = 2561;
	        this.sampling_mode();
	        this.state = 2562;
	        this.match(YQLParser.LPAREN);
	        this.state = 2563;
	        this.expr();
	        this.state = 2564;
	        this.match(YQLParser.RPAREN);
	        this.state = 2566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===244) {
	            this.state = 2565;
	            this.repeatable_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampling_mode() {
	    let localctx = new Sampling_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, YQLParser.RULE_sampling_mode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===285)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatable_clause() {
	    let localctx = new Repeatable_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, YQLParser.RULE_repeatable_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2570;
	        this.match(YQLParser.REPEATABLE);
	        this.state = 2571;
	        this.match(YQLParser.LPAREN);
	        this.state = 2572;
	        this.expr();
	        this.state = 2573;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_op() {
	    let localctx = new Join_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, YQLParser.RULE_join_op);
	    var _la = 0;
	    try {
	        this.state = 2599;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2575;
	            this.match(YQLParser.COMMA);
	            break;
	        case 87:
	        case 125:
	        case 142:
	        case 166:
	        case 173:
	        case 179:
	        case 195:
	        case 215:
	        case 258:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===195) {
	                this.state = 2576;
	                this.match(YQLParser.NATURAL);
	            }

	            this.state = 2596;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 125:
	            case 142:
	            case 173:
	            case 179:
	            case 215:
	            case 258:
	                this.state = 2589;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 179:
	                	this.state = 2579;
	                	this.match(YQLParser.LEFT);
	                	this.state = 2581;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===209 || _la===270) {
	                	    this.state = 2580;
	                	    _la = this._input.LA(1);
	                	    if(!(_la===209 || _la===270)) {
	                	    this._errHandler.recoverInline(this);
	                	    }
	                	    else {
	                	    	this._errHandler.reportMatch(this);
	                	        this.consume();
	                	    }
	                	}

	                	break;
	                case 258:
	                	this.state = 2583;
	                	this.match(YQLParser.RIGHT);
	                	this.state = 2585;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===209 || _la===270) {
	                	    this.state = 2584;
	                	    _la = this._input.LA(1);
	                	    if(!(_la===209 || _la===270)) {
	                	    this._errHandler.recoverInline(this);
	                	    }
	                	    else {
	                	    	this._errHandler.reportMatch(this);
	                	        this.consume();
	                	    }
	                	}

	                	break;
	                case 125:
	                	this.state = 2587;
	                	this.match(YQLParser.EXCLUSION);
	                	break;
	                case 142:
	                	this.state = 2588;
	                	this.match(YQLParser.FULL);
	                	break;
	                case 173:
	                case 215:
	                	break;
	                default:
	                	break;
	                }
	                this.state = 2592;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===215) {
	                    this.state = 2591;
	                    this.match(YQLParser.OUTER);
	                }

	                break;
	            case 166:
	                this.state = 2594;
	                this.match(YQLParser.INNER);
	                break;
	            case 87:
	                this.state = 2595;
	                this.match(YQLParser.CROSS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2598;
	            this.match(YQLParser.JOIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, YQLParser.RULE_join_constraint);
	    try {
	        this.state = 2605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 207:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2601;
	            this.match(YQLParser.ON);
	            this.state = 2602;
	            this.expr();
	            break;
	        case 312:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2603;
	            this.match(YQLParser.USING);
	            this.state = 2604;
	            this.pure_column_or_named_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returning_columns_list() {
	    let localctx = new Returning_columns_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, YQLParser.RULE_returning_columns_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2607;
	        this.match(YQLParser.RETURNING);
	        this.state = 2617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.state = 2608;
	            this.match(YQLParser.ASTERISK);
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.state = 2609;
	            this.an_id();
	            this.state = 2614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 2610;
	                this.match(YQLParser.COMMA);
	                this.state = 2611;
	                this.an_id();
	                this.state = 2616;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_table_stmt() {
	    let localctx = new Into_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, YQLParser.RULE_into_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2619;
	            this.match(YQLParser.INSERT);
	            break;

	        case 2:
	            this.state = 2620;
	            this.match(YQLParser.INSERT);
	            this.state = 2621;
	            this.match(YQLParser.OR);
	            this.state = 2622;
	            this.match(YQLParser.ABORT);
	            break;

	        case 3:
	            this.state = 2623;
	            this.match(YQLParser.INSERT);
	            this.state = 2624;
	            this.match(YQLParser.OR);
	            this.state = 2625;
	            this.match(YQLParser.REVERT);
	            break;

	        case 4:
	            this.state = 2626;
	            this.match(YQLParser.INSERT);
	            this.state = 2627;
	            this.match(YQLParser.OR);
	            this.state = 2628;
	            this.match(YQLParser.IGNORE);
	            break;

	        case 5:
	            this.state = 2629;
	            this.match(YQLParser.UPSERT);
	            break;

	        case 6:
	            this.state = 2630;
	            this.match(YQLParser.REPLACE);
	            break;

	        }
	        this.state = 2633;
	        this.match(YQLParser.INTO);
	        this.state = 2634;
	        this.into_simple_table_ref();
	        this.state = 2635;
	        this.into_values_source();
	        this.state = 2637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255) {
	            this.state = 2636;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_values_source() {
	    let localctx = new Into_values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, YQLParser.RULE_into_values_source);
	    try {
	        this.state = 2645;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 108:
	        case 141:
	        case 232:
	        case 237:
	        case 269:
	        case 314:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2640;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 2639;
	                this.pure_column_list();

	            }
	            this.state = 2642;
	            this.values_source();
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2643;
	            this.match(YQLParser.DEFAULT);
	            this.state = 2644;
	            this.match(YQLParser.VALUES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_stmt() {
	    let localctx = new Values_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, YQLParser.RULE_values_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2647;
	        this.match(YQLParser.VALUES);
	        this.state = 2648;
	        this.values_source_row_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source() {
	    let localctx = new Values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, YQLParser.RULE_values_source);
	    try {
	        this.state = 2652;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 314:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2650;
	            this.values_stmt();
	            break;
	        case 25:
	        case 108:
	        case 141:
	        case 232:
	        case 237:
	        case 269:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2651;
	            this.select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source_row_list() {
	    let localctx = new Values_source_row_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, YQLParser.RULE_values_source_row_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2654;
	        this.values_source_row();
	        this.state = 2659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2655;
	            this.match(YQLParser.COMMA);
	            this.state = 2656;
	            this.values_source_row();
	            this.state = 2661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values_source_row() {
	    let localctx = new Values_source_rowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, YQLParser.RULE_values_source_row);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this.match(YQLParser.LPAREN);
	        this.state = 2663;
	        this.expr_list();
	        this.state = 2664;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_values_source() {
	    let localctx = new Simple_values_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, YQLParser.RULE_simple_values_source);
	    try {
	        this.state = 2668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2666;
	            this.expr_list();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2667;
	            this.select_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_external_data_source_stmt() {
	    let localctx = new Create_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, YQLParser.RULE_create_external_data_source_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2670;
	        this.match(YQLParser.CREATE);
	        this.state = 2673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 2671;
	            this.match(YQLParser.OR);
	            this.state = 2672;
	            this.match(YQLParser.REPLACE);
	        }

	        this.state = 2675;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2676;
	        this.match(YQLParser.DATA);
	        this.state = 2677;
	        this.match(YQLParser.SOURCE);
	        this.state = 2681;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        if(la_===1) {
	            this.state = 2678;
	            this.match(YQLParser.IF);
	            this.state = 2679;
	            this.match(YQLParser.NOT);
	            this.state = 2680;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2683;
	        this.object_ref();
	        this.state = 2684;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_data_source_stmt() {
	    let localctx = new Alter_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, YQLParser.RULE_alter_external_data_source_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2686;
	        this.match(YQLParser.ALTER);
	        this.state = 2687;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2688;
	        this.match(YQLParser.DATA);
	        this.state = 2689;
	        this.match(YQLParser.SOURCE);
	        this.state = 2690;
	        this.object_ref();
	        this.state = 2691;
	        this.alter_external_data_source_action();
	        this.state = 2696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2692;
	            this.match(YQLParser.COMMA);
	            this.state = 2693;
	            this.alter_external_data_source_action();
	            this.state = 2698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_data_source_action() {
	    let localctx = new Alter_external_data_source_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, YQLParser.RULE_alter_external_data_source_action);
	    try {
	        this.state = 2702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2699;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2700;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2701;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_external_data_source_stmt() {
	    let localctx = new Drop_external_data_source_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, YQLParser.RULE_drop_external_data_source_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2704;
	        this.match(YQLParser.DROP);
	        this.state = 2705;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 2706;
	        this.match(YQLParser.DATA);
	        this.state = 2707;
	        this.match(YQLParser.SOURCE);
	        this.state = 2710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        if(la_===1) {
	            this.state = 2708;
	            this.match(YQLParser.IF);
	            this.state = 2709;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2712;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_view_stmt() {
	    let localctx = new Create_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, YQLParser.RULE_create_view_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2714;
	        this.match(YQLParser.CREATE);
	        this.state = 2715;
	        this.match(YQLParser.VIEW);
	        this.state = 2719;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 2716;
	            this.match(YQLParser.IF);
	            this.state = 2717;
	            this.match(YQLParser.NOT);
	            this.state = 2718;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2721;
	        this.object_ref();
	        this.state = 2723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2722;
	            this.create_object_features();
	        }

	        this.state = 2725;
	        this.match(YQLParser.AS);
	        this.state = 2726;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_view_stmt() {
	    let localctx = new Drop_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, YQLParser.RULE_drop_view_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2728;
	        this.match(YQLParser.DROP);
	        this.state = 2729;
	        this.match(YQLParser.VIEW);
	        this.state = 2732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        if(la_===1) {
	            this.state = 2730;
	            this.match(YQLParser.IF);
	            this.state = 2731;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2734;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upsert_object_stmt() {
	    let localctx = new Upsert_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, YQLParser.RULE_upsert_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2736;
	        this.match(YQLParser.UPSERT);
	        this.state = 2737;
	        this.match(YQLParser.OBJECT);
	        this.state = 2738;
	        this.object_ref();
	        this.state = 2739;
	        this.match(YQLParser.LPAREN);
	        this.state = 2740;
	        this.match(YQLParser.TYPE);
	        this.state = 2741;
	        this.object_type_ref();
	        this.state = 2742;
	        this.match(YQLParser.RPAREN);
	        this.state = 2744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2743;
	            this.create_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_object_stmt() {
	    let localctx = new Create_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, YQLParser.RULE_create_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2746;
	        this.match(YQLParser.CREATE);
	        this.state = 2747;
	        this.match(YQLParser.OBJECT);
	        this.state = 2751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        if(la_===1) {
	            this.state = 2748;
	            this.match(YQLParser.IF);
	            this.state = 2749;
	            this.match(YQLParser.NOT);
	            this.state = 2750;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2753;
	        this.object_ref();
	        this.state = 2754;
	        this.match(YQLParser.LPAREN);
	        this.state = 2755;
	        this.match(YQLParser.TYPE);
	        this.state = 2756;
	        this.object_type_ref();
	        this.state = 2757;
	        this.match(YQLParser.RPAREN);
	        this.state = 2759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2758;
	            this.create_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_object_features() {
	    let localctx = new Create_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, YQLParser.RULE_create_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2761;
	        this.match(YQLParser.WITH);
	        this.state = 2762;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_object_stmt() {
	    let localctx = new Alter_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, YQLParser.RULE_alter_object_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2764;
	        this.match(YQLParser.ALTER);
	        this.state = 2765;
	        this.match(YQLParser.OBJECT);
	        this.state = 2766;
	        this.object_ref();
	        this.state = 2767;
	        this.match(YQLParser.LPAREN);
	        this.state = 2768;
	        this.match(YQLParser.TYPE);
	        this.state = 2769;
	        this.object_type_ref();
	        this.state = 2770;
	        this.match(YQLParser.RPAREN);
	        this.state = 2771;
	        this.alter_object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_object_features() {
	    let localctx = new Alter_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, YQLParser.RULE_alter_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2773;
	        this.match(YQLParser.SET);
	        this.state = 2774;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_object_stmt() {
	    let localctx = new Drop_object_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, YQLParser.RULE_drop_object_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2776;
	        this.match(YQLParser.DROP);
	        this.state = 2777;
	        this.match(YQLParser.OBJECT);
	        this.state = 2780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        if(la_===1) {
	            this.state = 2778;
	            this.match(YQLParser.IF);
	            this.state = 2779;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2782;
	        this.object_ref();
	        this.state = 2783;
	        this.match(YQLParser.LPAREN);
	        this.state = 2784;
	        this.match(YQLParser.TYPE);
	        this.state = 2785;
	        this.object_type_ref();
	        this.state = 2786;
	        this.match(YQLParser.RPAREN);
	        this.state = 2788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2787;
	            this.drop_object_features();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_object_features() {
	    let localctx = new Drop_object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, YQLParser.RULE_drop_object_features);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2790;
	        this.match(YQLParser.WITH);
	        this.state = 2791;
	        this.object_features();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_value() {
	    let localctx = new Object_feature_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, YQLParser.RULE_object_feature_value);
	    try {
	        this.state = 2797;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2793;
	            this.id_or_type();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2794;
	            this.bind_parameter();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2795;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 132:
	        case 299:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2796;
	            this.bool_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_kv() {
	    let localctx = new Object_feature_kvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, YQLParser.RULE_object_feature_kv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2799;
	        this.an_id_or_type();
	        this.state = 2800;
	        this.match(YQLParser.EQUALS);
	        this.state = 2801;
	        this.object_feature_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature_flag() {
	    let localctx = new Object_feature_flagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, YQLParser.RULE_object_feature_flag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2803;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_feature() {
	    let localctx = new Object_featureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, YQLParser.RULE_object_feature);
	    try {
	        this.state = 2807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2805;
	            this.object_feature_kv();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2806;
	            this.object_feature_flag();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_features() {
	    let localctx = new Object_featuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, YQLParser.RULE_object_features);
	    var _la = 0;
	    try {
	        this.state = 2821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2809;
	            this.object_feature();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2810;
	            this.match(YQLParser.LPAREN);
	            this.state = 2811;
	            this.object_feature();
	            this.state = 2816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 2812;
	                this.match(YQLParser.COMMA);
	                this.state = 2813;
	                this.object_feature();
	                this.state = 2818;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2819;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_type_ref() {
	    let localctx = new Object_type_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, YQLParser.RULE_object_type_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2823;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, YQLParser.RULE_create_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2825;
	        this.match(YQLParser.CREATE);
	        this.state = 2828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 2826;
	            this.match(YQLParser.OR);
	            this.state = 2827;
	            this.match(YQLParser.REPLACE);
	        }

	        this.state = 2838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 286:
	            this.state = 2830;
	            this.match(YQLParser.TABLE);
	            break;
	        case 289:
	            this.state = 2831;
	            this.match(YQLParser.TABLESTORE);
	            break;
	        case 130:
	            this.state = 2832;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 2833;
	            this.match(YQLParser.TABLE);
	            break;
	        case 291:
	            this.state = 2834;
	            this.match(YQLParser.TEMP);
	            this.state = 2835;
	            this.match(YQLParser.TABLE);
	            break;
	        case 292:
	            this.state = 2836;
	            this.match(YQLParser.TEMPORARY);
	            this.state = 2837;
	            this.match(YQLParser.TABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        if(la_===1) {
	            this.state = 2840;
	            this.match(YQLParser.IF);
	            this.state = 2841;
	            this.match(YQLParser.NOT);
	            this.state = 2842;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 2845;
	        this.simple_table_ref();
	        this.state = 2846;
	        this.match(YQLParser.LPAREN);
	        this.state = 2847;
	        this.create_table_entry();
	        this.state = 2852;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,279,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2848;
	                this.match(YQLParser.COMMA);
	                this.state = 2849;
	                this.create_table_entry(); 
	            }
	            this.state = 2854;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,279,this._ctx);
	        }

	        this.state = 2856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2855;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 2858;
	        this.match(YQLParser.RPAREN);
	        this.state = 2860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163) {
	            this.state = 2859;
	            this.table_inherits();
	        }

	        this.state = 2863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===218) {
	            this.state = 2862;
	            this.table_partition_by();
	        }

	        this.state = 2866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 2865;
	            this.with_table_settings();
	        }

	        this.state = 2869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===289) {
	            this.state = 2868;
	            this.table_tablestore();
	        }

	        this.state = 2872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2871;
	            this.table_as_source();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_entry() {
	    let localctx = new Create_table_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, YQLParser.RULE_create_table_entry);
	    try {
	        this.state = 2880;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2874;
	            this.column_schema();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2875;
	            this.table_constraint();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2876;
	            this.table_index();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2877;
	            this.family_entry();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2878;
	            this.changefeed();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2879;
	            this.an_id_schema();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_stmt() {
	    let localctx = new Create_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, YQLParser.RULE_create_backup_collection_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2882;
	        this.match(YQLParser.CREATE);
	        this.state = 2883;
	        this.backup_collection();
	        this.state = 2885;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===94) {
	            this.state = 2884;
	            this.create_backup_collection_entries();
	        }

	        this.state = 2887;
	        this.match(YQLParser.WITH);
	        this.state = 2888;
	        this.match(YQLParser.LPAREN);
	        this.state = 2889;
	        this.backup_collection_settings();
	        this.state = 2890;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_stmt() {
	    let localctx = new Alter_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, YQLParser.RULE_alter_backup_collection_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2892;
	        this.match(YQLParser.ALTER);
	        this.state = 2893;
	        this.backup_collection();
	        this.state = 2896;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 247:
	        case 271:
	            this.state = 2894;
	            this.alter_backup_collection_actions();
	            break;
	        case 40:
	        case 111:
	            this.state = 2895;
	            this.alter_backup_collection_entries();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_backup_collection_stmt() {
	    let localctx = new Drop_backup_collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, YQLParser.RULE_drop_backup_collection_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2898;
	        this.match(YQLParser.DROP);
	        this.state = 2899;
	        this.backup_collection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_entries() {
	    let localctx = new Create_backup_collection_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, YQLParser.RULE_create_backup_collection_entries);
	    try {
	        this.state = 2903;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2901;
	            this.match(YQLParser.DATABASE);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2902;
	            this.create_backup_collection_entries_many();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_backup_collection_entries_many() {
	    let localctx = new Create_backup_collection_entries_manyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, YQLParser.RULE_create_backup_collection_entries_many);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2905;
	        this.match(YQLParser.LPAREN);
	        this.state = 2906;
	        this.table_list();
	        this.state = 2907;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_list() {
	    let localctx = new Table_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, YQLParser.RULE_table_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2909;
	        this.match(YQLParser.TABLE);
	        this.state = 2910;
	        this.an_id_table();
	        this.state = 2916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2911;
	            this.match(YQLParser.COMMA);
	            this.state = 2912;
	            this.match(YQLParser.TABLE);
	            this.state = 2913;
	            this.an_id_table();
	            this.state = 2918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_actions() {
	    let localctx = new Alter_backup_collection_actionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, YQLParser.RULE_alter_backup_collection_actions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2919;
	        this.alter_backup_collection_action();
	        this.state = 2924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2920;
	            this.match(YQLParser.COMMA);
	            this.state = 2921;
	            this.alter_backup_collection_action();
	            this.state = 2926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_action() {
	    let localctx = new Alter_backup_collection_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, YQLParser.RULE_alter_backup_collection_action);
	    try {
	        this.state = 2929;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2927;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2928;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_entries() {
	    let localctx = new Alter_backup_collection_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, YQLParser.RULE_alter_backup_collection_entries);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2931;
	        this.alter_backup_collection_entry();
	        this.state = 2936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2932;
	            this.match(YQLParser.COMMA);
	            this.state = 2933;
	            this.alter_backup_collection_entry();
	            this.state = 2938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_backup_collection_entry() {
	    let localctx = new Alter_backup_collection_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, YQLParser.RULE_alter_backup_collection_entry);
	    try {
	        this.state = 2949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2939;
	            this.match(YQLParser.ADD);
	            this.state = 2940;
	            this.match(YQLParser.DATABASE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2941;
	            this.match(YQLParser.DROP);
	            this.state = 2942;
	            this.match(YQLParser.DATABASE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2943;
	            this.match(YQLParser.ADD);
	            this.state = 2944;
	            this.match(YQLParser.TABLE);
	            this.state = 2945;
	            this.an_id_table();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2946;
	            this.match(YQLParser.DROP);
	            this.state = 2947;
	            this.match(YQLParser.TABLE);
	            this.state = 2948;
	            this.an_id_table();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection() {
	    let localctx = new Backup_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, YQLParser.RULE_backup_collection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2951;
	        this.match(YQLParser.BACKUP);
	        this.state = 2952;
	        this.match(YQLParser.COLLECTION);
	        this.state = 2953;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection_settings() {
	    let localctx = new Backup_collection_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, YQLParser.RULE_backup_collection_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2955;
	        this.backup_collection_settings_entry();
	        this.state = 2960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2956;
	            this.match(YQLParser.COMMA);
	            this.state = 2957;
	            this.backup_collection_settings_entry();
	            this.state = 2962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_collection_settings_entry() {
	    let localctx = new Backup_collection_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, YQLParser.RULE_backup_collection_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2963;
	        this.an_id();
	        this.state = 2964;
	        this.match(YQLParser.EQUALS);
	        this.state = 2965;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backup_stmt() {
	    let localctx = new Backup_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, YQLParser.RULE_backup_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2967;
	        this.match(YQLParser.BACKUP);
	        this.state = 2968;
	        this.object_ref();
	        this.state = 2970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===160) {
	            this.state = 2969;
	            this.match(YQLParser.INCREMENTAL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restore_stmt() {
	    let localctx = new Restore_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, YQLParser.RULE_restore_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2972;
	        this.match(YQLParser.RESTORE);
	        this.state = 2973;
	        this.object_ref();
	        this.state = 2976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 2974;
	            this.match(YQLParser.AT);
	            this.state = 2975;
	            this.match(YQLParser.STRING_VALUE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_inherits() {
	    let localctx = new Table_inheritsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, YQLParser.RULE_table_inherits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2978;
	        this.match(YQLParser.INHERITS);
	        this.state = 2979;
	        this.match(YQLParser.LPAREN);
	        this.state = 2980;
	        this.simple_table_ref_core();
	        this.state = 2985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2981;
	            this.match(YQLParser.COMMA);
	            this.state = 2982;
	            this.simple_table_ref_core();
	            this.state = 2987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2988;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_partition_by() {
	    let localctx = new Table_partition_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, YQLParser.RULE_table_partition_by);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2990;
	        this.match(YQLParser.PARTITION);
	        this.state = 2991;
	        this.match(YQLParser.BY);
	        this.state = 2992;
	        this.match(YQLParser.HASH);
	        this.state = 2993;
	        this.pure_column_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_table_settings() {
	    let localctx = new With_table_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, YQLParser.RULE_with_table_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2995;
	        this.match(YQLParser.WITH);
	        this.state = 2996;
	        this.match(YQLParser.LPAREN);
	        this.state = 2997;
	        this.table_settings_entry();
	        this.state = 3002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2998;
	            this.match(YQLParser.COMMA);
	            this.state = 2999;
	            this.table_settings_entry();
	            this.state = 3004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3005;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_tablestore() {
	    let localctx = new Table_tablestoreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, YQLParser.RULE_table_tablestore);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3007;
	        this.match(YQLParser.TABLESTORE);
	        this.state = 3008;
	        this.simple_table_ref_core();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_settings_entry() {
	    let localctx = new Table_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, YQLParser.RULE_table_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3010;
	        this.an_id();
	        this.state = 3011;
	        this.match(YQLParser.EQUALS);
	        this.state = 3012;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_as_source() {
	    let localctx = new Table_as_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, YQLParser.RULE_table_as_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3014;
	        this.match(YQLParser.AS);
	        this.state = 3015;
	        this.values_source();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_stmt() {
	    let localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, YQLParser.RULE_alter_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3017;
	        this.match(YQLParser.ALTER);
	        this.state = 3018;
	        this.match(YQLParser.TABLE);
	        this.state = 3019;
	        this.simple_table_ref();
	        this.state = 3020;
	        this.alter_table_action();
	        this.state = 3025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3021;
	            this.match(YQLParser.COMMA);
	            this.state = 3022;
	            this.alter_table_action();
	            this.state = 3027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_action() {
	    let localctx = new Alter_table_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, YQLParser.RULE_alter_table_action);
	    try {
	        this.state = 3045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3028;
	            this.alter_table_add_column();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3029;
	            this.alter_table_drop_column();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3030;
	            this.alter_table_alter_column();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3031;
	            this.alter_table_add_column_family();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3032;
	            this.alter_table_alter_column_family();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3033;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3034;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3035;
	            this.alter_table_reset_table_setting();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3036;
	            this.alter_table_add_index();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3037;
	            this.alter_table_drop_index();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3038;
	            this.alter_table_rename_to();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3039;
	            this.alter_table_add_changefeed();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3040;
	            this.alter_table_alter_changefeed();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3041;
	            this.alter_table_drop_changefeed();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3042;
	            this.alter_table_rename_index_to();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3043;
	            this.alter_table_alter_index();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3044;
	            this.alter_table_alter_column_drop_not_null();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_table_stmt() {
	    let localctx = new Alter_external_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, YQLParser.RULE_alter_external_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3047;
	        this.match(YQLParser.ALTER);
	        this.state = 3048;
	        this.match(YQLParser.EXTERNAL);
	        this.state = 3049;
	        this.match(YQLParser.TABLE);
	        this.state = 3050;
	        this.simple_table_ref();
	        this.state = 3051;
	        this.alter_external_table_action();
	        this.state = 3056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3052;
	            this.match(YQLParser.COMMA);
	            this.state = 3053;
	            this.alter_external_table_action();
	            this.state = 3058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_external_table_action() {
	    let localctx = new Alter_external_table_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, YQLParser.RULE_alter_external_table_action);
	    try {
	        this.state = 3064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3059;
	            this.alter_table_add_column();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3060;
	            this.alter_table_drop_column();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3061;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3062;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3063;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_store_stmt() {
	    let localctx = new Alter_table_store_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, YQLParser.RULE_alter_table_store_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3066;
	        this.match(YQLParser.ALTER);
	        this.state = 3067;
	        this.match(YQLParser.TABLESTORE);
	        this.state = 3068;
	        this.object_ref();
	        this.state = 3069;
	        this.alter_table_store_action();
	        this.state = 3074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3070;
	            this.match(YQLParser.COMMA);
	            this.state = 3071;
	            this.alter_table_store_action();
	            this.state = 3076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_store_action() {
	    let localctx = new Alter_table_store_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, YQLParser.RULE_alter_table_store_action);
	    try {
	        this.state = 3079;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3077;
	            this.alter_table_add_column();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3078;
	            this.alter_table_drop_column();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_column() {
	    let localctx = new Alter_table_add_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, YQLParser.RULE_alter_table_add_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3081;
	        this.match(YQLParser.ADD);
	        this.state = 3083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 3082;
	            this.match(YQLParser.COLUMN);
	        }

	        this.state = 3085;
	        this.column_schema();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_column() {
	    let localctx = new Alter_table_drop_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, YQLParser.RULE_alter_table_drop_column);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3087;
	        this.match(YQLParser.DROP);
	        this.state = 3089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        if(la_===1) {
	            this.state = 3088;
	            this.match(YQLParser.COLUMN);

	        }
	        this.state = 3091;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column() {
	    let localctx = new Alter_table_alter_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, YQLParser.RULE_alter_table_alter_column);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3093;
	        this.match(YQLParser.ALTER);
	        this.state = 3094;
	        this.match(YQLParser.COLUMN);
	        this.state = 3095;
	        this.an_id();
	        this.state = 3096;
	        this.match(YQLParser.SET);
	        this.state = 3097;
	        this.family_relation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column_drop_not_null() {
	    let localctx = new Alter_table_alter_column_drop_not_nullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, YQLParser.RULE_alter_table_alter_column_drop_not_null);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3099;
	        this.match(YQLParser.ALTER);
	        this.state = 3100;
	        this.match(YQLParser.COLUMN);
	        this.state = 3101;
	        this.an_id();
	        this.state = 3102;
	        this.match(YQLParser.DROP);
	        this.state = 3103;
	        this.match(YQLParser.NOT);
	        this.state = 3104;
	        this.match(YQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_column_family() {
	    let localctx = new Alter_table_add_column_familyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, YQLParser.RULE_alter_table_add_column_family);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3106;
	        this.match(YQLParser.ADD);
	        this.state = 3107;
	        this.family_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_column_family() {
	    let localctx = new Alter_table_alter_column_familyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, YQLParser.RULE_alter_table_alter_column_family);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3109;
	        this.match(YQLParser.ALTER);
	        this.state = 3110;
	        this.match(YQLParser.FAMILY);
	        this.state = 3111;
	        this.an_id();
	        this.state = 3112;
	        this.match(YQLParser.SET);
	        this.state = 3113;
	        this.an_id();
	        this.state = 3114;
	        this.family_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_set_table_setting_uncompat() {
	    let localctx = new Alter_table_set_table_setting_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, YQLParser.RULE_alter_table_set_table_setting_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3116;
	        this.match(YQLParser.SET);
	        this.state = 3117;
	        this.an_id();
	        this.state = 3118;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_set_table_setting_compat() {
	    let localctx = new Alter_table_set_table_setting_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, YQLParser.RULE_alter_table_set_table_setting_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3120;
	        this.match(YQLParser.SET);
	        this.state = 3121;
	        this.match(YQLParser.LPAREN);
	        this.state = 3122;
	        this.alter_table_setting_entry();
	        this.state = 3127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3123;
	            this.match(YQLParser.COMMA);
	            this.state = 3124;
	            this.alter_table_setting_entry();
	            this.state = 3129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3130;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_reset_table_setting() {
	    let localctx = new Alter_table_reset_table_settingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, YQLParser.RULE_alter_table_reset_table_setting);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3132;
	        this.match(YQLParser.RESET);
	        this.state = 3133;
	        this.match(YQLParser.LPAREN);
	        this.state = 3134;
	        this.an_id();
	        this.state = 3139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3135;
	            this.match(YQLParser.COMMA);
	            this.state = 3136;
	            this.an_id();
	            this.state = 3141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3142;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_index() {
	    let localctx = new Alter_table_add_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, YQLParser.RULE_alter_table_add_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3144;
	        this.match(YQLParser.ADD);
	        this.state = 3145;
	        this.table_index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_index() {
	    let localctx = new Alter_table_drop_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, YQLParser.RULE_alter_table_drop_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3147;
	        this.match(YQLParser.DROP);
	        this.state = 3148;
	        this.match(YQLParser.INDEX);
	        this.state = 3149;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_rename_to() {
	    let localctx = new Alter_table_rename_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, YQLParser.RULE_alter_table_rename_to);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3151;
	        this.match(YQLParser.RENAME);
	        this.state = 3152;
	        this.match(YQLParser.TO);
	        this.state = 3153;
	        this.an_id_table();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_rename_index_to() {
	    let localctx = new Alter_table_rename_index_toContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, YQLParser.RULE_alter_table_rename_index_to);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3155;
	        this.match(YQLParser.RENAME);
	        this.state = 3156;
	        this.match(YQLParser.INDEX);
	        this.state = 3157;
	        this.an_id();
	        this.state = 3158;
	        this.match(YQLParser.TO);
	        this.state = 3159;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_add_changefeed() {
	    let localctx = new Alter_table_add_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, YQLParser.RULE_alter_table_add_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3161;
	        this.match(YQLParser.ADD);
	        this.state = 3162;
	        this.changefeed();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_changefeed() {
	    let localctx = new Alter_table_alter_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, YQLParser.RULE_alter_table_alter_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3164;
	        this.match(YQLParser.ALTER);
	        this.state = 3165;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3166;
	        this.an_id();
	        this.state = 3167;
	        this.changefeed_alter_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_drop_changefeed() {
	    let localctx = new Alter_table_drop_changefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, YQLParser.RULE_alter_table_drop_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3169;
	        this.match(YQLParser.DROP);
	        this.state = 3170;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3171;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_index() {
	    let localctx = new Alter_table_alter_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, YQLParser.RULE_alter_table_alter_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3173;
	        this.match(YQLParser.ALTER);
	        this.state = 3174;
	        this.match(YQLParser.INDEX);
	        this.state = 3175;
	        this.an_id();
	        this.state = 3176;
	        this.alter_table_alter_index_action();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_schema() {
	    let localctx = new Column_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, YQLParser.RULE_column_schema);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3178;
	        this.an_id_schema();
	        this.state = 3179;
	        this.type_name_or_bind();
	        this.state = 3181;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 3180;
	            this.family_relation();
	        }

	        this.state = 3183;
	        this.opt_column_constraints();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_relation() {
	    let localctx = new Family_relationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, YQLParser.RULE_family_relation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3185;
	        this.match(YQLParser.FAMILY);
	        this.state = 3186;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_column_constraints() {
	    let localctx = new Opt_column_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, YQLParser.RULE_opt_column_constraints);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===199 || _la===201) {
	            this.state = 3189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===199) {
	                this.state = 3188;
	                this.match(YQLParser.NOT);
	            }

	            this.state = 3191;
	            this.match(YQLParser.NULL);
	        }

	        this.state = 3196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 3194;
	            this.match(YQLParser.DEFAULT);
	            this.state = 3195;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_order_by_specification() {
	    let localctx = new Column_order_by_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, YQLParser.RULE_column_order_by_specification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3198;
	        this.an_id();
	        this.state = 3200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===102) {
	            this.state = 3199;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===102)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, YQLParser.RULE_table_constraint);
	    var _la = 0;
	    try {
	        this.state = 3241;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 230:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3202;
	            this.match(YQLParser.PRIMARY);
	            this.state = 3203;
	            this.match(YQLParser.KEY);
	            this.state = 3204;
	            this.match(YQLParser.LPAREN);
	            this.state = 3205;
	            this.an_id();
	            this.state = 3210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3206;
	                this.match(YQLParser.COMMA);
	                this.state = 3207;
	                this.an_id();
	                this.state = 3212;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3213;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 218:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3215;
	            this.match(YQLParser.PARTITION);
	            this.state = 3216;
	            this.match(YQLParser.BY);
	            this.state = 3217;
	            this.match(YQLParser.LPAREN);
	            this.state = 3218;
	            this.an_id();
	            this.state = 3223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3219;
	                this.match(YQLParser.COMMA);
	                this.state = 3220;
	                this.an_id();
	                this.state = 3225;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3226;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3228;
	            this.match(YQLParser.ORDER);
	            this.state = 3229;
	            this.match(YQLParser.BY);
	            this.state = 3230;
	            this.match(YQLParser.LPAREN);
	            this.state = 3231;
	            this.column_order_by_specification();
	            this.state = 3236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3232;
	                this.match(YQLParser.COMMA);
	                this.state = 3233;
	                this.column_order_by_specification();
	                this.state = 3238;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3239;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_index() {
	    let localctx = new Table_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, YQLParser.RULE_table_index);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3243;
	        this.match(YQLParser.INDEX);
	        this.state = 3244;
	        this.an_id();
	        this.state = 3245;
	        this.table_index_type();
	        this.state = 3246;
	        this.match(YQLParser.ON);
	        this.state = 3247;
	        this.match(YQLParser.LPAREN);
	        this.state = 3248;
	        this.an_id_schema();
	        this.state = 3253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3249;
	            this.match(YQLParser.COMMA);
	            this.state = 3250;
	            this.an_id_schema();
	            this.state = 3255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3256;
	        this.match(YQLParser.RPAREN);
	        this.state = 3269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 3257;
	            this.match(YQLParser.COVER);
	            this.state = 3258;
	            this.match(YQLParser.LPAREN);
	            this.state = 3259;
	            this.an_id_schema();
	            this.state = 3264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3260;
	                this.match(YQLParser.COMMA);
	                this.state = 3261;
	                this.an_id_schema();
	                this.state = 3266;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3267;
	            this.match(YQLParser.RPAREN);
	        }

	        this.state = 3272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 3271;
	            this.with_index_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_index_type() {
	    let localctx = new Table_index_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, YQLParser.RULE_table_index_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3276;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 145:
	            this.state = 3274;
	            this.global_index();
	            break;
	        case 184:
	            this.state = 3275;
	            this.local_index();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 3278;
	            this.match(YQLParser.USING);
	            this.state = 3279;
	            this.index_subtype();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_index() {
	    let localctx = new Global_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, YQLParser.RULE_global_index);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3282;
	        this.match(YQLParser.GLOBAL);
	        this.state = 3284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 3283;
	            this.match(YQLParser.UNIQUE);
	        }

	        this.state = 3287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53 || _la===284) {
	            this.state = 3286;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===284)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_index() {
	    let localctx = new Local_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, YQLParser.RULE_local_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3289;
	        this.match(YQLParser.LOCAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_subtype() {
	    let localctx = new Index_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, YQLParser.RULE_index_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3291;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_index_settings() {
	    let localctx = new With_index_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, YQLParser.RULE_with_index_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3293;
	        this.match(YQLParser.WITH);
	        this.state = 3294;
	        this.match(YQLParser.LPAREN);
	        this.state = 3295;
	        this.index_setting_entry();
	        this.state = 3300;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,327,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3296;
	                this.match(YQLParser.COMMA);
	                this.state = 3297;
	                this.index_setting_entry(); 
	            }
	            this.state = 3302;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,327,this._ctx);
	        }

	        this.state = 3304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3303;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 3306;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_setting_entry() {
	    let localctx = new Index_setting_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, YQLParser.RULE_index_setting_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3308;
	        this.an_id();
	        this.state = 3309;
	        this.match(YQLParser.EQUALS);
	        this.state = 3310;
	        this.index_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_setting_value() {
	    let localctx = new Index_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, YQLParser.RULE_index_setting_value);
	    try {
	        this.state = 3316;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3312;
	            this.id_or_type();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3313;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3314;
	            this.integer();
	            break;
	        case 132:
	        case 299:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3315;
	            this.bool_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed() {
	    let localctx = new ChangefeedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, YQLParser.RULE_changefeed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3318;
	        this.match(YQLParser.CHANGEFEED);
	        this.state = 3319;
	        this.an_id();
	        this.state = 3320;
	        this.match(YQLParser.WITH);
	        this.state = 3321;
	        this.match(YQLParser.LPAREN);
	        this.state = 3322;
	        this.changefeed_settings();
	        this.state = 3323;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_settings() {
	    let localctx = new Changefeed_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, YQLParser.RULE_changefeed_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3325;
	        this.changefeed_settings_entry();
	        this.state = 3330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3326;
	            this.match(YQLParser.COMMA);
	            this.state = 3327;
	            this.changefeed_settings_entry();
	            this.state = 3332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_settings_entry() {
	    let localctx = new Changefeed_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, YQLParser.RULE_changefeed_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3333;
	        this.an_id();
	        this.state = 3334;
	        this.match(YQLParser.EQUALS);
	        this.state = 3335;
	        this.changefeed_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_setting_value() {
	    let localctx = new Changefeed_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, YQLParser.RULE_changefeed_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3337;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changefeed_alter_settings() {
	    let localctx = new Changefeed_alter_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, YQLParser.RULE_changefeed_alter_settings);
	    try {
	        this.state = 3345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3339;
	            this.match(YQLParser.DISABLE);
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3340;
	            this.match(YQLParser.SET);
	            this.state = 3341;
	            this.match(YQLParser.LPAREN);
	            this.state = 3342;
	            this.changefeed_settings();
	            this.state = 3343;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_setting_entry() {
	    let localctx = new Alter_table_setting_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, YQLParser.RULE_alter_table_setting_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3347;
	        this.an_id();
	        this.state = 3348;
	        this.match(YQLParser.EQUALS);
	        this.state = 3349;
	        this.table_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_setting_value() {
	    let localctx = new Table_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, YQLParser.RULE_table_setting_value);
	    var _la = 0;
	    try {
	        this.state = 3363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3351;
	            this.id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3352;
	            this.match(YQLParser.STRING_VALUE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3353;
	            this.integer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3354;
	            this.split_boundaries();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3355;
	            this.ttl_tier_list();
	            this.state = 3356;
	            this.match(YQLParser.ON);
	            this.state = 3357;
	            this.an_id();
	            this.state = 3360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 3358;
	                this.match(YQLParser.AS);
	                this.state = 3359;
	                _la = this._input.LA(1);
	                if(!(((((_la - 191)) & ~0x1f) === 0 && ((1 << (_la - 191)) & 11) !== 0) || _la===267)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3362;
	            this.bool_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttl_tier_list() {
	    let localctx = new Ttl_tier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, YQLParser.RULE_ttl_tier_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3365;
	        this.expr();
	        this.state = 3376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101 || _la===295) {
	            this.state = 3366;
	            this.ttl_tier_action();
	            this.state = 3373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3367;
	                this.match(YQLParser.COMMA);
	                this.state = 3368;
	                this.expr();
	                this.state = 3369;
	                this.ttl_tier_action();
	                this.state = 3375;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttl_tier_action() {
	    let localctx = new Ttl_tier_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, YQLParser.RULE_ttl_tier_action);
	    try {
	        this.state = 3384;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 295:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3378;
	            this.match(YQLParser.TO);
	            this.state = 3379;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 3380;
	            this.match(YQLParser.DATA);
	            this.state = 3381;
	            this.match(YQLParser.SOURCE);
	            this.state = 3382;
	            this.an_id();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3383;
	            this.match(YQLParser.DELETE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_entry() {
	    let localctx = new Family_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, YQLParser.RULE_family_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3386;
	        this.match(YQLParser.FAMILY);
	        this.state = 3387;
	        this.an_id();
	        this.state = 3388;
	        this.family_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_settings() {
	    let localctx = new Family_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, YQLParser.RULE_family_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3390;
	        this.match(YQLParser.LPAREN);
	        this.state = 3399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 3220176895) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 4294967295) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 3221159927) !== 0) || ((((_la - 134)) & ~0x1f) === 0 && ((1 << (_la - 134)) & 4294967287) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 4294836223) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 4294959103) !== 0) || ((((_la - 230)) & ~0x1f) === 0 && ((1 << (_la - 230)) & 4294688767) !== 0) || ((((_la - 262)) & ~0x1f) === 0 && ((1 << (_la - 262)) & 4026400255) !== 0) || ((((_la - 294)) & ~0x1f) === 0 && ((1 << (_la - 294)) & 4292870047) !== 0) || _la===326 || _la===327) {
	            this.state = 3391;
	            this.family_settings_entry();
	            this.state = 3396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3392;
	                this.match(YQLParser.COMMA);
	                this.state = 3393;
	                this.family_settings_entry();
	                this.state = 3398;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3401;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_settings_entry() {
	    let localctx = new Family_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, YQLParser.RULE_family_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3403;
	        this.an_id();
	        this.state = 3404;
	        this.match(YQLParser.EQUALS);
	        this.state = 3405;
	        this.family_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	family_setting_value() {
	    let localctx = new Family_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, YQLParser.RULE_family_setting_value);
	    try {
	        this.state = 3409;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3407;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        case 328:
	        case 329:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3408;
	            this.integer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	split_boundaries() {
	    let localctx = new Split_boundariesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, YQLParser.RULE_split_boundaries);
	    var _la = 0;
	    try {
	        this.state = 3423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3411;
	            this.match(YQLParser.LPAREN);
	            this.state = 3412;
	            this.literal_value_list();
	            this.state = 3417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3413;
	                this.match(YQLParser.COMMA);
	                this.state = 3414;
	                this.literal_value_list();
	                this.state = 3419;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3420;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3422;
	            this.literal_value_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value_list() {
	    let localctx = new Literal_value_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, YQLParser.RULE_literal_value_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3425;
	        this.match(YQLParser.LPAREN);
	        this.state = 3426;
	        this.literal_value();
	        this.state = 3431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3427;
	            this.match(YQLParser.COMMA);
	            this.state = 3428;
	            this.literal_value();
	            this.state = 3433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3434;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_alter_index_action() {
	    let localctx = new Alter_table_alter_index_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, YQLParser.RULE_alter_table_alter_index_action);
	    try {
	        this.state = 3439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3436;
	            this.alter_table_set_table_setting_uncompat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3437;
	            this.alter_table_set_table_setting_compat();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3438;
	            this.alter_table_reset_table_setting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table_stmt() {
	    let localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, YQLParser.RULE_drop_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3441;
	        this.match(YQLParser.DROP);
	        this.state = 3446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 286:
	            this.state = 3442;
	            this.match(YQLParser.TABLE);
	            break;
	        case 289:
	            this.state = 3443;
	            this.match(YQLParser.TABLESTORE);
	            break;
	        case 130:
	            this.state = 3444;
	            this.match(YQLParser.EXTERNAL);
	            this.state = 3445;
	            this.match(YQLParser.TABLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3450;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	        if(la_===1) {
	            this.state = 3448;
	            this.match(YQLParser.IF);
	            this.state = 3449;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 3452;
	        this.simple_table_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_user_stmt() {
	    let localctx = new Create_user_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, YQLParser.RULE_create_user_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3454;
	        this.match(YQLParser.CREATE);
	        this.state = 3455;
	        this.match(YQLParser.USER);
	        this.state = 3456;
	        this.role_name();
	        this.state = 3460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===116 || _la===185 || _la===198 || _la===220) {
	            this.state = 3457;
	            this.create_user_option();
	            this.state = 3462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_user_stmt() {
	    let localctx = new Alter_user_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, YQLParser.RULE_alter_user_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3463;
	        this.match(YQLParser.ALTER);
	        this.state = 3464;
	        this.match(YQLParser.USER);
	        this.state = 3465;
	        this.role_name();
	        this.state = 3477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	        case 185:
	        case 198:
	        case 220:
	        case 321:
	            this.state = 3467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 3466;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 3470; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3469;
	                this.create_user_option();
	                this.state = 3472; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===116 || _la===185 || _la===198 || _la===220);
	            break;
	        case 243:
	            this.state = 3474;
	            this.match(YQLParser.RENAME);
	            this.state = 3475;
	            this.match(YQLParser.TO);
	            this.state = 3476;
	            this.role_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_group_stmt() {
	    let localctx = new Create_group_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, YQLParser.RULE_create_group_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3479;
	        this.match(YQLParser.CREATE);
	        this.state = 3480;
	        this.match(YQLParser.GROUP);
	        this.state = 3481;
	        this.role_name();
	        this.state = 3495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 3482;
	            this.match(YQLParser.WITH);
	            this.state = 3483;
	            this.match(YQLParser.USER);
	            this.state = 3484;
	            this.role_name();
	            this.state = 3489;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,350,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3485;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3486;
	                    this.role_name(); 
	                }
	                this.state = 3491;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,350,this._ctx);
	            }

	            this.state = 3493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3492;
	                this.match(YQLParser.COMMA);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_group_stmt() {
	    let localctx = new Alter_group_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, YQLParser.RULE_alter_group_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3497;
	        this.match(YQLParser.ALTER);
	        this.state = 3498;
	        this.match(YQLParser.GROUP);
	        this.state = 3499;
	        this.role_name();
	        this.state = 3516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 111:
	            this.state = 3500;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===111)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3501;
	            this.match(YQLParser.USER);
	            this.state = 3502;
	            this.role_name();
	            this.state = 3507;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,353,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3503;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3504;
	                    this.role_name(); 
	                }
	                this.state = 3509;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,353,this._ctx);
	            }

	            this.state = 3511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3510;
	                this.match(YQLParser.COMMA);
	            }

	            break;
	        case 243:
	            this.state = 3513;
	            this.match(YQLParser.RENAME);
	            this.state = 3514;
	            this.match(YQLParser.TO);
	            this.state = 3515;
	            this.role_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_role_stmt() {
	    let localctx = new Drop_role_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, YQLParser.RULE_drop_role_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3518;
	        this.match(YQLParser.DROP);
	        this.state = 3519;
	        _la = this._input.LA(1);
	        if(!(_la===147 || _la===311)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	        if(la_===1) {
	            this.state = 3520;
	            this.match(YQLParser.IF);
	            this.state = 3521;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 3524;
	        this.role_name();
	        this.state = 3529;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,357,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3525;
	                this.match(YQLParser.COMMA);
	                this.state = 3526;
	                this.role_name(); 
	            }
	            this.state = 3531;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,357,this._ctx);
	        }

	        this.state = 3533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3532;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role_name() {
	    let localctx = new Role_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, YQLParser.RULE_role_name);
	    try {
	        this.state = 3537;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3535;
	            this.an_id_or_type();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3536;
	            this.bind_parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_user_option() {
	    let localctx = new Create_user_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, YQLParser.RULE_create_user_option);
	    try {
	        this.state = 3541;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	        case 220:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3539;
	            this.password_option();
	            break;
	        case 185:
	        case 198:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3540;
	            this.login_option();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	password_option() {
	    let localctx = new Password_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, YQLParser.RULE_password_option);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 3543;
	            this.match(YQLParser.ENCRYPTED);
	        }

	        this.state = 3546;
	        this.match(YQLParser.PASSWORD);
	        this.state = 3547;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	login_option() {
	    let localctx = new Login_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, YQLParser.RULE_login_option);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3549;
	        _la = this._input.LA(1);
	        if(!(_la===185 || _la===198)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_permissions_stmt() {
	    let localctx = new Grant_permissions_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, YQLParser.RULE_grant_permissions_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3551;
	        this.match(YQLParser.GRANT);
	        this.state = 3552;
	        this.permission_name_target();
	        this.state = 3553;
	        this.match(YQLParser.ON);
	        this.state = 3554;
	        this.an_id_schema();
	        this.state = 3559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3555;
	            this.match(YQLParser.COMMA);
	            this.state = 3556;
	            this.an_id_schema();
	            this.state = 3561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3562;
	        this.match(YQLParser.TO);
	        this.state = 3563;
	        this.role_name();
	        this.state = 3568;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,363,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3564;
	                this.match(YQLParser.COMMA);
	                this.state = 3565;
	                this.role_name(); 
	            }
	            this.state = 3570;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,363,this._ctx);
	        }

	        this.state = 3572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3571;
	            this.match(YQLParser.COMMA);
	        }

	        this.state = 3577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 3574;
	            this.match(YQLParser.WITH);
	            this.state = 3575;
	            this.match(YQLParser.GRANT);
	            this.state = 3576;
	            this.match(YQLParser.OPTION);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_permissions_stmt() {
	    let localctx = new Revoke_permissions_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, YQLParser.RULE_revoke_permissions_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3579;
	        this.match(YQLParser.REVOKE);
	        this.state = 3583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	        if(la_===1) {
	            this.state = 3580;
	            this.match(YQLParser.GRANT);
	            this.state = 3581;
	            this.match(YQLParser.OPTION);
	            this.state = 3582;
	            this.match(YQLParser.FOR);

	        }
	        this.state = 3585;
	        this.permission_name_target();
	        this.state = 3586;
	        this.match(YQLParser.ON);
	        this.state = 3587;
	        this.an_id_schema();
	        this.state = 3592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3588;
	            this.match(YQLParser.COMMA);
	            this.state = 3589;
	            this.an_id_schema();
	            this.state = 3594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3595;
	        this.match(YQLParser.FROM);
	        this.state = 3596;
	        this.role_name();
	        this.state = 3601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3597;
	            this.match(YQLParser.COMMA);
	            this.state = 3598;
	            this.role_name();
	            this.state = 3603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_id() {
	    let localctx = new Permission_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, YQLParser.RULE_permission_id);
	    var _la = 0;
	    try {
	        this.state = 3628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3604;
	            this.match(YQLParser.CONNECT);
	            break;
	        case 183:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3605;
	            this.match(YQLParser.LIST);
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3606;
	            this.match(YQLParser.INSERT);
	            break;
	        case 186:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3607;
	            this.match(YQLParser.MANAGE);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3608;
	            this.match(YQLParser.DROP);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3609;
	            this.match(YQLParser.GRANT);
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3610;
	            this.match(YQLParser.MODIFY);
	            this.state = 3611;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===287)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 119:
	        case 308:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3612;
	            _la = this._input.LA(1);
	            if(!(_la===119 || _la===308)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3613;
	            this.match(YQLParser.ROW);
	            break;
	        case 43:
	        case 103:
	        case 242:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3614;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===103 || _la===242)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3615;
	            this.match(YQLParser.SCHEMA);
	            break;
	        case 269:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3616;
	            this.match(YQLParser.SELECT);
	            this.state = 3618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56 || _la===262 || _la===287) {
	                this.state = 3617;
	                _la = this._input.LA(1);
	                if(!(_la===56 || _la===262 || _la===287)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 142:
	        case 310:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3620;
	            _la = this._input.LA(1);
	            if(!(_la===142 || _la===310)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180) {
	                this.state = 3621;
	                this.match(YQLParser.LEGACY);
	            }

	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3624;
	            this.match(YQLParser.CREATE);
	            this.state = 3626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106 || _la===234 || _la===286) {
	                this.state = 3625;
	                _la = this._input.LA(1);
	                if(!(_la===106 || _la===234 || _la===286)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_name() {
	    let localctx = new Permission_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, YQLParser.RULE_permission_name);
	    try {
	        this.state = 3632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 82:
	        case 86:
	        case 103:
	        case 111:
	        case 119:
	        case 142:
	        case 146:
	        case 167:
	        case 183:
	        case 186:
	        case 193:
	        case 242:
	        case 269:
	        case 308:
	        case 310:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3630;
	            this.permission_id();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3631;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permission_name_target() {
	    let localctx = new Permission_name_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, YQLParser.RULE_permission_name_target);
	    var _la = 0;
	    try {
	        this.state = 3649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 82:
	        case 86:
	        case 103:
	        case 111:
	        case 119:
	        case 142:
	        case 146:
	        case 167:
	        case 183:
	        case 186:
	        case 193:
	        case 242:
	        case 269:
	        case 308:
	        case 310:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3634;
	            this.permission_name();
	            this.state = 3639;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,374,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3635;
	                    this.match(YQLParser.COMMA);
	                    this.state = 3636;
	                    this.permission_name(); 
	                }
	                this.state = 3641;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,374,this._ctx);
	            }

	            this.state = 3643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3642;
	                this.match(YQLParser.COMMA);
	            }

	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3645;
	            this.match(YQLParser.ALL);
	            this.state = 3647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 3646;
	                this.match(YQLParser.PRIVILEGES);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_resource_pool_stmt() {
	    let localctx = new Create_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, YQLParser.RULE_create_resource_pool_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3651;
	        this.match(YQLParser.CREATE);
	        this.state = 3652;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3653;
	        this.match(YQLParser.POOL);
	        this.state = 3654;
	        this.object_ref();
	        this.state = 3655;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_stmt() {
	    let localctx = new Alter_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, YQLParser.RULE_alter_resource_pool_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3657;
	        this.match(YQLParser.ALTER);
	        this.state = 3658;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3659;
	        this.match(YQLParser.POOL);
	        this.state = 3660;
	        this.object_ref();
	        this.state = 3661;
	        this.alter_resource_pool_action();
	        this.state = 3666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3662;
	            this.match(YQLParser.COMMA);
	            this.state = 3663;
	            this.alter_resource_pool_action();
	            this.state = 3668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_action() {
	    let localctx = new Alter_resource_pool_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, YQLParser.RULE_alter_resource_pool_action);
	    try {
	        this.state = 3671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3669;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3670;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_resource_pool_stmt() {
	    let localctx = new Drop_resource_pool_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, YQLParser.RULE_drop_resource_pool_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3673;
	        this.match(YQLParser.DROP);
	        this.state = 3674;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3675;
	        this.match(YQLParser.POOL);
	        this.state = 3676;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_resource_pool_classifier_stmt() {
	    let localctx = new Create_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, YQLParser.RULE_create_resource_pool_classifier_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3678;
	        this.match(YQLParser.CREATE);
	        this.state = 3679;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3680;
	        this.match(YQLParser.POOL);
	        this.state = 3681;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3682;
	        this.object_ref();
	        this.state = 3683;
	        this.with_table_settings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_classifier_stmt() {
	    let localctx = new Alter_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, YQLParser.RULE_alter_resource_pool_classifier_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3685;
	        this.match(YQLParser.ALTER);
	        this.state = 3686;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3687;
	        this.match(YQLParser.POOL);
	        this.state = 3688;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3689;
	        this.object_ref();
	        this.state = 3690;
	        this.alter_resource_pool_classifier_action();
	        this.state = 3695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3691;
	            this.match(YQLParser.COMMA);
	            this.state = 3692;
	            this.alter_resource_pool_classifier_action();
	            this.state = 3697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_resource_pool_classifier_action() {
	    let localctx = new Alter_resource_pool_classifier_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, YQLParser.RULE_alter_resource_pool_classifier_action);
	    try {
	        this.state = 3700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3698;
	            this.alter_table_set_table_setting_compat();
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3699;
	            this.alter_table_reset_table_setting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_resource_pool_classifier_stmt() {
	    let localctx = new Drop_resource_pool_classifier_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, YQLParser.RULE_drop_resource_pool_classifier_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3702;
	        this.match(YQLParser.DROP);
	        this.state = 3703;
	        this.match(YQLParser.RESOURCE);
	        this.state = 3704;
	        this.match(YQLParser.POOL);
	        this.state = 3705;
	        this.match(YQLParser.CLASSIFIER);
	        this.state = 3706;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_replication_stmt() {
	    let localctx = new Create_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, YQLParser.RULE_create_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3708;
	        this.match(YQLParser.CREATE);
	        this.state = 3709;
	        this.match(YQLParser.ASYNC);
	        this.state = 3710;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3711;
	        this.object_ref();
	        this.state = 3712;
	        this.match(YQLParser.FOR);
	        this.state = 3713;
	        this.replication_target();
	        this.state = 3718;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3714;
	            this.match(YQLParser.COMMA);
	            this.state = 3715;
	            this.replication_target();
	            this.state = 3720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3721;
	        this.match(YQLParser.WITH);
	        this.state = 3722;
	        this.match(YQLParser.LPAREN);
	        this.state = 3723;
	        this.replication_settings();
	        this.state = 3724;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_target() {
	    let localctx = new Replication_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, YQLParser.RULE_replication_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3726;
	        this.object_ref();
	        this.state = 3727;
	        this.match(YQLParser.AS);
	        this.state = 3728;
	        this.object_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_settings() {
	    let localctx = new Replication_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, YQLParser.RULE_replication_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3730;
	        this.replication_settings_entry();
	        this.state = 3735;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3731;
	            this.match(YQLParser.COMMA);
	            this.state = 3732;
	            this.replication_settings_entry();
	            this.state = 3737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replication_settings_entry() {
	    let localctx = new Replication_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, YQLParser.RULE_replication_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3738;
	        this.an_id();
	        this.state = 3739;
	        this.match(YQLParser.EQUALS);
	        this.state = 3740;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_stmt() {
	    let localctx = new Alter_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, YQLParser.RULE_alter_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3742;
	        this.match(YQLParser.ALTER);
	        this.state = 3743;
	        this.match(YQLParser.ASYNC);
	        this.state = 3744;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3745;
	        this.object_ref();
	        this.state = 3746;
	        this.alter_replication_action();
	        this.state = 3751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3747;
	            this.match(YQLParser.COMMA);
	            this.state = 3748;
	            this.alter_replication_action();
	            this.state = 3753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_action() {
	    let localctx = new Alter_replication_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, YQLParser.RULE_alter_replication_action);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3754;
	        this.alter_replication_set_setting();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_replication_set_setting() {
	    let localctx = new Alter_replication_set_settingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, YQLParser.RULE_alter_replication_set_setting);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3756;
	        this.match(YQLParser.SET);
	        this.state = 3757;
	        this.match(YQLParser.LPAREN);
	        this.state = 3758;
	        this.replication_settings();
	        this.state = 3759;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_replication_stmt() {
	    let localctx = new Drop_replication_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, YQLParser.RULE_drop_replication_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3761;
	        this.match(YQLParser.DROP);
	        this.state = 3762;
	        this.match(YQLParser.ASYNC);
	        this.state = 3763;
	        this.match(YQLParser.REPLICATION);
	        this.state = 3764;
	        this.object_ref();
	        this.state = 3766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 3765;
	            this.match(YQLParser.CASCADE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	action_or_subquery_args() {
	    let localctx = new Action_or_subquery_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, YQLParser.RULE_action_or_subquery_args);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3768;
	        this.opt_bind_parameter();
	        this.state = 3773;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 3769;
	            this.match(YQLParser.COMMA);
	            this.state = 3770;
	            this.opt_bind_parameter();
	            this.state = 3775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define_action_or_subquery_stmt() {
	    let localctx = new Define_action_or_subquery_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, YQLParser.RULE_define_action_or_subquery_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3776;
	        this.match(YQLParser.DEFINE);
	        this.state = 3777;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===280)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3778;
	        this.bind_parameter();
	        this.state = 3779;
	        this.match(YQLParser.LPAREN);
	        this.state = 3781;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30) {
	            this.state = 3780;
	            this.action_or_subquery_args();
	        }

	        this.state = 3783;
	        this.match(YQLParser.RPAREN);
	        this.state = 3784;
	        this.match(YQLParser.AS);
	        this.state = 3785;
	        this.define_action_or_subquery_body();
	        this.state = 3786;
	        this.match(YQLParser.END);
	        this.state = 3787;
	        this.match(YQLParser.DEFINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	define_action_or_subquery_body() {
	    let localctx = new Define_action_or_subquery_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, YQLParser.RULE_define_action_or_subquery_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 3789;
	            this.match(YQLParser.SEMICOLON);
	            this.state = 3794;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===30 || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 196611) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 1086587137) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 2684882947) !== 0) || ((((_la - 146)) & ~0x1f) === 0 && ((1 << (_la - 146)) & 2099329) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 269517825) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 262721) !== 0) || ((((_la - 308)) & ~0x1f) === 0 && ((1 << (_la - 308)) & 71) !== 0)) {
	            this.state = 3795;
	            this.sql_stmt_core();
	            this.state = 3804;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,390,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3797; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 3796;
	                        this.match(YQLParser.SEMICOLON);
	                        this.state = 3799; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===22);
	                    this.state = 3801;
	                    this.sql_stmt_core(); 
	                }
	                this.state = 3806;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,390,this._ctx);
	            }

	            this.state = 3810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===22) {
	                this.state = 3807;
	                this.match(YQLParser.SEMICOLON);
	                this.state = 3812;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, YQLParser.RULE_if_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 3815;
	            this.match(YQLParser.EVALUATE);
	        }

	        this.state = 3818;
	        this.match(YQLParser.IF);
	        this.state = 3819;
	        this.expr();
	        this.state = 3820;
	        this.do_stmt();
	        this.state = 3823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 3821;
	            this.match(YQLParser.ELSE);
	            this.state = 3822;
	            this.do_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, YQLParser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 3825;
	            this.match(YQLParser.EVALUATE);
	        }

	        this.state = 3829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===217) {
	            this.state = 3828;
	            this.match(YQLParser.PARALLEL);
	        }

	        this.state = 3831;
	        this.match(YQLParser.FOR);
	        this.state = 3832;
	        this.bind_parameter();
	        this.state = 3833;
	        this.match(YQLParser.IN);
	        this.state = 3834;
	        this.expr();
	        this.state = 3835;
	        this.do_stmt();
	        this.state = 3838;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 3836;
	            this.match(YQLParser.ELSE);
	            this.state = 3837;
	            this.do_stmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_ref() {
	    let localctx = new Table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, YQLParser.RULE_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	        if(la_===1) {
	            this.state = 3840;
	            this.cluster_expr();
	            this.state = 3841;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 3846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 3845;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 3878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3848;
	            this.table_key();
	            break;

	        case 2:
	            this.state = 3849;
	            this.an_id_expr();
	            this.state = 3850;
	            this.match(YQLParser.LPAREN);
	            this.state = 3862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286810141) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	                this.state = 3851;
	                this.table_arg();
	                this.state = 3856;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,400,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3852;
	                        this.match(YQLParser.COMMA);
	                        this.state = 3853;
	                        this.table_arg(); 
	                    }
	                    this.state = 3858;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,400,this._ctx);
	                }

	                this.state = 3860;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===24) {
	                    this.state = 3859;
	                    this.match(YQLParser.COMMA);
	                }

	            }

	            this.state = 3864;
	            this.match(YQLParser.RPAREN);
	            break;

	        case 3:
	            this.state = 3866;
	            this.bind_parameter();
	            this.state = 3872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 3867;
	                this.match(YQLParser.LPAREN);
	                this.state = 3869;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 4286777373) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4294963199) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 4294967295) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 4294967295) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 4294967295) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 4294967295) !== 0) || ((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4294967231) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 1073741823) !== 0)) {
	                    this.state = 3868;
	                    this.expr_list();
	                }

	                this.state = 3871;
	                this.match(YQLParser.RPAREN);
	            }

	            this.state = 3876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===316) {
	                this.state = 3874;
	                this.match(YQLParser.VIEW);
	                this.state = 3875;
	                this.view_name();
	            }

	            break;

	        }
	        this.state = 3881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 3880;
	            this.table_hints();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_key() {
	    let localctx = new Table_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, YQLParser.RULE_table_key);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3883;
	        this.id_table_or_type();
	        this.state = 3886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316) {
	            this.state = 3884;
	            this.match(YQLParser.VIEW);
	            this.state = 3885;
	            this.view_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_arg() {
	    let localctx = new Table_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, YQLParser.RULE_table_arg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 3888;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 3891;
	        this.named_expr();
	        this.state = 3894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316) {
	            this.state = 3892;
	            this.match(YQLParser.VIEW);
	            this.state = 3893;
	            this.view_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_hints() {
	    let localctx = new Table_hintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, YQLParser.RULE_table_hints);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3896;
	        this.match(YQLParser.WITH);
	        this.state = 3909;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.state = 3897;
	            this.table_hint();
	            break;
	        case 25:
	            this.state = 3898;
	            this.match(YQLParser.LPAREN);
	            this.state = 3899;
	            this.table_hint();
	            this.state = 3904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===24) {
	                this.state = 3900;
	                this.match(YQLParser.COMMA);
	                this.state = 3901;
	                this.table_hint();
	                this.state = 3906;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3907;
	            this.match(YQLParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_hint() {
	    let localctx = new Table_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, YQLParser.RULE_table_hint);
	    var _la = 0;
	    try {
	        this.state = 3956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3911;
	            this.an_id_hint();
	            this.state = 3930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 3912;
	                this.match(YQLParser.EQUALS);
	                this.state = 3928;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 30:
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 142:
	                case 143:
	                case 144:
	                case 145:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 152:
	                case 153:
	                case 154:
	                case 155:
	                case 156:
	                case 157:
	                case 158:
	                case 159:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 164:
	                case 165:
	                case 166:
	                case 167:
	                case 168:
	                case 169:
	                case 170:
	                case 171:
	                case 172:
	                case 173:
	                case 174:
	                case 175:
	                case 176:
	                case 177:
	                case 178:
	                case 179:
	                case 180:
	                case 181:
	                case 182:
	                case 184:
	                case 185:
	                case 186:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 193:
	                case 194:
	                case 195:
	                case 196:
	                case 197:
	                case 198:
	                case 199:
	                case 200:
	                case 201:
	                case 202:
	                case 203:
	                case 204:
	                case 205:
	                case 206:
	                case 207:
	                case 208:
	                case 209:
	                case 210:
	                case 212:
	                case 213:
	                case 214:
	                case 215:
	                case 216:
	                case 217:
	                case 218:
	                case 219:
	                case 220:
	                case 221:
	                case 222:
	                case 223:
	                case 224:
	                case 225:
	                case 226:
	                case 227:
	                case 228:
	                case 229:
	                case 230:
	                case 231:
	                case 232:
	                case 233:
	                case 234:
	                case 235:
	                case 236:
	                case 237:
	                case 238:
	                case 239:
	                case 240:
	                case 241:
	                case 242:
	                case 243:
	                case 245:
	                case 246:
	                case 247:
	                case 249:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 255:
	                case 256:
	                case 257:
	                case 258:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 264:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 272:
	                case 273:
	                case 274:
	                case 275:
	                case 276:
	                case 277:
	                case 278:
	                case 280:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 285:
	                case 286:
	                case 287:
	                case 288:
	                case 289:
	                case 291:
	                case 292:
	                case 293:
	                case 294:
	                case 295:
	                case 296:
	                case 297:
	                case 298:
	                case 301:
	                case 302:
	                case 303:
	                case 304:
	                case 305:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 316:
	                case 317:
	                case 318:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 323:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                    this.state = 3913;
	                    this.type_name_tag();
	                    break;
	                case 25:
	                    this.state = 3914;
	                    this.match(YQLParser.LPAREN);
	                    this.state = 3915;
	                    this.type_name_tag();
	                    this.state = 3920;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,413,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 3916;
	                            this.match(YQLParser.COMMA);
	                            this.state = 3917;
	                            this.type_name_tag(); 
	                        }
	                        this.state = 3922;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,413,this._ctx);
	                    }

	                    this.state = 3924;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===24) {
	                        this.state = 3923;
	                        this.match(YQLParser.COMMA);
	                    }

	                    this.state = 3926;
	                    this.match(YQLParser.RPAREN);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3932;
	            _la = this._input.LA(1);
	            if(!(_la===77 || _la===266)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 3933;
	                this.match(YQLParser.EQUALS);
	            }

	            this.state = 3936;
	            this.type_name_or_bind();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3937;
	            this.match(YQLParser.SCHEMA);
	            this.state = 3939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 3938;
	                this.match(YQLParser.EQUALS);
	            }

	            this.state = 3941;
	            this.match(YQLParser.LPAREN);
	            this.state = 3950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 4026531585) !== 0) || ((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 4294967295) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 4294967295) !== 0) || ((((_la - 126)) & ~0x1f) === 0 && ((1 << (_la - 126)) & 4294967231) !== 0) || ((((_la - 158)) & ~0x1f) === 0 && ((1 << (_la - 158)) & 4294967295) !== 0) || ((((_la - 190)) & ~0x1f) === 0 && ((1 << (_la - 190)) & 4294967295) !== 0) || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 4290772991) !== 0) || ((((_la - 254)) & ~0x1f) === 0 && ((1 << (_la - 254)) & 4294967295) !== 0) || ((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 4294959103) !== 0) || ((((_la - 318)) & ~0x1f) === 0 && ((1 << (_la - 318)) & 1023) !== 0)) {
	                this.state = 3942;
	                this.struct_arg_positional();
	                this.state = 3947;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,419,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3943;
	                        this.match(YQLParser.COMMA);
	                        this.state = 3944;
	                        this.struct_arg_positional(); 
	                    }
	                    this.state = 3949;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,419,this._ctx);
	                }

	            }

	            this.state = 3953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3952;
	                this.match(YQLParser.COMMA);
	            }

	            this.state = 3955;
	            this.match(YQLParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_ref() {
	    let localctx = new Object_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, YQLParser.RULE_object_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,423,this._ctx);
	        if(la_===1) {
	            this.state = 3958;
	            this.cluster_expr();
	            this.state = 3959;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 3963;
	        this.id_or_at();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_table_ref_core() {
	    let localctx = new Simple_table_ref_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, YQLParser.RULE_simple_table_ref_core);
	    var _la = 0;
	    try {
	        this.state = 3970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,425,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3965;
	            this.object_ref();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===29) {
	                this.state = 3966;
	                this.match(YQLParser.COMMAT);
	            }

	            this.state = 3969;
	            this.bind_parameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_table_ref() {
	    let localctx = new Simple_table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, YQLParser.RULE_simple_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3972;
	        this.simple_table_ref_core();
	        this.state = 3974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 3973;
	            this.table_hints();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	into_simple_table_ref() {
	    let localctx = new Into_simple_table_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, YQLParser.RULE_into_simple_table_ref);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3976;
	        this.simple_table_ref();
	        this.state = 3980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 3977;
	            this.match(YQLParser.ERASE);
	            this.state = 3978;
	            this.match(YQLParser.BY);
	            this.state = 3979;
	            this.pure_column_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, YQLParser.RULE_delete_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 3982;
	            this.match(YQLParser.BATCH);
	        }

	        this.state = 3985;
	        this.match(YQLParser.DELETE);
	        this.state = 3986;
	        this.match(YQLParser.FROM);
	        this.state = 3987;
	        this.simple_table_ref();
	        this.state = 3992;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 319:
	        	this.state = 3988;
	        	this.match(YQLParser.WHERE);
	        	this.state = 3989;
	        	this.expr();
	        	break;
	        case 207:
	        	this.state = 3990;
	        	this.match(YQLParser.ON);
	        	this.state = 3991;
	        	this.into_values_source();
	        	break;
	        case -1:
	        case 22:
	        case 117:
	        case 255:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255) {
	            this.state = 3994;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, YQLParser.RULE_update_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 3997;
	            this.match(YQLParser.BATCH);
	        }

	        this.state = 4000;
	        this.match(YQLParser.UPDATE);
	        this.state = 4001;
	        this.simple_table_ref();
	        this.state = 4010;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.state = 4002;
	            this.match(YQLParser.SET);
	            this.state = 4003;
	            this.set_clause_choice();
	            this.state = 4006;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===319) {
	                this.state = 4004;
	                this.match(YQLParser.WHERE);
	                this.state = 4005;
	                this.expr();
	            }

	            break;
	        case 207:
	            this.state = 4008;
	            this.match(YQLParser.ON);
	            this.state = 4009;
	            this.into_values_source();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255) {
	            this.state = 4012;
	            this.returning_columns_list();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause_choice() {
	    let localctx = new Set_clause_choiceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, YQLParser.RULE_set_clause_choice);
	    try {
	        this.state = 4017;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4015;
	            this.set_clause_list();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4016;
	            this.multiple_column_assignment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause_list() {
	    let localctx = new Set_clause_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, YQLParser.RULE_set_clause_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4019;
	        this.set_clause();
	        this.state = 4024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4020;
	            this.match(YQLParser.COMMA);
	            this.state = 4021;
	            this.set_clause();
	            this.state = 4026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_clause() {
	    let localctx = new Set_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, YQLParser.RULE_set_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4027;
	        this.set_target();
	        this.state = 4028;
	        this.match(YQLParser.EQUALS);
	        this.state = 4029;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target() {
	    let localctx = new Set_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, YQLParser.RULE_set_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4031;
	        this.column_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiple_column_assignment() {
	    let localctx = new Multiple_column_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, YQLParser.RULE_multiple_column_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4033;
	        this.set_target_list();
	        this.state = 4034;
	        this.match(YQLParser.EQUALS);
	        this.state = 4035;
	        this.match(YQLParser.LPAREN);
	        this.state = 4036;
	        this.simple_values_source();
	        this.state = 4037;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_target_list() {
	    let localctx = new Set_target_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, YQLParser.RULE_set_target_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4039;
	        this.match(YQLParser.LPAREN);
	        this.state = 4040;
	        this.set_target();
	        this.state = 4045;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4041;
	            this.match(YQLParser.COMMA);
	            this.state = 4042;
	            this.set_target();
	            this.state = 4047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4048;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_stmt() {
	    let localctx = new Create_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, YQLParser.RULE_create_topic_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4050;
	        this.match(YQLParser.CREATE);
	        this.state = 4051;
	        this.match(YQLParser.TOPIC);
	        this.state = 4055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
	        if(la_===1) {
	            this.state = 4052;
	            this.match(YQLParser.IF);
	            this.state = 4053;
	            this.match(YQLParser.NOT);
	            this.state = 4054;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4057;
	        this.topic_ref();
	        this.state = 4059;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 4058;
	            this.create_topic_entries();
	        }

	        this.state = 4062;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 4061;
	            this.with_topic_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_entries() {
	    let localctx = new Create_topic_entriesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, YQLParser.RULE_create_topic_entries);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4064;
	        this.match(YQLParser.LPAREN);
	        this.state = 4065;
	        this.create_topic_entry();
	        this.state = 4070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4066;
	            this.match(YQLParser.COMMA);
	            this.state = 4067;
	            this.create_topic_entry();
	            this.state = 4072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4073;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_topic_entry() {
	    let localctx = new Create_topic_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, YQLParser.RULE_create_topic_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4075;
	        this.topic_create_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_topic_settings() {
	    let localctx = new With_topic_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, YQLParser.RULE_with_topic_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4077;
	        this.match(YQLParser.WITH);
	        this.state = 4078;
	        this.match(YQLParser.LPAREN);
	        this.state = 4079;
	        this.topic_settings();
	        this.state = 4080;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_stmt() {
	    let localctx = new Alter_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, YQLParser.RULE_alter_topic_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4082;
	        this.match(YQLParser.ALTER);
	        this.state = 4083;
	        this.match(YQLParser.TOPIC);
	        this.state = 4086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        if(la_===1) {
	            this.state = 4084;
	            this.match(YQLParser.IF);
	            this.state = 4085;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4088;
	        this.topic_ref();
	        this.state = 4089;
	        this.alter_topic_action();
	        this.state = 4094;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4090;
	            this.match(YQLParser.COMMA);
	            this.state = 4091;
	            this.alter_topic_action();
	            this.state = 4096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_action() {
	    let localctx = new Alter_topic_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, YQLParser.RULE_alter_topic_action);
	    try {
	        this.state = 4102;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4097;
	            this.alter_topic_add_consumer();
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4098;
	            this.alter_topic_alter_consumer();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4099;
	            this.alter_topic_drop_consumer();
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4100;
	            this.alter_topic_set_settings();
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4101;
	            this.alter_topic_reset_settings();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_add_consumer() {
	    let localctx = new Alter_topic_add_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, YQLParser.RULE_alter_topic_add_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4104;
	        this.match(YQLParser.ADD);
	        this.state = 4105;
	        this.topic_create_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_create_consumer_entry() {
	    let localctx = new Topic_create_consumer_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, YQLParser.RULE_topic_create_consumer_entry);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4107;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4108;
	        this.an_id();
	        this.state = 4110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===321) {
	            this.state = 4109;
	            this.topic_consumer_with_settings();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_alter_consumer() {
	    let localctx = new Alter_topic_alter_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, YQLParser.RULE_alter_topic_alter_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4112;
	        this.match(YQLParser.ALTER);
	        this.state = 4113;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4114;
	        this.topic_consumer_ref();
	        this.state = 4115;
	        this.alter_topic_alter_consumer_entry();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_alter_consumer_entry() {
	    let localctx = new Alter_topic_alter_consumer_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, YQLParser.RULE_alter_topic_alter_consumer_entry);
	    try {
	        this.state = 4119;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4117;
	            this.topic_alter_consumer_set();
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4118;
	            this.topic_alter_consumer_reset();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_drop_consumer() {
	    let localctx = new Alter_topic_drop_consumerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, YQLParser.RULE_alter_topic_drop_consumer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4121;
	        this.match(YQLParser.DROP);
	        this.state = 4122;
	        this.match(YQLParser.CONSUMER);
	        this.state = 4123;
	        this.topic_consumer_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_alter_consumer_set() {
	    let localctx = new Topic_alter_consumer_setContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, YQLParser.RULE_topic_alter_consumer_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4125;
	        this.match(YQLParser.SET);
	        this.state = 4126;
	        this.match(YQLParser.LPAREN);
	        this.state = 4127;
	        this.topic_consumer_settings();
	        this.state = 4128;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_alter_consumer_reset() {
	    let localctx = new Topic_alter_consumer_resetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, YQLParser.RULE_topic_alter_consumer_reset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4130;
	        this.match(YQLParser.RESET);
	        this.state = 4131;
	        this.match(YQLParser.LPAREN);
	        this.state = 4132;
	        this.an_id();
	        this.state = 4137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4133;
	            this.match(YQLParser.COMMA);
	            this.state = 4134;
	            this.an_id();
	            this.state = 4139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4140;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_set_settings() {
	    let localctx = new Alter_topic_set_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, YQLParser.RULE_alter_topic_set_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4142;
	        this.match(YQLParser.SET);
	        this.state = 4143;
	        this.match(YQLParser.LPAREN);
	        this.state = 4144;
	        this.topic_settings();
	        this.state = 4145;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_topic_reset_settings() {
	    let localctx = new Alter_topic_reset_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, YQLParser.RULE_alter_topic_reset_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4147;
	        this.match(YQLParser.RESET);
	        this.state = 4148;
	        this.match(YQLParser.LPAREN);
	        this.state = 4149;
	        this.an_id();
	        this.state = 4154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4150;
	            this.match(YQLParser.COMMA);
	            this.state = 4151;
	            this.an_id_pure();
	            this.state = 4156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4157;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_topic_stmt() {
	    let localctx = new Drop_topic_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, YQLParser.RULE_drop_topic_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4159;
	        this.match(YQLParser.DROP);
	        this.state = 4160;
	        this.match(YQLParser.TOPIC);
	        this.state = 4163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
	        if(la_===1) {
	            this.state = 4161;
	            this.match(YQLParser.IF);
	            this.state = 4162;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4165;
	        this.topic_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_settings() {
	    let localctx = new Topic_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, YQLParser.RULE_topic_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4167;
	        this.topic_settings_entry();
	        this.state = 4172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4168;
	            this.match(YQLParser.COMMA);
	            this.state = 4169;
	            this.topic_settings_entry();
	            this.state = 4174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_settings_entry() {
	    let localctx = new Topic_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, YQLParser.RULE_topic_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4175;
	        this.an_id();
	        this.state = 4176;
	        this.match(YQLParser.EQUALS);
	        this.state = 4177;
	        this.topic_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_setting_value() {
	    let localctx = new Topic_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, YQLParser.RULE_topic_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4179;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_with_settings() {
	    let localctx = new Topic_consumer_with_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, YQLParser.RULE_topic_consumer_with_settings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4181;
	        this.match(YQLParser.WITH);
	        this.state = 4182;
	        this.match(YQLParser.LPAREN);
	        this.state = 4183;
	        this.topic_consumer_settings();
	        this.state = 4184;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_settings() {
	    let localctx = new Topic_consumer_settingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, YQLParser.RULE_topic_consumer_settings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4186;
	        this.topic_consumer_settings_entry();
	        this.state = 4191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4187;
	            this.match(YQLParser.COMMA);
	            this.state = 4188;
	            this.topic_consumer_settings_entry();
	            this.state = 4193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_settings_entry() {
	    let localctx = new Topic_consumer_settings_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, YQLParser.RULE_topic_consumer_settings_entry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4194;
	        this.an_id();
	        this.state = 4195;
	        this.match(YQLParser.EQUALS);
	        this.state = 4196;
	        this.topic_consumer_setting_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_setting_value() {
	    let localctx = new Topic_consumer_setting_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, YQLParser.RULE_topic_consumer_setting_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4198;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_ref() {
	    let localctx = new Topic_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, YQLParser.RULE_topic_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4203;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
	        if(la_===1) {
	            this.state = 4200;
	            this.cluster_expr();
	            this.state = 4201;
	            this.match(YQLParser.DOT);

	        }
	        this.state = 4205;
	        this.an_id();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topic_consumer_ref() {
	    let localctx = new Topic_consumer_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, YQLParser.RULE_topic_consumer_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4207;
	        this.an_id_pure();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_treatment() {
	    let localctx = new Null_treatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, YQLParser.RULE_null_treatment);
	    try {
	        this.state = 4213;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 249:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4209;
	            this.match(YQLParser.RESPECT);
	            this.state = 4210;
	            this.match(YQLParser.NULLS);
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4211;
	            this.match(YQLParser.IGNORE);
	            this.state = 4212;
	            this.match(YQLParser.NULLS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter_clause() {
	    let localctx = new Filter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, YQLParser.RULE_filter_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4215;
	        this.match(YQLParser.FILTER);
	        this.state = 4216;
	        this.match(YQLParser.LPAREN);
	        this.state = 4217;
	        this.match(YQLParser.WHERE);
	        this.state = 4218;
	        this.expr();
	        this.state = 4219;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_name_or_specification() {
	    let localctx = new Window_name_or_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, YQLParser.RULE_window_name_or_specification);
	    try {
	        this.state = 4223;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4221;
	            this.window_name();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4222;
	            this.window_specification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_name() {
	    let localctx = new Window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, YQLParser.RULE_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4225;
	        this.an_id_window();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_clause() {
	    let localctx = new Window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, YQLParser.RULE_window_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4227;
	        this.match(YQLParser.WINDOW);
	        this.state = 4228;
	        this.window_definition_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition_list() {
	    let localctx = new Window_definition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, YQLParser.RULE_window_definition_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4230;
	        this.window_definition();
	        this.state = 4235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 4231;
	            this.match(YQLParser.COMMA);
	            this.state = 4232;
	            this.window_definition();
	            this.state = 4237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_definition() {
	    let localctx = new Window_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, YQLParser.RULE_window_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4238;
	        this.new_window_name();
	        this.state = 4239;
	        this.match(YQLParser.AS);
	        this.state = 4240;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_window_name() {
	    let localctx = new New_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, YQLParser.RULE_new_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4242;
	        this.window_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, YQLParser.RULE_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4244;
	        this.match(YQLParser.LPAREN);
	        this.state = 4245;
	        this.window_specification_details();
	        this.state = 4246;
	        this.match(YQLParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification_details() {
	    let localctx = new Window_specification_detailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, YQLParser.RULE_window_specification_details);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4249;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
	        if(la_===1) {
	            this.state = 4248;
	            this.existing_window_name();

	        }
	        this.state = 4252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===218) {
	            this.state = 4251;
	            this.window_partition_clause();
	        }

	        this.state = 4255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===213) {
	            this.state = 4254;
	            this.window_order_clause();
	        }

	        this.state = 4258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===149 || _la===236 || _la===263) {
	            this.state = 4257;
	            this.window_frame_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existing_window_name() {
	    let localctx = new Existing_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, YQLParser.RULE_existing_window_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4260;
	        this.window_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_partition_clause() {
	    let localctx = new Window_partition_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, YQLParser.RULE_window_partition_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4262;
	        this.match(YQLParser.PARTITION);
	        this.state = 4264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 4263;
	            this.match(YQLParser.COMPACT);
	        }

	        this.state = 4266;
	        this.match(YQLParser.BY);
	        this.state = 4267;
	        this.named_expr_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_order_clause() {
	    let localctx = new Window_order_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, YQLParser.RULE_window_order_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4269;
	        this.order_by_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_clause() {
	    let localctx = new Window_frame_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, YQLParser.RULE_window_frame_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4271;
	        this.window_frame_units();
	        this.state = 4272;
	        this.window_frame_extent();
	        this.state = 4274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 4273;
	            this.window_frame_exclusion();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_units() {
	    let localctx = new Window_frame_unitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, YQLParser.RULE_window_frame_units);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4276;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===236 || _la===263)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_extent() {
	    let localctx = new Window_frame_extentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, YQLParser.RULE_window_frame_extent);
	    try {
	        this.state = 4280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4278;
	            this.window_frame_bound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4279;
	            this.window_frame_between();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_between() {
	    let localctx = new Window_frame_betweenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, YQLParser.RULE_window_frame_between);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4282;
	        this.match(YQLParser.BETWEEN);
	        this.state = 4283;
	        this.window_frame_bound();
	        this.state = 4284;
	        this.match(YQLParser.AND);
	        this.state = 4285;
	        this.window_frame_bound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_bound() {
	    let localctx = new Window_frame_boundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, YQLParser.RULE_window_frame_bound);
	    var _la = 0;
	    try {
	        this.state = 4294;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4287;
	            this.match(YQLParser.CURRENT);
	            this.state = 4288;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4291;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4289;
	                this.expr();
	                break;

	            case 2:
	                this.state = 4290;
	                this.match(YQLParser.UNBOUNDED);
	                break;

	            }
	            this.state = 4293;
	            _la = this._input.LA(1);
	            if(!(_la===138 || _la===228)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_exclusion() {
	    let localctx = new Window_frame_exclusionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, YQLParser.RULE_window_frame_exclusion);
	    try {
	        this.state = 4306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4296;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4297;
	            this.match(YQLParser.CURRENT);
	            this.state = 4298;
	            this.match(YQLParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4299;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4300;
	            this.match(YQLParser.GROUP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4301;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4302;
	            this.match(YQLParser.TIES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4303;
	            this.match(YQLParser.EXCLUDE);
	            this.state = 4304;
	            this.match(YQLParser.NO);
	            this.state = 4305;
	            this.match(YQLParser.OTHERS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_stmt() {
	    let localctx = new Use_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, YQLParser.RULE_use_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4308;
	        this.match(YQLParser.USE);
	        this.state = 4309;
	        this.cluster_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subselect_stmt() {
	    let localctx = new Subselect_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, YQLParser.RULE_subselect_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4316;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.state = 4311;
	            this.match(YQLParser.LPAREN);
	            this.state = 4312;
	            this.select_stmt();
	            this.state = 4313;
	            this.match(YQLParser.RPAREN);
	            break;
	        case 108:
	        case 141:
	        case 232:
	        case 237:
	        case 269:
	            this.state = 4315;
	            this.select_unparenthesized_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_nodes_stmt() {
	    let localctx = new Named_nodes_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, YQLParser.RULE_named_nodes_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4318;
	        this.bind_parameter_list();
	        this.state = 4319;
	        this.match(YQLParser.EQUALS);
	        this.state = 4322;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4320;
	            this.expr();
	            break;

	        case 2:
	            this.state = 4321;
	            this.subselect_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit_stmt() {
	    let localctx = new Commit_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, YQLParser.RULE_commit_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4324;
	        this.match(YQLParser.COMMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback_stmt() {
	    let localctx = new Rollback_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, YQLParser.RULE_rollback_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4326;
	        this.match(YQLParser.ROLLBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_table() {
	    let localctx = new Analyze_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, YQLParser.RULE_analyze_table);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4328;
	        this.simple_table_ref();
	        this.state = 4333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 4329;
	            this.match(YQLParser.LPAREN);
	            this.state = 4330;
	            this.column_list();
	            this.state = 4331;
	            this.match(YQLParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_table_list() {
	    let localctx = new Analyze_table_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, YQLParser.RULE_analyze_table_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4335;
	        this.analyze_table();
	        this.state = 4340;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,469,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4336;
	                this.match(YQLParser.COMMA);
	                this.state = 4337;
	                this.analyze_table(); 
	            }
	            this.state = 4342;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,469,this._ctx);
	        }

	        this.state = 4344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 4343;
	            this.match(YQLParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_stmt() {
	    let localctx = new Analyze_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, YQLParser.RULE_analyze_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4346;
	        this.match(YQLParser.ANALYZE);
	        this.state = 4347;
	        this.analyze_table_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_sequence_stmt() {
	    let localctx = new Alter_sequence_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, YQLParser.RULE_alter_sequence_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4349;
	        this.match(YQLParser.ALTER);
	        this.state = 4350;
	        this.match(YQLParser.SEQUENCE);
	        this.state = 4353;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        if(la_===1) {
	            this.state = 4351;
	            this.match(YQLParser.IF);
	            this.state = 4352;
	            this.match(YQLParser.EXISTS);

	        }
	        this.state = 4355;
	        this.object_ref();
	        this.state = 4357; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4356;
	            this.alter_sequence_action();
	            this.state = 4359; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===159 || _la===250 || _la===277);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_sequence_action() {
	    let localctx = new Alter_sequence_actionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, YQLParser.RULE_alter_sequence_action);
	    var _la = 0;
	    try {
	        this.state = 4377;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4361;
	            this.match(YQLParser.START);
	            this.state = 4363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 4362;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 4365;
	            this.integer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4366;
	            this.match(YQLParser.RESTART);
	            this.state = 4368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===321) {
	                this.state = 4367;
	                this.match(YQLParser.WITH);
	            }

	            this.state = 4370;
	            this.integer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4371;
	            this.match(YQLParser.RESTART);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4372;
	            this.match(YQLParser.INCREMENT);
	            this.state = 4374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 4373;
	                this.match(YQLParser.BY);
	            }

	            this.state = 4376;
	            this.integer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, YQLParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4379;
	        _la = this._input.LA(1);
	        if(!(_la===326 || _la===327)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id() {
	    let localctx = new IdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, YQLParser.RULE_id);
	    try {
	        this.state = 4383;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4381;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4382;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_schema() {
	    let localctx = new Id_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, YQLParser.RULE_id_schema);
	    try {
	        this.state = 4392;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4385;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4386;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 232:
	        case 237:
	        case 254:
	        case 255:
	        case 261:
	        case 269:
	        case 283:
	        case 302:
	        case 318:
	        case 319:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4387;
	            this.keyword_expr_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 304:
	        case 320:
	        case 322:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4388;
	            this.keyword_select_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4389;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4390;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4391;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_expr() {
	    let localctx = new Id_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, YQLParser.RULE_id_expr);
	    try {
	        this.state = 4400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4394;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4395;
	            this.keyword_compat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4396;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4397;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4398;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4399;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_expr_in() {
	    let localctx = new Id_expr_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, YQLParser.RULE_id_expr_in);
	    try {
	        this.state = 4407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4402;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4403;
	            this.keyword_compat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4404;
	            this.keyword_alter_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4405;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4406;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_window() {
	    let localctx = new Id_windowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, YQLParser.RULE_id_window);
	    try {
	        this.state = 4417;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4409;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4410;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 232:
	        case 237:
	        case 254:
	        case 255:
	        case 261:
	        case 269:
	        case 283:
	        case 302:
	        case 318:
	        case 319:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4411;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 278:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4412;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 304:
	        case 320:
	        case 322:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4413;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4414;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4415;
	            this.keyword_in_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4416;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table() {
	    let localctx = new Id_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, YQLParser.RULE_id_table);
	    try {
	        this.state = 4426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4419;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4420;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 232:
	        case 237:
	        case 254:
	        case 255:
	        case 261:
	        case 269:
	        case 283:
	        case 302:
	        case 318:
	        case 319:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4421;
	            this.keyword_expr_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 304:
	        case 320:
	        case 322:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4422;
	            this.keyword_select_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4423;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4424;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4425;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_without() {
	    let localctx = new Id_withoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, YQLParser.RULE_id_without);
	    try {
	        this.state = 4435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4428;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4429;
	            this.keyword_compat();
	            break;
	        case 47:
	        case 119:
	        case 278:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4430;
	            this.keyword_table_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4431;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4432;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4433;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4434;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_hint() {
	    let localctx = new Id_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, YQLParser.RULE_id_hint);
	    try {
	        this.state = 4445;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4437;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4438;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 232:
	        case 237:
	        case 254:
	        case 255:
	        case 261:
	        case 269:
	        case 283:
	        case 302:
	        case 318:
	        case 319:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4439;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 278:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4440;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 304:
	        case 320:
	        case 322:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4441;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4442;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4443;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4444;
	            this.keyword_window_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_as_compat() {
	    let localctx = new Id_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, YQLParser.RULE_id_as_compat);
	    try {
	        this.state = 4449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4447;
	            this.identifier();
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 178:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 196:
	        case 197:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 256:
	        case 257:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 267:
	        case 268:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 313:
	        case 314:
	        case 317:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4448;
	            this.keyword_as_compat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id() {
	    let localctx = new An_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, YQLParser.RULE_an_id);
	    try {
	        this.state = 4453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4451;
	            this.id();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4452;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_or_type() {
	    let localctx = new An_id_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, YQLParser.RULE_an_id_or_type);
	    try {
	        this.state = 4457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4455;
	            this.id_or_type();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4456;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_schema() {
	    let localctx = new An_id_schemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, YQLParser.RULE_an_id_schema);
	    try {
	        this.state = 4461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4459;
	            this.id_schema();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4460;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_expr() {
	    let localctx = new An_id_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, YQLParser.RULE_an_id_expr);
	    try {
	        this.state = 4465;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4463;
	            this.id_expr();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4464;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_expr_in() {
	    let localctx = new An_id_expr_inContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, YQLParser.RULE_an_id_expr_in);
	    try {
	        this.state = 4469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4467;
	            this.id_expr_in();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4468;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_window() {
	    let localctx = new An_id_windowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, YQLParser.RULE_an_id_window);
	    try {
	        this.state = 4473;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4471;
	            this.id_window();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4472;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_table() {
	    let localctx = new An_id_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, YQLParser.RULE_an_id_table);
	    try {
	        this.state = 4477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4475;
	            this.id_table();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4476;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_without() {
	    let localctx = new An_id_withoutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, YQLParser.RULE_an_id_without);
	    try {
	        this.state = 4481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4479;
	            this.id_without();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4480;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_hint() {
	    let localctx = new An_id_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, YQLParser.RULE_an_id_hint);
	    try {
	        this.state = 4485;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4483;
	            this.id_hint();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4484;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_pure() {
	    let localctx = new An_id_pureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, YQLParser.RULE_an_id_pure);
	    try {
	        this.state = 4489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4487;
	            this.identifier();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4488;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	an_id_as_compat() {
	    let localctx = new An_id_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, YQLParser.RULE_an_id_as_compat);
	    try {
	        this.state = 4493;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 178:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 196:
	        case 197:
	        case 198:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 256:
	        case 257:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 267:
	        case 268:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 313:
	        case 314:
	        case 317:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4491;
	            this.id_as_compat();
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4492;
	            this.match(YQLParser.STRING_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, YQLParser.RULE_view_name);
	    try {
	        this.state = 4498;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4495;
	            this.an_id();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4496;
	            this.match(YQLParser.PRIMARY);
	            this.state = 4497;
	            this.match(YQLParser.KEY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_id_prefix() {
	    let localctx = new Opt_id_prefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, YQLParser.RULE_opt_id_prefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
	        if(la_===1) {
	            this.state = 4500;
	            this.an_id();
	            this.state = 4501;
	            this.match(YQLParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cluster_expr() {
	    let localctx = new Cluster_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, YQLParser.RULE_cluster_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        if(la_===1) {
	            this.state = 4505;
	            this.an_id();
	            this.state = 4506;
	            this.match(YQLParser.COLON);

	        }
	        this.state = 4512;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.state = 4510;
	            this.pure_column_or_named();
	            break;
	        case 19:
	            this.state = 4511;
	            this.match(YQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_or_type() {
	    let localctx = new Id_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, YQLParser.RULE_id_or_type);
	    try {
	        this.state = 4516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4514;
	            this.id();
	            break;
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 248:
	        case 271:
	        case 279:
	        case 290:
	        case 300:
	        case 315:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4515;
	            this.type_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_id_prefix_or_type() {
	    let localctx = new Opt_id_prefix_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, YQLParser.RULE_opt_id_prefix_or_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
	        if(la_===1) {
	            this.state = 4518;
	            this.an_id_or_type();
	            this.state = 4519;
	            this.match(YQLParser.DOT);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_or_at() {
	    let localctx = new Id_or_atContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, YQLParser.RULE_id_or_at);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 4523;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 4526;
	        this.an_id_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table_or_type() {
	    let localctx = new Id_table_or_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, YQLParser.RULE_id_table_or_type);
	    try {
	        this.state = 4530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4528;
	            this.an_id_table();
	            break;
	        case 68:
	        case 105:
	        case 118:
	        case 137:
	        case 183:
	        case 211:
	        case 248:
	        case 271:
	        case 279:
	        case 290:
	        case 300:
	        case 315:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4529;
	            this.type_id();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_table_or_at() {
	    let localctx = new Id_table_or_atContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, YQLParser.RULE_id_table_or_at);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 4532;
	            this.match(YQLParser.COMMAT);
	        }

	        this.state = 4535;
	        this.id_table_or_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, YQLParser.RULE_keyword);
	    try {
	        this.state = 4545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 50:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 67:
	        case 69:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 89:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 120:
	        case 121:
	        case 122:
	        case 124:
	        case 125:
	        case 126:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 150:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 200:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 233:
	        case 234:
	        case 235:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 245:
	        case 246:
	        case 247:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 267:
	        case 268:
	        case 270:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 280:
	        case 281:
	        case 282:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 301:
	        case 303:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 316:
	        case 317:
	        case 321:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4537;
	            this.keyword_compat();
	            break;
	        case 52:
	        case 65:
	        case 66:
	        case 70:
	        case 71:
	        case 88:
	        case 90:
	        case 91:
	        case 92:
	        case 115:
	        case 127:
	        case 141:
	        case 142:
	        case 152:
	        case 174:
	        case 175:
	        case 176:
	        case 199:
	        case 201:
	        case 232:
	        case 237:
	        case 254:
	        case 255:
	        case 261:
	        case 269:
	        case 283:
	        case 302:
	        case 318:
	        case 319:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4538;
	            this.keyword_expr_uncompat();
	            break;
	        case 47:
	        case 119:
	        case 278:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4539;
	            this.keyword_table_uncompat();
	            break;
	        case 42:
	        case 49:
	        case 51:
	        case 109:
	        case 123:
	        case 151:
	        case 169:
	        case 182:
	        case 304:
	        case 320:
	        case 322:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4540;
	            this.keyword_select_uncompat();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4541;
	            this.keyword_alter_uncompat();
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4542;
	            this.keyword_in_uncompat();
	            break;
	        case 149:
	        case 236:
	        case 263:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4543;
	            this.keyword_window_uncompat();
	            break;
	        case 77:
	        case 266:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4544;
	            this.keyword_hint_uncompat();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_expr_uncompat() {
	    let localctx = new Keyword_expr_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, YQLParser.RULE_keyword_expr_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4547;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 811009) !== 0) || ((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 134217757) !== 0) || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 33603585) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 167772167) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 549453857) !== 0) || _la===269 || _la===283 || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 196609) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_table_uncompat() {
	    let localctx = new Keyword_table_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, YQLParser.RULE_keyword_table_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4549;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===119 || _la===278)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_select_uncompat() {
	    let localctx = new Keyword_select_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, YQLParser.RULE_keyword_select_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4551;
	        _la = this._input.LA(1);
	        if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 641) !== 0) || _la===109 || _la===123 || ((((_la - 151)) & ~0x1f) === 0 && ((1 << (_la - 151)) & 2147745793) !== 0) || ((((_la - 304)) & ~0x1f) === 0 && ((1 << (_la - 304)) & 327681) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_alter_uncompat() {
	    let localctx = new Keyword_alter_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, YQLParser.RULE_keyword_alter_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4553;
	        this.match(YQLParser.COLUMN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_in_uncompat() {
	    let localctx = new Keyword_in_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, YQLParser.RULE_keyword_in_uncompat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4555;
	        this.match(YQLParser.COMPACT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_window_uncompat() {
	    let localctx = new Keyword_window_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, YQLParser.RULE_keyword_window_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===236 || _la===263)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_hint_uncompat() {
	    let localctx = new Keyword_hint_uncompatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, YQLParser.RULE_keyword_hint_uncompat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4559;
	        _la = this._input.LA(1);
	        if(!(_la===77 || _la===266)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_as_compat() {
	    let localctx = new Keyword_as_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, YQLParser.RULE_keyword_as_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4561;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2817496559) !== 0) || ((((_la - 72)) & ~0x1f) === 0 && ((1 << (_la - 72)) & 4024598343) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4015470493) !== 0) || ((((_la - 136)) & ~0x1f) === 0 && ((1 << (_la - 136)) & 3221118877) !== 0) || ((((_la - 168)) & ~0x1f) === 0 && ((1 << (_la - 168)) & 2013213709) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 3086982623) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 2529672179) !== 0) || ((((_la - 267)) & ~0x1f) === 0 && ((1 << (_la - 267)) & 4286506979) !== 0) || ((((_la - 301)) & ~0x1f) === 0 && ((1 << (_la - 301)) & 12662773) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_compat() {
	    let localctx = new Keyword_compatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, YQLParser.RULE_keyword_compat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4563;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 2817496559) !== 0) || ((((_la - 72)) & ~0x1f) === 0 && ((1 << (_la - 72)) & 4293066575) !== 0) || ((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 4017567709) !== 0) || ((((_la - 136)) & ~0x1f) === 0 && ((1 << (_la - 136)) & 4294860701) !== 0) || ((((_la - 168)) & ~0x1f) === 0 && ((1 << (_la - 168)) & 2147434045) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 4294965245) !== 0) || ((((_la - 233)) & ~0x1f) === 0 && ((1 << (_la - 233)) & 2946463719) !== 0) || ((((_la - 265)) & ~0x1f) === 0 && ((1 << (_la - 265)) & 4261126061) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 219938643) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_id() {
	    let localctx = new Type_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, YQLParser.RULE_type_id);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4565;
	        _la = this._input.LA(1);
	        if(!(_la===68 || _la===105 || _la===118 || _la===137 || _la===183 || _la===211 || ((((_la - 248)) & ~0x1f) === 0 && ((1 << (_la - 248)) & 2155872257) !== 0) || ((((_la - 290)) & ~0x1f) === 0 && ((1 << (_la - 290)) & 33555457) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_value() {
	    let localctx = new Bool_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, YQLParser.RULE_bool_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4567;
	        _la = this._input.LA(1);
	        if(!(_la===132 || _la===299)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real() {
	    let localctx = new RealContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, YQLParser.RULE_real);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4569;
	        this.match(YQLParser.REAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, YQLParser.RULE_integer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4571;
	        _la = this._input.LA(1);
	        if(!(_la===328 || _la===329)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

YQLParser.EOF = antlr4.Token.EOF;
YQLParser.EQUALS = 1;
YQLParser.EQUALS2 = 2;
YQLParser.NOT_EQUALS = 3;
YQLParser.NOT_EQUALS2 = 4;
YQLParser.LESS = 5;
YQLParser.LESS_OR_EQ = 6;
YQLParser.GREATER = 7;
YQLParser.GREATER_OR_EQ = 8;
YQLParser.SHIFT_LEFT = 9;
YQLParser.ROT_LEFT = 10;
YQLParser.AMPERSAND = 11;
YQLParser.PIPE = 12;
YQLParser.DOUBLE_PIPE = 13;
YQLParser.STRUCT_OPEN = 14;
YQLParser.STRUCT_CLOSE = 15;
YQLParser.PLUS = 16;
YQLParser.MINUS = 17;
YQLParser.TILDA = 18;
YQLParser.ASTERISK = 19;
YQLParser.SLASH = 20;
YQLParser.PERCENT = 21;
YQLParser.SEMICOLON = 22;
YQLParser.DOT = 23;
YQLParser.COMMA = 24;
YQLParser.LPAREN = 25;
YQLParser.RPAREN = 26;
YQLParser.QUESTION = 27;
YQLParser.COLON = 28;
YQLParser.COMMAT = 29;
YQLParser.DOLLAR = 30;
YQLParser.LBRACE_CURLY = 31;
YQLParser.RBRACE_CURLY = 32;
YQLParser.CARET = 33;
YQLParser.NAMESPACE = 34;
YQLParser.ARROW = 35;
YQLParser.RBRACE_SQUARE = 36;
YQLParser.LBRACE_SQUARE = 37;
YQLParser.ABORT = 38;
YQLParser.ACTION = 39;
YQLParser.ADD = 40;
YQLParser.AFTER = 41;
YQLParser.ALL = 42;
YQLParser.ALTER = 43;
YQLParser.ANALYZE = 44;
YQLParser.AND = 45;
YQLParser.ANSI = 46;
YQLParser.ANY = 47;
YQLParser.ARRAY = 48;
YQLParser.AS = 49;
YQLParser.ASC = 50;
YQLParser.ASSUME = 51;
YQLParser.ASYMMETRIC = 52;
YQLParser.ASYNC = 53;
YQLParser.AT = 54;
YQLParser.ATTACH = 55;
YQLParser.ATTRIBUTES = 56;
YQLParser.AUTOINCREMENT = 57;
YQLParser.AUTOMAP = 58;
YQLParser.BACKUP = 59;
YQLParser.BATCH = 60;
YQLParser.COLLECTION = 61;
YQLParser.BEFORE = 62;
YQLParser.BEGIN = 63;
YQLParser.BERNOULLI = 64;
YQLParser.BETWEEN = 65;
YQLParser.BITCAST = 66;
YQLParser.BY = 67;
YQLParser.CALLABLE = 68;
YQLParser.CASCADE = 69;
YQLParser.CASE = 70;
YQLParser.CAST = 71;
YQLParser.CHANGEFEED = 72;
YQLParser.CHECK = 73;
YQLParser.CLASSIFIER = 74;
YQLParser.COLLATE = 75;
YQLParser.COLUMN = 76;
YQLParser.COLUMNS = 77;
YQLParser.COMMIT = 78;
YQLParser.COMPACT = 79;
YQLParser.CONDITIONAL = 80;
YQLParser.CONFLICT = 81;
YQLParser.CONNECT = 82;
YQLParser.CONSTRAINT = 83;
YQLParser.CONSUMER = 84;
YQLParser.COVER = 85;
YQLParser.CREATE = 86;
YQLParser.CROSS = 87;
YQLParser.CUBE = 88;
YQLParser.CURRENT = 89;
YQLParser.CURRENT_DATE = 90;
YQLParser.CURRENT_TIME = 91;
YQLParser.CURRENT_TIMESTAMP = 92;
YQLParser.DATA = 93;
YQLParser.DATABASE = 94;
YQLParser.DECIMAL = 95;
YQLParser.DECLARE = 96;
YQLParser.DEFAULT = 97;
YQLParser.DEFERRABLE = 98;
YQLParser.DEFERRED = 99;
YQLParser.DEFINE = 100;
YQLParser.DELETE = 101;
YQLParser.DESC = 102;
YQLParser.DESCRIBE = 103;
YQLParser.DETACH = 104;
YQLParser.DICT = 105;
YQLParser.DIRECTORY = 106;
YQLParser.DISABLE = 107;
YQLParser.DISCARD = 108;
YQLParser.DISTINCT = 109;
YQLParser.DO = 110;
YQLParser.DROP = 111;
YQLParser.EACH = 112;
YQLParser.ELSE = 113;
YQLParser.EMPTY = 114;
YQLParser.EMPTY_ACTION = 115;
YQLParser.ENCRYPTED = 116;
YQLParser.END = 117;
YQLParser.ENUM = 118;
YQLParser.ERASE = 119;
YQLParser.ERROR = 120;
YQLParser.ESCAPE = 121;
YQLParser.EVALUATE = 122;
YQLParser.EXCEPT = 123;
YQLParser.EXCLUDE = 124;
YQLParser.EXCLUSION = 125;
YQLParser.EXCLUSIVE = 126;
YQLParser.EXISTS = 127;
YQLParser.EXPLAIN = 128;
YQLParser.EXPORT = 129;
YQLParser.EXTERNAL = 130;
YQLParser.FAIL = 131;
YQLParser.FALSE = 132;
YQLParser.FAMILY = 133;
YQLParser.FILTER = 134;
YQLParser.FIRST = 135;
YQLParser.FLATTEN = 136;
YQLParser.FLOW = 137;
YQLParser.FOLLOWING = 138;
YQLParser.FOR = 139;
YQLParser.FOREIGN = 140;
YQLParser.FROM = 141;
YQLParser.FULL = 142;
YQLParser.FUNCTION = 143;
YQLParser.GLOB = 144;
YQLParser.GLOBAL = 145;
YQLParser.GRANT = 146;
YQLParser.GROUP = 147;
YQLParser.GROUPING = 148;
YQLParser.GROUPS = 149;
YQLParser.HASH = 150;
YQLParser.HAVING = 151;
YQLParser.HOP = 152;
YQLParser.IF = 153;
YQLParser.IGNORE = 154;
YQLParser.ILIKE = 155;
YQLParser.IMMEDIATE = 156;
YQLParser.IMPORT = 157;
YQLParser.IN = 158;
YQLParser.INCREMENT = 159;
YQLParser.INCREMENTAL = 160;
YQLParser.INDEX = 161;
YQLParser.INDEXED = 162;
YQLParser.INHERITS = 163;
YQLParser.INITIAL = 164;
YQLParser.INITIALLY = 165;
YQLParser.INNER = 166;
YQLParser.INSERT = 167;
YQLParser.INSTEAD = 168;
YQLParser.INTERSECT = 169;
YQLParser.INTO = 170;
YQLParser.IS = 171;
YQLParser.ISNULL = 172;
YQLParser.JOIN = 173;
YQLParser.JSON_EXISTS = 174;
YQLParser.JSON_QUERY = 175;
YQLParser.JSON_VALUE = 176;
YQLParser.KEY = 177;
YQLParser.LAST = 178;
YQLParser.LEFT = 179;
YQLParser.LEGACY = 180;
YQLParser.LIKE = 181;
YQLParser.LIMIT = 182;
YQLParser.LIST = 183;
YQLParser.LOCAL = 184;
YQLParser.LOGIN = 185;
YQLParser.MANAGE = 186;
YQLParser.MATCH = 187;
YQLParser.MATCHES = 188;
YQLParser.MATCH_RECOGNIZE = 189;
YQLParser.MEASURES = 190;
YQLParser.MICROSECONDS = 191;
YQLParser.MILLISECONDS = 192;
YQLParser.MODIFY = 193;
YQLParser.NANOSECONDS = 194;
YQLParser.NATURAL = 195;
YQLParser.NEXT = 196;
YQLParser.NO = 197;
YQLParser.NOLOGIN = 198;
YQLParser.NOT = 199;
YQLParser.NOTNULL = 200;
YQLParser.NULL = 201;
YQLParser.NULLS = 202;
YQLParser.OBJECT = 203;
YQLParser.OF = 204;
YQLParser.OFFSET = 205;
YQLParser.OMIT = 206;
YQLParser.ON = 207;
YQLParser.ONE = 208;
YQLParser.ONLY = 209;
YQLParser.OPTION = 210;
YQLParser.OPTIONAL = 211;
YQLParser.OR = 212;
YQLParser.ORDER = 213;
YQLParser.OTHERS = 214;
YQLParser.OUTER = 215;
YQLParser.OVER = 216;
YQLParser.PARALLEL = 217;
YQLParser.PARTITION = 218;
YQLParser.PASSING = 219;
YQLParser.PASSWORD = 220;
YQLParser.PAST = 221;
YQLParser.PATTERN = 222;
YQLParser.PER = 223;
YQLParser.PERMUTE = 224;
YQLParser.PLAN = 225;
YQLParser.POOL = 226;
YQLParser.PRAGMA = 227;
YQLParser.PRECEDING = 228;
YQLParser.PRESORT = 229;
YQLParser.PRIMARY = 230;
YQLParser.PRIVILEGES = 231;
YQLParser.PROCESS = 232;
YQLParser.QUERY = 233;
YQLParser.QUEUE = 234;
YQLParser.RAISE = 235;
YQLParser.RANGE = 236;
YQLParser.REDUCE = 237;
YQLParser.REFERENCES = 238;
YQLParser.REGEXP = 239;
YQLParser.REINDEX = 240;
YQLParser.RELEASE = 241;
YQLParser.REMOVE = 242;
YQLParser.RENAME = 243;
YQLParser.REPEATABLE = 244;
YQLParser.REPLACE = 245;
YQLParser.REPLICATION = 246;
YQLParser.RESET = 247;
YQLParser.RESOURCE = 248;
YQLParser.RESPECT = 249;
YQLParser.RESTART = 250;
YQLParser.RESTORE = 251;
YQLParser.RESTRICT = 252;
YQLParser.RESULT = 253;
YQLParser.RETURN = 254;
YQLParser.RETURNING = 255;
YQLParser.REVERT = 256;
YQLParser.REVOKE = 257;
YQLParser.RIGHT = 258;
YQLParser.RLIKE = 259;
YQLParser.ROLLBACK = 260;
YQLParser.ROLLUP = 261;
YQLParser.ROW = 262;
YQLParser.ROWS = 263;
YQLParser.SAMPLE = 264;
YQLParser.SAVEPOINT = 265;
YQLParser.SCHEMA = 266;
YQLParser.SECONDS = 267;
YQLParser.SEEK = 268;
YQLParser.SELECT = 269;
YQLParser.SEMI = 270;
YQLParser.SET = 271;
YQLParser.SETS = 272;
YQLParser.SHOW = 273;
YQLParser.TSKIP = 274;
YQLParser.SEQUENCE = 275;
YQLParser.SOURCE = 276;
YQLParser.START = 277;
YQLParser.STREAM = 278;
YQLParser.STRUCT = 279;
YQLParser.SUBQUERY = 280;
YQLParser.SUBSET = 281;
YQLParser.SYMBOLS = 282;
YQLParser.SYMMETRIC = 283;
YQLParser.SYNC = 284;
YQLParser.SYSTEM = 285;
YQLParser.TABLE = 286;
YQLParser.TABLES = 287;
YQLParser.TABLESAMPLE = 288;
YQLParser.TABLESTORE = 289;
YQLParser.TAGGED = 290;
YQLParser.TEMP = 291;
YQLParser.TEMPORARY = 292;
YQLParser.THEN = 293;
YQLParser.TIES = 294;
YQLParser.TO = 295;
YQLParser.TOPIC = 296;
YQLParser.TRANSACTION = 297;
YQLParser.TRIGGER = 298;
YQLParser.TRUE = 299;
YQLParser.TUPLE = 300;
YQLParser.TYPE = 301;
YQLParser.UNBOUNDED = 302;
YQLParser.UNCONDITIONAL = 303;
YQLParser.UNION = 304;
YQLParser.UNIQUE = 305;
YQLParser.UNKNOWN = 306;
YQLParser.UNMATCHED = 307;
YQLParser.UPDATE = 308;
YQLParser.UPSERT = 309;
YQLParser.USE = 310;
YQLParser.USER = 311;
YQLParser.USING = 312;
YQLParser.VACUUM = 313;
YQLParser.VALUES = 314;
YQLParser.VARIANT = 315;
YQLParser.VIEW = 316;
YQLParser.VIRTUAL = 317;
YQLParser.WHEN = 318;
YQLParser.WHERE = 319;
YQLParser.WINDOW = 320;
YQLParser.WITH = 321;
YQLParser.WITHOUT = 322;
YQLParser.WRAPPER = 323;
YQLParser.XOR = 324;
YQLParser.STRING_VALUE = 325;
YQLParser.ID_PLAIN = 326;
YQLParser.ID_QUOTED = 327;
YQLParser.DIGITS = 328;
YQLParser.INTEGER_VALUE = 329;
YQLParser.REAL = 330;
YQLParser.BLOB = 331;
YQLParser.WS = 332;
YQLParser.COMMENT = 333;

YQLParser.RULE_sql_query = 0;
YQLParser.RULE_sql_stmt_list = 1;
YQLParser.RULE_ansi_sql_stmt_list = 2;
YQLParser.RULE_lambda_body = 3;
YQLParser.RULE_lambda_stmt = 4;
YQLParser.RULE_sql_stmt = 5;
YQLParser.RULE_sql_stmt_core = 6;
YQLParser.RULE_expr = 7;
YQLParser.RULE_or_subexpr = 8;
YQLParser.RULE_and_subexpr = 9;
YQLParser.RULE_xor_subexpr = 10;
YQLParser.RULE_distinct_from_op = 11;
YQLParser.RULE_cond_expr = 12;
YQLParser.RULE_match_op = 13;
YQLParser.RULE_eq_subexpr = 14;
YQLParser.RULE_shift_right = 15;
YQLParser.RULE_rot_right = 16;
YQLParser.RULE_double_question = 17;
YQLParser.RULE_neq_subexpr = 18;
YQLParser.RULE_bit_subexpr = 19;
YQLParser.RULE_add_subexpr = 20;
YQLParser.RULE_mul_subexpr = 21;
YQLParser.RULE_con_subexpr = 22;
YQLParser.RULE_unary_op = 23;
YQLParser.RULE_unary_subexpr_suffix = 24;
YQLParser.RULE_unary_casual_subexpr = 25;
YQLParser.RULE_in_unary_casual_subexpr = 26;
YQLParser.RULE_unary_subexpr = 27;
YQLParser.RULE_in_unary_subexpr = 28;
YQLParser.RULE_list_literal = 29;
YQLParser.RULE_expr_dict_list = 30;
YQLParser.RULE_dict_literal = 31;
YQLParser.RULE_expr_struct_list = 32;
YQLParser.RULE_struct_literal = 33;
YQLParser.RULE_atom_expr = 34;
YQLParser.RULE_in_atom_expr = 35;
YQLParser.RULE_cast_expr = 36;
YQLParser.RULE_bitcast_expr = 37;
YQLParser.RULE_exists_expr = 38;
YQLParser.RULE_case_expr = 39;
YQLParser.RULE_lambda = 40;
YQLParser.RULE_in_expr = 41;
YQLParser.RULE_json_api_expr = 42;
YQLParser.RULE_jsonpath_spec = 43;
YQLParser.RULE_json_variable_name = 44;
YQLParser.RULE_json_variable = 45;
YQLParser.RULE_json_variables = 46;
YQLParser.RULE_json_common_args = 47;
YQLParser.RULE_json_case_handler = 48;
YQLParser.RULE_json_value = 49;
YQLParser.RULE_json_exists_handler = 50;
YQLParser.RULE_json_exists = 51;
YQLParser.RULE_json_query_wrapper = 52;
YQLParser.RULE_json_query_handler = 53;
YQLParser.RULE_json_query = 54;
YQLParser.RULE_smart_parenthesis = 55;
YQLParser.RULE_expr_list = 56;
YQLParser.RULE_pure_column_list = 57;
YQLParser.RULE_pure_column_or_named = 58;
YQLParser.RULE_pure_column_or_named_list = 59;
YQLParser.RULE_column_name = 60;
YQLParser.RULE_without_column_name = 61;
YQLParser.RULE_column_list = 62;
YQLParser.RULE_without_column_list = 63;
YQLParser.RULE_named_expr = 64;
YQLParser.RULE_named_expr_list = 65;
YQLParser.RULE_invoke_expr = 66;
YQLParser.RULE_invoke_expr_tail = 67;
YQLParser.RULE_using_call_expr = 68;
YQLParser.RULE_key_expr = 69;
YQLParser.RULE_when_expr = 70;
YQLParser.RULE_literal_value = 71;
YQLParser.RULE_bind_parameter = 72;
YQLParser.RULE_opt_bind_parameter = 73;
YQLParser.RULE_bind_parameter_list = 74;
YQLParser.RULE_named_bind_parameter = 75;
YQLParser.RULE_named_bind_parameter_list = 76;
YQLParser.RULE_signed_number = 77;
YQLParser.RULE_type_name_simple = 78;
YQLParser.RULE_integer_or_bind = 79;
YQLParser.RULE_type_name_tag = 80;
YQLParser.RULE_struct_arg = 81;
YQLParser.RULE_struct_arg_positional = 82;
YQLParser.RULE_variant_arg = 83;
YQLParser.RULE_callable_arg = 84;
YQLParser.RULE_callable_arg_list = 85;
YQLParser.RULE_type_name_decimal = 86;
YQLParser.RULE_type_name_optional = 87;
YQLParser.RULE_type_name_tuple = 88;
YQLParser.RULE_type_name_struct = 89;
YQLParser.RULE_type_name_variant = 90;
YQLParser.RULE_type_name_list = 91;
YQLParser.RULE_type_name_stream = 92;
YQLParser.RULE_type_name_flow = 93;
YQLParser.RULE_type_name_dict = 94;
YQLParser.RULE_type_name_set = 95;
YQLParser.RULE_type_name_enum = 96;
YQLParser.RULE_type_name_resource = 97;
YQLParser.RULE_type_name_tagged = 98;
YQLParser.RULE_type_name_callable = 99;
YQLParser.RULE_type_name_composite = 100;
YQLParser.RULE_type_name = 101;
YQLParser.RULE_type_name_or_bind = 102;
YQLParser.RULE_value_constructor_literal = 103;
YQLParser.RULE_value_constructor = 104;
YQLParser.RULE_declare_stmt = 105;
YQLParser.RULE_module_path = 106;
YQLParser.RULE_import_stmt = 107;
YQLParser.RULE_export_stmt = 108;
YQLParser.RULE_call_action = 109;
YQLParser.RULE_inline_action = 110;
YQLParser.RULE_do_stmt = 111;
YQLParser.RULE_pragma_stmt = 112;
YQLParser.RULE_pragma_value = 113;
YQLParser.RULE_sort_specification = 114;
YQLParser.RULE_sort_specification_list = 115;
YQLParser.RULE_select_stmt = 116;
YQLParser.RULE_select_unparenthesized_stmt = 117;
YQLParser.RULE_select_kind_parenthesis = 118;
YQLParser.RULE_select_op = 119;
YQLParser.RULE_select_kind_partial = 120;
YQLParser.RULE_select_kind = 121;
YQLParser.RULE_process_core = 122;
YQLParser.RULE_external_call_param = 123;
YQLParser.RULE_external_call_settings = 124;
YQLParser.RULE_reduce_core = 125;
YQLParser.RULE_opt_set_quantifier = 126;
YQLParser.RULE_select_core = 127;
YQLParser.RULE_row_pattern_recognition_clause = 128;
YQLParser.RULE_row_pattern_rows_per_match = 129;
YQLParser.RULE_row_pattern_empty_match_handling = 130;
YQLParser.RULE_row_pattern_measures = 131;
YQLParser.RULE_row_pattern_measure_list = 132;
YQLParser.RULE_row_pattern_measure_definition = 133;
YQLParser.RULE_row_pattern_common_syntax = 134;
YQLParser.RULE_row_pattern_skip_to = 135;
YQLParser.RULE_row_pattern_skip_to_variable_name = 136;
YQLParser.RULE_row_pattern_initial_or_seek = 137;
YQLParser.RULE_row_pattern = 138;
YQLParser.RULE_row_pattern_term = 139;
YQLParser.RULE_row_pattern_factor = 140;
YQLParser.RULE_row_pattern_quantifier = 141;
YQLParser.RULE_row_pattern_primary = 142;
YQLParser.RULE_row_pattern_primary_variable_name = 143;
YQLParser.RULE_row_pattern_permute = 144;
YQLParser.RULE_row_pattern_subset_clause = 145;
YQLParser.RULE_row_pattern_subset_list = 146;
YQLParser.RULE_row_pattern_subset_item = 147;
YQLParser.RULE_row_pattern_subset_item_variable_name = 148;
YQLParser.RULE_row_pattern_subset_rhs = 149;
YQLParser.RULE_row_pattern_subset_rhs_variable_name = 150;
YQLParser.RULE_row_pattern_definition_list = 151;
YQLParser.RULE_row_pattern_definition = 152;
YQLParser.RULE_row_pattern_definition_variable_name = 153;
YQLParser.RULE_row_pattern_definition_search_condition = 154;
YQLParser.RULE_search_condition = 155;
YQLParser.RULE_row_pattern_variable_name = 156;
YQLParser.RULE_order_by_clause = 157;
YQLParser.RULE_ext_order_by_clause = 158;
YQLParser.RULE_group_by_clause = 159;
YQLParser.RULE_grouping_element_list = 160;
YQLParser.RULE_grouping_element = 161;
YQLParser.RULE_ordinary_grouping_set = 162;
YQLParser.RULE_ordinary_grouping_set_list = 163;
YQLParser.RULE_rollup_list = 164;
YQLParser.RULE_cube_list = 165;
YQLParser.RULE_grouping_sets_specification = 166;
YQLParser.RULE_hopping_window_specification = 167;
YQLParser.RULE_result_column = 168;
YQLParser.RULE_join_source = 169;
YQLParser.RULE_named_column = 170;
YQLParser.RULE_flatten_by_arg = 171;
YQLParser.RULE_flatten_source = 172;
YQLParser.RULE_named_single_source = 173;
YQLParser.RULE_single_source = 174;
YQLParser.RULE_sample_clause = 175;
YQLParser.RULE_tablesample_clause = 176;
YQLParser.RULE_sampling_mode = 177;
YQLParser.RULE_repeatable_clause = 178;
YQLParser.RULE_join_op = 179;
YQLParser.RULE_join_constraint = 180;
YQLParser.RULE_returning_columns_list = 181;
YQLParser.RULE_into_table_stmt = 182;
YQLParser.RULE_into_values_source = 183;
YQLParser.RULE_values_stmt = 184;
YQLParser.RULE_values_source = 185;
YQLParser.RULE_values_source_row_list = 186;
YQLParser.RULE_values_source_row = 187;
YQLParser.RULE_simple_values_source = 188;
YQLParser.RULE_create_external_data_source_stmt = 189;
YQLParser.RULE_alter_external_data_source_stmt = 190;
YQLParser.RULE_alter_external_data_source_action = 191;
YQLParser.RULE_drop_external_data_source_stmt = 192;
YQLParser.RULE_create_view_stmt = 193;
YQLParser.RULE_drop_view_stmt = 194;
YQLParser.RULE_upsert_object_stmt = 195;
YQLParser.RULE_create_object_stmt = 196;
YQLParser.RULE_create_object_features = 197;
YQLParser.RULE_alter_object_stmt = 198;
YQLParser.RULE_alter_object_features = 199;
YQLParser.RULE_drop_object_stmt = 200;
YQLParser.RULE_drop_object_features = 201;
YQLParser.RULE_object_feature_value = 202;
YQLParser.RULE_object_feature_kv = 203;
YQLParser.RULE_object_feature_flag = 204;
YQLParser.RULE_object_feature = 205;
YQLParser.RULE_object_features = 206;
YQLParser.RULE_object_type_ref = 207;
YQLParser.RULE_create_table_stmt = 208;
YQLParser.RULE_create_table_entry = 209;
YQLParser.RULE_create_backup_collection_stmt = 210;
YQLParser.RULE_alter_backup_collection_stmt = 211;
YQLParser.RULE_drop_backup_collection_stmt = 212;
YQLParser.RULE_create_backup_collection_entries = 213;
YQLParser.RULE_create_backup_collection_entries_many = 214;
YQLParser.RULE_table_list = 215;
YQLParser.RULE_alter_backup_collection_actions = 216;
YQLParser.RULE_alter_backup_collection_action = 217;
YQLParser.RULE_alter_backup_collection_entries = 218;
YQLParser.RULE_alter_backup_collection_entry = 219;
YQLParser.RULE_backup_collection = 220;
YQLParser.RULE_backup_collection_settings = 221;
YQLParser.RULE_backup_collection_settings_entry = 222;
YQLParser.RULE_backup_stmt = 223;
YQLParser.RULE_restore_stmt = 224;
YQLParser.RULE_table_inherits = 225;
YQLParser.RULE_table_partition_by = 226;
YQLParser.RULE_with_table_settings = 227;
YQLParser.RULE_table_tablestore = 228;
YQLParser.RULE_table_settings_entry = 229;
YQLParser.RULE_table_as_source = 230;
YQLParser.RULE_alter_table_stmt = 231;
YQLParser.RULE_alter_table_action = 232;
YQLParser.RULE_alter_external_table_stmt = 233;
YQLParser.RULE_alter_external_table_action = 234;
YQLParser.RULE_alter_table_store_stmt = 235;
YQLParser.RULE_alter_table_store_action = 236;
YQLParser.RULE_alter_table_add_column = 237;
YQLParser.RULE_alter_table_drop_column = 238;
YQLParser.RULE_alter_table_alter_column = 239;
YQLParser.RULE_alter_table_alter_column_drop_not_null = 240;
YQLParser.RULE_alter_table_add_column_family = 241;
YQLParser.RULE_alter_table_alter_column_family = 242;
YQLParser.RULE_alter_table_set_table_setting_uncompat = 243;
YQLParser.RULE_alter_table_set_table_setting_compat = 244;
YQLParser.RULE_alter_table_reset_table_setting = 245;
YQLParser.RULE_alter_table_add_index = 246;
YQLParser.RULE_alter_table_drop_index = 247;
YQLParser.RULE_alter_table_rename_to = 248;
YQLParser.RULE_alter_table_rename_index_to = 249;
YQLParser.RULE_alter_table_add_changefeed = 250;
YQLParser.RULE_alter_table_alter_changefeed = 251;
YQLParser.RULE_alter_table_drop_changefeed = 252;
YQLParser.RULE_alter_table_alter_index = 253;
YQLParser.RULE_column_schema = 254;
YQLParser.RULE_family_relation = 255;
YQLParser.RULE_opt_column_constraints = 256;
YQLParser.RULE_column_order_by_specification = 257;
YQLParser.RULE_table_constraint = 258;
YQLParser.RULE_table_index = 259;
YQLParser.RULE_table_index_type = 260;
YQLParser.RULE_global_index = 261;
YQLParser.RULE_local_index = 262;
YQLParser.RULE_index_subtype = 263;
YQLParser.RULE_with_index_settings = 264;
YQLParser.RULE_index_setting_entry = 265;
YQLParser.RULE_index_setting_value = 266;
YQLParser.RULE_changefeed = 267;
YQLParser.RULE_changefeed_settings = 268;
YQLParser.RULE_changefeed_settings_entry = 269;
YQLParser.RULE_changefeed_setting_value = 270;
YQLParser.RULE_changefeed_alter_settings = 271;
YQLParser.RULE_alter_table_setting_entry = 272;
YQLParser.RULE_table_setting_value = 273;
YQLParser.RULE_ttl_tier_list = 274;
YQLParser.RULE_ttl_tier_action = 275;
YQLParser.RULE_family_entry = 276;
YQLParser.RULE_family_settings = 277;
YQLParser.RULE_family_settings_entry = 278;
YQLParser.RULE_family_setting_value = 279;
YQLParser.RULE_split_boundaries = 280;
YQLParser.RULE_literal_value_list = 281;
YQLParser.RULE_alter_table_alter_index_action = 282;
YQLParser.RULE_drop_table_stmt = 283;
YQLParser.RULE_create_user_stmt = 284;
YQLParser.RULE_alter_user_stmt = 285;
YQLParser.RULE_create_group_stmt = 286;
YQLParser.RULE_alter_group_stmt = 287;
YQLParser.RULE_drop_role_stmt = 288;
YQLParser.RULE_role_name = 289;
YQLParser.RULE_create_user_option = 290;
YQLParser.RULE_password_option = 291;
YQLParser.RULE_login_option = 292;
YQLParser.RULE_grant_permissions_stmt = 293;
YQLParser.RULE_revoke_permissions_stmt = 294;
YQLParser.RULE_permission_id = 295;
YQLParser.RULE_permission_name = 296;
YQLParser.RULE_permission_name_target = 297;
YQLParser.RULE_create_resource_pool_stmt = 298;
YQLParser.RULE_alter_resource_pool_stmt = 299;
YQLParser.RULE_alter_resource_pool_action = 300;
YQLParser.RULE_drop_resource_pool_stmt = 301;
YQLParser.RULE_create_resource_pool_classifier_stmt = 302;
YQLParser.RULE_alter_resource_pool_classifier_stmt = 303;
YQLParser.RULE_alter_resource_pool_classifier_action = 304;
YQLParser.RULE_drop_resource_pool_classifier_stmt = 305;
YQLParser.RULE_create_replication_stmt = 306;
YQLParser.RULE_replication_target = 307;
YQLParser.RULE_replication_settings = 308;
YQLParser.RULE_replication_settings_entry = 309;
YQLParser.RULE_alter_replication_stmt = 310;
YQLParser.RULE_alter_replication_action = 311;
YQLParser.RULE_alter_replication_set_setting = 312;
YQLParser.RULE_drop_replication_stmt = 313;
YQLParser.RULE_action_or_subquery_args = 314;
YQLParser.RULE_define_action_or_subquery_stmt = 315;
YQLParser.RULE_define_action_or_subquery_body = 316;
YQLParser.RULE_if_stmt = 317;
YQLParser.RULE_for_stmt = 318;
YQLParser.RULE_table_ref = 319;
YQLParser.RULE_table_key = 320;
YQLParser.RULE_table_arg = 321;
YQLParser.RULE_table_hints = 322;
YQLParser.RULE_table_hint = 323;
YQLParser.RULE_object_ref = 324;
YQLParser.RULE_simple_table_ref_core = 325;
YQLParser.RULE_simple_table_ref = 326;
YQLParser.RULE_into_simple_table_ref = 327;
YQLParser.RULE_delete_stmt = 328;
YQLParser.RULE_update_stmt = 329;
YQLParser.RULE_set_clause_choice = 330;
YQLParser.RULE_set_clause_list = 331;
YQLParser.RULE_set_clause = 332;
YQLParser.RULE_set_target = 333;
YQLParser.RULE_multiple_column_assignment = 334;
YQLParser.RULE_set_target_list = 335;
YQLParser.RULE_create_topic_stmt = 336;
YQLParser.RULE_create_topic_entries = 337;
YQLParser.RULE_create_topic_entry = 338;
YQLParser.RULE_with_topic_settings = 339;
YQLParser.RULE_alter_topic_stmt = 340;
YQLParser.RULE_alter_topic_action = 341;
YQLParser.RULE_alter_topic_add_consumer = 342;
YQLParser.RULE_topic_create_consumer_entry = 343;
YQLParser.RULE_alter_topic_alter_consumer = 344;
YQLParser.RULE_alter_topic_alter_consumer_entry = 345;
YQLParser.RULE_alter_topic_drop_consumer = 346;
YQLParser.RULE_topic_alter_consumer_set = 347;
YQLParser.RULE_topic_alter_consumer_reset = 348;
YQLParser.RULE_alter_topic_set_settings = 349;
YQLParser.RULE_alter_topic_reset_settings = 350;
YQLParser.RULE_drop_topic_stmt = 351;
YQLParser.RULE_topic_settings = 352;
YQLParser.RULE_topic_settings_entry = 353;
YQLParser.RULE_topic_setting_value = 354;
YQLParser.RULE_topic_consumer_with_settings = 355;
YQLParser.RULE_topic_consumer_settings = 356;
YQLParser.RULE_topic_consumer_settings_entry = 357;
YQLParser.RULE_topic_consumer_setting_value = 358;
YQLParser.RULE_topic_ref = 359;
YQLParser.RULE_topic_consumer_ref = 360;
YQLParser.RULE_null_treatment = 361;
YQLParser.RULE_filter_clause = 362;
YQLParser.RULE_window_name_or_specification = 363;
YQLParser.RULE_window_name = 364;
YQLParser.RULE_window_clause = 365;
YQLParser.RULE_window_definition_list = 366;
YQLParser.RULE_window_definition = 367;
YQLParser.RULE_new_window_name = 368;
YQLParser.RULE_window_specification = 369;
YQLParser.RULE_window_specification_details = 370;
YQLParser.RULE_existing_window_name = 371;
YQLParser.RULE_window_partition_clause = 372;
YQLParser.RULE_window_order_clause = 373;
YQLParser.RULE_window_frame_clause = 374;
YQLParser.RULE_window_frame_units = 375;
YQLParser.RULE_window_frame_extent = 376;
YQLParser.RULE_window_frame_between = 377;
YQLParser.RULE_window_frame_bound = 378;
YQLParser.RULE_window_frame_exclusion = 379;
YQLParser.RULE_use_stmt = 380;
YQLParser.RULE_subselect_stmt = 381;
YQLParser.RULE_named_nodes_stmt = 382;
YQLParser.RULE_commit_stmt = 383;
YQLParser.RULE_rollback_stmt = 384;
YQLParser.RULE_analyze_table = 385;
YQLParser.RULE_analyze_table_list = 386;
YQLParser.RULE_analyze_stmt = 387;
YQLParser.RULE_alter_sequence_stmt = 388;
YQLParser.RULE_alter_sequence_action = 389;
YQLParser.RULE_identifier = 390;
YQLParser.RULE_id = 391;
YQLParser.RULE_id_schema = 392;
YQLParser.RULE_id_expr = 393;
YQLParser.RULE_id_expr_in = 394;
YQLParser.RULE_id_window = 395;
YQLParser.RULE_id_table = 396;
YQLParser.RULE_id_without = 397;
YQLParser.RULE_id_hint = 398;
YQLParser.RULE_id_as_compat = 399;
YQLParser.RULE_an_id = 400;
YQLParser.RULE_an_id_or_type = 401;
YQLParser.RULE_an_id_schema = 402;
YQLParser.RULE_an_id_expr = 403;
YQLParser.RULE_an_id_expr_in = 404;
YQLParser.RULE_an_id_window = 405;
YQLParser.RULE_an_id_table = 406;
YQLParser.RULE_an_id_without = 407;
YQLParser.RULE_an_id_hint = 408;
YQLParser.RULE_an_id_pure = 409;
YQLParser.RULE_an_id_as_compat = 410;
YQLParser.RULE_view_name = 411;
YQLParser.RULE_opt_id_prefix = 412;
YQLParser.RULE_cluster_expr = 413;
YQLParser.RULE_id_or_type = 414;
YQLParser.RULE_opt_id_prefix_or_type = 415;
YQLParser.RULE_id_or_at = 416;
YQLParser.RULE_id_table_or_type = 417;
YQLParser.RULE_id_table_or_at = 418;
YQLParser.RULE_keyword = 419;
YQLParser.RULE_keyword_expr_uncompat = 420;
YQLParser.RULE_keyword_table_uncompat = 421;
YQLParser.RULE_keyword_select_uncompat = 422;
YQLParser.RULE_keyword_alter_uncompat = 423;
YQLParser.RULE_keyword_in_uncompat = 424;
YQLParser.RULE_keyword_window_uncompat = 425;
YQLParser.RULE_keyword_hint_uncompat = 426;
YQLParser.RULE_keyword_as_compat = 427;
YQLParser.RULE_keyword_compat = 428;
YQLParser.RULE_type_id = 429;
YQLParser.RULE_bool_value = 430;
YQLParser.RULE_real = 431;
YQLParser.RULE_integer = 432;

class Sql_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_query;
    }

	sql_stmt_list() {
	    return this.getTypedRuleContext(Sql_stmt_listContext,0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	DIGITS() {
	    return this.getToken(YQLParser.DIGITS, 0);
	};

	ansi_sql_stmt_list() {
	    return this.getTypedRuleContext(Ansi_sql_stmt_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_query(this);
		}
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	EOF() {
	    return this.getToken(YQLParser.EOF, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}


}



class Ansi_sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ansi_sql_stmt_list;
    }

	EOF() {
	    return this.getToken(YQLParser.EOF, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnsi_sql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnsi_sql_stmt_list(this);
		}
	}


}



class Lambda_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda_body;
    }

	RETURN() {
	    return this.getToken(YQLParser.RETURN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	lambda_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_stmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda_body(this);
		}
	}


}



class Lambda_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda_stmt;
    }

	named_nodes_stmt() {
	    return this.getTypedRuleContext(Named_nodes_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda_stmt(this);
		}
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt;
    }

	sql_stmt_core() {
	    return this.getTypedRuleContext(Sql_stmt_coreContext,0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt(this);
		}
	}


}



class Sql_stmt_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sql_stmt_core;
    }

	pragma_stmt() {
	    return this.getTypedRuleContext(Pragma_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	named_nodes_stmt() {
	    return this.getTypedRuleContext(Named_nodes_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	drop_table_stmt() {
	    return this.getTypedRuleContext(Drop_table_stmtContext,0);
	};

	use_stmt() {
	    return this.getTypedRuleContext(Use_stmtContext,0);
	};

	into_table_stmt() {
	    return this.getTypedRuleContext(Into_table_stmtContext,0);
	};

	commit_stmt() {
	    return this.getTypedRuleContext(Commit_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	rollback_stmt() {
	    return this.getTypedRuleContext(Rollback_stmtContext,0);
	};

	declare_stmt() {
	    return this.getTypedRuleContext(Declare_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	export_stmt() {
	    return this.getTypedRuleContext(Export_stmtContext,0);
	};

	alter_table_stmt() {
	    return this.getTypedRuleContext(Alter_table_stmtContext,0);
	};

	alter_external_table_stmt() {
	    return this.getTypedRuleContext(Alter_external_table_stmtContext,0);
	};

	do_stmt() {
	    return this.getTypedRuleContext(Do_stmtContext,0);
	};

	define_action_or_subquery_stmt() {
	    return this.getTypedRuleContext(Define_action_or_subquery_stmtContext,0);
	};

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	create_user_stmt() {
	    return this.getTypedRuleContext(Create_user_stmtContext,0);
	};

	alter_user_stmt() {
	    return this.getTypedRuleContext(Alter_user_stmtContext,0);
	};

	create_group_stmt() {
	    return this.getTypedRuleContext(Create_group_stmtContext,0);
	};

	alter_group_stmt() {
	    return this.getTypedRuleContext(Alter_group_stmtContext,0);
	};

	drop_role_stmt() {
	    return this.getTypedRuleContext(Drop_role_stmtContext,0);
	};

	create_object_stmt() {
	    return this.getTypedRuleContext(Create_object_stmtContext,0);
	};

	alter_object_stmt() {
	    return this.getTypedRuleContext(Alter_object_stmtContext,0);
	};

	drop_object_stmt() {
	    return this.getTypedRuleContext(Drop_object_stmtContext,0);
	};

	create_external_data_source_stmt() {
	    return this.getTypedRuleContext(Create_external_data_source_stmtContext,0);
	};

	alter_external_data_source_stmt() {
	    return this.getTypedRuleContext(Alter_external_data_source_stmtContext,0);
	};

	drop_external_data_source_stmt() {
	    return this.getTypedRuleContext(Drop_external_data_source_stmtContext,0);
	};

	create_replication_stmt() {
	    return this.getTypedRuleContext(Create_replication_stmtContext,0);
	};

	drop_replication_stmt() {
	    return this.getTypedRuleContext(Drop_replication_stmtContext,0);
	};

	create_topic_stmt() {
	    return this.getTypedRuleContext(Create_topic_stmtContext,0);
	};

	alter_topic_stmt() {
	    return this.getTypedRuleContext(Alter_topic_stmtContext,0);
	};

	drop_topic_stmt() {
	    return this.getTypedRuleContext(Drop_topic_stmtContext,0);
	};

	grant_permissions_stmt() {
	    return this.getTypedRuleContext(Grant_permissions_stmtContext,0);
	};

	revoke_permissions_stmt() {
	    return this.getTypedRuleContext(Revoke_permissions_stmtContext,0);
	};

	alter_table_store_stmt() {
	    return this.getTypedRuleContext(Alter_table_store_stmtContext,0);
	};

	upsert_object_stmt() {
	    return this.getTypedRuleContext(Upsert_object_stmtContext,0);
	};

	create_view_stmt() {
	    return this.getTypedRuleContext(Create_view_stmtContext,0);
	};

	drop_view_stmt() {
	    return this.getTypedRuleContext(Drop_view_stmtContext,0);
	};

	alter_replication_stmt() {
	    return this.getTypedRuleContext(Alter_replication_stmtContext,0);
	};

	create_resource_pool_stmt() {
	    return this.getTypedRuleContext(Create_resource_pool_stmtContext,0);
	};

	alter_resource_pool_stmt() {
	    return this.getTypedRuleContext(Alter_resource_pool_stmtContext,0);
	};

	drop_resource_pool_stmt() {
	    return this.getTypedRuleContext(Drop_resource_pool_stmtContext,0);
	};

	create_backup_collection_stmt() {
	    return this.getTypedRuleContext(Create_backup_collection_stmtContext,0);
	};

	alter_backup_collection_stmt() {
	    return this.getTypedRuleContext(Alter_backup_collection_stmtContext,0);
	};

	drop_backup_collection_stmt() {
	    return this.getTypedRuleContext(Drop_backup_collection_stmtContext,0);
	};

	analyze_stmt() {
	    return this.getTypedRuleContext(Analyze_stmtContext,0);
	};

	create_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Create_resource_pool_classifier_stmtContext,0);
	};

	alter_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Alter_resource_pool_classifier_stmtContext,0);
	};

	drop_resource_pool_classifier_stmt() {
	    return this.getTypedRuleContext(Drop_resource_pool_classifier_stmtContext,0);
	};

	backup_stmt() {
	    return this.getTypedRuleContext(Backup_stmtContext,0);
	};

	restore_stmt() {
	    return this.getTypedRuleContext(Restore_stmtContext,0);
	};

	alter_sequence_stmt() {
	    return this.getTypedRuleContext(Alter_sequence_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSql_stmt_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSql_stmt_core(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr;
    }

	or_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Or_subexprContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.OR);
	    } else {
	        return this.getToken(YQLParser.OR, i);
	    }
	};


	type_name_composite() {
	    return this.getTypedRuleContext(Type_name_compositeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Or_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_or_subexpr;
    }

	and_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_subexprContext);
	    } else {
	        return this.getTypedRuleContext(And_subexprContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.AND);
	    } else {
	        return this.getToken(YQLParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOr_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOr_subexpr(this);
		}
	}


}



class And_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_and_subexpr;
    }

	xor_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xor_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Xor_subexprContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.XOR);
	    } else {
	        return this.getToken(YQLParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnd_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnd_subexpr(this);
		}
	}


}



class Xor_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_xor_subexpr;
    }

	eq_subexpr() {
	    return this.getTypedRuleContext(Eq_subexprContext,0);
	};

	cond_expr() {
	    return this.getTypedRuleContext(Cond_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterXor_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitXor_subexpr(this);
		}
	}


}



class Distinct_from_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_distinct_from_op;
    }

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDistinct_from_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDistinct_from_op(this);
		}
	}


}



class Cond_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cond_expr;
    }

	match_op() {
	    return this.getTypedRuleContext(Match_opContext,0);
	};

	eq_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Eq_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Eq_subexprContext,i);
	    }
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	in_expr() {
	    return this.getTypedRuleContext(In_exprContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	ISNULL() {
	    return this.getToken(YQLParser.ISNULL, 0);
	};

	NOTNULL() {
	    return this.getToken(YQLParser.NOTNULL, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	SYMMETRIC() {
	    return this.getToken(YQLParser.SYMMETRIC, 0);
	};

	ASYMMETRIC() {
	    return this.getToken(YQLParser.ASYMMETRIC, 0);
	};

	EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EQUALS);
	    } else {
	        return this.getToken(YQLParser.EQUALS, i);
	    }
	};


	EQUALS2 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EQUALS2);
	    } else {
	        return this.getToken(YQLParser.EQUALS2, i);
	    }
	};


	NOT_EQUALS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.NOT_EQUALS);
	    } else {
	        return this.getToken(YQLParser.NOT_EQUALS, i);
	    }
	};


	NOT_EQUALS2 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.NOT_EQUALS2);
	    } else {
	        return this.getToken(YQLParser.NOT_EQUALS2, i);
	    }
	};


	distinct_from_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Distinct_from_opContext);
	    } else {
	        return this.getTypedRuleContext(Distinct_from_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCond_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCond_expr(this);
		}
	}


}



class Match_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_match_op;
    }

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMatch_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMatch_op(this);
		}
	}


}



class Eq_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_eq_subexpr;
    }

	neq_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Neq_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Neq_subexprContext,i);
	    }
	};

	LESS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LESS);
	    } else {
	        return this.getToken(YQLParser.LESS, i);
	    }
	};


	LESS_OR_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LESS_OR_EQ);
	    } else {
	        return this.getToken(YQLParser.LESS_OR_EQ, i);
	    }
	};


	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	GREATER_OR_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER_OR_EQ);
	    } else {
	        return this.getToken(YQLParser.GREATER_OR_EQ, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterEq_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitEq_subexpr(this);
		}
	}


}



class Shift_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_shift_right;
    }

	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterShift_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitShift_right(this);
		}
	}


}



class Rot_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rot_right;
    }

	GREATER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GREATER);
	    } else {
	        return this.getToken(YQLParser.GREATER, i);
	    }
	};


	PIPE() {
	    return this.getToken(YQLParser.PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRot_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRot_right(this);
		}
	}


}



class Double_questionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_double_question;
    }

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDouble_question(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDouble_question(this);
		}
	}


}



class Neq_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_neq_subexpr;
    }

	bit_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bit_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Bit_subexprContext,i);
	    }
	};

	double_question() {
	    return this.getTypedRuleContext(Double_questionContext,0);
	};

	neq_subexpr() {
	    return this.getTypedRuleContext(Neq_subexprContext,0);
	};

	SHIFT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SHIFT_LEFT);
	    } else {
	        return this.getToken(YQLParser.SHIFT_LEFT, i);
	    }
	};


	shift_right = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_rightContext);
	    } else {
	        return this.getTypedRuleContext(Shift_rightContext,i);
	    }
	};

	ROT_LEFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ROT_LEFT);
	    } else {
	        return this.getToken(YQLParser.ROT_LEFT, i);
	    }
	};


	rot_right = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rot_rightContext);
	    } else {
	        return this.getTypedRuleContext(Rot_rightContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.AMPERSAND);
	    } else {
	        return this.getToken(YQLParser.AMPERSAND, i);
	    }
	};


	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PIPE);
	    } else {
	        return this.getToken(YQLParser.PIPE, i);
	    }
	};


	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.CARET);
	    } else {
	        return this.getToken(YQLParser.CARET, i);
	    }
	};


	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNeq_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNeq_subexpr(this);
		}
	}


}



class Bit_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bit_subexpr;
    }

	add_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Add_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Add_subexprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PLUS);
	    } else {
	        return this.getToken(YQLParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.MINUS);
	    } else {
	        return this.getToken(YQLParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBit_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBit_subexpr(this);
		}
	}


}



class Add_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_add_subexpr;
    }

	mul_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mul_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Mul_subexprContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ASTERISK);
	    } else {
	        return this.getToken(YQLParser.ASTERISK, i);
	    }
	};


	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SLASH);
	    } else {
	        return this.getToken(YQLParser.SLASH, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PERCENT);
	    } else {
	        return this.getToken(YQLParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAdd_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAdd_subexpr(this);
		}
	}


}



class Mul_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_mul_subexpr;
    }

	con_subexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Con_subexprContext);
	    } else {
	        return this.getTypedRuleContext(Con_subexprContext,i);
	    }
	};

	DOUBLE_PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOUBLE_PIPE);
	    } else {
	        return this.getToken(YQLParser.DOUBLE_PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMul_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMul_subexpr(this);
		}
	}


}



class Con_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_con_subexpr;
    }

	unary_subexpr() {
	    return this.getTypedRuleContext(Unary_subexprContext,0);
	};

	unary_op() {
	    return this.getTypedRuleContext(Unary_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCon_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCon_subexpr(this);
		}
	}


}



class Unary_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_op;
    }

	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(YQLParser.MINUS, 0);
	};

	TILDA() {
	    return this.getToken(YQLParser.TILDA, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_op(this);
		}
	}


}



class Unary_subexpr_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_subexpr_suffix;
    }

	COLLATE() {
	    return this.getToken(YQLParser.COLLATE, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	key_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_exprContext);
	    } else {
	        return this.getTypedRuleContext(Key_exprContext,i);
	    }
	};

	invoke_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Invoke_exprContext);
	    } else {
	        return this.getTypedRuleContext(Invoke_exprContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOT);
	    } else {
	        return this.getToken(YQLParser.DOT, i);
	    }
	};


	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	DIGITS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DIGITS);
	    } else {
	        return this.getToken(YQLParser.DIGITS, i);
	    }
	};


	an_id_or_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_or_typeContext);
	    } else {
	        return this.getTypedRuleContext(An_id_or_typeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_subexpr_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_subexpr_suffix(this);
		}
	}


}



class Unary_casual_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_casual_subexpr;
    }

	unary_subexpr_suffix() {
	    return this.getTypedRuleContext(Unary_subexpr_suffixContext,0);
	};

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	atom_expr() {
	    return this.getTypedRuleContext(Atom_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_casual_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_casual_subexpr(this);
		}
	}


}



class In_unary_casual_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_unary_casual_subexpr;
    }

	unary_subexpr_suffix() {
	    return this.getTypedRuleContext(Unary_subexpr_suffixContext,0);
	};

	id_expr_in() {
	    return this.getTypedRuleContext(Id_expr_inContext,0);
	};

	in_atom_expr() {
	    return this.getTypedRuleContext(In_atom_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_unary_casual_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_unary_casual_subexpr(this);
		}
	}


}



class Unary_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_unary_subexpr;
    }

	unary_casual_subexpr() {
	    return this.getTypedRuleContext(Unary_casual_subexprContext,0);
	};

	json_api_expr() {
	    return this.getTypedRuleContext(Json_api_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUnary_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUnary_subexpr(this);
		}
	}


}



class In_unary_subexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_unary_subexpr;
    }

	in_unary_casual_subexpr() {
	    return this.getTypedRuleContext(In_unary_casual_subexprContext,0);
	};

	json_api_expr() {
	    return this.getTypedRuleContext(Json_api_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_unary_subexpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_unary_subexpr(this);
		}
	}


}



class List_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_list_literal;
    }

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterList_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitList_literal(this);
		}
	}


}



class Expr_dict_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_dict_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COLON);
	    } else {
	        return this.getToken(YQLParser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_dict_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_dict_list(this);
		}
	}


}



class Dict_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_dict_literal;
    }

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	expr_dict_list() {
	    return this.getTypedRuleContext(Expr_dict_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDict_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDict_literal(this);
		}
	}


}



class Expr_struct_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_struct_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COLON);
	    } else {
	        return this.getToken(YQLParser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_struct_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_struct_list(this);
		}
	}


}



class Struct_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_literal;
    }

	STRUCT_OPEN() {
	    return this.getToken(YQLParser.STRUCT_OPEN, 0);
	};

	STRUCT_CLOSE() {
	    return this.getToken(YQLParser.STRUCT_CLOSE, 0);
	};

	expr_struct_list() {
	    return this.getTypedRuleContext(Expr_struct_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_literal(this);
		}
	}


}



class Atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_atom_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	cast_expr() {
	    return this.getTypedRuleContext(Cast_exprContext,0);
	};

	exists_expr() {
	    return this.getTypedRuleContext(Exists_exprContext,0);
	};

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	value_constructor() {
	    return this.getTypedRuleContext(Value_constructorContext,0);
	};

	bitcast_expr() {
	    return this.getTypedRuleContext(Bitcast_exprContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	struct_literal() {
	    return this.getTypedRuleContext(Struct_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAtom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAtom_expr(this);
		}
	}


}



class In_atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_atom_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	cast_expr() {
	    return this.getTypedRuleContext(Cast_exprContext,0);
	};

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	value_constructor() {
	    return this.getTypedRuleContext(Value_constructorContext,0);
	};

	bitcast_expr() {
	    return this.getTypedRuleContext(Bitcast_exprContext,0);
	};

	list_literal() {
	    return this.getTypedRuleContext(List_literalContext,0);
	};

	dict_literal() {
	    return this.getTypedRuleContext(Dict_literalContext,0);
	};

	struct_literal() {
	    return this.getTypedRuleContext(Struct_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_atom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_atom_expr(this);
		}
	}


}



class Cast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cast_expr;
    }

	CAST() {
	    return this.getToken(YQLParser.CAST, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCast_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCast_expr(this);
		}
	}


}



class Bitcast_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bitcast_expr;
    }

	BITCAST() {
	    return this.getToken(YQLParser.BITCAST, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBitcast_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBitcast_expr(this);
		}
	}


}



class Exists_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_exists_expr;
    }

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExists_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExists_expr(this);
		}
	}


}



class Case_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_case_expr;
    }

	CASE() {
	    return this.getToken(YQLParser.CASE, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	when_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(When_exprContext);
	    } else {
	        return this.getTypedRuleContext(When_exprContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCase_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCase_expr(this);
		}
	}


}



class LambdaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_lambda;
    }

	smart_parenthesis() {
	    return this.getTypedRuleContext(Smart_parenthesisContext,0);
	};

	ARROW() {
	    return this.getToken(YQLParser.ARROW, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	lambda_body() {
	    return this.getTypedRuleContext(Lambda_bodyContext,0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLambda(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLambda(this);
		}
	}


}



class In_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_in_expr;
    }

	in_unary_subexpr() {
	    return this.getTypedRuleContext(In_unary_subexprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIn_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIn_expr(this);
		}
	}


}



class Json_api_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_api_expr;
    }

	json_value() {
	    return this.getTypedRuleContext(Json_valueContext,0);
	};

	json_exists() {
	    return this.getTypedRuleContext(Json_existsContext,0);
	};

	json_query() {
	    return this.getTypedRuleContext(Json_queryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_api_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_api_expr(this);
		}
	}


}



class Jsonpath_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_jsonpath_spec;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJsonpath_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJsonpath_spec(this);
		}
	}


}



class Json_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variable_name;
    }

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variable_name(this);
		}
	}


}



class Json_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variable;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	json_variable_name() {
	    return this.getTypedRuleContext(Json_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variable(this);
		}
	}


}



class Json_variablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_variables;
    }

	json_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_variableContext);
	    } else {
	        return this.getTypedRuleContext(Json_variableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_variables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_variables(this);
		}
	}


}



class Json_common_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_common_args;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	jsonpath_spec() {
	    return this.getTypedRuleContext(Jsonpath_specContext,0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	json_variables() {
	    return this.getTypedRuleContext(Json_variablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_common_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_common_args(this);
		}
	}


}



class Json_case_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_case_handler;
    }

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_case_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_case_handler(this);
		}
	}


}



class Json_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_value;
    }

	JSON_VALUE() {
	    return this.getToken(YQLParser.JSON_VALUE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	json_case_handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_case_handlerContext);
	    } else {
	        return this.getTypedRuleContext(Json_case_handlerContext,i);
	    }
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ON);
	    } else {
	        return this.getToken(YQLParser.ON, i);
	    }
	};


	EMPTY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.EMPTY);
	    } else {
	        return this.getToken(YQLParser.EMPTY, i);
	    }
	};


	ERROR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ERROR);
	    } else {
	        return this.getToken(YQLParser.ERROR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_value(this);
		}
	}


}



class Json_exists_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_exists_handler;
    }

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	ERROR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ERROR);
	    } else {
	        return this.getToken(YQLParser.ERROR, i);
	    }
	};


	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_exists_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_exists_handler(this);
		}
	}


}



class Json_existsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_exists;
    }

	JSON_EXISTS() {
	    return this.getToken(YQLParser.JSON_EXISTS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	json_exists_handler() {
	    return this.getTypedRuleContext(Json_exists_handlerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_exists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_exists(this);
		}
	}


}



class Json_query_wrapperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query_wrapper;
    }

	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query_wrapper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query_wrapper(this);
		}
	}


}



class Json_query_handlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query_handler;
    }

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query_handler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query_handler(this);
		}
	}


}



class Json_queryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_json_query;
    }

	JSON_QUERY() {
	    return this.getToken(YQLParser.JSON_QUERY, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	json_common_args() {
	    return this.getTypedRuleContext(Json_common_argsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	json_query_wrapper() {
	    return this.getTypedRuleContext(Json_query_wrapperContext,0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	json_query_handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Json_query_handlerContext);
	    } else {
	        return this.getTypedRuleContext(Json_query_handlerContext,i);
	    }
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ON);
	    } else {
	        return this.getToken(YQLParser.ON, i);
	    }
	};


	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJson_query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJson_query(this);
		}
	}


}



class Smart_parenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_smart_parenthesis;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSmart_parenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSmart_parenthesis(this);
		}
	}


}



class Expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_expr_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExpr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExpr_list(this);
		}
	}


}



class Pure_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_list(this);
		}
	}


}



class Pure_column_or_namedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_or_named;
    }

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_or_named(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_or_named(this);
		}
	}


}



class Pure_column_or_named_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pure_column_or_named_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	pure_column_or_named = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pure_column_or_namedContext);
	    } else {
	        return this.getTypedRuleContext(Pure_column_or_namedContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPure_column_or_named_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPure_column_or_named_list(this);
		}
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_name;
    }

	opt_id_prefix() {
	    return this.getTypedRuleContext(Opt_id_prefixContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_name(this);
		}
	}


}



class Without_column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_without_column_name;
    }

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	an_id_without() {
	    return this.getTypedRuleContext(An_id_withoutContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWithout_column_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWithout_column_name(this);
		}
	}


}



class Column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_list;
    }

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_list(this);
		}
	}


}



class Without_column_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_without_column_list;
    }

	without_column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Without_column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Without_column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWithout_column_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWithout_column_list(this);
		}
	}


}



class Named_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_expr(this);
		}
	}


}



class Named_expr_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_expr_list;
    }

	named_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_exprContext);
	    } else {
	        return this.getTypedRuleContext(Named_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_expr_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_expr_list(this);
		}
	}


}



class Invoke_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_invoke_expr;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	invoke_expr_tail() {
	    return this.getTypedRuleContext(Invoke_expr_tailContext,0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInvoke_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInvoke_expr(this);
		}
	}


}



class Invoke_expr_tailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_invoke_expr_tail;
    }

	null_treatment() {
	    return this.getTypedRuleContext(Null_treatmentContext,0);
	};

	filter_clause() {
	    return this.getTypedRuleContext(Filter_clauseContext,0);
	};

	OVER() {
	    return this.getToken(YQLParser.OVER, 0);
	};

	window_name_or_specification() {
	    return this.getTypedRuleContext(Window_name_or_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInvoke_expr_tail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInvoke_expr_tail(this);
		}
	}


}



class Using_call_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_using_call_expr;
    }

	invoke_expr() {
	    return this.getTypedRuleContext(Invoke_exprContext,0);
	};

	an_id_or_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_or_typeContext);
	    } else {
	        return this.getTypedRuleContext(An_id_or_typeContext,i);
	    }
	};

	NAMESPACE() {
	    return this.getToken(YQLParser.NAMESPACE, 0);
	};

	an_id_expr() {
	    return this.getTypedRuleContext(An_id_exprContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUsing_call_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUsing_call_expr(this);
		}
	}


}



class Key_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_key_expr;
    }

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKey_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKey_expr(this);
		}
	}


}



class When_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_when_expr;
    }

	WHEN() {
	    return this.getToken(YQLParser.WHEN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWhen_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWhen_expr(this);
		}
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_literal_value;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	real() {
	    return this.getTypedRuleContext(RealContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	BLOB() {
	    return this.getToken(YQLParser.BLOB, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(YQLParser.CURRENT_TIME, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(YQLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLiteral_value(this);
		}
	}


}



class Bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bind_parameter;
    }

	DOLLAR() {
	    return this.getToken(YQLParser.DOLLAR, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBind_parameter(this);
		}
	}


}



class Opt_bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_bind_parameter;
    }

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	QUESTION() {
	    return this.getToken(YQLParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_bind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_bind_parameter(this);
		}
	}


}



class Bind_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bind_parameter_list;
    }

	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBind_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBind_parameter_list(this);
		}
	}


}



class Named_bind_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_bind_parameter;
    }

	bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Bind_parameterContext,i);
	    }
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_bind_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_bind_parameter(this);
		}
	}


}



class Named_bind_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_bind_parameter_list;
    }

	named_bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Named_bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_bind_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_bind_parameter_list(this);
		}
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_signed_number;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	real() {
	    return this.getTypedRuleContext(RealContext,0);
	};

	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(YQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSigned_number(this);
		}
	}


}



class Type_name_simpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_simple;
    }

	an_id_pure() {
	    return this.getTypedRuleContext(An_id_pureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_simple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_simple(this);
		}
	}


}



class Integer_or_bindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_integer_or_bind;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInteger_or_bind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInteger_or_bind(this);
		}
	}


}



class Type_name_tagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tag;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tag(this);
		}
	}


}



class Struct_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_arg;
    }

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_arg(this);
		}
	}


}



class Struct_arg_positionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_struct_arg_positional;
    }

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterStruct_arg_positional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitStruct_arg_positional(this);
		}
	}


}



class Variant_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_variant_arg;
    }

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterVariant_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitVariant_arg(this);
		}
	}


}



class Callable_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_callable_arg;
    }

	variant_arg() {
	    return this.getTypedRuleContext(Variant_argContext,0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	AUTOMAP() {
	    return this.getToken(YQLParser.AUTOMAP, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCallable_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCallable_arg(this);
		}
	}


}



class Callable_arg_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_callable_arg_list;
    }

	callable_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Callable_argContext);
	    } else {
	        return this.getTypedRuleContext(Callable_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCallable_arg_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCallable_arg_list(this);
		}
	}


}



class Type_name_decimalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_decimal;
    }

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	integer_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Integer_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Integer_or_bindContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_decimal(this);
		}
	}


}



class Type_name_optionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_optional;
    }

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_optional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_optional(this);
		}
	}


}



class Type_name_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tuple;
    }

	TUPLE() {
	    return this.getToken(YQLParser.TUPLE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	NOT_EQUALS2() {
	    return this.getToken(YQLParser.NOT_EQUALS2, 0);
	};

	type_name_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_or_bindContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tuple(this);
		}
	}


}



class Type_name_structContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_struct;
    }

	STRUCT() {
	    return this.getToken(YQLParser.STRUCT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	NOT_EQUALS2() {
	    return this.getToken(YQLParser.NOT_EQUALS2, 0);
	};

	struct_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_argContext);
	    } else {
	        return this.getTypedRuleContext(Struct_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_struct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_struct(this);
		}
	}


}



class Type_name_variantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_variant;
    }

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	variant_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variant_argContext);
	    } else {
	        return this.getTypedRuleContext(Variant_argContext,i);
	    }
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_variant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_variant(this);
		}
	}


}



class Type_name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_list;
    }

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_list(this);
		}
	}


}



class Type_name_streamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_stream;
    }

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_stream(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_stream(this);
		}
	}


}



class Type_name_flowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_flow;
    }

	FLOW() {
	    return this.getToken(YQLParser.FLOW, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_flow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_flow(this);
		}
	}


}



class Type_name_dictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_dict;
    }

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_or_bindContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_or_bindContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_dict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_dict(this);
		}
	}


}



class Type_name_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_set;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_set(this);
		}
	}


}



class Type_name_enumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_enum;
    }

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_tag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_tagContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_tagContext,i);
	    }
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_enum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_enum(this);
		}
	}


}



class Type_name_resourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_resource;
    }

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_resource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_resource(this);
		}
	}


}



class Type_name_taggedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_tagged;
    }

	TAGGED() {
	    return this.getToken(YQLParser.TAGGED, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	type_name_tag() {
	    return this.getTypedRuleContext(Type_name_tagContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_tagged(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_tagged(this);
		}
	}


}



class Type_name_callableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_callable;
    }

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	LESS() {
	    return this.getToken(YQLParser.LESS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	ARROW() {
	    return this.getToken(YQLParser.ARROW, 0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	GREATER() {
	    return this.getToken(YQLParser.GREATER, 0);
	};

	callable_arg_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Callable_arg_listContext);
	    } else {
	        return this.getTypedRuleContext(Callable_arg_listContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	LBRACE_SQUARE() {
	    return this.getToken(YQLParser.LBRACE_SQUARE, 0);
	};

	RBRACE_SQUARE() {
	    return this.getToken(YQLParser.RBRACE_SQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_callable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_callable(this);
		}
	}


}



class Type_name_compositeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_composite;
    }

	type_name_optional() {
	    return this.getTypedRuleContext(Type_name_optionalContext,0);
	};

	type_name_tuple() {
	    return this.getTypedRuleContext(Type_name_tupleContext,0);
	};

	type_name_struct() {
	    return this.getTypedRuleContext(Type_name_structContext,0);
	};

	type_name_variant() {
	    return this.getTypedRuleContext(Type_name_variantContext,0);
	};

	type_name_list() {
	    return this.getTypedRuleContext(Type_name_listContext,0);
	};

	type_name_stream() {
	    return this.getTypedRuleContext(Type_name_streamContext,0);
	};

	type_name_flow() {
	    return this.getTypedRuleContext(Type_name_flowContext,0);
	};

	type_name_dict() {
	    return this.getTypedRuleContext(Type_name_dictContext,0);
	};

	type_name_set() {
	    return this.getTypedRuleContext(Type_name_setContext,0);
	};

	type_name_enum() {
	    return this.getTypedRuleContext(Type_name_enumContext,0);
	};

	type_name_resource() {
	    return this.getTypedRuleContext(Type_name_resourceContext,0);
	};

	type_name_tagged() {
	    return this.getTypedRuleContext(Type_name_taggedContext,0);
	};

	type_name_callable() {
	    return this.getTypedRuleContext(Type_name_callableContext,0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_composite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_composite(this);
		}
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name;
    }

	type_name_composite() {
	    return this.getTypedRuleContext(Type_name_compositeContext,0);
	};

	type_name_decimal() {
	    return this.getTypedRuleContext(Type_name_decimalContext,0);
	};

	type_name_simple() {
	    return this.getTypedRuleContext(Type_name_simpleContext,0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name(this);
		}
	}


}



class Type_name_or_bindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_name_or_bind;
    }

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_name_or_bind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_name_or_bind(this);
		}
	}


}



class Value_constructor_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_value_constructor_literal;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValue_constructor_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValue_constructor_literal(this);
		}
	}


}



class Value_constructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_value_constructor;
    }

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValue_constructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValue_constructor(this);
		}
	}


}



class Declare_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_declare_stmt;
    }

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDeclare_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDeclare_stmt(this);
		}
	}


}



class Module_pathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_module_path;
    }

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DOT);
	    } else {
	        return this.getToken(YQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterModule_path(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitModule_path(this);
		}
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_import_stmt;
    }

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	module_path() {
	    return this.getTypedRuleContext(Module_pathContext,0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	named_bind_parameter_list() {
	    return this.getTypedRuleContext(Named_bind_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitImport_stmt(this);
		}
	}


}



class Export_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_export_stmt;
    }

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	bind_parameter_list() {
	    return this.getTypedRuleContext(Bind_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExport_stmt(this);
		}
	}


}



class Call_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_call_action;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCall_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCall_action(this);
		}
	}


}



class Inline_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_inline_action;
    }

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	define_action_or_subquery_body() {
	    return this.getTypedRuleContext(Define_action_or_subquery_bodyContext,0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInline_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInline_action(this);
		}
	}


}



class Do_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_do_stmt;
    }

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	call_action() {
	    return this.getTypedRuleContext(Call_actionContext,0);
	};

	inline_action() {
	    return this.getTypedRuleContext(Inline_actionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDo_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDo_stmt(this);
		}
	}


}



class Pragma_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pragma_stmt;
    }

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	opt_id_prefix_or_type() {
	    return this.getTypedRuleContext(Opt_id_prefix_or_typeContext,0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	pragma_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pragma_valueContext);
	    } else {
	        return this.getTypedRuleContext(Pragma_valueContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPragma_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPragma_stmt(this);
		}
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPragma_value(this);
		}
	}


}



class Sort_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sort_specification;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSort_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSort_specification(this);
		}
	}


}



class Sort_specification_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sort_specification_list;
    }

	sort_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sort_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Sort_specificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSort_specification_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSort_specification_list(this);
		}
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_stmt;
    }

	select_kind_parenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_kind_parenthesisContext);
	    } else {
	        return this.getTypedRuleContext(Select_kind_parenthesisContext,i);
	    }
	};

	select_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_opContext);
	    } else {
	        return this.getTypedRuleContext(Select_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_stmt(this);
		}
	}


}



class Select_unparenthesized_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_unparenthesized_stmt;
    }

	select_kind_partial() {
	    return this.getTypedRuleContext(Select_kind_partialContext,0);
	};

	select_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_opContext);
	    } else {
	        return this.getTypedRuleContext(Select_opContext,i);
	    }
	};

	select_kind_parenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_kind_parenthesisContext);
	    } else {
	        return this.getTypedRuleContext(Select_kind_parenthesisContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_unparenthesized_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_unparenthesized_stmt(this);
		}
	}


}



class Select_kind_parenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind_parenthesis;
    }

	select_kind_partial() {
	    return this.getTypedRuleContext(Select_kind_partialContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind_parenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind_parenthesis(this);
		}
	}


}



class Select_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_op;
    }

	UNION() {
	    return this.getToken(YQLParser.UNION, 0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	INTERSECT() {
	    return this.getToken(YQLParser.INTERSECT, 0);
	};

	EXCEPT() {
	    return this.getToken(YQLParser.EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_op(this);
		}
	}


}



class Select_kind_partialContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind_partial;
    }

	select_kind() {
	    return this.getTypedRuleContext(Select_kindContext,0);
	};

	LIMIT() {
	    return this.getToken(YQLParser.LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind_partial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind_partial(this);
		}
	}


}



class Select_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_kind;
    }

	process_core() {
	    return this.getTypedRuleContext(Process_coreContext,0);
	};

	reduce_core() {
	    return this.getTypedRuleContext(Reduce_coreContext,0);
	};

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	RESULT() {
	    return this.getToken(YQLParser.RESULT, 0);
	};

	pure_column_or_named() {
	    return this.getTypedRuleContext(Pure_column_or_namedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_kind(this);
		}
	}


}



class Process_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_process_core;
    }

	PROCESS() {
	    return this.getToken(YQLParser.PROCESS, 0);
	};

	named_single_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_single_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Named_single_sourceContext,i);
	    }
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	using_call_expr() {
	    return this.getTypedRuleContext(Using_call_exprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	external_call_settings() {
	    return this.getTypedRuleContext(External_call_settingsContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterProcess_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitProcess_core(this);
		}
	}


}



class External_call_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_external_call_param;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExternal_call_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExternal_call_param(this);
		}
	}


}



class External_call_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_external_call_settings;
    }

	external_call_param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(External_call_paramContext);
	    } else {
	        return this.getTypedRuleContext(External_call_paramContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExternal_call_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExternal_call_settings(this);
		}
	}


}



class Reduce_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_reduce_core;
    }

	REDUCE() {
	    return this.getToken(YQLParser.REDUCE, 0);
	};

	named_single_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_single_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Named_single_sourceContext,i);
	    }
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	using_call_expr() {
	    return this.getTypedRuleContext(Using_call_exprContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	PRESORT() {
	    return this.getToken(YQLParser.PRESORT, 0);
	};

	sort_specification_list() {
	    return this.getTypedRuleContext(Sort_specification_listContext,0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReduce_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReduce_core(this);
		}
	}


}



class Opt_set_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_set_quantifier;
    }

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_set_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_set_quantifier(this);
		}
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_select_core;
    }

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.FROM);
	    } else {
	        return this.getToken(YQLParser.FROM, i);
	    }
	};


	join_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Join_sourceContext,i);
	    }
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	without_column_list() {
	    return this.getTypedRuleContext(Without_column_listContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	group_by_clause() {
	    return this.getTypedRuleContext(Group_by_clauseContext,0);
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	ext_order_by_clause() {
	    return this.getTypedRuleContext(Ext_order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSelect_core(this);
		}
	}


}



class Row_pattern_recognition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_recognition_clause;
    }

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern_common_syntax() {
	    return this.getTypedRuleContext(Row_pattern_common_syntaxContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	window_partition_clause() {
	    return this.getTypedRuleContext(Window_partition_clauseContext,0);
	};

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	row_pattern_measures() {
	    return this.getTypedRuleContext(Row_pattern_measuresContext,0);
	};

	row_pattern_rows_per_match() {
	    return this.getTypedRuleContext(Row_pattern_rows_per_matchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_recognition_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_recognition_clause(this);
		}
	}


}



class Row_pattern_rows_per_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_rows_per_match;
    }

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	row_pattern_empty_match_handling() {
	    return this.getTypedRuleContext(Row_pattern_empty_match_handlingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_rows_per_match(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_rows_per_match(this);
		}
	}


}



class Row_pattern_empty_match_handlingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_empty_match_handling;
    }

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_empty_match_handling(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_empty_match_handling(this);
		}
	}


}



class Row_pattern_measuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measures;
    }

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	row_pattern_measure_list() {
	    return this.getTypedRuleContext(Row_pattern_measure_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measures(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measures(this);
		}
	}


}



class Row_pattern_measure_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measure_list;
    }

	row_pattern_measure_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_measure_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_measure_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measure_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measure_list(this);
		}
	}


}



class Row_pattern_measure_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_measure_definition;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_measure_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_measure_definition(this);
		}
	}


}



class Row_pattern_common_syntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_common_syntax;
    }

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern() {
	    return this.getTypedRuleContext(Row_patternContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	DEFINE() {
	    return this.getToken(YQLParser.DEFINE, 0);
	};

	row_pattern_definition_list() {
	    return this.getTypedRuleContext(Row_pattern_definition_listContext,0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	row_pattern_skip_to() {
	    return this.getTypedRuleContext(Row_pattern_skip_toContext,0);
	};

	row_pattern_initial_or_seek() {
	    return this.getTypedRuleContext(Row_pattern_initial_or_seekContext,0);
	};

	row_pattern_subset_clause() {
	    return this.getTypedRuleContext(Row_pattern_subset_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_common_syntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_common_syntax(this);
		}
	}


}



class Row_pattern_skip_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_skip_to;
    }

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	row_pattern_skip_to_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_skip_to_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_skip_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_skip_to(this);
		}
	}


}



class Row_pattern_skip_to_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_skip_to_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_skip_to_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_skip_to_variable_name(this);
		}
	}


}



class Row_pattern_initial_or_seekContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_initial_or_seek;
    }

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_initial_or_seek(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_initial_or_seek(this);
		}
	}


}



class Row_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern;
    }

	row_pattern_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_termContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_termContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.PIPE);
	    } else {
	        return this.getToken(YQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern(this);
		}
	}


}



class Row_pattern_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_term;
    }

	row_pattern_factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_factorContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_factorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_term(this);
		}
	}


}



class Row_pattern_factorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_factor;
    }

	row_pattern_primary() {
	    return this.getTypedRuleContext(Row_pattern_primaryContext,0);
	};

	row_pattern_quantifier() {
	    return this.getTypedRuleContext(Row_pattern_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_factor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_factor(this);
		}
	}


}



class Row_pattern_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_quantifier;
    }

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	QUESTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.QUESTION);
	    } else {
	        return this.getToken(YQLParser.QUESTION, i);
	    }
	};


	PLUS() {
	    return this.getToken(YQLParser.PLUS, 0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	integer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerContext);
	    } else {
	        return this.getTypedRuleContext(IntegerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_quantifier(this);
		}
	}


}



class Row_pattern_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_primary;
    }

	row_pattern_primary_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_primary_variable_nameContext,0);
	};

	DOLLAR() {
	    return this.getToken(YQLParser.DOLLAR, 0);
	};

	CARET() {
	    return this.getToken(YQLParser.CARET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	row_pattern() {
	    return this.getTypedRuleContext(Row_patternContext,0);
	};

	LBRACE_CURLY() {
	    return this.getToken(YQLParser.LBRACE_CURLY, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.MINUS);
	    } else {
	        return this.getToken(YQLParser.MINUS, i);
	    }
	};


	RBRACE_CURLY() {
	    return this.getToken(YQLParser.RBRACE_CURLY, 0);
	};

	row_pattern_permute() {
	    return this.getTypedRuleContext(Row_pattern_permuteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_primary(this);
		}
	}


}



class Row_pattern_primary_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_primary_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_primary_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_primary_variable_name(this);
		}
	}


}



class Row_pattern_permuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_permute;
    }

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_patternContext);
	    } else {
	        return this.getTypedRuleContext(Row_patternContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_permute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_permute(this);
		}
	}


}



class Row_pattern_subset_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_clause;
    }

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	row_pattern_subset_list() {
	    return this.getTypedRuleContext(Row_pattern_subset_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_clause(this);
		}
	}


}



class Row_pattern_subset_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_list;
    }

	row_pattern_subset_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_subset_itemContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_subset_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_list(this);
		}
	}


}



class Row_pattern_subset_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_item;
    }

	row_pattern_subset_item_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_subset_item_variable_nameContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	row_pattern_subset_rhs() {
	    return this.getTypedRuleContext(Row_pattern_subset_rhsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_item(this);
		}
	}


}



class Row_pattern_subset_item_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_item_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_item_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_item_variable_name(this);
		}
	}


}



class Row_pattern_subset_rhsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_rhs;
    }

	row_pattern_subset_rhs_variable_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_subset_rhs_variable_nameContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_subset_rhs_variable_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_rhs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_rhs(this);
		}
	}


}



class Row_pattern_subset_rhs_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_subset_rhs_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_subset_rhs_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_subset_rhs_variable_name(this);
		}
	}


}



class Row_pattern_definition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_list;
    }

	row_pattern_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Row_pattern_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Row_pattern_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_list(this);
		}
	}


}



class Row_pattern_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition;
    }

	row_pattern_definition_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_definition_variable_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	row_pattern_definition_search_condition() {
	    return this.getTypedRuleContext(Row_pattern_definition_search_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition(this);
		}
	}


}



class Row_pattern_definition_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_variable_name;
    }

	row_pattern_variable_name() {
	    return this.getTypedRuleContext(Row_pattern_variable_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_variable_name(this);
		}
	}


}



class Row_pattern_definition_search_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_definition_search_condition;
    }

	search_condition() {
	    return this.getTypedRuleContext(Search_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_definition_search_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_definition_search_condition(this);
		}
	}


}



class Search_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_search_condition;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSearch_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSearch_condition(this);
		}
	}


}



class Row_pattern_variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_row_pattern_variable_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRow_pattern_variable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRow_pattern_variable_name(this);
		}
	}


}



class Order_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_order_by_clause;
    }

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	sort_specification_list() {
	    return this.getTypedRuleContext(Sort_specification_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrder_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrder_by_clause(this);
		}
	}


}



class Ext_order_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ext_order_by_clause;
    }

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExt_order_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExt_order_by_clause(this);
		}
	}


}



class Group_by_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_group_by_clause;
    }

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	opt_set_quantifier() {
	    return this.getTypedRuleContext(Opt_set_quantifierContext,0);
	};

	grouping_element_list() {
	    return this.getTypedRuleContext(Grouping_element_listContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGroup_by_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGroup_by_clause(this);
		}
	}


}



class Grouping_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_element_list;
    }

	grouping_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Grouping_elementContext);
	    } else {
	        return this.getTypedRuleContext(Grouping_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_element_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_element_list(this);
		}
	}


}



class Grouping_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_element;
    }

	ordinary_grouping_set() {
	    return this.getTypedRuleContext(Ordinary_grouping_setContext,0);
	};

	rollup_list() {
	    return this.getTypedRuleContext(Rollup_listContext,0);
	};

	cube_list() {
	    return this.getTypedRuleContext(Cube_listContext,0);
	};

	grouping_sets_specification() {
	    return this.getTypedRuleContext(Grouping_sets_specificationContext,0);
	};

	hopping_window_specification() {
	    return this.getTypedRuleContext(Hopping_window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_element(this);
		}
	}


}



class Ordinary_grouping_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ordinary_grouping_set;
    }

	named_expr() {
	    return this.getTypedRuleContext(Named_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrdinary_grouping_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrdinary_grouping_set(this);
		}
	}


}



class Ordinary_grouping_set_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ordinary_grouping_set_list;
    }

	ordinary_grouping_set = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordinary_grouping_setContext);
	    } else {
	        return this.getTypedRuleContext(Ordinary_grouping_setContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOrdinary_grouping_set_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOrdinary_grouping_set_list(this);
		}
	}


}



class Rollup_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rollup_list;
    }

	ROLLUP() {
	    return this.getToken(YQLParser.ROLLUP, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	ordinary_grouping_set_list() {
	    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRollup_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRollup_list(this);
		}
	}


}



class Cube_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cube_list;
    }

	CUBE() {
	    return this.getToken(YQLParser.CUBE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	ordinary_grouping_set_list() {
	    return this.getTypedRuleContext(Ordinary_grouping_set_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCube_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCube_list(this);
		}
	}


}



class Grouping_sets_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grouping_sets_specification;
    }

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	grouping_element_list() {
	    return this.getTypedRuleContext(Grouping_element_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrouping_sets_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrouping_sets_specification(this);
		}
	}


}



class Hopping_window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_hopping_window_specification;
    }

	HOP() {
	    return this.getToken(YQLParser.HOP, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterHopping_window_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitHopping_window_specification(this);
		}
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_result_column;
    }

	opt_id_prefix() {
	    return this.getTypedRuleContext(Opt_id_prefixContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	an_id_as_compat() {
	    return this.getTypedRuleContext(An_id_as_compatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitResult_column(this);
		}
	}


}



class Join_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_source;
    }

	flatten_source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Flatten_sourceContext);
	    } else {
	        return this.getTypedRuleContext(Flatten_sourceContext,i);
	    }
	};

	ANY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.ANY);
	    } else {
	        return this.getToken(YQLParser.ANY, i);
	    }
	};


	join_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_opContext);
	    } else {
	        return this.getTypedRuleContext(Join_opContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_source(this);
		}
	}


}



class Named_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_column(this);
		}
	}


}



class Flatten_by_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_flatten_by_arg;
    }

	named_column() {
	    return this.getTypedRuleContext(Named_columnContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFlatten_by_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFlatten_by_arg(this);
		}
	}


}



class Flatten_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_flatten_source;
    }

	named_single_source() {
	    return this.getTypedRuleContext(Named_single_sourceContext,0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	flatten_by_arg() {
	    return this.getTypedRuleContext(Flatten_by_argContext,0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFlatten_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFlatten_source(this);
		}
	}


}



class Named_single_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_single_source;
    }

	single_source() {
	    return this.getTypedRuleContext(Single_sourceContext,0);
	};

	row_pattern_recognition_clause() {
	    return this.getTypedRuleContext(Row_pattern_recognition_clauseContext,0);
	};

	sample_clause() {
	    return this.getTypedRuleContext(Sample_clauseContext,0);
	};

	tablesample_clause() {
	    return this.getTypedRuleContext(Tablesample_clauseContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	an_id_as_compat() {
	    return this.getTypedRuleContext(An_id_as_compatContext,0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_single_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_single_source(this);
		}
	}


}



class Single_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_single_source;
    }

	table_ref() {
	    return this.getTypedRuleContext(Table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSingle_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSingle_source(this);
		}
	}


}



class Sample_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sample_clause;
    }

	SAMPLE() {
	    return this.getToken(YQLParser.SAMPLE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSample_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSample_clause(this);
		}
	}


}



class Tablesample_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_tablesample_clause;
    }

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	sampling_mode() {
	    return this.getTypedRuleContext(Sampling_modeContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	repeatable_clause() {
	    return this.getTypedRuleContext(Repeatable_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTablesample_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTablesample_clause(this);
		}
	}


}



class Sampling_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_sampling_mode;
    }

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSampling_mode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSampling_mode(this);
		}
	}


}



class Repeatable_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_repeatable_clause;
    }

	REPEATABLE() {
	    return this.getToken(YQLParser.REPEATABLE, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRepeatable_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRepeatable_clause(this);
		}
	}


}



class Join_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_op;
    }

	COMMA() {
	    return this.getToken(YQLParser.COMMA, 0);
	};

	JOIN() {
	    return this.getToken(YQLParser.JOIN, 0);
	};

	INNER() {
	    return this.getToken(YQLParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(YQLParser.CROSS, 0);
	};

	NATURAL() {
	    return this.getToken(YQLParser.NATURAL, 0);
	};

	LEFT() {
	    return this.getToken(YQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(YQLParser.RIGHT, 0);
	};

	EXCLUSION() {
	    return this.getToken(YQLParser.EXCLUSION, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	OUTER() {
	    return this.getToken(YQLParser.OUTER, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	SEMI() {
	    return this.getToken(YQLParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_op(this);
		}
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_join_constraint;
    }

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	pure_column_or_named_list() {
	    return this.getTypedRuleContext(Pure_column_or_named_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitJoin_constraint(this);
		}
	}


}



class Returning_columns_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_returning_columns_list;
    }

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReturning_columns_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReturning_columns_list(this);
		}
	}


}



class Into_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_table_stmt;
    }

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	into_simple_table_ref() {
	    return this.getTypedRuleContext(Into_simple_table_refContext,0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_table_stmt(this);
		}
	}


}



class Into_values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_values_source;
    }

	values_source() {
	    return this.getTypedRuleContext(Values_sourceContext,0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_values_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_values_source(this);
		}
	}


}



class Values_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_stmt;
    }

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	values_source_row_list() {
	    return this.getTypedRuleContext(Values_source_row_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_stmt(this);
		}
	}


}



class Values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source;
    }

	values_stmt() {
	    return this.getTypedRuleContext(Values_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source(this);
		}
	}


}



class Values_source_row_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source_row_list;
    }

	values_source_row = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Values_source_rowContext);
	    } else {
	        return this.getTypedRuleContext(Values_source_rowContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source_row_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source_row_list(this);
		}
	}


}



class Values_source_rowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_values_source_row;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterValues_source_row(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitValues_source_row(this);
		}
	}


}



class Simple_values_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_values_source;
    }

	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_values_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_values_source(this);
		}
	}


}



class Create_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_external_data_source_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_external_data_source_stmt(this);
		}
	}


}



class Alter_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_data_source_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_external_data_source_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_external_data_source_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_external_data_source_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_data_source_stmt(this);
		}
	}


}



class Alter_external_data_source_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_data_source_action;
    }

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_data_source_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_data_source_action(this);
		}
	}


}



class Drop_external_data_source_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_external_data_source_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_external_data_source_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_external_data_source_stmt(this);
		}
	}


}



class Create_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_view_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_view_stmt(this);
		}
	}


}



class Drop_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_view_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_view_stmt(this);
		}
	}


}



class Upsert_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_upsert_object_stmt;
    }

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUpsert_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUpsert_object_stmt(this);
		}
	}


}



class Create_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_object_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_object_features() {
	    return this.getTypedRuleContext(Create_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_object_stmt(this);
		}
	}


}



class Create_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_object_features;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_object_features(this);
		}
	}


}



class Alter_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_object_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	alter_object_features() {
	    return this.getTypedRuleContext(Alter_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_object_stmt(this);
		}
	}


}



class Alter_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_object_features;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_object_features(this);
		}
	}


}



class Drop_object_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_object_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	object_type_ref() {
	    return this.getTypedRuleContext(Object_type_refContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	drop_object_features() {
	    return this.getTypedRuleContext(Drop_object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_object_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_object_stmt(this);
		}
	}


}



class Drop_object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_object_features;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	object_features() {
	    return this.getTypedRuleContext(Object_featuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_object_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_object_features(this);
		}
	}


}



class Object_feature_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_value;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_value(this);
		}
	}


}



class Object_feature_kvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_kv;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	object_feature_value() {
	    return this.getTypedRuleContext(Object_feature_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_kv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_kv(this);
		}
	}


}



class Object_feature_flagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature_flag;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature_flag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature_flag(this);
		}
	}


}



class Object_featureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_feature;
    }

	object_feature_kv() {
	    return this.getTypedRuleContext(Object_feature_kvContext,0);
	};

	object_feature_flag() {
	    return this.getTypedRuleContext(Object_feature_flagContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_feature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_feature(this);
		}
	}


}



class Object_featuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_features;
    }

	object_feature = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_featureContext);
	    } else {
	        return this.getTypedRuleContext(Object_featureContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_features(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_features(this);
		}
	}


}



class Object_type_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_type_ref;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_type_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_type_ref(this);
		}
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_table_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	create_table_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_table_entryContext);
	    } else {
	        return this.getTypedRuleContext(Create_table_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	table_inherits() {
	    return this.getTypedRuleContext(Table_inheritsContext,0);
	};

	table_partition_by() {
	    return this.getTypedRuleContext(Table_partition_byContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	table_tablestore() {
	    return this.getTypedRuleContext(Table_tablestoreContext,0);
	};

	table_as_source() {
	    return this.getTypedRuleContext(Table_as_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}


}



class Create_table_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_table_entry;
    }

	column_schema() {
	    return this.getTypedRuleContext(Column_schemaContext,0);
	};

	table_constraint() {
	    return this.getTypedRuleContext(Table_constraintContext,0);
	};

	table_index() {
	    return this.getTypedRuleContext(Table_indexContext,0);
	};

	family_entry() {
	    return this.getTypedRuleContext(Family_entryContext,0);
	};

	changefeed() {
	    return this.getTypedRuleContext(ChangefeedContext,0);
	};

	an_id_schema() {
	    return this.getTypedRuleContext(An_id_schemaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_table_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_table_entry(this);
		}
	}


}



class Create_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	backup_collection_settings() {
	    return this.getTypedRuleContext(Backup_collection_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	create_backup_collection_entries() {
	    return this.getTypedRuleContext(Create_backup_collection_entriesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_stmt(this);
		}
	}


}



class Alter_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	alter_backup_collection_actions() {
	    return this.getTypedRuleContext(Alter_backup_collection_actionsContext,0);
	};

	alter_backup_collection_entries() {
	    return this.getTypedRuleContext(Alter_backup_collection_entriesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_stmt(this);
		}
	}


}



class Drop_backup_collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_backup_collection_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	backup_collection() {
	    return this.getTypedRuleContext(Backup_collectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_backup_collection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_backup_collection_stmt(this);
		}
	}


}



class Create_backup_collection_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_entries;
    }

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	create_backup_collection_entries_many() {
	    return this.getTypedRuleContext(Create_backup_collection_entries_manyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_entries(this);
		}
	}


}



class Create_backup_collection_entries_manyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_backup_collection_entries_many;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	table_list() {
	    return this.getTypedRuleContext(Table_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_backup_collection_entries_many(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_backup_collection_entries_many(this);
		}
	}


}



class Table_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_list;
    }

	TABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.TABLE);
	    } else {
	        return this.getToken(YQLParser.TABLE, i);
	    }
	};


	an_id_table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_tableContext);
	    } else {
	        return this.getTypedRuleContext(An_id_tableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_list(this);
		}
	}


}



class Alter_backup_collection_actionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_actions;
    }

	alter_backup_collection_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_backup_collection_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_backup_collection_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_actions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_actions(this);
		}
	}


}



class Alter_backup_collection_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_action(this);
		}
	}


}



class Alter_backup_collection_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_entries;
    }

	alter_backup_collection_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_backup_collection_entryContext);
	    } else {
	        return this.getTypedRuleContext(Alter_backup_collection_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_entries(this);
		}
	}


}



class Alter_backup_collection_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_backup_collection_entry;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_backup_collection_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_backup_collection_entry(this);
		}
	}


}



class Backup_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection;
    }

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection(this);
		}
	}


}



class Backup_collection_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection_settings;
    }

	backup_collection_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Backup_collection_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Backup_collection_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection_settings(this);
		}
	}


}



class Backup_collection_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_collection_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_collection_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_collection_settings_entry(this);
		}
	}


}



class Backup_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_backup_stmt;
    }

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBackup_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBackup_stmt(this);
		}
	}


}



class Restore_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_restore_stmt;
    }

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRestore_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRestore_stmt(this);
		}
	}


}



class Table_inheritsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_inherits;
    }

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	simple_table_ref_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_table_ref_coreContext);
	    } else {
	        return this.getTypedRuleContext(Simple_table_ref_coreContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_inherits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_inherits(this);
		}
	}


}



class Table_partition_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_partition_by;
    }

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_partition_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_partition_by(this);
		}
	}


}



class With_table_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_table_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	table_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Table_settings_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_table_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_table_settings(this);
		}
	}


}



class Table_tablestoreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_tablestore;
    }

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	simple_table_ref_core() {
	    return this.getTypedRuleContext(Simple_table_ref_coreContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_tablestore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_tablestore(this);
		}
	}


}



class Table_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_settings_entry(this);
		}
	}


}



class Table_as_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_as_source;
    }

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	values_source() {
	    return this.getTypedRuleContext(Values_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_as_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_as_source(this);
		}
	}


}



class Alter_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	alter_table_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_stmt(this);
		}
	}


}



class Alter_table_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	alter_table_alter_column() {
	    return this.getTypedRuleContext(Alter_table_alter_columnContext,0);
	};

	alter_table_add_column_family() {
	    return this.getTypedRuleContext(Alter_table_add_column_familyContext,0);
	};

	alter_table_alter_column_family() {
	    return this.getTypedRuleContext(Alter_table_alter_column_familyContext,0);
	};

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	alter_table_add_index() {
	    return this.getTypedRuleContext(Alter_table_add_indexContext,0);
	};

	alter_table_drop_index() {
	    return this.getTypedRuleContext(Alter_table_drop_indexContext,0);
	};

	alter_table_rename_to() {
	    return this.getTypedRuleContext(Alter_table_rename_toContext,0);
	};

	alter_table_add_changefeed() {
	    return this.getTypedRuleContext(Alter_table_add_changefeedContext,0);
	};

	alter_table_alter_changefeed() {
	    return this.getTypedRuleContext(Alter_table_alter_changefeedContext,0);
	};

	alter_table_drop_changefeed() {
	    return this.getTypedRuleContext(Alter_table_drop_changefeedContext,0);
	};

	alter_table_rename_index_to() {
	    return this.getTypedRuleContext(Alter_table_rename_index_toContext,0);
	};

	alter_table_alter_index() {
	    return this.getTypedRuleContext(Alter_table_alter_indexContext,0);
	};

	alter_table_alter_column_drop_not_null() {
	    return this.getTypedRuleContext(Alter_table_alter_column_drop_not_nullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_action(this);
		}
	}


}



class Alter_external_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_table_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	alter_external_table_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_external_table_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_external_table_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_table_stmt(this);
		}
	}


}



class Alter_external_table_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_external_table_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_external_table_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_external_table_action(this);
		}
	}


}



class Alter_table_store_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_store_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_table_store_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_store_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_store_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_store_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_store_stmt(this);
		}
	}


}



class Alter_table_store_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_store_action;
    }

	alter_table_add_column() {
	    return this.getTypedRuleContext(Alter_table_add_columnContext,0);
	};

	alter_table_drop_column() {
	    return this.getTypedRuleContext(Alter_table_drop_columnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_store_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_store_action(this);
		}
	}


}



class Alter_table_add_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_column;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	column_schema() {
	    return this.getTypedRuleContext(Column_schemaContext,0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_column(this);
		}
	}


}



class Alter_table_drop_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_column;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_column(this);
		}
	}


}



class Alter_table_alter_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	family_relation() {
	    return this.getTypedRuleContext(Family_relationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column(this);
		}
	}


}



class Alter_table_alter_column_drop_not_nullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column_drop_not_null;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column_drop_not_null(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column_drop_not_null(this);
		}
	}


}



class Alter_table_add_column_familyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_column_family;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	family_entry() {
	    return this.getTypedRuleContext(Family_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_column_family(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_column_family(this);
		}
	}


}



class Alter_table_alter_column_familyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_column_family;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	family_setting_value() {
	    return this.getTypedRuleContext(Family_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_column_family(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_column_family(this);
		}
	}


}



class Alter_table_set_table_setting_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_set_table_setting_uncompat;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_set_table_setting_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_set_table_setting_uncompat(this);
		}
	}


}



class Alter_table_set_table_setting_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_set_table_setting_compat;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	alter_table_setting_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_table_setting_entryContext);
	    } else {
	        return this.getTypedRuleContext(Alter_table_setting_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_set_table_setting_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_set_table_setting_compat(this);
		}
	}


}



class Alter_table_reset_table_settingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_reset_table_setting;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_reset_table_setting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_reset_table_setting(this);
		}
	}


}



class Alter_table_add_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_index;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	table_index() {
	    return this.getTypedRuleContext(Table_indexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_index(this);
		}
	}


}



class Alter_table_drop_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_index;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_index(this);
		}
	}


}



class Alter_table_rename_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_rename_to;
    }

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_rename_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_rename_to(this);
		}
	}


}



class Alter_table_rename_index_toContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_rename_index_to;
    }

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_rename_index_to(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_rename_index_to(this);
		}
	}


}



class Alter_table_add_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_add_changefeed;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	changefeed() {
	    return this.getTypedRuleContext(ChangefeedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_add_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_add_changefeed(this);
		}
	}


}



class Alter_table_alter_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_changefeed;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	changefeed_alter_settings() {
	    return this.getTypedRuleContext(Changefeed_alter_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_changefeed(this);
		}
	}


}



class Alter_table_drop_changefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_drop_changefeed;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_drop_changefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_drop_changefeed(this);
		}
	}


}



class Alter_table_alter_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_index;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	alter_table_alter_index_action() {
	    return this.getTypedRuleContext(Alter_table_alter_index_actionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_index(this);
		}
	}


}



class Column_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_schema;
    }

	an_id_schema() {
	    return this.getTypedRuleContext(An_id_schemaContext,0);
	};

	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	opt_column_constraints() {
	    return this.getTypedRuleContext(Opt_column_constraintsContext,0);
	};

	family_relation() {
	    return this.getTypedRuleContext(Family_relationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_schema(this);
		}
	}


}



class Family_relationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_relation;
    }

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_relation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_relation(this);
		}
	}


}



class Opt_column_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_column_constraints;
    }

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_column_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_column_constraints(this);
		}
	}


}



class Column_order_by_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_column_order_by_specification;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterColumn_order_by_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitColumn_order_by_specification(this);
		}
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_constraint;
    }

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	column_order_by_specification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_order_by_specificationContext);
	    } else {
	        return this.getTypedRuleContext(Column_order_by_specificationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_constraint(this);
		}
	}


}



class Table_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_index;
    }

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	table_index_type() {
	    return this.getTypedRuleContext(Table_index_typeContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.LPAREN);
	    } else {
	        return this.getToken(YQLParser.LPAREN, i);
	    }
	};


	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.RPAREN);
	    } else {
	        return this.getToken(YQLParser.RPAREN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	with_index_settings() {
	    return this.getTypedRuleContext(With_index_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_index(this);
		}
	}


}



class Table_index_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_index_type;
    }

	global_index() {
	    return this.getTypedRuleContext(Global_indexContext,0);
	};

	local_index() {
	    return this.getTypedRuleContext(Local_indexContext,0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	index_subtype() {
	    return this.getTypedRuleContext(Index_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_index_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_index_type(this);
		}
	}


}



class Global_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_global_index;
    }

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGlobal_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGlobal_index(this);
		}
	}


}



class Local_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_local_index;
    }

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLocal_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLocal_index(this);
		}
	}


}



class Index_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_subtype;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_subtype(this);
		}
	}


}



class With_index_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_index_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	index_setting_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Index_setting_entryContext);
	    } else {
	        return this.getTypedRuleContext(Index_setting_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_index_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_index_settings(this);
		}
	}


}



class Index_setting_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_setting_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	index_setting_value() {
	    return this.getTypedRuleContext(Index_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_setting_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_setting_entry(this);
		}
	}


}



class Index_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_index_setting_value;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIndex_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIndex_setting_value(this);
		}
	}


}



class ChangefeedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed;
    }

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	changefeed_settings() {
	    return this.getTypedRuleContext(Changefeed_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed(this);
		}
	}


}



class Changefeed_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_settings;
    }

	changefeed_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Changefeed_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Changefeed_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_settings(this);
		}
	}


}



class Changefeed_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	changefeed_setting_value() {
	    return this.getTypedRuleContext(Changefeed_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_settings_entry(this);
		}
	}


}



class Changefeed_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_setting_value(this);
		}
	}


}



class Changefeed_alter_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_changefeed_alter_settings;
    }

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	changefeed_settings() {
	    return this.getTypedRuleContext(Changefeed_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterChangefeed_alter_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitChangefeed_alter_settings(this);
		}
	}


}



class Alter_table_setting_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_setting_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	table_setting_value() {
	    return this.getTypedRuleContext(Table_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_setting_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_setting_entry(this);
		}
	}


}



class Table_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_setting_value;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	split_boundaries() {
	    return this.getTypedRuleContext(Split_boundariesContext,0);
	};

	ttl_tier_list() {
	    return this.getTypedRuleContext(Ttl_tier_listContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	bool_value() {
	    return this.getTypedRuleContext(Bool_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_setting_value(this);
		}
	}


}



class Ttl_tier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ttl_tier_list;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ttl_tier_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ttl_tier_actionContext);
	    } else {
	        return this.getTypedRuleContext(Ttl_tier_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTtl_tier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTtl_tier_list(this);
		}
	}


}



class Ttl_tier_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_ttl_tier_action;
    }

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTtl_tier_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTtl_tier_action(this);
		}
	}


}



class Family_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_entry;
    }

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	family_settings() {
	    return this.getTypedRuleContext(Family_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_entry(this);
		}
	}


}



class Family_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_settings;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	family_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Family_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Family_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_settings(this);
		}
	}


}



class Family_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	family_setting_value() {
	    return this.getTypedRuleContext(Family_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_settings_entry(this);
		}
	}


}



class Family_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_family_setting_value;
    }

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFamily_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFamily_setting_value(this);
		}
	}


}



class Split_boundariesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_split_boundaries;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	literal_value_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Literal_value_listContext);
	    } else {
	        return this.getTypedRuleContext(Literal_value_listContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSplit_boundaries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSplit_boundaries(this);
		}
	}


}



class Literal_value_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_literal_value_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	literal_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Literal_valueContext);
	    } else {
	        return this.getTypedRuleContext(Literal_valueContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLiteral_value_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLiteral_value_list(this);
		}
	}


}



class Alter_table_alter_index_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_table_alter_index_action;
    }

	alter_table_set_table_setting_uncompat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_uncompatContext,0);
	};

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_table_alter_index_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_table_alter_index_action(this);
		}
	}


}



class Drop_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_table_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_table_stmt(this);
		}
	}


}



class Create_user_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_user_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	role_name() {
	    return this.getTypedRuleContext(Role_nameContext,0);
	};

	create_user_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_user_optionContext);
	    } else {
	        return this.getTypedRuleContext(Create_user_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_user_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_user_stmt(this);
		}
	}


}



class Alter_user_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_user_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	create_user_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_user_optionContext);
	    } else {
	        return this.getTypedRuleContext(Create_user_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_user_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_user_stmt(this);
		}
	}


}



class Create_group_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_group_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_group_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_group_stmt(this);
		}
	}


}



class Alter_group_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_group_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_group_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_group_stmt(this);
		}
	}


}



class Drop_role_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_role_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_role_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_role_stmt(this);
		}
	}


}



class Role_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_role_name;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRole_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRole_name(this);
		}
	}


}



class Create_user_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_user_option;
    }

	password_option() {
	    return this.getTypedRuleContext(Password_optionContext,0);
	};

	login_option() {
	    return this.getTypedRuleContext(Login_optionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_user_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_user_option(this);
		}
	}


}



class Password_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_password_option;
    }

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPassword_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPassword_option(this);
		}
	}


}



class Login_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_login_option;
    }

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterLogin_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitLogin_option(this);
		}
	}


}



class Grant_permissions_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_grant_permissions_stmt;
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.GRANT);
	    } else {
	        return this.getToken(YQLParser.GRANT, i);
	    }
	};


	permission_name_target() {
	    return this.getTypedRuleContext(Permission_name_targetContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterGrant_permissions_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitGrant_permissions_stmt(this);
		}
	}


}



class Revoke_permissions_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_revoke_permissions_stmt;
    }

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	permission_name_target() {
	    return this.getTypedRuleContext(Permission_name_targetContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	an_id_schema = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_schemaContext);
	    } else {
	        return this.getTypedRuleContext(An_id_schemaContext,i);
	    }
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	role_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Role_nameContext);
	    } else {
	        return this.getTypedRuleContext(Role_nameContext,i);
	    }
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRevoke_permissions_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRevoke_permissions_stmt(this);
		}
	}


}



class Permission_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_id;
    }

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_id(this);
		}
	}


}



class Permission_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_name;
    }

	permission_id() {
	    return this.getTypedRuleContext(Permission_idContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_name(this);
		}
	}


}



class Permission_name_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_permission_name_target;
    }

	permission_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Permission_nameContext);
	    } else {
	        return this.getTypedRuleContext(Permission_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterPermission_name_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitPermission_name_target(this);
		}
	}


}



class Create_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_resource_pool_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_resource_pool_stmt(this);
		}
	}


}



class Alter_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_resource_pool_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_resource_pool_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_resource_pool_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_stmt(this);
		}
	}


}



class Alter_resource_pool_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_action(this);
		}
	}


}



class Drop_resource_pool_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_resource_pool_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_resource_pool_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_resource_pool_stmt(this);
		}
	}


}



class Create_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_resource_pool_classifier_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	with_table_settings() {
	    return this.getTypedRuleContext(With_table_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_resource_pool_classifier_stmt(this);
		}
	}


}



class Alter_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_classifier_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_resource_pool_classifier_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_resource_pool_classifier_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_resource_pool_classifier_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_classifier_stmt(this);
		}
	}


}



class Alter_resource_pool_classifier_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_resource_pool_classifier_action;
    }

	alter_table_set_table_setting_compat() {
	    return this.getTypedRuleContext(Alter_table_set_table_setting_compatContext,0);
	};

	alter_table_reset_table_setting() {
	    return this.getTypedRuleContext(Alter_table_reset_table_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_resource_pool_classifier_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_resource_pool_classifier_action(this);
		}
	}


}



class Drop_resource_pool_classifier_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_resource_pool_classifier_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_resource_pool_classifier_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_resource_pool_classifier_stmt(this);
		}
	}


}



class Create_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_replication_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	replication_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Replication_targetContext);
	    } else {
	        return this.getTypedRuleContext(Replication_targetContext,i);
	    }
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	replication_settings() {
	    return this.getTypedRuleContext(Replication_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_replication_stmt(this);
		}
	}


}



class Replication_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_target;
    }

	object_ref = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_refContext);
	    } else {
	        return this.getTypedRuleContext(Object_refContext,i);
	    }
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_target(this);
		}
	}


}



class Replication_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_settings;
    }

	replication_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Replication_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Replication_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_settings(this);
		}
	}


}



class Replication_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_replication_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReplication_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReplication_settings_entry(this);
		}
	}


}



class Alter_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	alter_replication_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_replication_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_replication_actionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_stmt(this);
		}
	}


}



class Alter_replication_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_action;
    }

	alter_replication_set_setting() {
	    return this.getTypedRuleContext(Alter_replication_set_settingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_action(this);
		}
	}


}



class Alter_replication_set_settingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_replication_set_setting;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	replication_settings() {
	    return this.getTypedRuleContext(Replication_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_replication_set_setting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_replication_set_setting(this);
		}
	}


}



class Drop_replication_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_replication_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_replication_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_replication_stmt(this);
		}
	}


}



class Action_or_subquery_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_action_or_subquery_args;
    }

	opt_bind_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Opt_bind_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Opt_bind_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAction_or_subquery_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAction_or_subquery_args(this);
		}
	}


}



class Define_action_or_subquery_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_define_action_or_subquery_stmt;
    }

	DEFINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.DEFINE);
	    } else {
	        return this.getToken(YQLParser.DEFINE, i);
	    }
	};


	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	define_action_or_subquery_body() {
	    return this.getTypedRuleContext(Define_action_or_subquery_bodyContext,0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	action_or_subquery_args() {
	    return this.getTypedRuleContext(Action_or_subquery_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDefine_action_or_subquery_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDefine_action_or_subquery_stmt(this);
		}
	}


}



class Define_action_or_subquery_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_define_action_or_subquery_body;
    }

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.SEMICOLON);
	    } else {
	        return this.getToken(YQLParser.SEMICOLON, i);
	    }
	};


	sql_stmt_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_coreContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_coreContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDefine_action_or_subquery_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDefine_action_or_subquery_body(this);
		}
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	do_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Do_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Do_stmtContext,i);
	    }
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIf_stmt(this);
		}
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	do_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Do_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Do_stmtContext,i);
	    }
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFor_stmt(this);
		}
	}


}



class Table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_ref;
    }

	table_key() {
	    return this.getTypedRuleContext(Table_keyContext,0);
	};

	an_id_expr() {
	    return this.getTypedRuleContext(An_id_exprContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	table_hints() {
	    return this.getTypedRuleContext(Table_hintsContext,0);
	};

	table_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_argContext);
	    } else {
	        return this.getTypedRuleContext(Table_argContext,i);
	    }
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	expr_list() {
	    return this.getTypedRuleContext(Expr_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_ref(this);
		}
	}


}



class Table_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_key;
    }

	id_table_or_type() {
	    return this.getTypedRuleContext(Id_table_or_typeContext,0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_key(this);
		}
	}


}



class Table_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_arg;
    }

	named_expr() {
	    return this.getTypedRuleContext(Named_exprContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_arg(this);
		}
	}


}



class Table_hintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_hints;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	table_hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_hintContext);
	    } else {
	        return this.getTypedRuleContext(Table_hintContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_hints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_hints(this);
		}
	}


}



class Table_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_table_hint;
    }

	an_id_hint() {
	    return this.getTypedRuleContext(An_id_hintContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	type_name_tag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_name_tagContext);
	    } else {
	        return this.getTypedRuleContext(Type_name_tagContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	type_name_or_bind() {
	    return this.getTypedRuleContext(Type_name_or_bindContext,0);
	};

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	struct_arg_positional = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_arg_positionalContext);
	    } else {
	        return this.getTypedRuleContext(Struct_arg_positionalContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTable_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTable_hint(this);
		}
	}


}



class Object_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_object_ref;
    }

	id_or_at() {
	    return this.getTypedRuleContext(Id_or_atContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterObject_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitObject_ref(this);
		}
	}


}



class Simple_table_ref_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_table_ref_core;
    }

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	bind_parameter() {
	    return this.getTypedRuleContext(Bind_parameterContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_table_ref_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_table_ref_core(this);
		}
	}


}



class Simple_table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_simple_table_ref;
    }

	simple_table_ref_core() {
	    return this.getTypedRuleContext(Simple_table_ref_coreContext,0);
	};

	table_hints() {
	    return this.getTypedRuleContext(Table_hintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSimple_table_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSimple_table_ref(this);
		}
	}


}



class Into_simple_table_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_into_simple_table_ref;
    }

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	pure_column_list() {
	    return this.getTypedRuleContext(Pure_column_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInto_simple_table_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInto_simple_table_ref(this);
		}
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_delete_stmt;
    }

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDelete_stmt(this);
		}
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_update_stmt;
    }

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	set_clause_choice() {
	    return this.getTypedRuleContext(Set_clause_choiceContext,0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	into_values_source() {
	    return this.getTypedRuleContext(Into_values_sourceContext,0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	returning_columns_list() {
	    return this.getTypedRuleContext(Returning_columns_listContext,0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}


}



class Set_clause_choiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause_choice;
    }

	set_clause_list() {
	    return this.getTypedRuleContext(Set_clause_listContext,0);
	};

	multiple_column_assignment() {
	    return this.getTypedRuleContext(Multiple_column_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause_choice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause_choice(this);
		}
	}


}



class Set_clause_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause_list;
    }

	set_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Set_clauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause_list(this);
		}
	}


}



class Set_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_clause;
    }

	set_target() {
	    return this.getTypedRuleContext(Set_targetContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_clause(this);
		}
	}


}



class Set_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_target;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_target(this);
		}
	}


}



class Multiple_column_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_multiple_column_assignment;
    }

	set_target_list() {
	    return this.getTypedRuleContext(Set_target_listContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	simple_values_source() {
	    return this.getTypedRuleContext(Simple_values_sourceContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterMultiple_column_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitMultiple_column_assignment(this);
		}
	}


}



class Set_target_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_set_target_list;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	set_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Set_targetContext);
	    } else {
	        return this.getTypedRuleContext(Set_targetContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSet_target_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSet_target_list(this);
		}
	}


}



class Create_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_stmt;
    }

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	create_topic_entries() {
	    return this.getTypedRuleContext(Create_topic_entriesContext,0);
	};

	with_topic_settings() {
	    return this.getTypedRuleContext(With_topic_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_stmt(this);
		}
	}


}



class Create_topic_entriesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_entries;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	create_topic_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Create_topic_entryContext);
	    } else {
	        return this.getTypedRuleContext(Create_topic_entryContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_entries(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_entries(this);
		}
	}


}



class Create_topic_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_create_topic_entry;
    }

	topic_create_consumer_entry() {
	    return this.getTypedRuleContext(Topic_create_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCreate_topic_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCreate_topic_entry(this);
		}
	}


}



class With_topic_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_with_topic_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_settings() {
	    return this.getTypedRuleContext(Topic_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWith_topic_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWith_topic_settings(this);
		}
	}


}



class Alter_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	alter_topic_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_topic_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_topic_actionContext,i);
	    }
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_stmt(this);
		}
	}


}



class Alter_topic_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_action;
    }

	alter_topic_add_consumer() {
	    return this.getTypedRuleContext(Alter_topic_add_consumerContext,0);
	};

	alter_topic_alter_consumer() {
	    return this.getTypedRuleContext(Alter_topic_alter_consumerContext,0);
	};

	alter_topic_drop_consumer() {
	    return this.getTypedRuleContext(Alter_topic_drop_consumerContext,0);
	};

	alter_topic_set_settings() {
	    return this.getTypedRuleContext(Alter_topic_set_settingsContext,0);
	};

	alter_topic_reset_settings() {
	    return this.getTypedRuleContext(Alter_topic_reset_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_action(this);
		}
	}


}



class Alter_topic_add_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_add_consumer;
    }

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	topic_create_consumer_entry() {
	    return this.getTypedRuleContext(Topic_create_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_add_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_add_consumer(this);
		}
	}


}



class Topic_create_consumer_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_create_consumer_entry;
    }

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	topic_consumer_with_settings() {
	    return this.getTypedRuleContext(Topic_consumer_with_settingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_create_consumer_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_create_consumer_entry(this);
		}
	}


}



class Alter_topic_alter_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_alter_consumer;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	topic_consumer_ref() {
	    return this.getTypedRuleContext(Topic_consumer_refContext,0);
	};

	alter_topic_alter_consumer_entry() {
	    return this.getTypedRuleContext(Alter_topic_alter_consumer_entryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_alter_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_alter_consumer(this);
		}
	}


}



class Alter_topic_alter_consumer_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_alter_consumer_entry;
    }

	topic_alter_consumer_set() {
	    return this.getTypedRuleContext(Topic_alter_consumer_setContext,0);
	};

	topic_alter_consumer_reset() {
	    return this.getTypedRuleContext(Topic_alter_consumer_resetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_alter_consumer_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_alter_consumer_entry(this);
		}
	}


}



class Alter_topic_drop_consumerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_drop_consumer;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	topic_consumer_ref() {
	    return this.getTypedRuleContext(Topic_consumer_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_drop_consumer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_drop_consumer(this);
		}
	}


}



class Topic_alter_consumer_setContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_alter_consumer_set;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_consumer_settings() {
	    return this.getTypedRuleContext(Topic_consumer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_alter_consumer_set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_alter_consumer_set(this);
		}
	}


}



class Topic_alter_consumer_resetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_alter_consumer_reset;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_idContext);
	    } else {
	        return this.getTypedRuleContext(An_idContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_alter_consumer_reset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_alter_consumer_reset(this);
		}
	}


}



class Alter_topic_set_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_set_settings;
    }

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_settings() {
	    return this.getTypedRuleContext(Topic_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_set_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_set_settings(this);
		}
	}


}



class Alter_topic_reset_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_topic_reset_settings;
    }

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	an_id_pure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(An_id_pureContext);
	    } else {
	        return this.getTypedRuleContext(An_id_pureContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_topic_reset_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_topic_reset_settings(this);
		}
	}


}



class Drop_topic_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_drop_topic_stmt;
    }

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	topic_ref() {
	    return this.getTypedRuleContext(Topic_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterDrop_topic_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitDrop_topic_stmt(this);
		}
	}


}



class Topic_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_settings;
    }

	topic_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Topic_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Topic_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_settings(this);
		}
	}


}



class Topic_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	topic_setting_value() {
	    return this.getTypedRuleContext(Topic_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_settings_entry(this);
		}
	}


}



class Topic_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_setting_value(this);
		}
	}


}



class Topic_consumer_with_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_with_settings;
    }

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	topic_consumer_settings() {
	    return this.getTypedRuleContext(Topic_consumer_settingsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_with_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_with_settings(this);
		}
	}


}



class Topic_consumer_settingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_settings;
    }

	topic_consumer_settings_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Topic_consumer_settings_entryContext);
	    } else {
	        return this.getTypedRuleContext(Topic_consumer_settings_entryContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_settings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_settings(this);
		}
	}


}



class Topic_consumer_settings_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_settings_entry;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	topic_consumer_setting_value() {
	    return this.getTypedRuleContext(Topic_consumer_setting_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_settings_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_settings_entry(this);
		}
	}


}



class Topic_consumer_setting_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_setting_value;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_setting_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_setting_value(this);
		}
	}


}



class Topic_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_ref;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_ref(this);
		}
	}


}



class Topic_consumer_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_topic_consumer_ref;
    }

	an_id_pure() {
	    return this.getTypedRuleContext(An_id_pureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterTopic_consumer_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitTopic_consumer_ref(this);
		}
	}


}



class Null_treatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_null_treatment;
    }

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNull_treatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNull_treatment(this);
		}
	}


}



class Filter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_filter_clause;
    }

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterFilter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitFilter_clause(this);
		}
	}


}



class Window_name_or_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_name_or_specification;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_name_or_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_name_or_specification(this);
		}
	}


}



class Window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_name;
    }

	an_id_window() {
	    return this.getTypedRuleContext(An_id_windowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_name(this);
		}
	}


}



class Window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_clause;
    }

	WINDOW() {
	    return this.getToken(YQLParser.WINDOW, 0);
	};

	window_definition_list() {
	    return this.getTypedRuleContext(Window_definition_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_clause(this);
		}
	}


}



class Window_definition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_definition_list;
    }

	window_definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_definitionContext);
	    } else {
	        return this.getTypedRuleContext(Window_definitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_definition_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_definition_list(this);
		}
	}


}



class Window_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_definition;
    }

	new_window_name() {
	    return this.getTypedRuleContext(New_window_nameContext,0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_definition(this);
		}
	}


}



class New_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_new_window_name;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNew_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNew_window_name(this);
		}
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_specification;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	window_specification_details() {
	    return this.getTypedRuleContext(Window_specification_detailsContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_specification(this);
		}
	}


}



class Window_specification_detailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_specification_details;
    }

	existing_window_name() {
	    return this.getTypedRuleContext(Existing_window_nameContext,0);
	};

	window_partition_clause() {
	    return this.getTypedRuleContext(Window_partition_clauseContext,0);
	};

	window_order_clause() {
	    return this.getTypedRuleContext(Window_order_clauseContext,0);
	};

	window_frame_clause() {
	    return this.getTypedRuleContext(Window_frame_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_specification_details(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_specification_details(this);
		}
	}


}



class Existing_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_existing_window_name;
    }

	window_name() {
	    return this.getTypedRuleContext(Window_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterExisting_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitExisting_window_name(this);
		}
	}


}



class Window_partition_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_partition_clause;
    }

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	named_expr_list() {
	    return this.getTypedRuleContext(Named_expr_listContext,0);
	};

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_partition_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_partition_clause(this);
		}
	}


}



class Window_order_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_order_clause;
    }

	order_by_clause() {
	    return this.getTypedRuleContext(Order_by_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_order_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_order_clause(this);
		}
	}


}



class Window_frame_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_clause;
    }

	window_frame_units() {
	    return this.getTypedRuleContext(Window_frame_unitsContext,0);
	};

	window_frame_extent() {
	    return this.getTypedRuleContext(Window_frame_extentContext,0);
	};

	window_frame_exclusion() {
	    return this.getTypedRuleContext(Window_frame_exclusionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_clause(this);
		}
	}


}



class Window_frame_unitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_units;
    }

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(YQLParser.RANGE, 0);
	};

	GROUPS() {
	    return this.getToken(YQLParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_units(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_units(this);
		}
	}


}



class Window_frame_extentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_extent;
    }

	window_frame_bound() {
	    return this.getTypedRuleContext(Window_frame_boundContext,0);
	};

	window_frame_between() {
	    return this.getTypedRuleContext(Window_frame_betweenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_extent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_extent(this);
		}
	}


}



class Window_frame_betweenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_between;
    }

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	window_frame_bound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundContext,i);
	    }
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_between(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_between(this);
		}
	}


}



class Window_frame_boundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_bound;
    }

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	UNBOUNDED() {
	    return this.getToken(YQLParser.UNBOUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_bound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_bound(this);
		}
	}


}



class Window_frame_exclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_window_frame_exclusion;
    }

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterWindow_frame_exclusion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitWindow_frame_exclusion(this);
		}
	}


}



class Use_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_use_stmt;
    }

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	cluster_expr() {
	    return this.getTypedRuleContext(Cluster_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterUse_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitUse_stmt(this);
		}
	}


}



class Subselect_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_subselect_stmt;
    }

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	select_unparenthesized_stmt() {
	    return this.getTypedRuleContext(Select_unparenthesized_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterSubselect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitSubselect_stmt(this);
		}
	}


}



class Named_nodes_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_named_nodes_stmt;
    }

	bind_parameter_list() {
	    return this.getTypedRuleContext(Bind_parameter_listContext,0);
	};

	EQUALS() {
	    return this.getToken(YQLParser.EQUALS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	subselect_stmt() {
	    return this.getTypedRuleContext(Subselect_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterNamed_nodes_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitNamed_nodes_stmt(this);
		}
	}


}



class Commit_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_commit_stmt;
    }

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCommit_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCommit_stmt(this);
		}
	}


}



class Rollback_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_rollback_stmt;
    }

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterRollback_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitRollback_stmt(this);
		}
	}


}



class Analyze_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_table;
    }

	simple_table_ref() {
	    return this.getTypedRuleContext(Simple_table_refContext,0);
	};

	LPAREN() {
	    return this.getToken(YQLParser.LPAREN, 0);
	};

	column_list() {
	    return this.getTypedRuleContext(Column_listContext,0);
	};

	RPAREN() {
	    return this.getToken(YQLParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_table(this);
		}
	}


}



class Analyze_table_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_table_list;
    }

	analyze_table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Analyze_tableContext);
	    } else {
	        return this.getTypedRuleContext(Analyze_tableContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(YQLParser.COMMA);
	    } else {
	        return this.getToken(YQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_table_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_table_list(this);
		}
	}


}



class Analyze_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_analyze_stmt;
    }

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	analyze_table_list() {
	    return this.getTypedRuleContext(Analyze_table_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAnalyze_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAnalyze_stmt(this);
		}
	}


}



class Alter_sequence_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_sequence_stmt;
    }

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	object_ref() {
	    return this.getTypedRuleContext(Object_refContext,0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	alter_sequence_action = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Alter_sequence_actionContext);
	    } else {
	        return this.getTypedRuleContext(Alter_sequence_actionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_sequence_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_sequence_stmt(this);
		}
	}


}



class Alter_sequence_actionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_alter_sequence_action;
    }

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAlter_sequence_action(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAlter_sequence_action(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_identifier;
    }

	ID_PLAIN() {
	    return this.getToken(YQLParser.ID_PLAIN, 0);
	};

	ID_QUOTED() {
	    return this.getToken(YQLParser.ID_QUOTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class IdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId(this);
		}
	}


}



class Id_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_schema;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_schema(this);
		}
	}


}



class Id_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_expr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_expr(this);
		}
	}


}



class Id_expr_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_expr_in;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_expr_in(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_expr_in(this);
		}
	}


}



class Id_windowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_window;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_window(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_window(this);
		}
	}


}



class Id_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table(this);
		}
	}


}



class Id_withoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_without;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_without(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_without(this);
		}
	}


}



class Id_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_hint;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_hint(this);
		}
	}


}



class Id_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_as_compat;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword_as_compat() {
	    return this.getTypedRuleContext(Keyword_as_compatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_as_compat(this);
		}
	}


}



class An_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id(this);
		}
	}


}



class An_id_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_or_type;
    }

	id_or_type() {
	    return this.getTypedRuleContext(Id_or_typeContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_or_type(this);
		}
	}


}



class An_id_schemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_schema;
    }

	id_schema() {
	    return this.getTypedRuleContext(Id_schemaContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_schema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_schema(this);
		}
	}


}



class An_id_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_expr;
    }

	id_expr() {
	    return this.getTypedRuleContext(Id_exprContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_expr(this);
		}
	}


}



class An_id_expr_inContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_expr_in;
    }

	id_expr_in() {
	    return this.getTypedRuleContext(Id_expr_inContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_expr_in(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_expr_in(this);
		}
	}


}



class An_id_windowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_window;
    }

	id_window() {
	    return this.getTypedRuleContext(Id_windowContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_window(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_window(this);
		}
	}


}



class An_id_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_table;
    }

	id_table() {
	    return this.getTypedRuleContext(Id_tableContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_table(this);
		}
	}


}



class An_id_withoutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_without;
    }

	id_without() {
	    return this.getTypedRuleContext(Id_withoutContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_without(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_without(this);
		}
	}


}



class An_id_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_hint;
    }

	id_hint() {
	    return this.getTypedRuleContext(Id_hintContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_hint(this);
		}
	}


}



class An_id_pureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_pure;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_pure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_pure(this);
		}
	}


}



class An_id_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_an_id_as_compat;
    }

	id_as_compat() {
	    return this.getTypedRuleContext(Id_as_compatContext,0);
	};

	STRING_VALUE() {
	    return this.getToken(YQLParser.STRING_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterAn_id_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitAn_id_as_compat(this);
		}
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_view_name;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitView_name(this);
		}
	}


}



class Opt_id_prefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_id_prefix;
    }

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_id_prefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_id_prefix(this);
		}
	}


}



class Cluster_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_cluster_expr;
    }

	pure_column_or_named() {
	    return this.getTypedRuleContext(Pure_column_or_namedContext,0);
	};

	ASTERISK() {
	    return this.getToken(YQLParser.ASTERISK, 0);
	};

	an_id() {
	    return this.getTypedRuleContext(An_idContext,0);
	};

	COLON() {
	    return this.getToken(YQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterCluster_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitCluster_expr(this);
		}
	}


}



class Id_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_or_type;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	type_id() {
	    return this.getTypedRuleContext(Type_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_or_type(this);
		}
	}


}



class Opt_id_prefix_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_opt_id_prefix_or_type;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	DOT() {
	    return this.getToken(YQLParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterOpt_id_prefix_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitOpt_id_prefix_or_type(this);
		}
	}


}



class Id_or_atContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_or_at;
    }

	an_id_or_type() {
	    return this.getTypedRuleContext(An_id_or_typeContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_or_at(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_or_at(this);
		}
	}


}



class Id_table_or_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table_or_type;
    }

	an_id_table() {
	    return this.getTypedRuleContext(An_id_tableContext,0);
	};

	type_id() {
	    return this.getTypedRuleContext(Type_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table_or_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table_or_type(this);
		}
	}


}



class Id_table_or_atContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_id_table_or_at;
    }

	id_table_or_type() {
	    return this.getTypedRuleContext(Id_table_or_typeContext,0);
	};

	COMMAT() {
	    return this.getToken(YQLParser.COMMAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterId_table_or_at(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitId_table_or_at(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword;
    }

	keyword_compat() {
	    return this.getTypedRuleContext(Keyword_compatContext,0);
	};

	keyword_expr_uncompat() {
	    return this.getTypedRuleContext(Keyword_expr_uncompatContext,0);
	};

	keyword_table_uncompat() {
	    return this.getTypedRuleContext(Keyword_table_uncompatContext,0);
	};

	keyword_select_uncompat() {
	    return this.getTypedRuleContext(Keyword_select_uncompatContext,0);
	};

	keyword_alter_uncompat() {
	    return this.getTypedRuleContext(Keyword_alter_uncompatContext,0);
	};

	keyword_in_uncompat() {
	    return this.getTypedRuleContext(Keyword_in_uncompatContext,0);
	};

	keyword_window_uncompat() {
	    return this.getTypedRuleContext(Keyword_window_uncompatContext,0);
	};

	keyword_hint_uncompat() {
	    return this.getTypedRuleContext(Keyword_hint_uncompatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class Keyword_expr_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_expr_uncompat;
    }

	ASYMMETRIC() {
	    return this.getToken(YQLParser.ASYMMETRIC, 0);
	};

	BETWEEN() {
	    return this.getToken(YQLParser.BETWEEN, 0);
	};

	BITCAST() {
	    return this.getToken(YQLParser.BITCAST, 0);
	};

	CASE() {
	    return this.getToken(YQLParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(YQLParser.CAST, 0);
	};

	CUBE() {
	    return this.getToken(YQLParser.CUBE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(YQLParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(YQLParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(YQLParser.CURRENT_TIMESTAMP, 0);
	};

	EMPTY_ACTION() {
	    return this.getToken(YQLParser.EMPTY_ACTION, 0);
	};

	EXISTS() {
	    return this.getToken(YQLParser.EXISTS, 0);
	};

	FROM() {
	    return this.getToken(YQLParser.FROM, 0);
	};

	FULL() {
	    return this.getToken(YQLParser.FULL, 0);
	};

	HOP() {
	    return this.getToken(YQLParser.HOP, 0);
	};

	JSON_EXISTS() {
	    return this.getToken(YQLParser.JSON_EXISTS, 0);
	};

	JSON_VALUE() {
	    return this.getToken(YQLParser.JSON_VALUE, 0);
	};

	JSON_QUERY() {
	    return this.getToken(YQLParser.JSON_QUERY, 0);
	};

	NOT() {
	    return this.getToken(YQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(YQLParser.NULL, 0);
	};

	PROCESS() {
	    return this.getToken(YQLParser.PROCESS, 0);
	};

	REDUCE() {
	    return this.getToken(YQLParser.REDUCE, 0);
	};

	RETURN() {
	    return this.getToken(YQLParser.RETURN, 0);
	};

	RETURNING() {
	    return this.getToken(YQLParser.RETURNING, 0);
	};

	ROLLUP() {
	    return this.getToken(YQLParser.ROLLUP, 0);
	};

	SELECT() {
	    return this.getToken(YQLParser.SELECT, 0);
	};

	SYMMETRIC() {
	    return this.getToken(YQLParser.SYMMETRIC, 0);
	};

	UNBOUNDED() {
	    return this.getToken(YQLParser.UNBOUNDED, 0);
	};

	WHEN() {
	    return this.getToken(YQLParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(YQLParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_expr_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_expr_uncompat(this);
		}
	}


}



class Keyword_table_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_table_uncompat;
    }

	ANY() {
	    return this.getToken(YQLParser.ANY, 0);
	};

	ERASE() {
	    return this.getToken(YQLParser.ERASE, 0);
	};

	STREAM() {
	    return this.getToken(YQLParser.STREAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_table_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_table_uncompat(this);
		}
	}


}



class Keyword_select_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_select_uncompat;
    }

	ALL() {
	    return this.getToken(YQLParser.ALL, 0);
	};

	AS() {
	    return this.getToken(YQLParser.AS, 0);
	};

	ASSUME() {
	    return this.getToken(YQLParser.ASSUME, 0);
	};

	DISTINCT() {
	    return this.getToken(YQLParser.DISTINCT, 0);
	};

	EXCEPT() {
	    return this.getToken(YQLParser.EXCEPT, 0);
	};

	HAVING() {
	    return this.getToken(YQLParser.HAVING, 0);
	};

	INTERSECT() {
	    return this.getToken(YQLParser.INTERSECT, 0);
	};

	LIMIT() {
	    return this.getToken(YQLParser.LIMIT, 0);
	};

	UNION() {
	    return this.getToken(YQLParser.UNION, 0);
	};

	WINDOW() {
	    return this.getToken(YQLParser.WINDOW, 0);
	};

	WITHOUT() {
	    return this.getToken(YQLParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_select_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_select_uncompat(this);
		}
	}


}



class Keyword_alter_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_alter_uncompat;
    }

	COLUMN() {
	    return this.getToken(YQLParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_alter_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_alter_uncompat(this);
		}
	}


}



class Keyword_in_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_in_uncompat;
    }

	COMPACT() {
	    return this.getToken(YQLParser.COMPACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_in_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_in_uncompat(this);
		}
	}


}



class Keyword_window_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_window_uncompat;
    }

	GROUPS() {
	    return this.getToken(YQLParser.GROUPS, 0);
	};

	RANGE() {
	    return this.getToken(YQLParser.RANGE, 0);
	};

	ROWS() {
	    return this.getToken(YQLParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_window_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_window_uncompat(this);
		}
	}


}



class Keyword_hint_uncompatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_hint_uncompat;
    }

	SCHEMA() {
	    return this.getToken(YQLParser.SCHEMA, 0);
	};

	COLUMNS() {
	    return this.getToken(YQLParser.COLUMNS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_hint_uncompat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_hint_uncompat(this);
		}
	}


}



class Keyword_as_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_as_compat;
    }

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	ATTACH() {
	    return this.getToken(YQLParser.ATTACH, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	AUTOINCREMENT() {
	    return this.getToken(YQLParser.AUTOINCREMENT, 0);
	};

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	BEFORE() {
	    return this.getToken(YQLParser.BEFORE, 0);
	};

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	CHECK() {
	    return this.getToken(YQLParser.CHECK, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	CONFLICT() {
	    return this.getToken(YQLParser.CONFLICT, 0);
	};

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	CONSTRAINT() {
	    return this.getToken(YQLParser.CONSTRAINT, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	DEFERRABLE() {
	    return this.getToken(YQLParser.DEFERRABLE, 0);
	};

	DEFERRED() {
	    return this.getToken(YQLParser.DEFERRED, 0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	DETACH() {
	    return this.getToken(YQLParser.DETACH, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EACH() {
	    return this.getToken(YQLParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(YQLParser.EXCLUSIVE, 0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FAIL() {
	    return this.getToken(YQLParser.FAIL, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(YQLParser.FOREIGN, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(YQLParser.IMMEDIATE, 0);
	};

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	INDEXED() {
	    return this.getToken(YQLParser.INDEXED, 0);
	};

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	INITIALLY() {
	    return this.getToken(YQLParser.INITIALLY, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	INSTEAD() {
	    return this.getToken(YQLParser.INSTEAD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	OF() {
	    return this.getToken(YQLParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	RAISE() {
	    return this.getToken(YQLParser.RAISE, 0);
	};

	REFERENCES() {
	    return this.getToken(YQLParser.REFERENCES, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	REINDEX() {
	    return this.getToken(YQLParser.REINDEX, 0);
	};

	RELEASE() {
	    return this.getToken(YQLParser.RELEASE, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	RESTRICT() {
	    return this.getToken(YQLParser.RESTRICT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	SAVEPOINT() {
	    return this.getToken(YQLParser.SAVEPOINT, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	TRANSACTION() {
	    return this.getToken(YQLParser.TRANSACTION, 0);
	};

	TRIGGER() {
	    return this.getToken(YQLParser.TRIGGER, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	VACUUM() {
	    return this.getToken(YQLParser.VACUUM, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	VIRTUAL() {
	    return this.getToken(YQLParser.VIRTUAL, 0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	XOR() {
	    return this.getToken(YQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_as_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_as_compat(this);
		}
	}


}



class Keyword_compatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_keyword_compat;
    }

	ABORT() {
	    return this.getToken(YQLParser.ABORT, 0);
	};

	ACTION() {
	    return this.getToken(YQLParser.ACTION, 0);
	};

	ADD() {
	    return this.getToken(YQLParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(YQLParser.AFTER, 0);
	};

	ALTER() {
	    return this.getToken(YQLParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(YQLParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(YQLParser.AND, 0);
	};

	ANSI() {
	    return this.getToken(YQLParser.ANSI, 0);
	};

	ARRAY() {
	    return this.getToken(YQLParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(YQLParser.ASC, 0);
	};

	ASYNC() {
	    return this.getToken(YQLParser.ASYNC, 0);
	};

	AT() {
	    return this.getToken(YQLParser.AT, 0);
	};

	ATTACH() {
	    return this.getToken(YQLParser.ATTACH, 0);
	};

	ATTRIBUTES() {
	    return this.getToken(YQLParser.ATTRIBUTES, 0);
	};

	AUTOINCREMENT() {
	    return this.getToken(YQLParser.AUTOINCREMENT, 0);
	};

	BACKUP() {
	    return this.getToken(YQLParser.BACKUP, 0);
	};

	BATCH() {
	    return this.getToken(YQLParser.BATCH, 0);
	};

	BEFORE() {
	    return this.getToken(YQLParser.BEFORE, 0);
	};

	BEGIN() {
	    return this.getToken(YQLParser.BEGIN, 0);
	};

	BERNOULLI() {
	    return this.getToken(YQLParser.BERNOULLI, 0);
	};

	BY() {
	    return this.getToken(YQLParser.BY, 0);
	};

	CASCADE() {
	    return this.getToken(YQLParser.CASCADE, 0);
	};

	CHANGEFEED() {
	    return this.getToken(YQLParser.CHANGEFEED, 0);
	};

	CHECK() {
	    return this.getToken(YQLParser.CHECK, 0);
	};

	CLASSIFIER() {
	    return this.getToken(YQLParser.CLASSIFIER, 0);
	};

	COLLATE() {
	    return this.getToken(YQLParser.COLLATE, 0);
	};

	COLLECTION() {
	    return this.getToken(YQLParser.COLLECTION, 0);
	};

	COMMIT() {
	    return this.getToken(YQLParser.COMMIT, 0);
	};

	CONDITIONAL() {
	    return this.getToken(YQLParser.CONDITIONAL, 0);
	};

	CONFLICT() {
	    return this.getToken(YQLParser.CONFLICT, 0);
	};

	CONNECT() {
	    return this.getToken(YQLParser.CONNECT, 0);
	};

	CONSTRAINT() {
	    return this.getToken(YQLParser.CONSTRAINT, 0);
	};

	CONSUMER() {
	    return this.getToken(YQLParser.CONSUMER, 0);
	};

	COVER() {
	    return this.getToken(YQLParser.COVER, 0);
	};

	CREATE() {
	    return this.getToken(YQLParser.CREATE, 0);
	};

	CROSS() {
	    return this.getToken(YQLParser.CROSS, 0);
	};

	CURRENT() {
	    return this.getToken(YQLParser.CURRENT, 0);
	};

	DATA() {
	    return this.getToken(YQLParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(YQLParser.DATABASE, 0);
	};

	DECIMAL() {
	    return this.getToken(YQLParser.DECIMAL, 0);
	};

	DECLARE() {
	    return this.getToken(YQLParser.DECLARE, 0);
	};

	DEFAULT() {
	    return this.getToken(YQLParser.DEFAULT, 0);
	};

	DEFERRABLE() {
	    return this.getToken(YQLParser.DEFERRABLE, 0);
	};

	DEFERRED() {
	    return this.getToken(YQLParser.DEFERRED, 0);
	};

	DEFINE() {
	    return this.getToken(YQLParser.DEFINE, 0);
	};

	DELETE() {
	    return this.getToken(YQLParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(YQLParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(YQLParser.DESCRIBE, 0);
	};

	DETACH() {
	    return this.getToken(YQLParser.DETACH, 0);
	};

	DIRECTORY() {
	    return this.getToken(YQLParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(YQLParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(YQLParser.DISCARD, 0);
	};

	DO() {
	    return this.getToken(YQLParser.DO, 0);
	};

	DROP() {
	    return this.getToken(YQLParser.DROP, 0);
	};

	EACH() {
	    return this.getToken(YQLParser.EACH, 0);
	};

	ELSE() {
	    return this.getToken(YQLParser.ELSE, 0);
	};

	EMPTY() {
	    return this.getToken(YQLParser.EMPTY, 0);
	};

	ENCRYPTED() {
	    return this.getToken(YQLParser.ENCRYPTED, 0);
	};

	END() {
	    return this.getToken(YQLParser.END, 0);
	};

	ERROR() {
	    return this.getToken(YQLParser.ERROR, 0);
	};

	ESCAPE() {
	    return this.getToken(YQLParser.ESCAPE, 0);
	};

	EVALUATE() {
	    return this.getToken(YQLParser.EVALUATE, 0);
	};

	EXCLUDE() {
	    return this.getToken(YQLParser.EXCLUDE, 0);
	};

	EXCLUSION() {
	    return this.getToken(YQLParser.EXCLUSION, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(YQLParser.EXCLUSIVE, 0);
	};

	EXPLAIN() {
	    return this.getToken(YQLParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(YQLParser.EXPORT, 0);
	};

	EXTERNAL() {
	    return this.getToken(YQLParser.EXTERNAL, 0);
	};

	FAIL() {
	    return this.getToken(YQLParser.FAIL, 0);
	};

	FAMILY() {
	    return this.getToken(YQLParser.FAMILY, 0);
	};

	FILTER() {
	    return this.getToken(YQLParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(YQLParser.FIRST, 0);
	};

	FLATTEN() {
	    return this.getToken(YQLParser.FLATTEN, 0);
	};

	FOLLOWING() {
	    return this.getToken(YQLParser.FOLLOWING, 0);
	};

	FOR() {
	    return this.getToken(YQLParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(YQLParser.FOREIGN, 0);
	};

	FUNCTION() {
	    return this.getToken(YQLParser.FUNCTION, 0);
	};

	GLOB() {
	    return this.getToken(YQLParser.GLOB, 0);
	};

	GLOBAL() {
	    return this.getToken(YQLParser.GLOBAL, 0);
	};

	GRANT() {
	    return this.getToken(YQLParser.GRANT, 0);
	};

	GROUP() {
	    return this.getToken(YQLParser.GROUP, 0);
	};

	GROUPING() {
	    return this.getToken(YQLParser.GROUPING, 0);
	};

	HASH() {
	    return this.getToken(YQLParser.HASH, 0);
	};

	IF() {
	    return this.getToken(YQLParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(YQLParser.IGNORE, 0);
	};

	ILIKE() {
	    return this.getToken(YQLParser.ILIKE, 0);
	};

	IMMEDIATE() {
	    return this.getToken(YQLParser.IMMEDIATE, 0);
	};

	IMPORT() {
	    return this.getToken(YQLParser.IMPORT, 0);
	};

	IN() {
	    return this.getToken(YQLParser.IN, 0);
	};

	INCREMENT() {
	    return this.getToken(YQLParser.INCREMENT, 0);
	};

	INCREMENTAL() {
	    return this.getToken(YQLParser.INCREMENTAL, 0);
	};

	INDEX() {
	    return this.getToken(YQLParser.INDEX, 0);
	};

	INDEXED() {
	    return this.getToken(YQLParser.INDEXED, 0);
	};

	INHERITS() {
	    return this.getToken(YQLParser.INHERITS, 0);
	};

	INITIAL() {
	    return this.getToken(YQLParser.INITIAL, 0);
	};

	INITIALLY() {
	    return this.getToken(YQLParser.INITIALLY, 0);
	};

	INNER() {
	    return this.getToken(YQLParser.INNER, 0);
	};

	INSERT() {
	    return this.getToken(YQLParser.INSERT, 0);
	};

	INSTEAD() {
	    return this.getToken(YQLParser.INSTEAD, 0);
	};

	INTO() {
	    return this.getToken(YQLParser.INTO, 0);
	};

	IS() {
	    return this.getToken(YQLParser.IS, 0);
	};

	ISNULL() {
	    return this.getToken(YQLParser.ISNULL, 0);
	};

	JOIN() {
	    return this.getToken(YQLParser.JOIN, 0);
	};

	KEY() {
	    return this.getToken(YQLParser.KEY, 0);
	};

	LAST() {
	    return this.getToken(YQLParser.LAST, 0);
	};

	LEFT() {
	    return this.getToken(YQLParser.LEFT, 0);
	};

	LEGACY() {
	    return this.getToken(YQLParser.LEGACY, 0);
	};

	LIKE() {
	    return this.getToken(YQLParser.LIKE, 0);
	};

	LOCAL() {
	    return this.getToken(YQLParser.LOCAL, 0);
	};

	LOGIN() {
	    return this.getToken(YQLParser.LOGIN, 0);
	};

	MANAGE() {
	    return this.getToken(YQLParser.MANAGE, 0);
	};

	MATCH() {
	    return this.getToken(YQLParser.MATCH, 0);
	};

	MATCHES() {
	    return this.getToken(YQLParser.MATCHES, 0);
	};

	MATCH_RECOGNIZE() {
	    return this.getToken(YQLParser.MATCH_RECOGNIZE, 0);
	};

	MEASURES() {
	    return this.getToken(YQLParser.MEASURES, 0);
	};

	MICROSECONDS() {
	    return this.getToken(YQLParser.MICROSECONDS, 0);
	};

	MILLISECONDS() {
	    return this.getToken(YQLParser.MILLISECONDS, 0);
	};

	MODIFY() {
	    return this.getToken(YQLParser.MODIFY, 0);
	};

	NANOSECONDS() {
	    return this.getToken(YQLParser.NANOSECONDS, 0);
	};

	NATURAL() {
	    return this.getToken(YQLParser.NATURAL, 0);
	};

	NEXT() {
	    return this.getToken(YQLParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(YQLParser.NO, 0);
	};

	NOLOGIN() {
	    return this.getToken(YQLParser.NOLOGIN, 0);
	};

	NOTNULL() {
	    return this.getToken(YQLParser.NOTNULL, 0);
	};

	NULLS() {
	    return this.getToken(YQLParser.NULLS, 0);
	};

	OBJECT() {
	    return this.getToken(YQLParser.OBJECT, 0);
	};

	OF() {
	    return this.getToken(YQLParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(YQLParser.OFFSET, 0);
	};

	OMIT() {
	    return this.getToken(YQLParser.OMIT, 0);
	};

	ON() {
	    return this.getToken(YQLParser.ON, 0);
	};

	ONE() {
	    return this.getToken(YQLParser.ONE, 0);
	};

	ONLY() {
	    return this.getToken(YQLParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(YQLParser.OPTION, 0);
	};

	OR() {
	    return this.getToken(YQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(YQLParser.ORDER, 0);
	};

	OTHERS() {
	    return this.getToken(YQLParser.OTHERS, 0);
	};

	OUTER() {
	    return this.getToken(YQLParser.OUTER, 0);
	};

	OVER() {
	    return this.getToken(YQLParser.OVER, 0);
	};

	PARALLEL() {
	    return this.getToken(YQLParser.PARALLEL, 0);
	};

	PARTITION() {
	    return this.getToken(YQLParser.PARTITION, 0);
	};

	PASSING() {
	    return this.getToken(YQLParser.PASSING, 0);
	};

	PASSWORD() {
	    return this.getToken(YQLParser.PASSWORD, 0);
	};

	PAST() {
	    return this.getToken(YQLParser.PAST, 0);
	};

	PATTERN() {
	    return this.getToken(YQLParser.PATTERN, 0);
	};

	PER() {
	    return this.getToken(YQLParser.PER, 0);
	};

	PERMUTE() {
	    return this.getToken(YQLParser.PERMUTE, 0);
	};

	PLAN() {
	    return this.getToken(YQLParser.PLAN, 0);
	};

	POOL() {
	    return this.getToken(YQLParser.POOL, 0);
	};

	PRAGMA() {
	    return this.getToken(YQLParser.PRAGMA, 0);
	};

	PRECEDING() {
	    return this.getToken(YQLParser.PRECEDING, 0);
	};

	PRESORT() {
	    return this.getToken(YQLParser.PRESORT, 0);
	};

	PRIMARY() {
	    return this.getToken(YQLParser.PRIMARY, 0);
	};

	PRIVILEGES() {
	    return this.getToken(YQLParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(YQLParser.QUERY, 0);
	};

	QUEUE() {
	    return this.getToken(YQLParser.QUEUE, 0);
	};

	RAISE() {
	    return this.getToken(YQLParser.RAISE, 0);
	};

	REFERENCES() {
	    return this.getToken(YQLParser.REFERENCES, 0);
	};

	REGEXP() {
	    return this.getToken(YQLParser.REGEXP, 0);
	};

	REINDEX() {
	    return this.getToken(YQLParser.REINDEX, 0);
	};

	RELEASE() {
	    return this.getToken(YQLParser.RELEASE, 0);
	};

	REMOVE() {
	    return this.getToken(YQLParser.REMOVE, 0);
	};

	RENAME() {
	    return this.getToken(YQLParser.RENAME, 0);
	};

	REPLACE() {
	    return this.getToken(YQLParser.REPLACE, 0);
	};

	REPLICATION() {
	    return this.getToken(YQLParser.REPLICATION, 0);
	};

	RESET() {
	    return this.getToken(YQLParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(YQLParser.RESPECT, 0);
	};

	RESTART() {
	    return this.getToken(YQLParser.RESTART, 0);
	};

	RESTORE() {
	    return this.getToken(YQLParser.RESTORE, 0);
	};

	RESTRICT() {
	    return this.getToken(YQLParser.RESTRICT, 0);
	};

	RESULT() {
	    return this.getToken(YQLParser.RESULT, 0);
	};

	REVERT() {
	    return this.getToken(YQLParser.REVERT, 0);
	};

	REVOKE() {
	    return this.getToken(YQLParser.REVOKE, 0);
	};

	RIGHT() {
	    return this.getToken(YQLParser.RIGHT, 0);
	};

	RLIKE() {
	    return this.getToken(YQLParser.RLIKE, 0);
	};

	ROLLBACK() {
	    return this.getToken(YQLParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(YQLParser.ROW, 0);
	};

	SAMPLE() {
	    return this.getToken(YQLParser.SAMPLE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(YQLParser.SAVEPOINT, 0);
	};

	SECONDS() {
	    return this.getToken(YQLParser.SECONDS, 0);
	};

	SEEK() {
	    return this.getToken(YQLParser.SEEK, 0);
	};

	SEMI() {
	    return this.getToken(YQLParser.SEMI, 0);
	};

	SETS() {
	    return this.getToken(YQLParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(YQLParser.SHOW, 0);
	};

	TSKIP() {
	    return this.getToken(YQLParser.TSKIP, 0);
	};

	SEQUENCE() {
	    return this.getToken(YQLParser.SEQUENCE, 0);
	};

	SOURCE() {
	    return this.getToken(YQLParser.SOURCE, 0);
	};

	START() {
	    return this.getToken(YQLParser.START, 0);
	};

	SUBQUERY() {
	    return this.getToken(YQLParser.SUBQUERY, 0);
	};

	SUBSET() {
	    return this.getToken(YQLParser.SUBSET, 0);
	};

	SYMBOLS() {
	    return this.getToken(YQLParser.SYMBOLS, 0);
	};

	SYNC() {
	    return this.getToken(YQLParser.SYNC, 0);
	};

	SYSTEM() {
	    return this.getToken(YQLParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(YQLParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(YQLParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(YQLParser.TABLESAMPLE, 0);
	};

	TABLESTORE() {
	    return this.getToken(YQLParser.TABLESTORE, 0);
	};

	TEMP() {
	    return this.getToken(YQLParser.TEMP, 0);
	};

	TEMPORARY() {
	    return this.getToken(YQLParser.TEMPORARY, 0);
	};

	THEN() {
	    return this.getToken(YQLParser.THEN, 0);
	};

	TIES() {
	    return this.getToken(YQLParser.TIES, 0);
	};

	TO() {
	    return this.getToken(YQLParser.TO, 0);
	};

	TOPIC() {
	    return this.getToken(YQLParser.TOPIC, 0);
	};

	TRANSACTION() {
	    return this.getToken(YQLParser.TRANSACTION, 0);
	};

	TRIGGER() {
	    return this.getToken(YQLParser.TRIGGER, 0);
	};

	TYPE() {
	    return this.getToken(YQLParser.TYPE, 0);
	};

	UNCONDITIONAL() {
	    return this.getToken(YQLParser.UNCONDITIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(YQLParser.UNIQUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(YQLParser.UNKNOWN, 0);
	};

	UNMATCHED() {
	    return this.getToken(YQLParser.UNMATCHED, 0);
	};

	UPDATE() {
	    return this.getToken(YQLParser.UPDATE, 0);
	};

	UPSERT() {
	    return this.getToken(YQLParser.UPSERT, 0);
	};

	USE() {
	    return this.getToken(YQLParser.USE, 0);
	};

	USER() {
	    return this.getToken(YQLParser.USER, 0);
	};

	USING() {
	    return this.getToken(YQLParser.USING, 0);
	};

	VACUUM() {
	    return this.getToken(YQLParser.VACUUM, 0);
	};

	VALUES() {
	    return this.getToken(YQLParser.VALUES, 0);
	};

	VIEW() {
	    return this.getToken(YQLParser.VIEW, 0);
	};

	VIRTUAL() {
	    return this.getToken(YQLParser.VIRTUAL, 0);
	};

	WITH() {
	    return this.getToken(YQLParser.WITH, 0);
	};

	WRAPPER() {
	    return this.getToken(YQLParser.WRAPPER, 0);
	};

	XOR() {
	    return this.getToken(YQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterKeyword_compat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitKeyword_compat(this);
		}
	}


}



class Type_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_type_id;
    }

	OPTIONAL() {
	    return this.getToken(YQLParser.OPTIONAL, 0);
	};

	TUPLE() {
	    return this.getToken(YQLParser.TUPLE, 0);
	};

	STRUCT() {
	    return this.getToken(YQLParser.STRUCT, 0);
	};

	VARIANT() {
	    return this.getToken(YQLParser.VARIANT, 0);
	};

	LIST() {
	    return this.getToken(YQLParser.LIST, 0);
	};

	FLOW() {
	    return this.getToken(YQLParser.FLOW, 0);
	};

	DICT() {
	    return this.getToken(YQLParser.DICT, 0);
	};

	SET() {
	    return this.getToken(YQLParser.SET, 0);
	};

	ENUM() {
	    return this.getToken(YQLParser.ENUM, 0);
	};

	RESOURCE() {
	    return this.getToken(YQLParser.RESOURCE, 0);
	};

	TAGGED() {
	    return this.getToken(YQLParser.TAGGED, 0);
	};

	CALLABLE() {
	    return this.getToken(YQLParser.CALLABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterType_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitType_id(this);
		}
	}


}



class Bool_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_bool_value;
    }

	TRUE() {
	    return this.getToken(YQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(YQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterBool_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitBool_value(this);
		}
	}


}



class RealContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_real;
    }

	REAL() {
	    return this.getToken(YQLParser.REAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterReal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitReal(this);
		}
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = YQLParser.RULE_integer;
    }

	DIGITS() {
	    return this.getToken(YQLParser.DIGITS, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(YQLParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof YQLListener ) {
	        listener.exitInteger(this);
		}
	}


}




YQLParser.Sql_queryContext = Sql_queryContext; 
YQLParser.Sql_stmt_listContext = Sql_stmt_listContext; 
YQLParser.Ansi_sql_stmt_listContext = Ansi_sql_stmt_listContext; 
YQLParser.Lambda_bodyContext = Lambda_bodyContext; 
YQLParser.Lambda_stmtContext = Lambda_stmtContext; 
YQLParser.Sql_stmtContext = Sql_stmtContext; 
YQLParser.Sql_stmt_coreContext = Sql_stmt_coreContext; 
YQLParser.ExprContext = ExprContext; 
YQLParser.Or_subexprContext = Or_subexprContext; 
YQLParser.And_subexprContext = And_subexprContext; 
YQLParser.Xor_subexprContext = Xor_subexprContext; 
YQLParser.Distinct_from_opContext = Distinct_from_opContext; 
YQLParser.Cond_exprContext = Cond_exprContext; 
YQLParser.Match_opContext = Match_opContext; 
YQLParser.Eq_subexprContext = Eq_subexprContext; 
YQLParser.Shift_rightContext = Shift_rightContext; 
YQLParser.Rot_rightContext = Rot_rightContext; 
YQLParser.Double_questionContext = Double_questionContext; 
YQLParser.Neq_subexprContext = Neq_subexprContext; 
YQLParser.Bit_subexprContext = Bit_subexprContext; 
YQLParser.Add_subexprContext = Add_subexprContext; 
YQLParser.Mul_subexprContext = Mul_subexprContext; 
YQLParser.Con_subexprContext = Con_subexprContext; 
YQLParser.Unary_opContext = Unary_opContext; 
YQLParser.Unary_subexpr_suffixContext = Unary_subexpr_suffixContext; 
YQLParser.Unary_casual_subexprContext = Unary_casual_subexprContext; 
YQLParser.In_unary_casual_subexprContext = In_unary_casual_subexprContext; 
YQLParser.Unary_subexprContext = Unary_subexprContext; 
YQLParser.In_unary_subexprContext = In_unary_subexprContext; 
YQLParser.List_literalContext = List_literalContext; 
YQLParser.Expr_dict_listContext = Expr_dict_listContext; 
YQLParser.Dict_literalContext = Dict_literalContext; 
YQLParser.Expr_struct_listContext = Expr_struct_listContext; 
YQLParser.Struct_literalContext = Struct_literalContext; 
YQLParser.Atom_exprContext = Atom_exprContext; 
YQLParser.In_atom_exprContext = In_atom_exprContext; 
YQLParser.Cast_exprContext = Cast_exprContext; 
YQLParser.Bitcast_exprContext = Bitcast_exprContext; 
YQLParser.Exists_exprContext = Exists_exprContext; 
YQLParser.Case_exprContext = Case_exprContext; 
YQLParser.LambdaContext = LambdaContext; 
YQLParser.In_exprContext = In_exprContext; 
YQLParser.Json_api_exprContext = Json_api_exprContext; 
YQLParser.Jsonpath_specContext = Jsonpath_specContext; 
YQLParser.Json_variable_nameContext = Json_variable_nameContext; 
YQLParser.Json_variableContext = Json_variableContext; 
YQLParser.Json_variablesContext = Json_variablesContext; 
YQLParser.Json_common_argsContext = Json_common_argsContext; 
YQLParser.Json_case_handlerContext = Json_case_handlerContext; 
YQLParser.Json_valueContext = Json_valueContext; 
YQLParser.Json_exists_handlerContext = Json_exists_handlerContext; 
YQLParser.Json_existsContext = Json_existsContext; 
YQLParser.Json_query_wrapperContext = Json_query_wrapperContext; 
YQLParser.Json_query_handlerContext = Json_query_handlerContext; 
YQLParser.Json_queryContext = Json_queryContext; 
YQLParser.Smart_parenthesisContext = Smart_parenthesisContext; 
YQLParser.Expr_listContext = Expr_listContext; 
YQLParser.Pure_column_listContext = Pure_column_listContext; 
YQLParser.Pure_column_or_namedContext = Pure_column_or_namedContext; 
YQLParser.Pure_column_or_named_listContext = Pure_column_or_named_listContext; 
YQLParser.Column_nameContext = Column_nameContext; 
YQLParser.Without_column_nameContext = Without_column_nameContext; 
YQLParser.Column_listContext = Column_listContext; 
YQLParser.Without_column_listContext = Without_column_listContext; 
YQLParser.Named_exprContext = Named_exprContext; 
YQLParser.Named_expr_listContext = Named_expr_listContext; 
YQLParser.Invoke_exprContext = Invoke_exprContext; 
YQLParser.Invoke_expr_tailContext = Invoke_expr_tailContext; 
YQLParser.Using_call_exprContext = Using_call_exprContext; 
YQLParser.Key_exprContext = Key_exprContext; 
YQLParser.When_exprContext = When_exprContext; 
YQLParser.Literal_valueContext = Literal_valueContext; 
YQLParser.Bind_parameterContext = Bind_parameterContext; 
YQLParser.Opt_bind_parameterContext = Opt_bind_parameterContext; 
YQLParser.Bind_parameter_listContext = Bind_parameter_listContext; 
YQLParser.Named_bind_parameterContext = Named_bind_parameterContext; 
YQLParser.Named_bind_parameter_listContext = Named_bind_parameter_listContext; 
YQLParser.Signed_numberContext = Signed_numberContext; 
YQLParser.Type_name_simpleContext = Type_name_simpleContext; 
YQLParser.Integer_or_bindContext = Integer_or_bindContext; 
YQLParser.Type_name_tagContext = Type_name_tagContext; 
YQLParser.Struct_argContext = Struct_argContext; 
YQLParser.Struct_arg_positionalContext = Struct_arg_positionalContext; 
YQLParser.Variant_argContext = Variant_argContext; 
YQLParser.Callable_argContext = Callable_argContext; 
YQLParser.Callable_arg_listContext = Callable_arg_listContext; 
YQLParser.Type_name_decimalContext = Type_name_decimalContext; 
YQLParser.Type_name_optionalContext = Type_name_optionalContext; 
YQLParser.Type_name_tupleContext = Type_name_tupleContext; 
YQLParser.Type_name_structContext = Type_name_structContext; 
YQLParser.Type_name_variantContext = Type_name_variantContext; 
YQLParser.Type_name_listContext = Type_name_listContext; 
YQLParser.Type_name_streamContext = Type_name_streamContext; 
YQLParser.Type_name_flowContext = Type_name_flowContext; 
YQLParser.Type_name_dictContext = Type_name_dictContext; 
YQLParser.Type_name_setContext = Type_name_setContext; 
YQLParser.Type_name_enumContext = Type_name_enumContext; 
YQLParser.Type_name_resourceContext = Type_name_resourceContext; 
YQLParser.Type_name_taggedContext = Type_name_taggedContext; 
YQLParser.Type_name_callableContext = Type_name_callableContext; 
YQLParser.Type_name_compositeContext = Type_name_compositeContext; 
YQLParser.Type_nameContext = Type_nameContext; 
YQLParser.Type_name_or_bindContext = Type_name_or_bindContext; 
YQLParser.Value_constructor_literalContext = Value_constructor_literalContext; 
YQLParser.Value_constructorContext = Value_constructorContext; 
YQLParser.Declare_stmtContext = Declare_stmtContext; 
YQLParser.Module_pathContext = Module_pathContext; 
YQLParser.Import_stmtContext = Import_stmtContext; 
YQLParser.Export_stmtContext = Export_stmtContext; 
YQLParser.Call_actionContext = Call_actionContext; 
YQLParser.Inline_actionContext = Inline_actionContext; 
YQLParser.Do_stmtContext = Do_stmtContext; 
YQLParser.Pragma_stmtContext = Pragma_stmtContext; 
YQLParser.Pragma_valueContext = Pragma_valueContext; 
YQLParser.Sort_specificationContext = Sort_specificationContext; 
YQLParser.Sort_specification_listContext = Sort_specification_listContext; 
YQLParser.Select_stmtContext = Select_stmtContext; 
YQLParser.Select_unparenthesized_stmtContext = Select_unparenthesized_stmtContext; 
YQLParser.Select_kind_parenthesisContext = Select_kind_parenthesisContext; 
YQLParser.Select_opContext = Select_opContext; 
YQLParser.Select_kind_partialContext = Select_kind_partialContext; 
YQLParser.Select_kindContext = Select_kindContext; 
YQLParser.Process_coreContext = Process_coreContext; 
YQLParser.External_call_paramContext = External_call_paramContext; 
YQLParser.External_call_settingsContext = External_call_settingsContext; 
YQLParser.Reduce_coreContext = Reduce_coreContext; 
YQLParser.Opt_set_quantifierContext = Opt_set_quantifierContext; 
YQLParser.Select_coreContext = Select_coreContext; 
YQLParser.Row_pattern_recognition_clauseContext = Row_pattern_recognition_clauseContext; 
YQLParser.Row_pattern_rows_per_matchContext = Row_pattern_rows_per_matchContext; 
YQLParser.Row_pattern_empty_match_handlingContext = Row_pattern_empty_match_handlingContext; 
YQLParser.Row_pattern_measuresContext = Row_pattern_measuresContext; 
YQLParser.Row_pattern_measure_listContext = Row_pattern_measure_listContext; 
YQLParser.Row_pattern_measure_definitionContext = Row_pattern_measure_definitionContext; 
YQLParser.Row_pattern_common_syntaxContext = Row_pattern_common_syntaxContext; 
YQLParser.Row_pattern_skip_toContext = Row_pattern_skip_toContext; 
YQLParser.Row_pattern_skip_to_variable_nameContext = Row_pattern_skip_to_variable_nameContext; 
YQLParser.Row_pattern_initial_or_seekContext = Row_pattern_initial_or_seekContext; 
YQLParser.Row_patternContext = Row_patternContext; 
YQLParser.Row_pattern_termContext = Row_pattern_termContext; 
YQLParser.Row_pattern_factorContext = Row_pattern_factorContext; 
YQLParser.Row_pattern_quantifierContext = Row_pattern_quantifierContext; 
YQLParser.Row_pattern_primaryContext = Row_pattern_primaryContext; 
YQLParser.Row_pattern_primary_variable_nameContext = Row_pattern_primary_variable_nameContext; 
YQLParser.Row_pattern_permuteContext = Row_pattern_permuteContext; 
YQLParser.Row_pattern_subset_clauseContext = Row_pattern_subset_clauseContext; 
YQLParser.Row_pattern_subset_listContext = Row_pattern_subset_listContext; 
YQLParser.Row_pattern_subset_itemContext = Row_pattern_subset_itemContext; 
YQLParser.Row_pattern_subset_item_variable_nameContext = Row_pattern_subset_item_variable_nameContext; 
YQLParser.Row_pattern_subset_rhsContext = Row_pattern_subset_rhsContext; 
YQLParser.Row_pattern_subset_rhs_variable_nameContext = Row_pattern_subset_rhs_variable_nameContext; 
YQLParser.Row_pattern_definition_listContext = Row_pattern_definition_listContext; 
YQLParser.Row_pattern_definitionContext = Row_pattern_definitionContext; 
YQLParser.Row_pattern_definition_variable_nameContext = Row_pattern_definition_variable_nameContext; 
YQLParser.Row_pattern_definition_search_conditionContext = Row_pattern_definition_search_conditionContext; 
YQLParser.Search_conditionContext = Search_conditionContext; 
YQLParser.Row_pattern_variable_nameContext = Row_pattern_variable_nameContext; 
YQLParser.Order_by_clauseContext = Order_by_clauseContext; 
YQLParser.Ext_order_by_clauseContext = Ext_order_by_clauseContext; 
YQLParser.Group_by_clauseContext = Group_by_clauseContext; 
YQLParser.Grouping_element_listContext = Grouping_element_listContext; 
YQLParser.Grouping_elementContext = Grouping_elementContext; 
YQLParser.Ordinary_grouping_setContext = Ordinary_grouping_setContext; 
YQLParser.Ordinary_grouping_set_listContext = Ordinary_grouping_set_listContext; 
YQLParser.Rollup_listContext = Rollup_listContext; 
YQLParser.Cube_listContext = Cube_listContext; 
YQLParser.Grouping_sets_specificationContext = Grouping_sets_specificationContext; 
YQLParser.Hopping_window_specificationContext = Hopping_window_specificationContext; 
YQLParser.Result_columnContext = Result_columnContext; 
YQLParser.Join_sourceContext = Join_sourceContext; 
YQLParser.Named_columnContext = Named_columnContext; 
YQLParser.Flatten_by_argContext = Flatten_by_argContext; 
YQLParser.Flatten_sourceContext = Flatten_sourceContext; 
YQLParser.Named_single_sourceContext = Named_single_sourceContext; 
YQLParser.Single_sourceContext = Single_sourceContext; 
YQLParser.Sample_clauseContext = Sample_clauseContext; 
YQLParser.Tablesample_clauseContext = Tablesample_clauseContext; 
YQLParser.Sampling_modeContext = Sampling_modeContext; 
YQLParser.Repeatable_clauseContext = Repeatable_clauseContext; 
YQLParser.Join_opContext = Join_opContext; 
YQLParser.Join_constraintContext = Join_constraintContext; 
YQLParser.Returning_columns_listContext = Returning_columns_listContext; 
YQLParser.Into_table_stmtContext = Into_table_stmtContext; 
YQLParser.Into_values_sourceContext = Into_values_sourceContext; 
YQLParser.Values_stmtContext = Values_stmtContext; 
YQLParser.Values_sourceContext = Values_sourceContext; 
YQLParser.Values_source_row_listContext = Values_source_row_listContext; 
YQLParser.Values_source_rowContext = Values_source_rowContext; 
YQLParser.Simple_values_sourceContext = Simple_values_sourceContext; 
YQLParser.Create_external_data_source_stmtContext = Create_external_data_source_stmtContext; 
YQLParser.Alter_external_data_source_stmtContext = Alter_external_data_source_stmtContext; 
YQLParser.Alter_external_data_source_actionContext = Alter_external_data_source_actionContext; 
YQLParser.Drop_external_data_source_stmtContext = Drop_external_data_source_stmtContext; 
YQLParser.Create_view_stmtContext = Create_view_stmtContext; 
YQLParser.Drop_view_stmtContext = Drop_view_stmtContext; 
YQLParser.Upsert_object_stmtContext = Upsert_object_stmtContext; 
YQLParser.Create_object_stmtContext = Create_object_stmtContext; 
YQLParser.Create_object_featuresContext = Create_object_featuresContext; 
YQLParser.Alter_object_stmtContext = Alter_object_stmtContext; 
YQLParser.Alter_object_featuresContext = Alter_object_featuresContext; 
YQLParser.Drop_object_stmtContext = Drop_object_stmtContext; 
YQLParser.Drop_object_featuresContext = Drop_object_featuresContext; 
YQLParser.Object_feature_valueContext = Object_feature_valueContext; 
YQLParser.Object_feature_kvContext = Object_feature_kvContext; 
YQLParser.Object_feature_flagContext = Object_feature_flagContext; 
YQLParser.Object_featureContext = Object_featureContext; 
YQLParser.Object_featuresContext = Object_featuresContext; 
YQLParser.Object_type_refContext = Object_type_refContext; 
YQLParser.Create_table_stmtContext = Create_table_stmtContext; 
YQLParser.Create_table_entryContext = Create_table_entryContext; 
YQLParser.Create_backup_collection_stmtContext = Create_backup_collection_stmtContext; 
YQLParser.Alter_backup_collection_stmtContext = Alter_backup_collection_stmtContext; 
YQLParser.Drop_backup_collection_stmtContext = Drop_backup_collection_stmtContext; 
YQLParser.Create_backup_collection_entriesContext = Create_backup_collection_entriesContext; 
YQLParser.Create_backup_collection_entries_manyContext = Create_backup_collection_entries_manyContext; 
YQLParser.Table_listContext = Table_listContext; 
YQLParser.Alter_backup_collection_actionsContext = Alter_backup_collection_actionsContext; 
YQLParser.Alter_backup_collection_actionContext = Alter_backup_collection_actionContext; 
YQLParser.Alter_backup_collection_entriesContext = Alter_backup_collection_entriesContext; 
YQLParser.Alter_backup_collection_entryContext = Alter_backup_collection_entryContext; 
YQLParser.Backup_collectionContext = Backup_collectionContext; 
YQLParser.Backup_collection_settingsContext = Backup_collection_settingsContext; 
YQLParser.Backup_collection_settings_entryContext = Backup_collection_settings_entryContext; 
YQLParser.Backup_stmtContext = Backup_stmtContext; 
YQLParser.Restore_stmtContext = Restore_stmtContext; 
YQLParser.Table_inheritsContext = Table_inheritsContext; 
YQLParser.Table_partition_byContext = Table_partition_byContext; 
YQLParser.With_table_settingsContext = With_table_settingsContext; 
YQLParser.Table_tablestoreContext = Table_tablestoreContext; 
YQLParser.Table_settings_entryContext = Table_settings_entryContext; 
YQLParser.Table_as_sourceContext = Table_as_sourceContext; 
YQLParser.Alter_table_stmtContext = Alter_table_stmtContext; 
YQLParser.Alter_table_actionContext = Alter_table_actionContext; 
YQLParser.Alter_external_table_stmtContext = Alter_external_table_stmtContext; 
YQLParser.Alter_external_table_actionContext = Alter_external_table_actionContext; 
YQLParser.Alter_table_store_stmtContext = Alter_table_store_stmtContext; 
YQLParser.Alter_table_store_actionContext = Alter_table_store_actionContext; 
YQLParser.Alter_table_add_columnContext = Alter_table_add_columnContext; 
YQLParser.Alter_table_drop_columnContext = Alter_table_drop_columnContext; 
YQLParser.Alter_table_alter_columnContext = Alter_table_alter_columnContext; 
YQLParser.Alter_table_alter_column_drop_not_nullContext = Alter_table_alter_column_drop_not_nullContext; 
YQLParser.Alter_table_add_column_familyContext = Alter_table_add_column_familyContext; 
YQLParser.Alter_table_alter_column_familyContext = Alter_table_alter_column_familyContext; 
YQLParser.Alter_table_set_table_setting_uncompatContext = Alter_table_set_table_setting_uncompatContext; 
YQLParser.Alter_table_set_table_setting_compatContext = Alter_table_set_table_setting_compatContext; 
YQLParser.Alter_table_reset_table_settingContext = Alter_table_reset_table_settingContext; 
YQLParser.Alter_table_add_indexContext = Alter_table_add_indexContext; 
YQLParser.Alter_table_drop_indexContext = Alter_table_drop_indexContext; 
YQLParser.Alter_table_rename_toContext = Alter_table_rename_toContext; 
YQLParser.Alter_table_rename_index_toContext = Alter_table_rename_index_toContext; 
YQLParser.Alter_table_add_changefeedContext = Alter_table_add_changefeedContext; 
YQLParser.Alter_table_alter_changefeedContext = Alter_table_alter_changefeedContext; 
YQLParser.Alter_table_drop_changefeedContext = Alter_table_drop_changefeedContext; 
YQLParser.Alter_table_alter_indexContext = Alter_table_alter_indexContext; 
YQLParser.Column_schemaContext = Column_schemaContext; 
YQLParser.Family_relationContext = Family_relationContext; 
YQLParser.Opt_column_constraintsContext = Opt_column_constraintsContext; 
YQLParser.Column_order_by_specificationContext = Column_order_by_specificationContext; 
YQLParser.Table_constraintContext = Table_constraintContext; 
YQLParser.Table_indexContext = Table_indexContext; 
YQLParser.Table_index_typeContext = Table_index_typeContext; 
YQLParser.Global_indexContext = Global_indexContext; 
YQLParser.Local_indexContext = Local_indexContext; 
YQLParser.Index_subtypeContext = Index_subtypeContext; 
YQLParser.With_index_settingsContext = With_index_settingsContext; 
YQLParser.Index_setting_entryContext = Index_setting_entryContext; 
YQLParser.Index_setting_valueContext = Index_setting_valueContext; 
YQLParser.ChangefeedContext = ChangefeedContext; 
YQLParser.Changefeed_settingsContext = Changefeed_settingsContext; 
YQLParser.Changefeed_settings_entryContext = Changefeed_settings_entryContext; 
YQLParser.Changefeed_setting_valueContext = Changefeed_setting_valueContext; 
YQLParser.Changefeed_alter_settingsContext = Changefeed_alter_settingsContext; 
YQLParser.Alter_table_setting_entryContext = Alter_table_setting_entryContext; 
YQLParser.Table_setting_valueContext = Table_setting_valueContext; 
YQLParser.Ttl_tier_listContext = Ttl_tier_listContext; 
YQLParser.Ttl_tier_actionContext = Ttl_tier_actionContext; 
YQLParser.Family_entryContext = Family_entryContext; 
YQLParser.Family_settingsContext = Family_settingsContext; 
YQLParser.Family_settings_entryContext = Family_settings_entryContext; 
YQLParser.Family_setting_valueContext = Family_setting_valueContext; 
YQLParser.Split_boundariesContext = Split_boundariesContext; 
YQLParser.Literal_value_listContext = Literal_value_listContext; 
YQLParser.Alter_table_alter_index_actionContext = Alter_table_alter_index_actionContext; 
YQLParser.Drop_table_stmtContext = Drop_table_stmtContext; 
YQLParser.Create_user_stmtContext = Create_user_stmtContext; 
YQLParser.Alter_user_stmtContext = Alter_user_stmtContext; 
YQLParser.Create_group_stmtContext = Create_group_stmtContext; 
YQLParser.Alter_group_stmtContext = Alter_group_stmtContext; 
YQLParser.Drop_role_stmtContext = Drop_role_stmtContext; 
YQLParser.Role_nameContext = Role_nameContext; 
YQLParser.Create_user_optionContext = Create_user_optionContext; 
YQLParser.Password_optionContext = Password_optionContext; 
YQLParser.Login_optionContext = Login_optionContext; 
YQLParser.Grant_permissions_stmtContext = Grant_permissions_stmtContext; 
YQLParser.Revoke_permissions_stmtContext = Revoke_permissions_stmtContext; 
YQLParser.Permission_idContext = Permission_idContext; 
YQLParser.Permission_nameContext = Permission_nameContext; 
YQLParser.Permission_name_targetContext = Permission_name_targetContext; 
YQLParser.Create_resource_pool_stmtContext = Create_resource_pool_stmtContext; 
YQLParser.Alter_resource_pool_stmtContext = Alter_resource_pool_stmtContext; 
YQLParser.Alter_resource_pool_actionContext = Alter_resource_pool_actionContext; 
YQLParser.Drop_resource_pool_stmtContext = Drop_resource_pool_stmtContext; 
YQLParser.Create_resource_pool_classifier_stmtContext = Create_resource_pool_classifier_stmtContext; 
YQLParser.Alter_resource_pool_classifier_stmtContext = Alter_resource_pool_classifier_stmtContext; 
YQLParser.Alter_resource_pool_classifier_actionContext = Alter_resource_pool_classifier_actionContext; 
YQLParser.Drop_resource_pool_classifier_stmtContext = Drop_resource_pool_classifier_stmtContext; 
YQLParser.Create_replication_stmtContext = Create_replication_stmtContext; 
YQLParser.Replication_targetContext = Replication_targetContext; 
YQLParser.Replication_settingsContext = Replication_settingsContext; 
YQLParser.Replication_settings_entryContext = Replication_settings_entryContext; 
YQLParser.Alter_replication_stmtContext = Alter_replication_stmtContext; 
YQLParser.Alter_replication_actionContext = Alter_replication_actionContext; 
YQLParser.Alter_replication_set_settingContext = Alter_replication_set_settingContext; 
YQLParser.Drop_replication_stmtContext = Drop_replication_stmtContext; 
YQLParser.Action_or_subquery_argsContext = Action_or_subquery_argsContext; 
YQLParser.Define_action_or_subquery_stmtContext = Define_action_or_subquery_stmtContext; 
YQLParser.Define_action_or_subquery_bodyContext = Define_action_or_subquery_bodyContext; 
YQLParser.If_stmtContext = If_stmtContext; 
YQLParser.For_stmtContext = For_stmtContext; 
YQLParser.Table_refContext = Table_refContext; 
YQLParser.Table_keyContext = Table_keyContext; 
YQLParser.Table_argContext = Table_argContext; 
YQLParser.Table_hintsContext = Table_hintsContext; 
YQLParser.Table_hintContext = Table_hintContext; 
YQLParser.Object_refContext = Object_refContext; 
YQLParser.Simple_table_ref_coreContext = Simple_table_ref_coreContext; 
YQLParser.Simple_table_refContext = Simple_table_refContext; 
YQLParser.Into_simple_table_refContext = Into_simple_table_refContext; 
YQLParser.Delete_stmtContext = Delete_stmtContext; 
YQLParser.Update_stmtContext = Update_stmtContext; 
YQLParser.Set_clause_choiceContext = Set_clause_choiceContext; 
YQLParser.Set_clause_listContext = Set_clause_listContext; 
YQLParser.Set_clauseContext = Set_clauseContext; 
YQLParser.Set_targetContext = Set_targetContext; 
YQLParser.Multiple_column_assignmentContext = Multiple_column_assignmentContext; 
YQLParser.Set_target_listContext = Set_target_listContext; 
YQLParser.Create_topic_stmtContext = Create_topic_stmtContext; 
YQLParser.Create_topic_entriesContext = Create_topic_entriesContext; 
YQLParser.Create_topic_entryContext = Create_topic_entryContext; 
YQLParser.With_topic_settingsContext = With_topic_settingsContext; 
YQLParser.Alter_topic_stmtContext = Alter_topic_stmtContext; 
YQLParser.Alter_topic_actionContext = Alter_topic_actionContext; 
YQLParser.Alter_topic_add_consumerContext = Alter_topic_add_consumerContext; 
YQLParser.Topic_create_consumer_entryContext = Topic_create_consumer_entryContext; 
YQLParser.Alter_topic_alter_consumerContext = Alter_topic_alter_consumerContext; 
YQLParser.Alter_topic_alter_consumer_entryContext = Alter_topic_alter_consumer_entryContext; 
YQLParser.Alter_topic_drop_consumerContext = Alter_topic_drop_consumerContext; 
YQLParser.Topic_alter_consumer_setContext = Topic_alter_consumer_setContext; 
YQLParser.Topic_alter_consumer_resetContext = Topic_alter_consumer_resetContext; 
YQLParser.Alter_topic_set_settingsContext = Alter_topic_set_settingsContext; 
YQLParser.Alter_topic_reset_settingsContext = Alter_topic_reset_settingsContext; 
YQLParser.Drop_topic_stmtContext = Drop_topic_stmtContext; 
YQLParser.Topic_settingsContext = Topic_settingsContext; 
YQLParser.Topic_settings_entryContext = Topic_settings_entryContext; 
YQLParser.Topic_setting_valueContext = Topic_setting_valueContext; 
YQLParser.Topic_consumer_with_settingsContext = Topic_consumer_with_settingsContext; 
YQLParser.Topic_consumer_settingsContext = Topic_consumer_settingsContext; 
YQLParser.Topic_consumer_settings_entryContext = Topic_consumer_settings_entryContext; 
YQLParser.Topic_consumer_setting_valueContext = Topic_consumer_setting_valueContext; 
YQLParser.Topic_refContext = Topic_refContext; 
YQLParser.Topic_consumer_refContext = Topic_consumer_refContext; 
YQLParser.Null_treatmentContext = Null_treatmentContext; 
YQLParser.Filter_clauseContext = Filter_clauseContext; 
YQLParser.Window_name_or_specificationContext = Window_name_or_specificationContext; 
YQLParser.Window_nameContext = Window_nameContext; 
YQLParser.Window_clauseContext = Window_clauseContext; 
YQLParser.Window_definition_listContext = Window_definition_listContext; 
YQLParser.Window_definitionContext = Window_definitionContext; 
YQLParser.New_window_nameContext = New_window_nameContext; 
YQLParser.Window_specificationContext = Window_specificationContext; 
YQLParser.Window_specification_detailsContext = Window_specification_detailsContext; 
YQLParser.Existing_window_nameContext = Existing_window_nameContext; 
YQLParser.Window_partition_clauseContext = Window_partition_clauseContext; 
YQLParser.Window_order_clauseContext = Window_order_clauseContext; 
YQLParser.Window_frame_clauseContext = Window_frame_clauseContext; 
YQLParser.Window_frame_unitsContext = Window_frame_unitsContext; 
YQLParser.Window_frame_extentContext = Window_frame_extentContext; 
YQLParser.Window_frame_betweenContext = Window_frame_betweenContext; 
YQLParser.Window_frame_boundContext = Window_frame_boundContext; 
YQLParser.Window_frame_exclusionContext = Window_frame_exclusionContext; 
YQLParser.Use_stmtContext = Use_stmtContext; 
YQLParser.Subselect_stmtContext = Subselect_stmtContext; 
YQLParser.Named_nodes_stmtContext = Named_nodes_stmtContext; 
YQLParser.Commit_stmtContext = Commit_stmtContext; 
YQLParser.Rollback_stmtContext = Rollback_stmtContext; 
YQLParser.Analyze_tableContext = Analyze_tableContext; 
YQLParser.Analyze_table_listContext = Analyze_table_listContext; 
YQLParser.Analyze_stmtContext = Analyze_stmtContext; 
YQLParser.Alter_sequence_stmtContext = Alter_sequence_stmtContext; 
YQLParser.Alter_sequence_actionContext = Alter_sequence_actionContext; 
YQLParser.IdentifierContext = IdentifierContext; 
YQLParser.IdContext = IdContext; 
YQLParser.Id_schemaContext = Id_schemaContext; 
YQLParser.Id_exprContext = Id_exprContext; 
YQLParser.Id_expr_inContext = Id_expr_inContext; 
YQLParser.Id_windowContext = Id_windowContext; 
YQLParser.Id_tableContext = Id_tableContext; 
YQLParser.Id_withoutContext = Id_withoutContext; 
YQLParser.Id_hintContext = Id_hintContext; 
YQLParser.Id_as_compatContext = Id_as_compatContext; 
YQLParser.An_idContext = An_idContext; 
YQLParser.An_id_or_typeContext = An_id_or_typeContext; 
YQLParser.An_id_schemaContext = An_id_schemaContext; 
YQLParser.An_id_exprContext = An_id_exprContext; 
YQLParser.An_id_expr_inContext = An_id_expr_inContext; 
YQLParser.An_id_windowContext = An_id_windowContext; 
YQLParser.An_id_tableContext = An_id_tableContext; 
YQLParser.An_id_withoutContext = An_id_withoutContext; 
YQLParser.An_id_hintContext = An_id_hintContext; 
YQLParser.An_id_pureContext = An_id_pureContext; 
YQLParser.An_id_as_compatContext = An_id_as_compatContext; 
YQLParser.View_nameContext = View_nameContext; 
YQLParser.Opt_id_prefixContext = Opt_id_prefixContext; 
YQLParser.Cluster_exprContext = Cluster_exprContext; 
YQLParser.Id_or_typeContext = Id_or_typeContext; 
YQLParser.Opt_id_prefix_or_typeContext = Opt_id_prefix_or_typeContext; 
YQLParser.Id_or_atContext = Id_or_atContext; 
YQLParser.Id_table_or_typeContext = Id_table_or_typeContext; 
YQLParser.Id_table_or_atContext = Id_table_or_atContext; 
YQLParser.KeywordContext = KeywordContext; 
YQLParser.Keyword_expr_uncompatContext = Keyword_expr_uncompatContext; 
YQLParser.Keyword_table_uncompatContext = Keyword_table_uncompatContext; 
YQLParser.Keyword_select_uncompatContext = Keyword_select_uncompatContext; 
YQLParser.Keyword_alter_uncompatContext = Keyword_alter_uncompatContext; 
YQLParser.Keyword_in_uncompatContext = Keyword_in_uncompatContext; 
YQLParser.Keyword_window_uncompatContext = Keyword_window_uncompatContext; 
YQLParser.Keyword_hint_uncompatContext = Keyword_hint_uncompatContext; 
YQLParser.Keyword_as_compatContext = Keyword_as_compatContext; 
YQLParser.Keyword_compatContext = Keyword_compatContext; 
YQLParser.Type_idContext = Type_idContext; 
YQLParser.Bool_valueContext = Bool_valueContext; 
YQLParser.RealContext = RealContext; 
YQLParser.IntegerContext = IntegerContext; 
